                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Thu Nov 20 21:18:54 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl ___sdcc_external_startup
                             14 	.globl _CY
                             15 	.globl _AC
                             16 	.globl _F0
                             17 	.globl _RS1
                             18 	.globl _RS0
                             19 	.globl _OV
                             20 	.globl _F1
                             21 	.globl _P
                             22 	.globl _PS
                             23 	.globl _PT1
                             24 	.globl _PX1
                             25 	.globl _PT0
                             26 	.globl _PX0
                             27 	.globl _RD
                             28 	.globl _WR
                             29 	.globl _T1
                             30 	.globl _T0
                             31 	.globl _INT1
                             32 	.globl _INT0
                             33 	.globl _TXD
                             34 	.globl _RXD
                             35 	.globl _P3_7
                             36 	.globl _P3_6
                             37 	.globl _P3_5
                             38 	.globl _P3_4
                             39 	.globl _P3_3
                             40 	.globl _P3_2
                             41 	.globl _P3_1
                             42 	.globl _P3_0
                             43 	.globl _EA
                             44 	.globl _ES
                             45 	.globl _ET1
                             46 	.globl _EX1
                             47 	.globl _ET0
                             48 	.globl _EX0
                             49 	.globl _P2_7
                             50 	.globl _P2_6
                             51 	.globl _P2_5
                             52 	.globl _P2_4
                             53 	.globl _P2_3
                             54 	.globl _P2_2
                             55 	.globl _P2_1
                             56 	.globl _P2_0
                             57 	.globl _SM0
                             58 	.globl _SM1
                             59 	.globl _SM2
                             60 	.globl _REN
                             61 	.globl _TB8
                             62 	.globl _RB8
                             63 	.globl _TI
                             64 	.globl _RI
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TF1
                             74 	.globl _TR1
                             75 	.globl _TF0
                             76 	.globl _TR0
                             77 	.globl _IE1
                             78 	.globl _IT1
                             79 	.globl _IE0
                             80 	.globl _IT0
                             81 	.globl _P0_7
                             82 	.globl _P0_6
                             83 	.globl _P0_5
                             84 	.globl _P0_4
                             85 	.globl _P0_3
                             86 	.globl _P0_2
                             87 	.globl _P0_1
                             88 	.globl _P0_0
                             89 	.globl _TF2
                             90 	.globl _EXF2
                             91 	.globl _RCLK
                             92 	.globl _TCLK
                             93 	.globl _EXEN2
                             94 	.globl _TR2
                             95 	.globl _C_T2
                             96 	.globl _CP_RL2
                             97 	.globl _T2CON_7
                             98 	.globl _T2CON_6
                             99 	.globl _T2CON_5
                            100 	.globl _T2CON_4
                            101 	.globl _T2CON_3
                            102 	.globl _T2CON_2
                            103 	.globl _T2CON_1
                            104 	.globl _T2CON_0
                            105 	.globl _PT2
                            106 	.globl _ET2
                            107 	.globl _P5_7
                            108 	.globl _P5_6
                            109 	.globl _P5_5
                            110 	.globl _P5_4
                            111 	.globl _P5_3
                            112 	.globl _P5_2
                            113 	.globl _P5_1
                            114 	.globl _P5_0
                            115 	.globl _P4_7
                            116 	.globl _P4_6
                            117 	.globl _P4_5
                            118 	.globl _P4_4
                            119 	.globl _P4_3
                            120 	.globl _P4_2
                            121 	.globl _P4_1
                            122 	.globl _P4_0
                            123 	.globl _PX0L
                            124 	.globl _PT0L
                            125 	.globl _PX1L
                            126 	.globl _PT1L
                            127 	.globl _PLS
                            128 	.globl _PT2L
                            129 	.globl _PPCL
                            130 	.globl _EC
                            131 	.globl _CCF0
                            132 	.globl _CCF1
                            133 	.globl _CCF2
                            134 	.globl _CCF3
                            135 	.globl _CCF4
                            136 	.globl _CR
                            137 	.globl _CF
                            138 	.globl _B
                            139 	.globl _ACC
                            140 	.globl _PSW
                            141 	.globl _IP
                            142 	.globl _P3
                            143 	.globl _IE
                            144 	.globl _P2
                            145 	.globl _SBUF
                            146 	.globl _SCON
                            147 	.globl _P1
                            148 	.globl _TH1
                            149 	.globl _TH0
                            150 	.globl _TL1
                            151 	.globl _TL0
                            152 	.globl _TMOD
                            153 	.globl _TCON
                            154 	.globl _PCON
                            155 	.globl _DPH
                            156 	.globl _DPL
                            157 	.globl _SP
                            158 	.globl _P0
                            159 	.globl _TH2
                            160 	.globl _TL2
                            161 	.globl _RCAP2H
                            162 	.globl _RCAP2L
                            163 	.globl _T2CON
                            164 	.globl _EECON
                            165 	.globl _KBF
                            166 	.globl _KBE
                            167 	.globl _KBLS
                            168 	.globl _BRL
                            169 	.globl _BDRCON
                            170 	.globl _T2MOD
                            171 	.globl _SPDAT
                            172 	.globl _SPSTA
                            173 	.globl _SPCON
                            174 	.globl _SADEN
                            175 	.globl _SADDR
                            176 	.globl _WDTPRG
                            177 	.globl _WDTRST
                            178 	.globl _P5
                            179 	.globl _P4
                            180 	.globl _IPH1
                            181 	.globl _IPL1
                            182 	.globl _IPH0
                            183 	.globl _IPL0
                            184 	.globl _IEN1
                            185 	.globl _IEN0
                            186 	.globl _CMOD
                            187 	.globl _CL
                            188 	.globl _CH
                            189 	.globl _CCON
                            190 	.globl _CCAPM4
                            191 	.globl _CCAPM3
                            192 	.globl _CCAPM2
                            193 	.globl _CCAPM1
                            194 	.globl _CCAPM0
                            195 	.globl _CCAP4L
                            196 	.globl _CCAP3L
                            197 	.globl _CCAP2L
                            198 	.globl _CCAP1L
                            199 	.globl _CCAP0L
                            200 	.globl _CCAP4H
                            201 	.globl _CCAP3H
                            202 	.globl _CCAP2H
                            203 	.globl _CCAP1H
                            204 	.globl _CCAP0H
                            205 	.globl _CKCKON1
                            206 	.globl _CKCKON0
                            207 	.globl _CKRL
                            208 	.globl _AUXR1
                            209 	.globl _AUXR
                            210 	.globl _bytecnt
                            211 	.globl _stopcount
                            212 	.globl _ConfIOExp_PARM_2
                            213 	.globl _lcdprint_PARM_3
                            214 	.globl _lcdprint_PARM_2
                            215 	.globl _I2CPageWrite_PARM_3
                            216 	.globl _I2CPageWrite_PARM_2
                            217 	.globl _I2CByteWrite_PARM_3
                            218 	.globl _I2CByteWrite_PARM_2
                            219 	.globl _I2CByteRead_PARM_2
                            220 	.globl _eebyter_PARM_2
                            221 	.globl _eebytew_PARM_3
                            222 	.globl _eebytew_PARM_2
                            223 	.globl _eepagew_PARM_3
                            224 	.globl _eepagew_PARM_2
                            225 	.globl _data1
                            226 	.globl _bufsiz
                            227 	.globl _isr_zero
                            228 	.globl _eepagew
                            229 	.globl _eebytew
                            230 	.globl _eebyter
                            231 	.globl _I2CStart
                            232 	.globl _I2CStop
                            233 	.globl _I2CByteRead
                            234 	.globl _I2CByteWrite
                            235 	.globl _I2CPageWrite
                            236 	.globl _ack
                            237 	.globl _eereset
                            238 	.globl _lcdprint
                            239 	.globl _fetch_addr
                            240 	.globl _fetch_data
                            241 	.globl _ConfIOExp
                            242 	.globl _IOByteRead
                            243 	.globl _checkIOByteRead
                            244 ;--------------------------------------------------------
                            245 ; special function registers
                            246 ;--------------------------------------------------------
                            247 	.area RSEG    (DATA)
                    008E    248 _AUXR	=	0x008e
                    00A2    249 _AUXR1	=	0x00a2
                    0097    250 _CKRL	=	0x0097
                    008F    251 _CKCKON0	=	0x008f
                    008F    252 _CKCKON1	=	0x008f
                    00FA    253 _CCAP0H	=	0x00fa
                    00FB    254 _CCAP1H	=	0x00fb
                    00FC    255 _CCAP2H	=	0x00fc
                    00FD    256 _CCAP3H	=	0x00fd
                    00FE    257 _CCAP4H	=	0x00fe
                    00EA    258 _CCAP0L	=	0x00ea
                    00EB    259 _CCAP1L	=	0x00eb
                    00EC    260 _CCAP2L	=	0x00ec
                    00ED    261 _CCAP3L	=	0x00ed
                    00EE    262 _CCAP4L	=	0x00ee
                    00DA    263 _CCAPM0	=	0x00da
                    00DB    264 _CCAPM1	=	0x00db
                    00DC    265 _CCAPM2	=	0x00dc
                    00DD    266 _CCAPM3	=	0x00dd
                    00DE    267 _CCAPM4	=	0x00de
                    00D8    268 _CCON	=	0x00d8
                    00F9    269 _CH	=	0x00f9
                    00E9    270 _CL	=	0x00e9
                    00D9    271 _CMOD	=	0x00d9
                    00A8    272 _IEN0	=	0x00a8
                    00B1    273 _IEN1	=	0x00b1
                    00B8    274 _IPL0	=	0x00b8
                    00B7    275 _IPH0	=	0x00b7
                    00B2    276 _IPL1	=	0x00b2
                    00B3    277 _IPH1	=	0x00b3
                    00C0    278 _P4	=	0x00c0
                    00D8    279 _P5	=	0x00d8
                    00A6    280 _WDTRST	=	0x00a6
                    00A7    281 _WDTPRG	=	0x00a7
                    00A9    282 _SADDR	=	0x00a9
                    00B9    283 _SADEN	=	0x00b9
                    00C3    284 _SPCON	=	0x00c3
                    00C4    285 _SPSTA	=	0x00c4
                    00C5    286 _SPDAT	=	0x00c5
                    00C9    287 _T2MOD	=	0x00c9
                    009B    288 _BDRCON	=	0x009b
                    009A    289 _BRL	=	0x009a
                    009C    290 _KBLS	=	0x009c
                    009D    291 _KBE	=	0x009d
                    009E    292 _KBF	=	0x009e
                    00D2    293 _EECON	=	0x00d2
                    00C8    294 _T2CON	=	0x00c8
                    00CA    295 _RCAP2L	=	0x00ca
                    00CB    296 _RCAP2H	=	0x00cb
                    00CC    297 _TL2	=	0x00cc
                    00CD    298 _TH2	=	0x00cd
                    0080    299 _P0	=	0x0080
                    0081    300 _SP	=	0x0081
                    0082    301 _DPL	=	0x0082
                    0083    302 _DPH	=	0x0083
                    0087    303 _PCON	=	0x0087
                    0088    304 _TCON	=	0x0088
                    0089    305 _TMOD	=	0x0089
                    008A    306 _TL0	=	0x008a
                    008B    307 _TL1	=	0x008b
                    008C    308 _TH0	=	0x008c
                    008D    309 _TH1	=	0x008d
                    0090    310 _P1	=	0x0090
                    0098    311 _SCON	=	0x0098
                    0099    312 _SBUF	=	0x0099
                    00A0    313 _P2	=	0x00a0
                    00A8    314 _IE	=	0x00a8
                    00B0    315 _P3	=	0x00b0
                    00B8    316 _IP	=	0x00b8
                    00D0    317 _PSW	=	0x00d0
                    00E0    318 _ACC	=	0x00e0
                    00F0    319 _B	=	0x00f0
                            320 ;--------------------------------------------------------
                            321 ; special function bits
                            322 ;--------------------------------------------------------
                            323 	.area RSEG    (DATA)
                    00DF    324 _CF	=	0x00df
                    00DE    325 _CR	=	0x00de
                    00DC    326 _CCF4	=	0x00dc
                    00DB    327 _CCF3	=	0x00db
                    00DA    328 _CCF2	=	0x00da
                    00D9    329 _CCF1	=	0x00d9
                    00D8    330 _CCF0	=	0x00d8
                    00AE    331 _EC	=	0x00ae
                    00BE    332 _PPCL	=	0x00be
                    00BD    333 _PT2L	=	0x00bd
                    00BC    334 _PLS	=	0x00bc
                    00BB    335 _PT1L	=	0x00bb
                    00BA    336 _PX1L	=	0x00ba
                    00B9    337 _PT0L	=	0x00b9
                    00B8    338 _PX0L	=	0x00b8
                    00C0    339 _P4_0	=	0x00c0
                    00C1    340 _P4_1	=	0x00c1
                    00C2    341 _P4_2	=	0x00c2
                    00C3    342 _P4_3	=	0x00c3
                    00C4    343 _P4_4	=	0x00c4
                    00C5    344 _P4_5	=	0x00c5
                    00C6    345 _P4_6	=	0x00c6
                    00C7    346 _P4_7	=	0x00c7
                    00D8    347 _P5_0	=	0x00d8
                    00D9    348 _P5_1	=	0x00d9
                    00DA    349 _P5_2	=	0x00da
                    00DB    350 _P5_3	=	0x00db
                    00DC    351 _P5_4	=	0x00dc
                    00DD    352 _P5_5	=	0x00dd
                    00DE    353 _P5_6	=	0x00de
                    00DF    354 _P5_7	=	0x00df
                    00AD    355 _ET2	=	0x00ad
                    00BD    356 _PT2	=	0x00bd
                    00C8    357 _T2CON_0	=	0x00c8
                    00C9    358 _T2CON_1	=	0x00c9
                    00CA    359 _T2CON_2	=	0x00ca
                    00CB    360 _T2CON_3	=	0x00cb
                    00CC    361 _T2CON_4	=	0x00cc
                    00CD    362 _T2CON_5	=	0x00cd
                    00CE    363 _T2CON_6	=	0x00ce
                    00CF    364 _T2CON_7	=	0x00cf
                    00C8    365 _CP_RL2	=	0x00c8
                    00C9    366 _C_T2	=	0x00c9
                    00CA    367 _TR2	=	0x00ca
                    00CB    368 _EXEN2	=	0x00cb
                    00CC    369 _TCLK	=	0x00cc
                    00CD    370 _RCLK	=	0x00cd
                    00CE    371 _EXF2	=	0x00ce
                    00CF    372 _TF2	=	0x00cf
                    0080    373 _P0_0	=	0x0080
                    0081    374 _P0_1	=	0x0081
                    0082    375 _P0_2	=	0x0082
                    0083    376 _P0_3	=	0x0083
                    0084    377 _P0_4	=	0x0084
                    0085    378 _P0_5	=	0x0085
                    0086    379 _P0_6	=	0x0086
                    0087    380 _P0_7	=	0x0087
                    0088    381 _IT0	=	0x0088
                    0089    382 _IE0	=	0x0089
                    008A    383 _IT1	=	0x008a
                    008B    384 _IE1	=	0x008b
                    008C    385 _TR0	=	0x008c
                    008D    386 _TF0	=	0x008d
                    008E    387 _TR1	=	0x008e
                    008F    388 _TF1	=	0x008f
                    0090    389 _P1_0	=	0x0090
                    0091    390 _P1_1	=	0x0091
                    0092    391 _P1_2	=	0x0092
                    0093    392 _P1_3	=	0x0093
                    0094    393 _P1_4	=	0x0094
                    0095    394 _P1_5	=	0x0095
                    0096    395 _P1_6	=	0x0096
                    0097    396 _P1_7	=	0x0097
                    0098    397 _RI	=	0x0098
                    0099    398 _TI	=	0x0099
                    009A    399 _RB8	=	0x009a
                    009B    400 _TB8	=	0x009b
                    009C    401 _REN	=	0x009c
                    009D    402 _SM2	=	0x009d
                    009E    403 _SM1	=	0x009e
                    009F    404 _SM0	=	0x009f
                    00A0    405 _P2_0	=	0x00a0
                    00A1    406 _P2_1	=	0x00a1
                    00A2    407 _P2_2	=	0x00a2
                    00A3    408 _P2_3	=	0x00a3
                    00A4    409 _P2_4	=	0x00a4
                    00A5    410 _P2_5	=	0x00a5
                    00A6    411 _P2_6	=	0x00a6
                    00A7    412 _P2_7	=	0x00a7
                    00A8    413 _EX0	=	0x00a8
                    00A9    414 _ET0	=	0x00a9
                    00AA    415 _EX1	=	0x00aa
                    00AB    416 _ET1	=	0x00ab
                    00AC    417 _ES	=	0x00ac
                    00AF    418 _EA	=	0x00af
                    00B0    419 _P3_0	=	0x00b0
                    00B1    420 _P3_1	=	0x00b1
                    00B2    421 _P3_2	=	0x00b2
                    00B3    422 _P3_3	=	0x00b3
                    00B4    423 _P3_4	=	0x00b4
                    00B5    424 _P3_5	=	0x00b5
                    00B6    425 _P3_6	=	0x00b6
                    00B7    426 _P3_7	=	0x00b7
                    00B0    427 _RXD	=	0x00b0
                    00B1    428 _TXD	=	0x00b1
                    00B2    429 _INT0	=	0x00b2
                    00B3    430 _INT1	=	0x00b3
                    00B4    431 _T0	=	0x00b4
                    00B5    432 _T1	=	0x00b5
                    00B6    433 _WR	=	0x00b6
                    00B7    434 _RD	=	0x00b7
                    00B8    435 _PX0	=	0x00b8
                    00B9    436 _PT0	=	0x00b9
                    00BA    437 _PX1	=	0x00ba
                    00BB    438 _PT1	=	0x00bb
                    00BC    439 _PS	=	0x00bc
                    00D0    440 _P	=	0x00d0
                    00D1    441 _F1	=	0x00d1
                    00D2    442 _OV	=	0x00d2
                    00D3    443 _RS0	=	0x00d3
                    00D4    444 _RS1	=	0x00d4
                    00D5    445 _F0	=	0x00d5
                    00D6    446 _AC	=	0x00d6
                    00D7    447 _CY	=	0x00d7
                            448 ;--------------------------------------------------------
                            449 ; overlayable register banks
                            450 ;--------------------------------------------------------
                            451 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     452 	.ds 8
                            453 ;--------------------------------------------------------
                            454 ; internal ram data
                            455 ;--------------------------------------------------------
                            456 	.area DSEG    (DATA)
   0000                     457 _main_sloc0_1_0:
   0000                     458 	.ds 1
   0001                     459 _main_sloc1_1_0:
   0001                     460 	.ds 2
   0003                     461 _main_sloc2_1_0:
   0003                     462 	.ds 1
   0004                     463 _main_sloc3_1_0:
   0004                     464 	.ds 1
   0005                     465 _main_sloc4_1_0:
   0005                     466 	.ds 2
   0007                     467 _main_sloc5_1_0:
   0007                     468 	.ds 1
   0008                     469 _main_sloc6_1_0:
   0008                     470 	.ds 1
   0009                     471 _main_sloc7_1_0:
   0009                     472 	.ds 1
                            473 ;--------------------------------------------------------
                            474 ; overlayable items in internal ram 
                            475 ;--------------------------------------------------------
                            476 	.area OSEG    (OVR,DATA)
                            477 ;--------------------------------------------------------
                            478 ; Stack segment in internal ram 
                            479 ;--------------------------------------------------------
                            480 	.area	SSEG	(DATA)
   0000                     481 __start__stack:
   0000                     482 	.ds	1
                            483 
                            484 ;--------------------------------------------------------
                            485 ; indirectly addressable internal ram data
                            486 ;--------------------------------------------------------
                            487 	.area ISEG    (DATA)
                            488 ;--------------------------------------------------------
                            489 ; bit data
                            490 ;--------------------------------------------------------
                            491 	.area BSEG    (BIT)
                            492 ;--------------------------------------------------------
                            493 ; paged external ram data
                            494 ;--------------------------------------------------------
                            495 	.area PSEG    (PAG,XDATA)
                            496 ;--------------------------------------------------------
                            497 ; external ram data
                            498 ;--------------------------------------------------------
                            499 	.area XSEG    (XDATA)
   0000                     500 _bufsiz::
   0000                     501 	.ds 3
   0003                     502 _data1::
   0003                     503 	.ds 1
   0004                     504 _main_pageblock_1_1:
   0004                     505 	.ds 1
   0005                     506 _main_pageblockw_1_1:
   0005                     507 	.ds 1
   0006                     508 _main_pcount_1_1:
   0006                     509 	.ds 1
   0007                     510 _main_ch_1_1:
   0007                     511 	.ds 1
   0008                     512 _main_s_1_1:
   0008                     513 	.ds 2
   000A                     514 _main_countbyte_1_1:
   000A                     515 	.ds 2
   000C                     516 _main_row_vals_1_1:
   000C                     517 	.ds 8
   0014                     518 _main_cl_4_55:
   0014                     519 	.ds 1
   0015                     520 _eepagew_PARM_2:
   0015                     521 	.ds 1
   0016                     522 _eepagew_PARM_3:
   0016                     523 	.ds 1
   0017                     524 _eepagew_addr_1_1:
   0017                     525 	.ds 1
   0018                     526 _eebytew_PARM_2:
   0018                     527 	.ds 1
   0019                     528 _eebytew_PARM_3:
   0019                     529 	.ds 1
   001A                     530 _eebytew_addr_1_1:
   001A                     531 	.ds 1
   001B                     532 _eebyter_PARM_2:
   001B                     533 	.ds 1
   001C                     534 _eebyter_addr_1_1:
   001C                     535 	.ds 1
   001D                     536 _I2CByteRead_PARM_2:
   001D                     537 	.ds 1
   001E                     538 _I2CByteRead_address_1_1:
   001E                     539 	.ds 1
   001F                     540 _I2CByteRead_temp_1_1:
   001F                     541 	.ds 1
   0020                     542 _I2CByteRead_databyte_1_1:
   0020                     543 	.ds 1
   0021                     544 _I2CByteWrite_PARM_2:
   0021                     545 	.ds 1
   0022                     546 _I2CByteWrite_PARM_3:
   0022                     547 	.ds 1
   0023                     548 _I2CByteWrite_address_1_1:
   0023                     549 	.ds 1
   0024                     550 _I2CByteWrite_temp_1_1:
   0024                     551 	.ds 1
   0025                     552 _I2CPageWrite_PARM_2:
   0025                     553 	.ds 1
   0026                     554 _I2CPageWrite_PARM_3:
   0026                     555 	.ds 1
   0027                     556 _I2CPageWrite_address_1_1:
   0027                     557 	.ds 1
   0028                     558 _I2CPageWrite_temp_1_1:
   0028                     559 	.ds 1
   0029                     560 _I2CPageWrite_pgdata_1_1:
   0029                     561 	.ds 1
   002A                     562 _lcdprint_PARM_2:
   002A                     563 	.ds 1
   002B                     564 _lcdprint_PARM_3:
   002B                     565 	.ds 1
   002C                     566 _lcdprint_addr_1_1:
   002C                     567 	.ds 1
   002D                     568 _lcdprint_rowval_1_1:
   002D                     569 	.ds 2
   002F                     570 _fetch_addr_i1_1_1:
   002F                     571 	.ds 2
   0031                     572 _fetch_addr_finalval_1_1:
   0031                     573 	.ds 1
   0032                     574 _fetch_data_i1_1_1:
   0032                     575 	.ds 2
   0034                     576 _fetch_data_finalval_1_1:
   0034                     577 	.ds 1
   0035                     578 _fetch_data_bufsiz1_1_1:
   0035                     579 	.ds 2
   0037                     580 _ConfIOExp_PARM_2:
   0037                     581 	.ds 1
   0038                     582 _ConfIOExp_block_1_1:
   0038                     583 	.ds 1
   0039                     584 _ConfIOExp_temp_1_1:
   0039                     585 	.ds 1
   003A                     586 _IOByteRead_temp_1_1:
   003A                     587 	.ds 1
   003B                     588 _IOByteRead_databyte_1_1:
   003B                     589 	.ds 1
   003C                     590 _checkIOByteRead_port_1_1:
   003C                     591 	.ds 1
   003D                     592 _checkIOByteRead_temp_1_1:
   003D                     593 	.ds 2
                            594 ;--------------------------------------------------------
                            595 ; external initialized ram data
                            596 ;--------------------------------------------------------
                            597 	.area XISEG   (XDATA)
   0000                     598 _stopcount::
   0000                     599 	.ds 2
   0002                     600 _bytecnt::
   0002                     601 	.ds 2
                            602 	.area HOME    (CODE)
                            603 	.area GSINIT0 (CODE)
                            604 	.area GSINIT1 (CODE)
                            605 	.area GSINIT2 (CODE)
                            606 	.area GSINIT3 (CODE)
                            607 	.area GSINIT4 (CODE)
                            608 	.area GSINIT5 (CODE)
                            609 	.area GSINIT  (CODE)
                            610 	.area GSFINAL (CODE)
                            611 	.area CSEG    (CODE)
                            612 ;--------------------------------------------------------
                            613 ; interrupt vector 
                            614 ;--------------------------------------------------------
                            615 	.area HOME    (CODE)
   0000                     616 __interrupt_vect:
   0000 02s00r00            617 	ljmp	__sdcc_gsinit_startup
   0003 02s00r11            618 	ljmp	_isr_zero
   0006                     619 	.ds	5
   000B 02s00r00            620 	ljmp	_isr_one
   000E                     621 	.ds	5
   0013 32                  622 	reti
   0014                     623 	.ds	7
   001B 32                  624 	reti
   001C                     625 	.ds	7
   0023 32                  626 	reti
   0024                     627 	.ds	7
   002B 02s00r00            628 	ljmp	_Timer2_ISR
                            629 ;--------------------------------------------------------
                            630 ; global & static initialisations
                            631 ;--------------------------------------------------------
                            632 	.area HOME    (CODE)
                            633 	.area GSINIT  (CODE)
                            634 	.area GSFINAL (CODE)
                            635 	.area GSINIT  (CODE)
                            636 	.globl __sdcc_gsinit_startup
                            637 	.globl __sdcc_program_startup
                            638 	.globl __start__stack
                            639 	.globl __mcs51_genXINIT
                            640 	.globl __mcs51_genXRAMCLEAR
                            641 	.globl __mcs51_genRAMCLEAR
                            642 ;------------------------------------------------------------
                            643 ;Allocation info for local variables in function 'lcdprint'
                            644 ;------------------------------------------------------------
                            645 ;pageblock                 Allocated with name '_lcdprint_PARM_2'
                            646 ;readbyte                  Allocated with name '_lcdprint_PARM_3'
                            647 ;addr                      Allocated with name '_lcdprint_addr_1_1'
                            648 ;data1                     Allocated with name '_lcdprint_data1_1_1'
                            649 ;data2                     Allocated with name '_lcdprint_data2_1_1'
                            650 ;addr1                     Allocated with name '_lcdprint_addr1_1_1'
                            651 ;addr2                     Allocated with name '_lcdprint_addr2_1_1'
                            652 ;rowval                    Allocated with name '_lcdprint_rowval_1_1'
                            653 ;------------------------------------------------------------
                            654 ;	main.c:1001: static int rowval=0;
                            655 ;	genAssign
   0000 90s00r2D            656 	mov	dptr,#_lcdprint_rowval_1_1
   0003 E4                  657 	clr	a
   0004 F0                  658 	movx	@dptr,a
   0005 A3                  659 	inc	dptr
   0006 F0                  660 	movx	@dptr,a
                            661 	.area GSFINAL (CODE)
   0000 02s00r00            662 	ljmp	__sdcc_program_startup
                            663 ;--------------------------------------------------------
                            664 ; Home
                            665 ;--------------------------------------------------------
                            666 	.area HOME    (CODE)
                            667 	.area CSEG    (CODE)
   0000                     668 __sdcc_program_startup:
   0000 12s00r74            669 	lcall	_main
                            670 ;	return from main will lock up
   0003 80 FE               671 	sjmp .
                            672 ;--------------------------------------------------------
                            673 ; code
                            674 ;--------------------------------------------------------
                            675 	.area CSEG    (CODE)
                            676 ;------------------------------------------------------------
                            677 ;Allocation info for local variables in function '__sdcc_external_startup'
                            678 ;------------------------------------------------------------
                            679 ;------------------------------------------------------------
                            680 ;	main.c:60: __sdcc_external_startup()
                            681 ;	-----------------------------------------
                            682 ;	 function __sdcc_external_startup
                            683 ;	-----------------------------------------
   0005                     684 ___sdcc_external_startup:
                    0002    685 	ar2 = 0x02
                    0003    686 	ar3 = 0x03
                    0004    687 	ar4 = 0x04
                    0005    688 	ar5 = 0x05
                    0006    689 	ar6 = 0x06
                    0007    690 	ar7 = 0x07
                    0000    691 	ar0 = 0x00
                    0001    692 	ar1 = 0x01
                            693 ;	main.c:62: EA=1;
                            694 ;	genAssign
   0005 D2 AF               695 	setb	_EA
                            696 ;	main.c:63: EX0=1;
                            697 ;	genAssign
   0007 D2 A8               698 	setb	_EX0
                            699 ;	main.c:64: ET0=1;
                            700 ;	genAssign
   0009 D2 A9               701 	setb	_ET0
                            702 ;	main.c:65: IT0=1;
                            703 ;	genAssign
   000B D2 88               704 	setb	_IT0
                            705 ;	main.c:66: return 1;
                            706 ;	genRet
                            707 ;	Peephole 182.b	used 16 bit load of dptr
   000D 90 00 01            708 	mov	dptr,#0x0001
                            709 ;	Peephole 300	removed redundant label 00101$
   0010 22                  710 	ret
                            711 ;------------------------------------------------------------
                            712 ;Allocation info for local variables in function 'isr_zero'
                            713 ;------------------------------------------------------------
                            714 ;------------------------------------------------------------
                            715 ;	main.c:69: void isr_zero(void) __interrupt (0)
                            716 ;	-----------------------------------------
                            717 ;	 function isr_zero
                            718 ;	-----------------------------------------
   0011                     719 _isr_zero:
   0011 C0 E0               720 	push	acc
   0013 C0 F0               721 	push	b
   0015 C0 82               722 	push	dpl
   0017 C0 83               723 	push	dph
   0019 C0 02               724 	push	(0+2)
   001B C0 03               725 	push	(0+3)
   001D C0 04               726 	push	(0+4)
   001F C0 05               727 	push	(0+5)
   0021 C0 06               728 	push	(0+6)
   0023 C0 07               729 	push	(0+7)
   0025 C0 00               730 	push	(0+0)
   0027 C0 01               731 	push	(0+1)
   0029 C0 D0               732 	push	psw
   002B 75 D0 00            733 	mov	psw,#0x00
                            734 ;	main.c:71: delay(100);
                            735 ;	genCall
                            736 ;	Peephole 182.b	used 16 bit load of dptr
   002E 90 00 64            737 	mov	dptr,#0x0064
   0031 12s00r00            738 	lcall	_delay
                            739 ;	main.c:72: while(IE0==1);
   0034                     740 00101$:
                            741 ;	genIfx
                            742 ;	genIfxJump
                            743 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0034 20 89 FD            744 	jb	_IE0,00101$
                            745 ;	Peephole 300	removed redundant label 00108$
                            746 ;	main.c:73: stopcount++;
                            747 ;	genAssign
   0037 90s00r00            748 	mov	dptr,#_stopcount
   003A E0                  749 	movx	a,@dptr
   003B FA                  750 	mov	r2,a
   003C A3                  751 	inc	dptr
   003D E0                  752 	movx	a,@dptr
   003E FB                  753 	mov	r3,a
                            754 ;	genPlus
   003F 90s00r00            755 	mov	dptr,#_stopcount
                            756 ;     genPlusIncr
   0042 74 01               757 	mov	a,#0x01
                            758 ;	Peephole 236.a	used r2 instead of ar2
   0044 2A                  759 	add	a,r2
   0045 F0                  760 	movx	@dptr,a
                            761 ;	Peephole 181	changed mov to clr
   0046 E4                  762 	clr	a
                            763 ;	Peephole 236.b	used r3 instead of ar3
   0047 3B                  764 	addc	a,r3
   0048 A3                  765 	inc	dptr
   0049 F0                  766 	movx	@dptr,a
                            767 ;	main.c:74: data1 = IOByteRead();
                            768 ;	genCall
   004A 12s2Ar4B            769 	lcall	_IOByteRead
   004D AA 82               770 	mov	r2,dpl
                            771 ;	genAssign
   004F 90s00r03            772 	mov	dptr,#_data1
   0052 EA                  773 	mov	a,r2
   0053 F0                  774 	movx	@dptr,a
                            775 ;	main.c:75: checkIOByteRead(data1);
                            776 ;	genCall
   0054 8A 82               777 	mov	dpl,r2
   0056 12s2Br1B            778 	lcall	_checkIOByteRead
                            779 ;	Peephole 300	removed redundant label 00104$
   0059 D0 D0               780 	pop	psw
   005B D0 01               781 	pop	(0+1)
   005D D0 00               782 	pop	(0+0)
   005F D0 07               783 	pop	(0+7)
   0061 D0 06               784 	pop	(0+6)
   0063 D0 05               785 	pop	(0+5)
   0065 D0 04               786 	pop	(0+4)
   0067 D0 03               787 	pop	(0+3)
   0069 D0 02               788 	pop	(0+2)
   006B D0 83               789 	pop	dph
   006D D0 82               790 	pop	dpl
   006F D0 F0               791 	pop	b
   0071 D0 E0               792 	pop	acc
   0073 32                  793 	reti
                            794 ;------------------------------------------------------------
                            795 ;Allocation info for local variables in function 'main'
                            796 ;------------------------------------------------------------
                            797 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            798 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                            799 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                            800 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                            801 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                            802 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                            803 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                            804 ;sloc7                     Allocated with name '_main_sloc7_1_0'
                            805 ;databyte                  Allocated with name '_main_databyte_1_1'
                            806 ;readbyte                  Allocated with name '_main_readbyte_1_1'
                            807 ;pageblock                 Allocated with name '_main_pageblock_1_1'
                            808 ;pageblockw                Allocated with name '_main_pageblockw_1_1'
                            809 ;saddr                     Allocated with name '_main_saddr_1_1'
                            810 ;daddr                     Allocated with name '_main_daddr_1_1'
                            811 ;pcount                    Allocated with name '_main_pcount_1_1'
                            812 ;addr                      Allocated with name '_main_addr_1_1'
                            813 ;cond                      Allocated with name '_main_cond_1_1'
                            814 ;startaddr                 Allocated with name '_main_startaddr_1_1'
                            815 ;endaddr                   Allocated with name '_main_endaddr_1_1'
                            816 ;op                        Allocated with name '_main_op_1_1'
                            817 ;num                       Allocated with name '_main_num_1_1'
                            818 ;ccode                     Allocated with name '_main_ccode_1_1'
                            819 ;ch                        Allocated with name '_main_ch_1_1'
                            820 ;ch0                       Allocated with name '_main_ch0_1_1'
                            821 ;ch1                       Allocated with name '_main_ch1_1_1'
                            822 ;block                     Allocated with name '_main_block_1_1'
                            823 ;wrdata                    Allocated with name '_main_wrdata_1_1'
                            824 ;s                         Allocated with name '_main_s_1_1'
                            825 ;countbyte                 Allocated with name '_main_countbyte_1_1'
                            826 ;i                         Allocated with name '_main_i_1_1'
                            827 ;numint                    Allocated with name '_main_numint_1_1'
                            828 ;j                         Allocated with name '_main_j_1_1'
                            829 ;r                         Allocated with name '_main_r_1_1'
                            830 ;temp                      Allocated with name '_main_temp_1_1'
                            831 ;row_vals                  Allocated with name '_main_row_vals_1_1'
                            832 ;pc                        Allocated with name '_main_pc_4_52'
                            833 ;cl                        Allocated with name '_main_cl_4_55'
                            834 ;cond1                     Allocated with name '_main_cond1_4_55'
                            835 ;------------------------------------------------------------
                            836 ;	main.c:79: void main()
                            837 ;	-----------------------------------------
                            838 ;	 function main
                            839 ;	-----------------------------------------
   0074                     840 _main:
                            841 ;	main.c:81: char databyte,readbyte,pageblock,pageblockw,saddr,daddr,pcount=0;
                            842 ;	genAssign
   0074 90s00r06            843 	mov	dptr,#_main_pcount_1_1
                            844 ;	Peephole 181	changed mov to clr
                            845 ;	main.c:83: int s,countbyte=0,i,numint,j,r,temp;
                            846 ;	genAssign
                            847 ;	Peephole 219.a	removed redundant clear
   0077 E4                  848 	clr	a
   0078 F0                  849 	movx	@dptr,a
   0079 90s00r0A            850 	mov	dptr,#_main_countbyte_1_1
   007C F0                  851 	movx	@dptr,a
   007D A3                  852 	inc	dptr
   007E F0                  853 	movx	@dptr,a
                            854 ;	main.c:86: memset(row_vals,'0',BYTE_LENGTH);
                            855 ;	genAssign
   007F 90s00r00            856 	mov	dptr,#_memset_PARM_2
   0082 74 30               857 	mov	a,#0x30
   0084 F0                  858 	movx	@dptr,a
                            859 ;	genAssign
   0085 90s00r00            860 	mov	dptr,#_memset_PARM_3
   0088 74 08               861 	mov	a,#0x08
   008A F0                  862 	movx	@dptr,a
   008B E4                  863 	clr	a
   008C A3                  864 	inc	dptr
   008D F0                  865 	movx	@dptr,a
                            866 ;	genCall
                            867 ;	Peephole 182.a	used 16 bit load of DPTR
   008E 90s00r0C            868 	mov	dptr,#_main_row_vals_1_1
   0091 75 F0 00            869 	mov	b,#0x00
   0094 12s00r00            870 	lcall	_memset
                            871 ;	main.c:89: InitTimer0();
                            872 ;	genCall
   0097 12s00r00            873 	lcall	_InitTimer0
                            874 ;	main.c:90: lcdinit();
                            875 ;	genCall
   009A 12s00r00            876 	lcall	_lcdinit
                            877 ;	main.c:91: serinit();
                            878 ;	genCall
   009D 12s00r00            879 	lcall	_serinit
                            880 ;	main.c:92: eereset();
                            881 ;	genCall
   00A0 12s1DrF1            882 	lcall	_eereset
                            883 ;	main.c:94: printf_tiny("\n\r-----------------------------------------------------\n\r");
                            884 ;	genIpush
   00A3 74r00               885 	mov	a,#__str_0
   00A5 C0 E0               886 	push	acc
   00A7 74s00               887 	mov	a,#(__str_0 >> 8)
   00A9 C0 E0               888 	push	acc
                            889 ;	genCall
   00AB 12s00r00            890 	lcall	_printf_tiny
   00AE 15 81               891 	dec	sp
   00B0 15 81               892 	dec	sp
                            893 ;	main.c:95: printf_tiny("User Menu for I2C and LCD Display\n\r");
                            894 ;	genIpush
   00B2 74r3A               895 	mov	a,#__str_1
   00B4 C0 E0               896 	push	acc
   00B6 74s00               897 	mov	a,#(__str_1 >> 8)
   00B8 C0 E0               898 	push	acc
                            899 ;	genCall
   00BA 12s00r00            900 	lcall	_printf_tiny
   00BD 15 81               901 	dec	sp
   00BF 15 81               902 	dec	sp
                            903 ;	main.c:98: while(1)
   00C1                     904 00223$:
                            905 ;	main.c:101: printf_tiny("\n\rSelect an option from the below menu:\n\r");
                            906 ;	genIpush
   00C1 74r5E               907 	mov	a,#__str_2
   00C3 C0 E0               908 	push	acc
   00C5 74s00               909 	mov	a,#(__str_2 >> 8)
   00C7 C0 E0               910 	push	acc
                            911 ;	genCall
   00C9 12s00r00            912 	lcall	_printf_tiny
   00CC 15 81               913 	dec	sp
   00CE 15 81               914 	dec	sp
                            915 ;	main.c:103: printf_tiny("\n\r1: Write byte\n\r");
                            916 ;	genIpush
   00D0 74r88               917 	mov	a,#__str_3
   00D2 C0 E0               918 	push	acc
   00D4 74s00               919 	mov	a,#(__str_3 >> 8)
   00D6 C0 E0               920 	push	acc
                            921 ;	genCall
   00D8 12s00r00            922 	lcall	_printf_tiny
   00DB 15 81               923 	dec	sp
   00DD 15 81               924 	dec	sp
                            925 ;	main.c:104: printf_tiny("\n\r2: Read memory byte\n\r");
                            926 ;	genIpush
   00DF 74r9A               927 	mov	a,#__str_4
   00E1 C0 E0               928 	push	acc
   00E3 74s00               929 	mov	a,#(__str_4 >> 8)
   00E5 C0 E0               930 	push	acc
                            931 ;	genCall
   00E7 12s00r00            932 	lcall	_printf_tiny
   00EA 15 81               933 	dec	sp
   00EC 15 81               934 	dec	sp
                            935 ;	main.c:105: printf_tiny("\n\r3: LCD Display\n\r");
                            936 ;	genIpush
   00EE 74rB2               937 	mov	a,#__str_5
   00F0 C0 E0               938 	push	acc
   00F2 74s00               939 	mov	a,#(__str_5 >> 8)
   00F4 C0 E0               940 	push	acc
                            941 ;	genCall
   00F6 12s00r00            942 	lcall	_printf_tiny
   00F9 15 81               943 	dec	sp
   00FB 15 81               944 	dec	sp
                            945 ;	main.c:106: printf_tiny("\n\r4: Hex memory dump\n\r");
                            946 ;	genIpush
   00FD 74rC5               947 	mov	a,#__str_6
   00FF C0 E0               948 	push	acc
   0101 74s00               949 	mov	a,#(__str_6 >> 8)
   0103 C0 E0               950 	push	acc
                            951 ;	genCall
   0105 12s00r00            952 	lcall	_printf_tiny
   0108 15 81               953 	dec	sp
   010A 15 81               954 	dec	sp
                            955 ;	main.c:107: printf_tiny("\n\r5: LCD test\n\r");
                            956 ;	genIpush
   010C 74rDC               957 	mov	a,#__str_7
   010E C0 E0               958 	push	acc
   0110 74s00               959 	mov	a,#(__str_7 >> 8)
   0112 C0 E0               960 	push	acc
                            961 ;	genCall
   0114 12s00r00            962 	lcall	_printf_tiny
   0117 15 81               963 	dec	sp
   0119 15 81               964 	dec	sp
                            965 ;	main.c:108: printf_tiny("\n\r6: Copy data bytes\n\r");
                            966 ;	genIpush
   011B 74rEC               967 	mov	a,#__str_8
   011D C0 E0               968 	push	acc
   011F 74s00               969 	mov	a,#(__str_8 >> 8)
   0121 C0 E0               970 	push	acc
                            971 ;	genCall
   0123 12s00r00            972 	lcall	_printf_tiny
   0126 15 81               973 	dec	sp
   0128 15 81               974 	dec	sp
                            975 ;	main.c:109: printf_tiny("\n\r7: Create custom character\n\r");
                            976 ;	genIpush
   012A 74r03               977 	mov	a,#__str_9
   012C C0 E0               978 	push	acc
   012E 74s01               979 	mov	a,#(__str_9 >> 8)
   0130 C0 E0               980 	push	acc
                            981 ;	genCall
   0132 12s00r00            982 	lcall	_printf_tiny
   0135 15 81               983 	dec	sp
   0137 15 81               984 	dec	sp
                            985 ;	main.c:110: printf_tiny("\n\r8: Watchdog Timer Reset\n\r");
                            986 ;	genIpush
   0139 74r22               987 	mov	a,#__str_10
   013B C0 E0               988 	push	acc
   013D 74s01               989 	mov	a,#(__str_10 >> 8)
   013F C0 E0               990 	push	acc
                            991 ;	genCall
   0141 12s00r00            992 	lcall	_printf_tiny
   0144 15 81               993 	dec	sp
   0146 15 81               994 	dec	sp
                            995 ;	main.c:111: printf_tiny("\n\r9: I/O Expander\n\r");
                            996 ;	genIpush
   0148 74r3E               997 	mov	a,#__str_11
   014A C0 E0               998 	push	acc
   014C 74s01               999 	mov	a,#(__str_11 >> 8)
   014E C0 E0              1000 	push	acc
                           1001 ;	genCall
   0150 12s00r00           1002 	lcall	_printf_tiny
   0153 15 81              1003 	dec	sp
   0155 15 81              1004 	dec	sp
                           1005 ;	main.c:112: printf_tiny("\n\rA: Timed Block Fill\n\r");
                           1006 ;	genIpush
   0157 74r52              1007 	mov	a,#__str_12
   0159 C0 E0              1008 	push	acc
   015B 74s01              1009 	mov	a,#(__str_12 >> 8)
   015D C0 E0              1010 	push	acc
                           1011 ;	genCall
   015F 12s00r00           1012 	lcall	_printf_tiny
   0162 15 81              1013 	dec	sp
   0164 15 81              1014 	dec	sp
                           1015 ;	main.c:113: printf_tiny("\n\rB: Measure EEPROM write times\n\r");
                           1016 ;	genIpush
   0166 74r6A              1017 	mov	a,#__str_13
   0168 C0 E0              1018 	push	acc
   016A 74s01              1019 	mov	a,#(__str_13 >> 8)
   016C C0 E0              1020 	push	acc
                           1021 ;	genCall
   016E 12s00r00           1022 	lcall	_printf_tiny
   0171 15 81              1023 	dec	sp
   0173 15 81              1024 	dec	sp
                           1025 ;	main.c:114: printf_tiny("\n\rC: Clock options\n\r");
                           1026 ;	genIpush
   0175 74r8C              1027 	mov	a,#__str_14
   0177 C0 E0              1028 	push	acc
   0179 74s01              1029 	mov	a,#(__str_14 >> 8)
   017B C0 E0              1030 	push	acc
                           1031 ;	genCall
   017D 12s00r00           1032 	lcall	_printf_tiny
   0180 15 81              1033 	dec	sp
   0182 15 81              1034 	dec	sp
                           1035 ;	main.c:117: while(1)
   0184                    1036 00113$:
                           1037 ;	main.c:119: op=getchar();
                           1038 ;	genCall
   0184 12s00r00           1039 	lcall	_getchar
   0187 AA 82              1040 	mov	r2,dpl
                           1041 ;	main.c:120: if(((op >= '1') || (op <= '9')) || ((op >= 'A') || (op <= 'C')))
                           1042 ;	genCmpLt
                           1043 ;	genCmp
   0189 C3                 1044 	clr	c
   018A EA                 1045 	mov	a,r2
   018B 64 80              1046 	xrl	a,#0x80
   018D 94 B1              1047 	subb	a,#0xb1
   018F E4                 1048 	clr	a
   0190 33                 1049 	rlc	a
                           1050 ;	genIfx
   0191 FB                 1051 	mov	r3,a
                           1052 ;	Peephole 105	removed redundant mov
                           1053 ;	genIfxJump
                           1054 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0192 60 46              1055 	jz	00114$
                           1056 ;	Peephole 300	removed redundant label 00373$
                           1057 ;	genCmpGt
                           1058 ;	genCmp
   0194 C3                 1059 	clr	c
                           1060 ;	Peephole 159	avoided xrl during execution
   0195 74 B9              1061 	mov	a,#(0x39 ^ 0x80)
   0197 8A F0              1062 	mov	b,r2
   0199 63 F0 80           1063 	xrl	b,#0x80
   019C 95 F0              1064 	subb	a,b
   019E E4                 1065 	clr	a
   019F 33                 1066 	rlc	a
                           1067 ;	genIfx
   01A0 FC                 1068 	mov	r4,a
                           1069 ;	Peephole 105	removed redundant mov
                           1070 ;	genIfxJump
                           1071 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01A1 60 37              1072 	jz	00114$
                           1073 ;	Peephole 300	removed redundant label 00374$
                           1074 ;	genCmpLt
                           1075 ;	genCmp
   01A3 C3                 1076 	clr	c
   01A4 EA                 1077 	mov	a,r2
   01A5 64 80              1078 	xrl	a,#0x80
   01A7 94 C1              1079 	subb	a,#0xc1
   01A9 E4                 1080 	clr	a
   01AA 33                 1081 	rlc	a
                           1082 ;	genIfx
   01AB FD                 1083 	mov	r5,a
                           1084 ;	Peephole 105	removed redundant mov
                           1085 ;	genIfxJump
                           1086 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01AC 60 2C              1087 	jz	00114$
                           1088 ;	Peephole 300	removed redundant label 00375$
                           1089 ;	genCmpGt
                           1090 ;	genCmp
   01AE C3                 1091 	clr	c
                           1092 ;	Peephole 159	avoided xrl during execution
   01AF 74 C3              1093 	mov	a,#(0x43 ^ 0x80)
   01B1 8A F0              1094 	mov	b,r2
   01B3 63 F0 80           1095 	xrl	b,#0x80
   01B6 95 F0              1096 	subb	a,b
   01B8 E4                 1097 	clr	a
   01B9 33                 1098 	rlc	a
                           1099 ;	genIfx
   01BA FE                 1100 	mov	r6,a
                           1101 ;	Peephole 105	removed redundant mov
                           1102 ;	genIfxJump
                           1103 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01BB 60 1D              1104 	jz	00114$
                           1105 ;	Peephole 300	removed redundant label 00376$
                           1106 ;	main.c:122: else if(!(((op >= '1') || (op <= '9')) || ((op >= 'A') || (op <= 'C'))))
                           1107 ;	genIfx
   01BD EB                 1108 	mov	a,r3
                           1109 ;	genIfxJump
                           1110 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01BE 60 C4              1111 	jz	00113$
                           1112 ;	Peephole 300	removed redundant label 00377$
                           1113 ;	genIfx
   01C0 EC                 1114 	mov	a,r4
                           1115 ;	genIfxJump
                           1116 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C1 60 C1              1117 	jz	00113$
                           1118 ;	Peephole 300	removed redundant label 00378$
                           1119 ;	genIfx
   01C3 ED                 1120 	mov	a,r5
                           1121 ;	genIfxJump
                           1122 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C4 60 BE              1123 	jz	00113$
                           1124 ;	Peephole 300	removed redundant label 00379$
                           1125 ;	genIfx
   01C6 EE                 1126 	mov	a,r6
                           1127 ;	genIfxJump
                           1128 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01C7 60 BB              1129 	jz	00113$
                           1130 ;	Peephole 300	removed redundant label 00380$
                           1131 ;	main.c:125: printf_tiny("Incorrect option. Please enter one of the above options 1-9\n\r");
                           1132 ;	genIpush
   01C9 74rA1              1133 	mov	a,#__str_15
   01CB C0 E0              1134 	push	acc
   01CD 74s01              1135 	mov	a,#(__str_15 >> 8)
   01CF C0 E0              1136 	push	acc
                           1137 ;	genCall
   01D1 12s00r00           1138 	lcall	_printf_tiny
   01D4 15 81              1139 	dec	sp
   01D6 15 81              1140 	dec	sp
                           1141 ;	main.c:126: continue;
                           1142 ;	Peephole 112.b	changed ljmp to sjmp
   01D8 80 AA              1143 	sjmp	00113$
   01DA                    1144 00114$:
                           1145 ;	main.c:130: switch(op)
                           1146 ;	genIfx
   01DA EB                 1147 	mov	a,r3
                           1148 ;	genIfxJump
   01DB 60 03              1149 	jz	00381$
   01DD 02s00rC1           1150 	ljmp	00223$
   01E0                    1151 00381$:
                           1152 ;	genCmpGt
                           1153 ;	genCmp
   01E0 C3                 1154 	clr	c
                           1155 ;	Peephole 159	avoided xrl during execution
   01E1 74 C3              1156 	mov	a,#(0x43 ^ 0x80)
   01E3 8A F0              1157 	mov	b,r2
   01E5 63 F0 80           1158 	xrl	b,#0x80
   01E8 95 F0              1159 	subb	a,b
                           1160 ;	genIfxJump
   01EA 50 03              1161 	jnc	00382$
   01EC 02s00rC1           1162 	ljmp	00223$
   01EF                    1163 00382$:
                           1164 ;	genMinus
   01EF EA                 1165 	mov	a,r2
   01F0 24 CF              1166 	add	a,#0xcf
                           1167 ;	genJumpTab
   01F2 FA                 1168 	mov	r2,a
                           1169 ;	Peephole 105	removed redundant mov
   01F3 24 09              1170 	add	a,#(00383$-3-.)
   01F5 83                 1171 	movc	a,@a+pc
   01F6 C0 E0              1172 	push	acc
   01F8 EA                 1173 	mov	a,r2
   01F9 24 16              1174 	add	a,#(00384$-3-.)
   01FB 83                 1175 	movc	a,@a+pc
   01FC C0 E0              1176 	push	acc
   01FE 22                 1177 	ret
   01FF                    1178 00383$:
   01FFr25                 1179 	.db	00115$
   0200r50                 1180 	.db	00121$
   0201rE9                 1181 	.db	00127$
   0202rCB                 1182 	.db	00133$
   0203r2E                 1183 	.db	00159$
   0204rBE                 1184 	.db	00160$
   0205r1D                 1185 	.db	00161$
   0206rCE                 1186 	.db	00177$
   0207rD4                 1187 	.db	00178$
   0208r40                 1188 	.db	00221$
   0209r40                 1189 	.db	00221$
   020Ar40                 1190 	.db	00221$
   020Br40                 1191 	.db	00221$
   020Cr40                 1192 	.db	00221$
   020Dr40                 1193 	.db	00221$
   020Er40                 1194 	.db	00221$
   020Fr6B                 1195 	.db	00182$
   0210rB0                 1196 	.db	00194$
   0211r28                 1197 	.db	00199$
   0212                    1198 00384$:
   0212s02                 1199 	.db	00115$>>8
   0213s04                 1200 	.db	00121$>>8
   0214s05                 1201 	.db	00127$>>8
   0215s06                 1202 	.db	00133$>>8
   0216s0D                 1203 	.db	00159$>>8
   0217s0D                 1204 	.db	00160$>>8
   0218s10                 1205 	.db	00161$>>8
   0219s12                 1206 	.db	00177$>>8
   021As12                 1207 	.db	00178$>>8
   021Bs19                 1208 	.db	00221$>>8
   021Cs19                 1209 	.db	00221$>>8
   021Ds19                 1210 	.db	00221$>>8
   021Es19                 1211 	.db	00221$>>8
   021Fs19                 1212 	.db	00221$>>8
   0220s19                 1213 	.db	00221$>>8
   0221s19                 1214 	.db	00221$>>8
   0222s13                 1215 	.db	00182$>>8
   0223s15                 1216 	.db	00194$>>8
   0224s18                 1217 	.db	00199$>>8
                           1218 ;	main.c:132: case '1':
   0225                    1219 00115$:
                           1220 ;	main.c:136: while(1)
                           1221 ;	genAssign
   0225 90s00r0A           1222 	mov	dptr,#_main_countbyte_1_1
   0228 E0                 1223 	movx	a,@dptr
   0229 FA                 1224 	mov	r2,a
   022A A3                 1225 	inc	dptr
   022B E0                 1226 	movx	a,@dptr
   022C FB                 1227 	mov	r3,a
   022D                    1228 00119$:
                           1229 ;	main.c:138: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1230 ;	genIpush
   022D C0 02              1231 	push	ar2
   022F C0 03              1232 	push	ar3
   0231 74rDF              1233 	mov	a,#__str_16
   0233 C0 E0              1234 	push	acc
   0235 74s01              1235 	mov	a,#(__str_16 >> 8)
   0237 C0 E0              1236 	push	acc
                           1237 ;	genCall
   0239 12s00r00           1238 	lcall	_printf_tiny
   023C 15 81              1239 	dec	sp
   023E 15 81              1240 	dec	sp
   0240 D0 03              1241 	pop	ar3
   0242 D0 02              1242 	pop	ar2
                           1243 ;	main.c:139: printf_tiny("\n\rByte Write and Read\n\r");
                           1244 ;	genIpush
   0244 C0 02              1245 	push	ar2
   0246 C0 03              1246 	push	ar3
   0248 74r18              1247 	mov	a,#__str_17
   024A C0 E0              1248 	push	acc
   024C 74s02              1249 	mov	a,#(__str_17 >> 8)
   024E C0 E0              1250 	push	acc
                           1251 ;	genCall
   0250 12s00r00           1252 	lcall	_printf_tiny
   0253 15 81              1253 	dec	sp
   0255 15 81              1254 	dec	sp
   0257 D0 03              1255 	pop	ar3
   0259 D0 02              1256 	pop	ar2
                           1257 ;	main.c:140: addr = fetch_addr();                    // Fetch address used to fetch the EEPROM address entered by user
                           1258 ;	genCall
   025B C0 02              1259 	push	ar2
   025D C0 03              1260 	push	ar3
   025F 12s20r6A           1261 	lcall	_fetch_addr
   0262 AC 82              1262 	mov	r4,dpl
   0264 D0 03              1263 	pop	ar3
   0266 D0 02              1264 	pop	ar2
                           1265 ;	main.c:141: pageblock = bufsiz[0];
                           1266 ;	genPointerGet
                           1267 ;	genFarPointerGet
   0268 90s00r00           1268 	mov	dptr,#_bufsiz
   026B E0                 1269 	movx	a,@dptr
   026C FD                 1270 	mov	r5,a
                           1271 ;	main.c:142: pageblock &= 0x0F;
                           1272 ;	genAnd
   026D 53 05 0F           1273 	anl	ar5,#0x0F
                           1274 ;	genAssign
   0270 90s00r04           1275 	mov	dptr,#_main_pageblock_1_1
   0273 ED                 1276 	mov	a,r5
   0274 F0                 1277 	movx	@dptr,a
                           1278 ;	main.c:143: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblock);
                           1279 ;	genCast
   0275 ED                 1280 	mov	a,r5
   0276 33                 1281 	rlc	a
   0277 95 E0              1282 	subb	a,acc
   0279 FE                 1283 	mov	r6,a
                           1284 ;	genIpush
   027A C0 02              1285 	push	ar2
   027C C0 03              1286 	push	ar3
   027E C0 04              1287 	push	ar4
   0280 C0 05              1288 	push	ar5
   0282 C0 06              1289 	push	ar6
                           1290 ;	genIpush
   0284 74r30              1291 	mov	a,#__str_18
   0286 C0 E0              1292 	push	acc
   0288 74s02              1293 	mov	a,#(__str_18 >> 8)
   028A C0 E0              1294 	push	acc
                           1295 ;	genCall
   028C 12s00r00           1296 	lcall	_printf_tiny
   028F E5 81              1297 	mov	a,sp
   0291 24 FC              1298 	add	a,#0xfc
   0293 F5 81              1299 	mov	sp,a
   0295 D0 04              1300 	pop	ar4
   0297 D0 03              1301 	pop	ar3
   0299 D0 02              1302 	pop	ar2
                           1303 ;	main.c:144: printf("Address to be written to is: %02x\n\r",(addr & 0xFF));
                           1304 ;	genAssign
   029B 8C 05              1305 	mov	ar5,r4
                           1306 ;	genCast
   029D 7E 00              1307 	mov	r6,#0x00
                           1308 ;	genIpush
   029F C0 02              1309 	push	ar2
   02A1 C0 03              1310 	push	ar3
   02A3 C0 04              1311 	push	ar4
   02A5 C0 05              1312 	push	ar5
   02A7 C0 06              1313 	push	ar6
                           1314 ;	genIpush
   02A9 74r4E              1315 	mov	a,#__str_19
   02AB C0 E0              1316 	push	acc
   02AD 74s02              1317 	mov	a,#(__str_19 >> 8)
   02AF C0 E0              1318 	push	acc
   02B1 74 80              1319 	mov	a,#0x80
   02B3 C0 E0              1320 	push	acc
                           1321 ;	genCall
   02B5 12s00r00           1322 	lcall	_printf
   02B8 E5 81              1323 	mov	a,sp
   02BA 24 FB              1324 	add	a,#0xfb
   02BC F5 81              1325 	mov	sp,a
   02BE D0 04              1326 	pop	ar4
   02C0 D0 03              1327 	pop	ar3
   02C2 D0 02              1328 	pop	ar2
                           1329 ;	main.c:145: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1330 ;	genIpush
   02C4 C0 02              1331 	push	ar2
   02C6 C0 03              1332 	push	ar3
   02C8 C0 04              1333 	push	ar4
   02CA 74rDF              1334 	mov	a,#__str_16
   02CC C0 E0              1335 	push	acc
   02CE 74s01              1336 	mov	a,#(__str_16 >> 8)
   02D0 C0 E0              1337 	push	acc
                           1338 ;	genCall
   02D2 12s00r00           1339 	lcall	_printf_tiny
   02D5 15 81              1340 	dec	sp
   02D7 15 81              1341 	dec	sp
   02D9 D0 04              1342 	pop	ar4
   02DB D0 03              1343 	pop	ar3
   02DD D0 02              1344 	pop	ar2
                           1345 ;	main.c:147: databyte = fetch_data();                // Fetch databyte from user
                           1346 ;	genCall
   02DF C0 02              1347 	push	ar2
   02E1 C0 03              1348 	push	ar3
   02E3 C0 04              1349 	push	ar4
   02E5 12s24rD6           1350 	lcall	_fetch_data
   02E8 AD 82              1351 	mov	r5,dpl
   02EA D0 04              1352 	pop	ar4
   02EC D0 03              1353 	pop	ar3
   02EE D0 02              1354 	pop	ar2
                           1355 ;	main.c:148: printf("Data byte to be written is: %02x\n\r",(databyte & 0xFF));
                           1356 ;	genAssign
   02F0 8D 06              1357 	mov	ar6,r5
                           1358 ;	genCast
   02F2 7F 00              1359 	mov	r7,#0x00
                           1360 ;	genIpush
   02F4 C0 02              1361 	push	ar2
   02F6 C0 03              1362 	push	ar3
   02F8 C0 04              1363 	push	ar4
   02FA C0 05              1364 	push	ar5
   02FC C0 06              1365 	push	ar6
   02FE C0 07              1366 	push	ar7
                           1367 ;	genIpush
   0300 74r72              1368 	mov	a,#__str_20
   0302 C0 E0              1369 	push	acc
   0304 74s02              1370 	mov	a,#(__str_20 >> 8)
   0306 C0 E0              1371 	push	acc
   0308 74 80              1372 	mov	a,#0x80
   030A C0 E0              1373 	push	acc
                           1374 ;	genCall
   030C 12s00r00           1375 	lcall	_printf
   030F E5 81              1376 	mov	a,sp
   0311 24 FB              1377 	add	a,#0xfb
   0313 F5 81              1378 	mov	sp,a
   0315 D0 05              1379 	pop	ar5
   0317 D0 04              1380 	pop	ar4
   0319 D0 03              1381 	pop	ar3
   031B D0 02              1382 	pop	ar2
                           1383 ;	main.c:151: eebytew(addr,pageblock,databyte);
                           1384 ;	genAssign
   031D 90s00r04           1385 	mov	dptr,#_main_pageblock_1_1
   0320 E0                 1386 	movx	a,@dptr
                           1387 ;	genAssign
   0321 FE                 1388 	mov	r6,a
   0322 90s00r18           1389 	mov	dptr,#_eebytew_PARM_2
                           1390 ;	Peephole 100	removed redundant mov
   0325 F0                 1391 	movx	@dptr,a
                           1392 ;	genAssign
   0326 90s00r19           1393 	mov	dptr,#_eebytew_PARM_3
   0329 ED                 1394 	mov	a,r5
   032A F0                 1395 	movx	@dptr,a
                           1396 ;	genCall
   032B 8C 82              1397 	mov	dpl,r4
   032D C0 02              1398 	push	ar2
   032F C0 03              1399 	push	ar3
   0331 C0 04              1400 	push	ar4
   0333 C0 06              1401 	push	ar6
   0335 12s19r71           1402 	lcall	_eebytew
   0338 D0 06              1403 	pop	ar6
   033A D0 04              1404 	pop	ar4
   033C D0 03              1405 	pop	ar3
   033E D0 02              1406 	pop	ar2
                           1407 ;	main.c:152: printf_tiny("Data Write successful\n\r");
                           1408 ;	genIpush
   0340 C0 02              1409 	push	ar2
   0342 C0 03              1410 	push	ar3
   0344 C0 04              1411 	push	ar4
   0346 C0 06              1412 	push	ar6
   0348 74r95              1413 	mov	a,#__str_21
   034A C0 E0              1414 	push	acc
   034C 74s02              1415 	mov	a,#(__str_21 >> 8)
   034E C0 E0              1416 	push	acc
                           1417 ;	genCall
   0350 12s00r00           1418 	lcall	_printf_tiny
   0353 15 81              1419 	dec	sp
   0355 15 81              1420 	dec	sp
   0357 D0 06              1421 	pop	ar6
   0359 D0 04              1422 	pop	ar4
   035B D0 03              1423 	pop	ar3
   035D D0 02              1424 	pop	ar2
                           1425 ;	main.c:154: delay(10);
                           1426 ;	genCall
                           1427 ;	Peephole 182.b	used 16 bit load of dptr
   035F 90 00 0A           1428 	mov	dptr,#0x000A
   0362 C0 02              1429 	push	ar2
   0364 C0 03              1430 	push	ar3
   0366 C0 04              1431 	push	ar4
   0368 C0 06              1432 	push	ar6
   036A 12s00r00           1433 	lcall	_delay
   036D D0 06              1434 	pop	ar6
   036F D0 04              1435 	pop	ar4
   0371 D0 03              1436 	pop	ar3
   0373 D0 02              1437 	pop	ar2
                           1438 ;	main.c:156: readbyte = eebyter(addr,pageblock);
                           1439 ;	genAssign
   0375 90s00r1B           1440 	mov	dptr,#_eebyter_PARM_2
   0378 EE                 1441 	mov	a,r6
   0379 F0                 1442 	movx	@dptr,a
                           1443 ;	genCall
   037A 8C 82              1444 	mov	dpl,r4
   037C C0 02              1445 	push	ar2
   037E C0 03              1446 	push	ar3
   0380 12s19r9F           1447 	lcall	_eebyter
   0383 AC 82              1448 	mov	r4,dpl
   0385 D0 03              1449 	pop	ar3
   0387 D0 02              1450 	pop	ar2
                           1451 ;	main.c:157: printf_tiny("Data Read successful\n\r");
                           1452 ;	genIpush
   0389 C0 02              1453 	push	ar2
   038B C0 03              1454 	push	ar3
   038D C0 04              1455 	push	ar4
   038F 74rAD              1456 	mov	a,#__str_22
   0391 C0 E0              1457 	push	acc
   0393 74s02              1458 	mov	a,#(__str_22 >> 8)
   0395 C0 E0              1459 	push	acc
                           1460 ;	genCall
   0397 12s00r00           1461 	lcall	_printf_tiny
   039A 15 81              1462 	dec	sp
   039C 15 81              1463 	dec	sp
   039E D0 04              1464 	pop	ar4
   03A0 D0 03              1465 	pop	ar3
   03A2 D0 02              1466 	pop	ar2
                           1467 ;	main.c:158: printf("Data retrieved: %02x",(readbyte & 0xFF));
                           1468 ;	genAssign
                           1469 ;	genCast
   03A4 7D 00              1470 	mov	r5,#0x00
                           1471 ;	genIpush
   03A6 C0 02              1472 	push	ar2
   03A8 C0 03              1473 	push	ar3
   03AA C0 04              1474 	push	ar4
   03AC C0 05              1475 	push	ar5
                           1476 ;	genIpush
   03AE 74rC4              1477 	mov	a,#__str_23
   03B0 C0 E0              1478 	push	acc
   03B2 74s02              1479 	mov	a,#(__str_23 >> 8)
   03B4 C0 E0              1480 	push	acc
   03B6 74 80              1481 	mov	a,#0x80
   03B8 C0 E0              1482 	push	acc
                           1483 ;	genCall
   03BA 12s00r00           1484 	lcall	_printf
   03BD E5 81              1485 	mov	a,sp
   03BF 24 FB              1486 	add	a,#0xfb
   03C1 F5 81              1487 	mov	sp,a
   03C3 D0 03              1488 	pop	ar3
   03C5 D0 02              1489 	pop	ar2
                           1490 ;	main.c:159: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1491 ;	genIpush
   03C7 C0 02              1492 	push	ar2
   03C9 C0 03              1493 	push	ar3
   03CB 74rDF              1494 	mov	a,#__str_16
   03CD C0 E0              1495 	push	acc
   03CF 74s01              1496 	mov	a,#(__str_16 >> 8)
   03D1 C0 E0              1497 	push	acc
                           1498 ;	genCall
   03D3 12s00r00           1499 	lcall	_printf_tiny
   03D6 15 81              1500 	dec	sp
   03D8 15 81              1501 	dec	sp
   03DA D0 03              1502 	pop	ar3
   03DC D0 02              1503 	pop	ar2
                           1504 ;	main.c:161: countbyte++;
                           1505 ;	genPlus
                           1506 ;     genPlusIncr
   03DE 0A                 1507 	inc	r2
   03DF BA 00 01           1508 	cjne	r2,#0x00,00385$
   03E2 0B                 1509 	inc	r3
   03E3                    1510 00385$:
                           1511 ;	genAssign
   03E3 90s00r0A           1512 	mov	dptr,#_main_countbyte_1_1
   03E6 EA                 1513 	mov	a,r2
   03E7 F0                 1514 	movx	@dptr,a
   03E8 A3                 1515 	inc	dptr
   03E9 EB                 1516 	mov	a,r3
   03EA F0                 1517 	movx	@dptr,a
                           1518 ;	main.c:162: printf_tiny("Press any key to continue\n\r");
                           1519 ;	genIpush
   03EB C0 02              1520 	push	ar2
   03ED C0 03              1521 	push	ar3
   03EF 74rD9              1522 	mov	a,#__str_24
   03F1 C0 E0              1523 	push	acc
   03F3 74s02              1524 	mov	a,#(__str_24 >> 8)
   03F5 C0 E0              1525 	push	acc
                           1526 ;	genCall
   03F7 12s00r00           1527 	lcall	_printf_tiny
   03FA 15 81              1528 	dec	sp
   03FC 15 81              1529 	dec	sp
   03FE D0 03              1530 	pop	ar3
   0400 D0 02              1531 	pop	ar2
                           1532 ;	main.c:163: printf_tiny("Press 'q' to quit\n\r");
                           1533 ;	genIpush
   0402 C0 02              1534 	push	ar2
   0404 C0 03              1535 	push	ar3
   0406 74rF5              1536 	mov	a,#__str_25
   0408 C0 E0              1537 	push	acc
   040A 74s02              1538 	mov	a,#(__str_25 >> 8)
   040C C0 E0              1539 	push	acc
                           1540 ;	genCall
   040E 12s00r00           1541 	lcall	_printf_tiny
   0411 15 81              1542 	dec	sp
   0413 15 81              1543 	dec	sp
   0415 D0 03              1544 	pop	ar3
   0417 D0 02              1545 	pop	ar2
                           1546 ;	main.c:164: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1547 ;	genIpush
   0419 C0 02              1548 	push	ar2
   041B C0 03              1549 	push	ar3
   041D 74rDF              1550 	mov	a,#__str_16
   041F C0 E0              1551 	push	acc
   0421 74s01              1552 	mov	a,#(__str_16 >> 8)
   0423 C0 E0              1553 	push	acc
                           1554 ;	genCall
   0425 12s00r00           1555 	lcall	_printf_tiny
   0428 15 81              1556 	dec	sp
   042A 15 81              1557 	dec	sp
   042C D0 03              1558 	pop	ar3
   042E D0 02              1559 	pop	ar2
                           1560 ;	main.c:165: cond = getchar();
                           1561 ;	genCall
   0430 C0 02              1562 	push	ar2
   0432 C0 03              1563 	push	ar3
   0434 12s00r00           1564 	lcall	_getchar
   0437 AC 82              1565 	mov	r4,dpl
   0439 D0 03              1566 	pop	ar3
   043B D0 02              1567 	pop	ar2
                           1568 ;	main.c:166: if(cond == 'q')
                           1569 ;	genCmpEq
                           1570 ;	gencjneshort
   043D BC 71 02           1571 	cjne	r4,#0x71,00386$
   0440 80 03              1572 	sjmp	00387$
   0442                    1573 00386$:
   0442 02s02r2D           1574 	ljmp	00119$
   0445                    1575 00387$:
                           1576 ;	main.c:167: break;
                           1577 ;	genAssign
   0445 90s00r0A           1578 	mov	dptr,#_main_countbyte_1_1
   0448 EA                 1579 	mov	a,r2
   0449 F0                 1580 	movx	@dptr,a
   044A A3                 1581 	inc	dptr
   044B EB                 1582 	mov	a,r3
   044C F0                 1583 	movx	@dptr,a
   044D 02s00rC1           1584 	ljmp	00223$
                           1585 ;	main.c:172: case '2':
   0450                    1586 00121$:
                           1587 ;	main.c:176: while(1)
                           1588 ;	genAssign
   0450 90s00r0A           1589 	mov	dptr,#_main_countbyte_1_1
   0453 E0                 1590 	movx	a,@dptr
   0454 FA                 1591 	mov	r2,a
   0455 A3                 1592 	inc	dptr
   0456 E0                 1593 	movx	a,@dptr
   0457 FB                 1594 	mov	r3,a
   0458                    1595 00125$:
                           1596 ;	main.c:178: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1597 ;	genIpush
   0458 C0 02              1598 	push	ar2
   045A C0 03              1599 	push	ar3
   045C 74rDF              1600 	mov	a,#__str_16
   045E C0 E0              1601 	push	acc
   0460 74s01              1602 	mov	a,#(__str_16 >> 8)
   0462 C0 E0              1603 	push	acc
                           1604 ;	genCall
   0464 12s00r00           1605 	lcall	_printf_tiny
   0467 15 81              1606 	dec	sp
   0469 15 81              1607 	dec	sp
   046B D0 03              1608 	pop	ar3
   046D D0 02              1609 	pop	ar2
                           1610 ;	main.c:179: printf_tiny("\n\rByte Read\n\r");
                           1611 ;	genIpush
   046F C0 02              1612 	push	ar2
   0471 C0 03              1613 	push	ar3
   0473 74r09              1614 	mov	a,#__str_26
   0475 C0 E0              1615 	push	acc
   0477 74s03              1616 	mov	a,#(__str_26 >> 8)
   0479 C0 E0              1617 	push	acc
                           1618 ;	genCall
   047B 12s00r00           1619 	lcall	_printf_tiny
   047E 15 81              1620 	dec	sp
   0480 15 81              1621 	dec	sp
   0482 D0 03              1622 	pop	ar3
   0484 D0 02              1623 	pop	ar2
                           1624 ;	main.c:180: addr = fetch_addr();            // Fetch address used to fetch the EEPROM address entered by user
                           1625 ;	genCall
   0486 C0 02              1626 	push	ar2
   0488 C0 03              1627 	push	ar3
   048A 12s20r6A           1628 	lcall	_fetch_addr
   048D AC 82              1629 	mov	r4,dpl
   048F D0 03              1630 	pop	ar3
   0491 D0 02              1631 	pop	ar2
                           1632 ;	main.c:181: pageblock = bufsiz[0];
                           1633 ;	genPointerGet
                           1634 ;	genFarPointerGet
   0493 90s00r00           1635 	mov	dptr,#_bufsiz
   0496 E0                 1636 	movx	a,@dptr
   0497 FD                 1637 	mov	r5,a
                           1638 ;	main.c:182: pageblock &= 0x0F;
                           1639 ;	genAnd
   0498 53 05 0F           1640 	anl	ar5,#0x0F
                           1641 ;	genAssign
   049B 90s00r04           1642 	mov	dptr,#_main_pageblock_1_1
   049E ED                 1643 	mov	a,r5
   049F F0                 1644 	movx	@dptr,a
                           1645 ;	main.c:183: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblock);
                           1646 ;	genCast
   04A0 ED                 1647 	mov	a,r5
   04A1 33                 1648 	rlc	a
   04A2 95 E0              1649 	subb	a,acc
   04A4 FE                 1650 	mov	r6,a
                           1651 ;	genIpush
   04A5 C0 02              1652 	push	ar2
   04A7 C0 03              1653 	push	ar3
   04A9 C0 04              1654 	push	ar4
   04AB C0 05              1655 	push	ar5
   04AD C0 06              1656 	push	ar6
                           1657 ;	genIpush
   04AF 74r30              1658 	mov	a,#__str_18
   04B1 C0 E0              1659 	push	acc
   04B3 74s02              1660 	mov	a,#(__str_18 >> 8)
   04B5 C0 E0              1661 	push	acc
                           1662 ;	genCall
   04B7 12s00r00           1663 	lcall	_printf_tiny
   04BA E5 81              1664 	mov	a,sp
   04BC 24 FC              1665 	add	a,#0xfc
   04BE F5 81              1666 	mov	sp,a
   04C0 D0 04              1667 	pop	ar4
   04C2 D0 03              1668 	pop	ar3
   04C4 D0 02              1669 	pop	ar2
                           1670 ;	main.c:184: printf("Address to be read from is: %02x\n\r",(addr & 0xFF));
                           1671 ;	genAssign
   04C6 8C 05              1672 	mov	ar5,r4
                           1673 ;	genCast
   04C8 7E 00              1674 	mov	r6,#0x00
                           1675 ;	genIpush
   04CA C0 02              1676 	push	ar2
   04CC C0 03              1677 	push	ar3
   04CE C0 04              1678 	push	ar4
   04D0 C0 05              1679 	push	ar5
   04D2 C0 06              1680 	push	ar6
                           1681 ;	genIpush
   04D4 74r17              1682 	mov	a,#__str_27
   04D6 C0 E0              1683 	push	acc
   04D8 74s03              1684 	mov	a,#(__str_27 >> 8)
   04DA C0 E0              1685 	push	acc
   04DC 74 80              1686 	mov	a,#0x80
   04DE C0 E0              1687 	push	acc
                           1688 ;	genCall
   04E0 12s00r00           1689 	lcall	_printf
   04E3 E5 81              1690 	mov	a,sp
   04E5 24 FB              1691 	add	a,#0xfb
   04E7 F5 81              1692 	mov	sp,a
   04E9 D0 04              1693 	pop	ar4
   04EB D0 03              1694 	pop	ar3
   04ED D0 02              1695 	pop	ar2
                           1696 ;	main.c:185: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1697 ;	genIpush
   04EF C0 02              1698 	push	ar2
   04F1 C0 03              1699 	push	ar3
   04F3 C0 04              1700 	push	ar4
   04F5 74rDF              1701 	mov	a,#__str_16
   04F7 C0 E0              1702 	push	acc
   04F9 74s01              1703 	mov	a,#(__str_16 >> 8)
   04FB C0 E0              1704 	push	acc
                           1705 ;	genCall
   04FD 12s00r00           1706 	lcall	_printf_tiny
   0500 15 81              1707 	dec	sp
   0502 15 81              1708 	dec	sp
   0504 D0 04              1709 	pop	ar4
   0506 D0 03              1710 	pop	ar3
   0508 D0 02              1711 	pop	ar2
                           1712 ;	main.c:188: readbyte = eebyter(addr,pageblock);
                           1713 ;	genAssign
   050A 90s00r04           1714 	mov	dptr,#_main_pageblock_1_1
   050D E0                 1715 	movx	a,@dptr
                           1716 ;	genAssign
   050E FD                 1717 	mov	r5,a
   050F 90s00r1B           1718 	mov	dptr,#_eebyter_PARM_2
                           1719 ;	Peephole 100	removed redundant mov
   0512 F0                 1720 	movx	@dptr,a
                           1721 ;	genCall
   0513 8C 82              1722 	mov	dpl,r4
   0515 C0 02              1723 	push	ar2
   0517 C0 03              1724 	push	ar3
   0519 12s19r9F           1725 	lcall	_eebyter
   051C AC 82              1726 	mov	r4,dpl
   051E D0 03              1727 	pop	ar3
   0520 D0 02              1728 	pop	ar2
                           1729 ;	main.c:189: printf_tiny("Data Read successful\n\r");
                           1730 ;	genIpush
   0522 C0 02              1731 	push	ar2
   0524 C0 03              1732 	push	ar3
   0526 C0 04              1733 	push	ar4
   0528 74rAD              1734 	mov	a,#__str_22
   052A C0 E0              1735 	push	acc
   052C 74s02              1736 	mov	a,#(__str_22 >> 8)
   052E C0 E0              1737 	push	acc
                           1738 ;	genCall
   0530 12s00r00           1739 	lcall	_printf_tiny
   0533 15 81              1740 	dec	sp
   0535 15 81              1741 	dec	sp
   0537 D0 04              1742 	pop	ar4
   0539 D0 03              1743 	pop	ar3
   053B D0 02              1744 	pop	ar2
                           1745 ;	main.c:190: printf("Data retrieved: %02x",(readbyte & 0xFF));
                           1746 ;	genAssign
                           1747 ;	genCast
   053D 7D 00              1748 	mov	r5,#0x00
                           1749 ;	genIpush
   053F C0 02              1750 	push	ar2
   0541 C0 03              1751 	push	ar3
   0543 C0 04              1752 	push	ar4
   0545 C0 05              1753 	push	ar5
                           1754 ;	genIpush
   0547 74rC4              1755 	mov	a,#__str_23
   0549 C0 E0              1756 	push	acc
   054B 74s02              1757 	mov	a,#(__str_23 >> 8)
   054D C0 E0              1758 	push	acc
   054F 74 80              1759 	mov	a,#0x80
   0551 C0 E0              1760 	push	acc
                           1761 ;	genCall
   0553 12s00r00           1762 	lcall	_printf
   0556 E5 81              1763 	mov	a,sp
   0558 24 FB              1764 	add	a,#0xfb
   055A F5 81              1765 	mov	sp,a
   055C D0 03              1766 	pop	ar3
   055E D0 02              1767 	pop	ar2
                           1768 ;	main.c:191: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1769 ;	genIpush
   0560 C0 02              1770 	push	ar2
   0562 C0 03              1771 	push	ar3
   0564 74rDF              1772 	mov	a,#__str_16
   0566 C0 E0              1773 	push	acc
   0568 74s01              1774 	mov	a,#(__str_16 >> 8)
   056A C0 E0              1775 	push	acc
                           1776 ;	genCall
   056C 12s00r00           1777 	lcall	_printf_tiny
   056F 15 81              1778 	dec	sp
   0571 15 81              1779 	dec	sp
   0573 D0 03              1780 	pop	ar3
   0575 D0 02              1781 	pop	ar2
                           1782 ;	main.c:193: countbyte++;
                           1783 ;	genPlus
                           1784 ;     genPlusIncr
   0577 0A                 1785 	inc	r2
   0578 BA 00 01           1786 	cjne	r2,#0x00,00388$
   057B 0B                 1787 	inc	r3
   057C                    1788 00388$:
                           1789 ;	genAssign
   057C 90s00r0A           1790 	mov	dptr,#_main_countbyte_1_1
   057F EA                 1791 	mov	a,r2
   0580 F0                 1792 	movx	@dptr,a
   0581 A3                 1793 	inc	dptr
   0582 EB                 1794 	mov	a,r3
   0583 F0                 1795 	movx	@dptr,a
                           1796 ;	main.c:194: printf_tiny("Press any key to continue\n\r");
                           1797 ;	genIpush
   0584 C0 02              1798 	push	ar2
   0586 C0 03              1799 	push	ar3
   0588 74rD9              1800 	mov	a,#__str_24
   058A C0 E0              1801 	push	acc
   058C 74s02              1802 	mov	a,#(__str_24 >> 8)
   058E C0 E0              1803 	push	acc
                           1804 ;	genCall
   0590 12s00r00           1805 	lcall	_printf_tiny
   0593 15 81              1806 	dec	sp
   0595 15 81              1807 	dec	sp
   0597 D0 03              1808 	pop	ar3
   0599 D0 02              1809 	pop	ar2
                           1810 ;	main.c:195: printf_tiny("Press 'q' to quit\n\r");
                           1811 ;	genIpush
   059B C0 02              1812 	push	ar2
   059D C0 03              1813 	push	ar3
   059F 74rF5              1814 	mov	a,#__str_25
   05A1 C0 E0              1815 	push	acc
   05A3 74s02              1816 	mov	a,#(__str_25 >> 8)
   05A5 C0 E0              1817 	push	acc
                           1818 ;	genCall
   05A7 12s00r00           1819 	lcall	_printf_tiny
   05AA 15 81              1820 	dec	sp
   05AC 15 81              1821 	dec	sp
   05AE D0 03              1822 	pop	ar3
   05B0 D0 02              1823 	pop	ar2
                           1824 ;	main.c:196: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1825 ;	genIpush
   05B2 C0 02              1826 	push	ar2
   05B4 C0 03              1827 	push	ar3
   05B6 74rDF              1828 	mov	a,#__str_16
   05B8 C0 E0              1829 	push	acc
   05BA 74s01              1830 	mov	a,#(__str_16 >> 8)
   05BC C0 E0              1831 	push	acc
                           1832 ;	genCall
   05BE 12s00r00           1833 	lcall	_printf_tiny
   05C1 15 81              1834 	dec	sp
   05C3 15 81              1835 	dec	sp
   05C5 D0 03              1836 	pop	ar3
   05C7 D0 02              1837 	pop	ar2
                           1838 ;	main.c:197: cond = getchar();
                           1839 ;	genCall
   05C9 C0 02              1840 	push	ar2
   05CB C0 03              1841 	push	ar3
   05CD 12s00r00           1842 	lcall	_getchar
   05D0 AC 82              1843 	mov	r4,dpl
   05D2 D0 03              1844 	pop	ar3
   05D4 D0 02              1845 	pop	ar2
                           1846 ;	main.c:198: if(cond == 'q')
                           1847 ;	genCmpEq
                           1848 ;	gencjneshort
   05D6 BC 71 02           1849 	cjne	r4,#0x71,00389$
   05D9 80 03              1850 	sjmp	00390$
   05DB                    1851 00389$:
   05DB 02s04r58           1852 	ljmp	00125$
   05DE                    1853 00390$:
                           1854 ;	main.c:199: break;
                           1855 ;	genAssign
   05DE 90s00r0A           1856 	mov	dptr,#_main_countbyte_1_1
   05E1 EA                 1857 	mov	a,r2
   05E2 F0                 1858 	movx	@dptr,a
   05E3 A3                 1859 	inc	dptr
   05E4 EB                 1860 	mov	a,r3
   05E5 F0                 1861 	movx	@dptr,a
   05E6 02s00rC1           1862 	ljmp	00223$
                           1863 ;	main.c:205: case '3':
   05E9                    1864 00127$:
                           1865 ;	main.c:208: while(1)
   05E9                    1866 00131$:
                           1867 ;	main.c:210: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1868 ;	genIpush
   05E9 74rDF              1869 	mov	a,#__str_16
   05EB C0 E0              1870 	push	acc
   05ED 74s01              1871 	mov	a,#(__str_16 >> 8)
   05EF C0 E0              1872 	push	acc
                           1873 ;	genCall
   05F1 12s00r00           1874 	lcall	_printf_tiny
   05F4 15 81              1875 	dec	sp
   05F6 15 81              1876 	dec	sp
                           1877 ;	main.c:211: printf_tiny("\n\r----------------------------------------------------\n\r");
                           1878 ;	genIpush
   05F8 74rDF              1879 	mov	a,#__str_16
   05FA C0 E0              1880 	push	acc
   05FC 74s01              1881 	mov	a,#(__str_16 >> 8)
   05FE C0 E0              1882 	push	acc
                           1883 ;	genCall
   0600 12s00r00           1884 	lcall	_printf_tiny
   0603 15 81              1885 	dec	sp
   0605 15 81              1886 	dec	sp
                           1887 ;	main.c:212: printf_tiny("\n\rLCD Display\n\r");
                           1888 ;	genIpush
   0607 74r3A              1889 	mov	a,#__str_28
   0609 C0 E0              1890 	push	acc
   060B 74s03              1891 	mov	a,#(__str_28 >> 8)
   060D C0 E0              1892 	push	acc
                           1893 ;	genCall
   060F 12s00r00           1894 	lcall	_printf_tiny
   0612 15 81              1895 	dec	sp
   0614 15 81              1896 	dec	sp
                           1897 ;	main.c:214: addr = fetch_addr();        // Fetch address used to fetch the EEPROM address entered by user
                           1898 ;	genCall
   0616 12s20r6A           1899 	lcall	_fetch_addr
   0619 AA 82              1900 	mov	r2,dpl
                           1901 ;	main.c:215: pageblock = bufsiz[0];
                           1902 ;	genPointerGet
                           1903 ;	genFarPointerGet
   061B 90s00r00           1904 	mov	dptr,#_bufsiz
   061E E0                 1905 	movx	a,@dptr
   061F FB                 1906 	mov	r3,a
                           1907 ;	main.c:216: pageblock &= 0x0F;
                           1908 ;	genAnd
   0620 53 03 0F           1909 	anl	ar3,#0x0F
                           1910 ;	genAssign
   0623 90s00r04           1911 	mov	dptr,#_main_pageblock_1_1
   0626 EB                 1912 	mov	a,r3
   0627 F0                 1913 	movx	@dptr,a
                           1914 ;	main.c:217: printf_tiny("Pageblock selected is: %x\n\r",pageblock);
                           1915 ;	genCast
   0628 EB                 1916 	mov	a,r3
   0629 33                 1917 	rlc	a
   062A 95 E0              1918 	subb	a,acc
   062C FC                 1919 	mov	r4,a
                           1920 ;	genIpush
   062D C0 02              1921 	push	ar2
   062F C0 03              1922 	push	ar3
   0631 C0 04              1923 	push	ar4
                           1924 ;	genIpush
   0633 74r4A              1925 	mov	a,#__str_29
   0635 C0 E0              1926 	push	acc
   0637 74s03              1927 	mov	a,#(__str_29 >> 8)
   0639 C0 E0              1928 	push	acc
                           1929 ;	genCall
   063B 12s00r00           1930 	lcall	_printf_tiny
   063E E5 81              1931 	mov	a,sp
   0640 24 FC              1932 	add	a,#0xfc
   0642 F5 81              1933 	mov	sp,a
   0644 D0 02              1934 	pop	ar2
                           1935 ;	main.c:218: printf("Address to be read is: %02x\n\r",(addr & 0xFF));
                           1936 ;	genAssign
   0646 8A 03              1937 	mov	ar3,r2
                           1938 ;	genCast
   0648 7C 00              1939 	mov	r4,#0x00
                           1940 ;	genIpush
   064A C0 02              1941 	push	ar2
   064C C0 03              1942 	push	ar3
   064E C0 04              1943 	push	ar4
                           1944 ;	genIpush
   0650 74r66              1945 	mov	a,#__str_30
   0652 C0 E0              1946 	push	acc
   0654 74s03              1947 	mov	a,#(__str_30 >> 8)
   0656 C0 E0              1948 	push	acc
   0658 74 80              1949 	mov	a,#0x80
   065A C0 E0              1950 	push	acc
                           1951 ;	genCall
   065C 12s00r00           1952 	lcall	_printf
   065F E5 81              1953 	mov	a,sp
   0661 24 FB              1954 	add	a,#0xfb
   0663 F5 81              1955 	mov	sp,a
   0665 D0 02              1956 	pop	ar2
                           1957 ;	main.c:221: readbyte = eebyter(addr,pageblock);
                           1958 ;	genAssign
   0667 90s00r04           1959 	mov	dptr,#_main_pageblock_1_1
   066A E0                 1960 	movx	a,@dptr
                           1961 ;	genAssign
   066B FB                 1962 	mov	r3,a
   066C 90s00r1B           1963 	mov	dptr,#_eebyter_PARM_2
                           1964 ;	Peephole 100	removed redundant mov
   066F F0                 1965 	movx	@dptr,a
                           1966 ;	genCall
   0670 8A 82              1967 	mov	dpl,r2
   0672 C0 02              1968 	push	ar2
   0674 C0 03              1969 	push	ar3
   0676 12s19r9F           1970 	lcall	_eebyter
   0679 AC 82              1971 	mov	r4,dpl
   067B D0 03              1972 	pop	ar3
   067D D0 02              1973 	pop	ar2
                           1974 ;	main.c:222: lcdprint(addr,pageblock,readbyte);
                           1975 ;	genAssign
   067F 90s00r2A           1976 	mov	dptr,#_lcdprint_PARM_2
   0682 EB                 1977 	mov	a,r3
   0683 F0                 1978 	movx	@dptr,a
                           1979 ;	genAssign
   0684 90s00r2B           1980 	mov	dptr,#_lcdprint_PARM_3
   0687 EC                 1981 	mov	a,r4
   0688 F0                 1982 	movx	@dptr,a
                           1983 ;	genCall
   0689 8A 82              1984 	mov	dpl,r2
   068B 12s1Er46           1985 	lcall	_lcdprint
                           1986 ;	main.c:224: printf_tiny("Press any key to continue\n\r");
                           1987 ;	genIpush
   068E 74rD9              1988 	mov	a,#__str_24
   0690 C0 E0              1989 	push	acc
   0692 74s02              1990 	mov	a,#(__str_24 >> 8)
   0694 C0 E0              1991 	push	acc
                           1992 ;	genCall
   0696 12s00r00           1993 	lcall	_printf_tiny
   0699 15 81              1994 	dec	sp
   069B 15 81              1995 	dec	sp
                           1996 ;	main.c:225: printf_tiny("Press 'q' to quit\n\r");
                           1997 ;	genIpush
   069D 74rF5              1998 	mov	a,#__str_25
   069F C0 E0              1999 	push	acc
   06A1 74s02              2000 	mov	a,#(__str_25 >> 8)
   06A3 C0 E0              2001 	push	acc
                           2002 ;	genCall
   06A5 12s00r00           2003 	lcall	_printf_tiny
   06A8 15 81              2004 	dec	sp
   06AA 15 81              2005 	dec	sp
                           2006 ;	main.c:226: printf_tiny("\n\r----------------------------------------------------\n\r");
                           2007 ;	genIpush
   06AC 74rDF              2008 	mov	a,#__str_16
   06AE C0 E0              2009 	push	acc
   06B0 74s01              2010 	mov	a,#(__str_16 >> 8)
   06B2 C0 E0              2011 	push	acc
                           2012 ;	genCall
   06B4 12s00r00           2013 	lcall	_printf_tiny
   06B7 15 81              2014 	dec	sp
   06B9 15 81              2015 	dec	sp
                           2016 ;	main.c:227: cond = getchar();
                           2017 ;	genCall
   06BB 12s00r00           2018 	lcall	_getchar
   06BE AA 82              2019 	mov	r2,dpl
                           2020 ;	main.c:228: if(cond == 'q')
                           2021 ;	genCmpEq
                           2022 ;	gencjneshort
   06C0 BA 71 02           2023 	cjne	r2,#0x71,00391$
   06C3 80 03              2024 	sjmp	00392$
   06C5                    2025 00391$:
   06C5 02s05rE9           2026 	ljmp	00131$
   06C8                    2027 00392$:
                           2028 ;	main.c:229: break;
   06C8 02s00rC1           2029 	ljmp	00223$
                           2030 ;	main.c:235: case '4':
   06CB                    2031 00133$:
                           2032 ;	main.c:238: while(1)
   06CB                    2033 00157$:
                           2034 ;	main.c:240: printf_tiny("\n\r----------------------------------------------------\n\r");
                           2035 ;	genIpush
   06CB 74rDF              2036 	mov	a,#__str_16
   06CD C0 E0              2037 	push	acc
   06CF 74s01              2038 	mov	a,#(__str_16 >> 8)
   06D1 C0 E0              2039 	push	acc
                           2040 ;	genCall
   06D3 12s00r00           2041 	lcall	_printf_tiny
   06D6 15 81              2042 	dec	sp
   06D8 15 81              2043 	dec	sp
                           2044 ;	main.c:241: printf_tiny("EEPROM HEX DUMP DISPLAY\n\r");
                           2045 ;	genIpush
   06DA 74r84              2046 	mov	a,#__str_31
   06DC C0 E0              2047 	push	acc
   06DE 74s03              2048 	mov	a,#(__str_31 >> 8)
   06E0 C0 E0              2049 	push	acc
                           2050 ;	genCall
   06E2 12s00r00           2051 	lcall	_printf_tiny
   06E5 15 81              2052 	dec	sp
   06E7 15 81              2053 	dec	sp
                           2054 ;	main.c:242: printf_tiny("Enter start address for hex dump display\n\r");
                           2055 ;	genIpush
   06E9 74r9E              2056 	mov	a,#__str_32
   06EB C0 E0              2057 	push	acc
   06ED 74s03              2058 	mov	a,#(__str_32 >> 8)
   06EF C0 E0              2059 	push	acc
                           2060 ;	genCall
   06F1 12s00r00           2061 	lcall	_printf_tiny
   06F4 15 81              2062 	dec	sp
   06F6 15 81              2063 	dec	sp
                           2064 ;	main.c:243: startaddr = fetch_addr();               // Fetch start address used to fetch the EEPROM address entered by user
                           2065 ;	genCall
   06F8 12s20r6A           2066 	lcall	_fetch_addr
                           2067 ;	main.c:245: printf_tiny("Start address: %x\n\r",startaddr);
                           2068 ;	genCast
                           2069 ;	peephole 177.h	optimized mov sequence
                           2070 ;	Peephole 244.a	moving first to a instead of r2
   06FB E5 82              2071 	mov	a,dpl
   06FD FA                 2072 	mov	r2,a
                           2073 ;	Peephole 236.i	used r3 instead of ar3
   06FE FB                 2074 	mov	r3,a
   06FF 33                 2075 	rlc	a
   0700 95 E0              2076 	subb	a,acc
   0702 FC                 2077 	mov	r4,a
                           2078 ;	genIpush
   0703 C0 02              2079 	push	ar2
   0705 C0 03              2080 	push	ar3
   0707 C0 04              2081 	push	ar4
   0709 C0 03              2082 	push	ar3
   070B C0 04              2083 	push	ar4
                           2084 ;	genIpush
   070D 74rC9              2085 	mov	a,#__str_33
   070F C0 E0              2086 	push	acc
   0711 74s03              2087 	mov	a,#(__str_33 >> 8)
   0713 C0 E0              2088 	push	acc
                           2089 ;	genCall
   0715 12s00r00           2090 	lcall	_printf_tiny
   0718 E5 81              2091 	mov	a,sp
   071A 24 FC              2092 	add	a,#0xfc
   071C F5 81              2093 	mov	sp,a
   071E D0 04              2094 	pop	ar4
   0720 D0 03              2095 	pop	ar3
   0722 D0 02              2096 	pop	ar2
                           2097 ;	main.c:246: pageblock = bufsiz[0];
                           2098 ;	genPointerGet
                           2099 ;	genFarPointerGet
   0724 90s00r00           2100 	mov	dptr,#_bufsiz
   0727 E0                 2101 	movx	a,@dptr
   0728 FD                 2102 	mov	r5,a
                           2103 ;	main.c:247: pageblock &= 0x0F;
                           2104 ;	genAnd
   0729 90s00r04           2105 	mov	dptr,#_main_pageblock_1_1
   072C 74 0F              2106 	mov	a,#0x0F
   072E 5D                 2107 	anl	a,r5
   072F F0                 2108 	movx	@dptr,a
                           2109 ;	main.c:248: printf_tiny("Enter end address for hex dump display\n\r");
                           2110 ;	genIpush
   0730 C0 02              2111 	push	ar2
   0732 C0 03              2112 	push	ar3
   0734 C0 04              2113 	push	ar4
   0736 74rDD              2114 	mov	a,#__str_34
   0738 C0 E0              2115 	push	acc
   073A 74s03              2116 	mov	a,#(__str_34 >> 8)
   073C C0 E0              2117 	push	acc
                           2118 ;	genCall
   073E 12s00r00           2119 	lcall	_printf_tiny
   0741 15 81              2120 	dec	sp
   0743 15 81              2121 	dec	sp
   0745 D0 04              2122 	pop	ar4
   0747 D0 03              2123 	pop	ar3
   0749 D0 02              2124 	pop	ar2
                           2125 ;	main.c:249: endaddr = fetch_addr();                 // Fetch end address used to fetch the EEPROM address entered by user
                           2126 ;	genCall
   074B C0 02              2127 	push	ar2
   074D C0 03              2128 	push	ar3
   074F C0 04              2129 	push	ar4
   0751 12s20r6A           2130 	lcall	_fetch_addr
   0754 AD 82              2131 	mov	r5,dpl
   0756 D0 04              2132 	pop	ar4
   0758 D0 03              2133 	pop	ar3
   075A D0 02              2134 	pop	ar2
                           2135 ;	main.c:251: printf_tiny("End address: %x\n\r",endaddr);
                           2136 ;	genCast
                           2137 ;	peephole 177.h	optimized mov sequence
   075C ED                 2138 	mov	a,r5
                           2139 ;	Peephole 236.i	used r6 instead of ar6
   075D FE                 2140 	mov	r6,a
   075E 33                 2141 	rlc	a
   075F 95 E0              2142 	subb	a,acc
   0761 FF                 2143 	mov	r7,a
                           2144 ;	genIpush
   0762 C0 02              2145 	push	ar2
   0764 C0 03              2146 	push	ar3
   0766 C0 04              2147 	push	ar4
   0768 C0 05              2148 	push	ar5
   076A C0 06              2149 	push	ar6
   076C C0 07              2150 	push	ar7
                           2151 ;	genIpush
   076E 74r06              2152 	mov	a,#__str_35
   0770 C0 E0              2153 	push	acc
   0772 74s04              2154 	mov	a,#(__str_35 >> 8)
   0774 C0 E0              2155 	push	acc
                           2156 ;	genCall
   0776 12s00r00           2157 	lcall	_printf_tiny
   0779 E5 81              2158 	mov	a,sp
   077B 24 FC              2159 	add	a,#0xfc
   077D F5 81              2160 	mov	sp,a
   077F D0 05              2161 	pop	ar5
   0781 D0 04              2162 	pop	ar4
   0783 D0 03              2163 	pop	ar3
   0785 D0 02              2164 	pop	ar2
                           2165 ;	main.c:252: pageblockw = bufsiz[0];
                           2166 ;	genPointerGet
                           2167 ;	genFarPointerGet
   0787 90s00r00           2168 	mov	dptr,#_bufsiz
   078A E0                 2169 	movx	a,@dptr
   078B FE                 2170 	mov	r6,a
                           2171 ;	main.c:253: pageblockw &= 0x0F;
                           2172 ;	genAnd
   078C 90s00r05           2173 	mov	dptr,#_main_pageblockw_1_1
   078F 74 0F              2174 	mov	a,#0x0F
   0791 5E                 2175 	anl	a,r6
   0792 F0                 2176 	movx	@dptr,a
                           2177 ;	main.c:255: printf_tiny("Range: %x\n\r",((endaddr & 0xFF)-(startaddr & 0xFF)));
                           2178 ;	genAssign
   0793 8D 06              2179 	mov	ar6,r5
                           2180 ;	genCast
   0795 7F 00              2181 	mov	r7,#0x00
                           2182 ;	genAssign
   0797 8A 00              2183 	mov	ar0,r2
                           2184 ;	genCast
   0799 79 00              2185 	mov	r1,#0x00
                           2186 ;	genMinus
   079B EE                 2187 	mov	a,r6
   079C C3                 2188 	clr	c
                           2189 ;	Peephole 236.l	used r0 instead of ar0
   079D 98                 2190 	subb	a,r0
   079E FE                 2191 	mov	r6,a
   079F EF                 2192 	mov	a,r7
                           2193 ;	Peephole 236.l	used r1 instead of ar1
   07A0 99                 2194 	subb	a,r1
   07A1 FF                 2195 	mov	r7,a
                           2196 ;	genIpush
   07A2 C0 02              2197 	push	ar2
   07A4 C0 03              2198 	push	ar3
   07A6 C0 04              2199 	push	ar4
   07A8 C0 05              2200 	push	ar5
   07AA C0 06              2201 	push	ar6
   07AC C0 07              2202 	push	ar7
                           2203 ;	genIpush
   07AE 74r18              2204 	mov	a,#__str_36
   07B0 C0 E0              2205 	push	acc
   07B2 74s04              2206 	mov	a,#(__str_36 >> 8)
   07B4 C0 E0              2207 	push	acc
                           2208 ;	genCall
   07B6 12s00r00           2209 	lcall	_printf_tiny
   07B9 E5 81              2210 	mov	a,sp
   07BB 24 FC              2211 	add	a,#0xfc
   07BD F5 81              2212 	mov	sp,a
   07BF D0 05              2213 	pop	ar5
   07C1 D0 04              2214 	pop	ar4
   07C3 D0 03              2215 	pop	ar3
   07C5 D0 02              2216 	pop	ar2
                           2217 ;	main.c:258: s=0;
                           2218 ;	genAssign
   07C7 90s00r08           2219 	mov	dptr,#_main_s_1_1
   07CA E4                 2220 	clr	a
   07CB F0                 2221 	movx	@dptr,a
   07CC A3                 2222 	inc	dptr
   07CD F0                 2223 	movx	@dptr,a
                           2224 ;	main.c:260: if(pageblock == pageblockw)
                           2225 ;	genAssign
   07CE 90s00r04           2226 	mov	dptr,#_main_pageblock_1_1
   07D1 E0                 2227 	movx	a,@dptr
   07D2 FE                 2228 	mov	r6,a
                           2229 ;	genAssign
   07D3 90s00r05           2230 	mov	dptr,#_main_pageblockw_1_1
   07D6 E0                 2231 	movx	a,@dptr
   07D7 FF                 2232 	mov	r7,a
                           2233 ;	genCmpEq
                           2234 ;	gencjneshort
   07D8 EE                 2235 	mov	a,r6
   07D9 B5 07 02           2236 	cjne	a,ar7,00393$
   07DC 80 03              2237 	sjmp	00394$
   07DE                    2238 00393$:
   07DE 02s09r80           2239 	ljmp	00152$
   07E1                    2240 00394$:
                           2241 ;	main.c:262: printf("\n\r0%x%02x: ",(pageblock & 0x0F),(startaddr & 0xFF));
                           2242 ;	genIpush
   07E1 C0 05              2243 	push	ar5
                           2244 ;	genAssign
   07E3 8A 00              2245 	mov	ar0,r2
                           2246 ;	genCast
   07E5 79 00              2247 	mov	r1,#0x00
                           2248 ;	genAnd
   07E7 53 06 0F           2249 	anl	ar6,#0x0F
                           2250 ;	genCast
   07EA 7D 00              2251 	mov	r5,#0x00
                           2252 ;	genIpush
   07EC C0 02              2253 	push	ar2
   07EE C0 03              2254 	push	ar3
   07F0 C0 04              2255 	push	ar4
   07F2 C0 05              2256 	push	ar5
   07F4 C0 07              2257 	push	ar7
   07F6 C0 00              2258 	push	ar0
   07F8 C0 01              2259 	push	ar1
                           2260 ;	genIpush
   07FA C0 06              2261 	push	ar6
   07FC C0 05              2262 	push	ar5
                           2263 ;	genIpush
   07FE 74r24              2264 	mov	a,#__str_37
   0800 C0 E0              2265 	push	acc
   0802 74s04              2266 	mov	a,#(__str_37 >> 8)
   0804 C0 E0              2267 	push	acc
   0806 74 80              2268 	mov	a,#0x80
   0808 C0 E0              2269 	push	acc
                           2270 ;	genCall
   080A 12s00r00           2271 	lcall	_printf
   080D E5 81              2272 	mov	a,sp
   080F 24 F9              2273 	add	a,#0xf9
   0811 F5 81              2274 	mov	sp,a
   0813 D0 07              2275 	pop	ar7
   0815 D0 05              2276 	pop	ar5
   0817 D0 04              2277 	pop	ar4
   0819 D0 03              2278 	pop	ar3
   081B D0 02              2279 	pop	ar2
                           2280 ;	main.c:711: }
                           2281 ;	genIpop
   081D D0 05              2282 	pop	ar5
                           2283 ;	main.c:263: for(i=0;i<=((endaddr & 0xFF)-(startaddr & 0xFF));i++)
                           2284 ;	genAssign
   081F 8F*03              2285 	mov	_main_sloc2_1_0,r7
                           2286 ;	genAnd
   0821 74 0F              2287 	mov	a,#0x0F
   0823 5F                 2288 	anl	a,r7
   0824 F5*07              2289 	mov	_main_sloc5_1_0,a
                           2290 ;	genAssign
   0826 8D 07              2291 	mov	ar7,r5
                           2292 ;	genAssign
   0828 8A*00              2293 	mov	_main_sloc0_1_0,r2
                           2294 ;	genAssign
   082A E4                 2295 	clr	a
   082B F5*01              2296 	mov	_main_sloc1_1_0,a
   082D F5*02              2297 	mov	(_main_sloc1_1_0 + 1),a
   082F                    2298 00225$:
                           2299 ;	genIpush
                           2300 ;	genCast
   082F 8F 05              2301 	mov	ar5,r7
   0831 78 00              2302 	mov	r0,#0x00
                           2303 ;	genCast
   0833 A9*00              2304 	mov	r1,_main_sloc0_1_0
   0835 7E 00              2305 	mov	r6,#0x00
                           2306 ;	genMinus
   0837 ED                 2307 	mov	a,r5
   0838 C3                 2308 	clr	c
                           2309 ;	Peephole 236.l	used r1 instead of ar1
   0839 99                 2310 	subb	a,r1
   083A F9                 2311 	mov	r1,a
   083B E8                 2312 	mov	a,r0
                           2313 ;	Peephole 236.l	used r6 instead of ar6
   083C 9E                 2314 	subb	a,r6
   083D FE                 2315 	mov	r6,a
                           2316 ;	genCmpGt
                           2317 ;	genCmp
   083E C3                 2318 	clr	c
   083F E9                 2319 	mov	a,r1
   0840 95*01              2320 	subb	a,_main_sloc1_1_0
   0842 EE                 2321 	mov	a,r6
   0843 64 80              2322 	xrl	a,#0x80
   0845 85*02 F0           2323 	mov	b,(_main_sloc1_1_0 + 1)
   0848 63 F0 80           2324 	xrl	b,#0x80
   084B 95 F0              2325 	subb	a,b
                           2326 ;	genIpop
                           2327 ;	genIfx
                           2328 ;	genIfxJump
                           2329 ;	Peephole 128	jump optimization
   084D 50 03              2330 	jnc	00395$
   084F 02s0CrE2           2331 	ljmp	00153$
   0852                    2332 00395$:
                           2333 ;	main.c:265: readbyte = eebyter(startaddr+i,pageblockw);
                           2334 ;	genIpush
                           2335 ;	genCast
   0852 AE*01              2336 	mov	r6,_main_sloc1_1_0
                           2337 ;	genPlus
                           2338 ;	Peephole 236.g	used r6 instead of ar6
   0854 EE                 2339 	mov	a,r6
                           2340 ;	Peephole 236.a	used r2 instead of ar2
   0855 2A                 2341 	add	a,r2
   0856 FE                 2342 	mov	r6,a
                           2343 ;	genAssign
   0857 90s00r1B           2344 	mov	dptr,#_eebyter_PARM_2
   085A E5*03              2345 	mov	a,_main_sloc2_1_0
   085C F0                 2346 	movx	@dptr,a
                           2347 ;	genCall
   085D 8E 82              2348 	mov	dpl,r6
   085F C0 02              2349 	push	ar2
   0861 C0 03              2350 	push	ar3
   0863 C0 04              2351 	push	ar4
   0865 C0 07              2352 	push	ar7
   0867 12s19r9F           2353 	lcall	_eebyter
   086A AE 82              2354 	mov	r6,dpl
   086C D0 07              2355 	pop	ar7
   086E D0 04              2356 	pop	ar4
   0870 D0 03              2357 	pop	ar3
   0872 D0 02              2358 	pop	ar2
                           2359 ;	main.c:266: s++;
                           2360 ;	genAssign
   0874 90s00r08           2361 	mov	dptr,#_main_s_1_1
   0877 E0                 2362 	movx	a,@dptr
   0878 F9                 2363 	mov	r1,a
   0879 A3                 2364 	inc	dptr
   087A E0                 2365 	movx	a,@dptr
   087B F8                 2366 	mov	r0,a
                           2367 ;	genPlus
   087C 90s00r08           2368 	mov	dptr,#_main_s_1_1
                           2369 ;     genPlusIncr
   087F 74 01              2370 	mov	a,#0x01
                           2371 ;	Peephole 236.a	used r1 instead of ar1
   0881 29                 2372 	add	a,r1
   0882 F0                 2373 	movx	@dptr,a
                           2374 ;	Peephole 181	changed mov to clr
   0883 E4                 2375 	clr	a
                           2376 ;	Peephole 236.b	used r0 instead of ar0
   0884 38                 2377 	addc	a,r0
   0885 A3                 2378 	inc	dptr
   0886 F0                 2379 	movx	@dptr,a
                           2380 ;	main.c:267: if(s < 17)
                           2381 ;	genAssign
   0887 90s00r08           2382 	mov	dptr,#_main_s_1_1
   088A E0                 2383 	movx	a,@dptr
   088B F8                 2384 	mov	r0,a
   088C A3                 2385 	inc	dptr
   088D E0                 2386 	movx	a,@dptr
   088E F9                 2387 	mov	r1,a
                           2388 ;	genCmpLt
                           2389 ;	genCmp
   088F C3                 2390 	clr	c
   0890 E8                 2391 	mov	a,r0
   0891 94 11              2392 	subb	a,#0x11
   0893 E9                 2393 	mov	a,r1
   0894 64 80              2394 	xrl	a,#0x80
   0896 94 80              2395 	subb	a,#0x80
                           2396 ;	genIpop
                           2397 ;	genIfx
                           2398 ;	genIfxJump
                           2399 ;	Peephole 108.c	removed ljmp by inverse jump logic
                           2400 ;	Peephole 128	jump optimization
   0898 50 30              2401 	jnc	00135$
                           2402 ;	Peephole 300	removed redundant label 00396$
                           2403 ;	main.c:269: printf("0x%02x  ",(readbyte & 0xFF));
                           2404 ;	genIpush
                           2405 ;	genAssign
   089A 8E 01              2406 	mov	ar1,r6
                           2407 ;	genCast
   089C 78 00              2408 	mov	r0,#0x00
                           2409 ;	genIpush
   089E C0 02              2410 	push	ar2
   08A0 C0 03              2411 	push	ar3
   08A2 C0 04              2412 	push	ar4
   08A4 C0 07              2413 	push	ar7
   08A6 C0 01              2414 	push	ar1
   08A8 C0 00              2415 	push	ar0
                           2416 ;	genIpush
   08AA 74r30              2417 	mov	a,#__str_38
   08AC C0 E0              2418 	push	acc
   08AE 74s04              2419 	mov	a,#(__str_38 >> 8)
   08B0 C0 E0              2420 	push	acc
   08B2 74 80              2421 	mov	a,#0x80
   08B4 C0 E0              2422 	push	acc
                           2423 ;	genCall
   08B6 12s00r00           2424 	lcall	_printf
   08B9 E5 81              2425 	mov	a,sp
   08BB 24 FB              2426 	add	a,#0xfb
   08BD F5 81              2427 	mov	sp,a
   08BF D0 07              2428 	pop	ar7
   08C1 D0 04              2429 	pop	ar4
   08C3 D0 03              2430 	pop	ar3
   08C5 D0 02              2431 	pop	ar2
                           2432 ;	genIpop
   08C7 02s09r75           2433 	ljmp	00227$
   08CA                    2434 00135$:
                           2435 ;	main.c:274: putchar('\n');
                           2436 ;	genIpush
   08CA C0 02              2437 	push	ar2
                           2438 ;	genCall
   08CC 75 82 0A           2439 	mov	dpl,#0x0A
   08CF C0 02              2440 	push	ar2
   08D1 C0 03              2441 	push	ar3
   08D3 C0 04              2442 	push	ar4
   08D5 C0 06              2443 	push	ar6
   08D7 C0 07              2444 	push	ar7
   08D9 12s00r00           2445 	lcall	_putchar
   08DC D0 07              2446 	pop	ar7
   08DE D0 06              2447 	pop	ar6
   08E0 D0 04              2448 	pop	ar4
   08E2 D0 03              2449 	pop	ar3
   08E4 D0 02              2450 	pop	ar2
                           2451 ;	main.c:275: putchar('\r');
                           2452 ;	genCall
   08E6 75 82 0D           2453 	mov	dpl,#0x0D
   08E9 C0 02              2454 	push	ar2
   08EB C0 03              2455 	push	ar3
   08ED C0 04              2456 	push	ar4
   08EF C0 06              2457 	push	ar6
   08F1 C0 07              2458 	push	ar7
   08F3 12s00r00           2459 	lcall	_putchar
   08F6 D0 07              2460 	pop	ar7
   08F8 D0 06              2461 	pop	ar6
   08FA D0 04              2462 	pop	ar4
   08FC D0 03              2463 	pop	ar3
   08FE D0 02              2464 	pop	ar2
                           2465 ;	main.c:276: s = 1;
                           2466 ;	genAssign
   0900 90s00r08           2467 	mov	dptr,#_main_s_1_1
   0903 74 01              2468 	mov	a,#0x01
   0905 F0                 2469 	movx	@dptr,a
   0906 E4                 2470 	clr	a
   0907 A3                 2471 	inc	dptr
   0908 F0                 2472 	movx	@dptr,a
                           2473 ;	main.c:277: printf("\n\r0%x%02x: ",(pageblockw & 0x0F),((startaddr+i) & 0xFF));
                           2474 ;	genPlus
   0909 E5*01              2475 	mov	a,_main_sloc1_1_0
                           2476 ;	Peephole 236.a	used r3 instead of ar3
   090B 2B                 2477 	add	a,r3
   090C F9                 2478 	mov	r1,a
   090D E5*02              2479 	mov	a,(_main_sloc1_1_0 + 1)
                           2480 ;	Peephole 236.b	used r4 instead of ar4
   090F 3C                 2481 	addc	a,r4
   0910 FA                 2482 	mov	r2,a
                           2483 ;	genAnd
   0911 7D 00              2484 	mov	r5,#0x00
                           2485 ;	genCast
   0913 A8*07              2486 	mov	r0,_main_sloc5_1_0
   0915 7A 00              2487 	mov	r2,#0x00
                           2488 ;	genIpush
   0917 C0 02              2489 	push	ar2
   0919 C0 03              2490 	push	ar3
   091B C0 04              2491 	push	ar4
   091D C0 06              2492 	push	ar6
   091F C0 07              2493 	push	ar7
   0921 C0 01              2494 	push	ar1
   0923 C0 05              2495 	push	ar5
                           2496 ;	genIpush
   0925 C0 00              2497 	push	ar0
   0927 C0 02              2498 	push	ar2
                           2499 ;	genIpush
   0929 74r24              2500 	mov	a,#__str_37
   092B C0 E0              2501 	push	acc
   092D 74s04              2502 	mov	a,#(__str_37 >> 8)
   092F C0 E0              2503 	push	acc
   0931 74 80              2504 	mov	a,#0x80
   0933 C0 E0              2505 	push	acc
                           2506 ;	genCall
   0935 12s00r00           2507 	lcall	_printf
   0938 E5 81              2508 	mov	a,sp
   093A 24 F9              2509 	add	a,#0xf9
   093C F5 81              2510 	mov	sp,a
   093E D0 07              2511 	pop	ar7
   0940 D0 06              2512 	pop	ar6
   0942 D0 04              2513 	pop	ar4
   0944 D0 03              2514 	pop	ar3
   0946 D0 02              2515 	pop	ar2
                           2516 ;	main.c:278: printf("0x%02x  ",(readbyte & 0xFF));
                           2517 ;	genAssign
                           2518 ;	genCast
   0948 7A 00              2519 	mov	r2,#0x00
                           2520 ;	genIpush
   094A C0 02              2521 	push	ar2
   094C C0 03              2522 	push	ar3
   094E C0 04              2523 	push	ar4
   0950 C0 07              2524 	push	ar7
   0952 C0 06              2525 	push	ar6
   0954 C0 02              2526 	push	ar2
                           2527 ;	genIpush
   0956 74r30              2528 	mov	a,#__str_38
   0958 C0 E0              2529 	push	acc
   095A 74s04              2530 	mov	a,#(__str_38 >> 8)
   095C C0 E0              2531 	push	acc
   095E 74 80              2532 	mov	a,#0x80
   0960 C0 E0              2533 	push	acc
                           2534 ;	genCall
   0962 12s00r00           2535 	lcall	_printf
   0965 E5 81              2536 	mov	a,sp
   0967 24 FB              2537 	add	a,#0xfb
   0969 F5 81              2538 	mov	sp,a
   096B D0 07              2539 	pop	ar7
   096D D0 04              2540 	pop	ar4
   096F D0 03              2541 	pop	ar3
   0971 D0 02              2542 	pop	ar2
                           2543 ;	main.c:711: }
                           2544 ;	genIpop
   0973 D0 02              2545 	pop	ar2
                           2546 ;	main.c:278: printf("0x%02x  ",(readbyte & 0xFF));
   0975                    2547 00227$:
                           2548 ;	main.c:263: for(i=0;i<=((endaddr & 0xFF)-(startaddr & 0xFF));i++)
                           2549 ;	genPlus
                           2550 ;     genPlusIncr
   0975 05*01              2551 	inc	_main_sloc1_1_0
   0977 E4                 2552 	clr	a
   0978 B5*01 02           2553 	cjne	a,_main_sloc1_1_0,00397$
   097B 05*02              2554 	inc	(_main_sloc1_1_0 + 1)
   097D                    2555 00397$:
   097D 02s08r2F           2556 	ljmp	00225$
   0980                    2557 00152$:
                           2558 ;	main.c:286: printf("\n\r0%x%02x: ",(pcount & 0x0F),(startaddr & 0xFF));
                           2559 ;	genIpush
   0980 C0 05              2560 	push	ar5
                           2561 ;	genAssign
   0982 8A 06              2562 	mov	ar6,r2
                           2563 ;	genCast
   0984 8E*05              2564 	mov	_main_sloc4_1_0,r6
   0986 75*06 00           2565 	mov	(_main_sloc4_1_0 + 1),#0x00
                           2566 ;	genAssign
   0989 90s00r06           2567 	mov	dptr,#_main_pcount_1_1
   098C E0                 2568 	movx	a,@dptr
   098D F9                 2569 	mov	r1,a
                           2570 ;	genAnd
   098E 74 0F              2571 	mov	a,#0x0F
   0990 59                 2572 	anl	a,r1
   0991 FD                 2573 	mov	r5,a
                           2574 ;	genCast
   0992 7E 00              2575 	mov	r6,#0x00
                           2576 ;	genIpush
   0994 C0 02              2577 	push	ar2
   0996 C0 03              2578 	push	ar3
   0998 C0 04              2579 	push	ar4
   099A C0 05              2580 	push	ar5
   099C C0 07              2581 	push	ar7
   099E C0 01              2582 	push	ar1
   09A0 C0*05              2583 	push	_main_sloc4_1_0
   09A2 C0*06              2584 	push	(_main_sloc4_1_0 + 1)
                           2585 ;	genIpush
   09A4 C0 05              2586 	push	ar5
   09A6 C0 06              2587 	push	ar6
                           2588 ;	genIpush
   09A8 74r24              2589 	mov	a,#__str_37
   09AA C0 E0              2590 	push	acc
   09AC 74s04              2591 	mov	a,#(__str_37 >> 8)
   09AE C0 E0              2592 	push	acc
   09B0 74 80              2593 	mov	a,#0x80
   09B2 C0 E0              2594 	push	acc
                           2595 ;	genCall
   09B4 12s00r00           2596 	lcall	_printf
   09B7 E5 81              2597 	mov	a,sp
   09B9 24 F9              2598 	add	a,#0xf9
   09BB F5 81              2599 	mov	sp,a
   09BD D0 01              2600 	pop	ar1
   09BF D0 07              2601 	pop	ar7
   09C1 D0 05              2602 	pop	ar5
   09C3 D0 04              2603 	pop	ar4
   09C5 D0 03              2604 	pop	ar3
   09C7 D0 02              2605 	pop	ar2
                           2606 ;	main.c:711: }
                           2607 ;	genIpop
   09C9 D0 05              2608 	pop	ar5
                           2609 ;	main.c:287: while(pcount<=pageblockw)
                           2610 ;	genAssign
   09CB 8F*08              2611 	mov	_main_sloc6_1_0,r7
                           2612 ;	genAnd
   09CD 74 0F              2613 	mov	a,#0x0F
   09CF 5F                 2614 	anl	a,r7
   09D0 F5*00              2615 	mov	_main_sloc0_1_0,a
                           2616 ;	genAssign
   09D2 8D*09              2617 	mov	_main_sloc7_1_0,r5
                           2618 ;	genAssign
   09D4 8A*07              2619 	mov	_main_sloc5_1_0,r2
                           2620 ;	genAssign
                           2621 ;	genAssign
   09D6                    2622 00148$:
                           2623 ;	genCmpGt
                           2624 ;	genCmp
   09D6 C3                 2625 	clr	c
   09D7 EF                 2626 	mov	a,r7
   09D8 64 80              2627 	xrl	a,#0x80
   09DA 89 F0              2628 	mov	b,r1
   09DC 63 F0 80           2629 	xrl	b,#0x80
   09DF 95 F0              2630 	subb	a,b
                           2631 ;	genIfxJump
   09E1 50 03              2632 	jnc	00398$
   09E3 02s0CrDD           2633 	ljmp	00370$
   09E6                    2634 00398$:
                           2635 ;	main.c:290: if(pcount<pageblockw)
                           2636 ;	genCmpLt
                           2637 ;	genCmp
   09E6 C3                 2638 	clr	c
   09E7 E9                 2639 	mov	a,r1
   09E8 64 80              2640 	xrl	a,#0x80
   09EA 8F F0              2641 	mov	b,r7
   09EC 63 F0 80           2642 	xrl	b,#0x80
   09EF 95 F0              2643 	subb	a,b
                           2644 ;	genIfxJump
   09F1 40 03              2645 	jc	00399$
   09F3 02s0Br54           2646 	ljmp	00146$
   09F6                    2647 00399$:
                           2648 ;	main.c:292: for(i=0;i<256;i++)
                           2649 ;	genAssign
   09F6 89*05              2650 	mov	_main_sloc4_1_0,r1
                           2651 ;	genAnd
   09F8 74 0F              2652 	mov	a,#0x0F
   09FA 59                 2653 	anl	a,r1
   09FB F5*04              2654 	mov	_main_sloc3_1_0,a
                           2655 ;	genAssign
   09FD E4                 2656 	clr	a
   09FE F5*01              2657 	mov	_main_sloc1_1_0,a
   0A00 F5*02              2658 	mov	(_main_sloc1_1_0 + 1),a
   0A02                    2659 00229$:
                           2660 ;	genCmpLt
                           2661 ;	genCmp
   0A02 C3                 2662 	clr	c
   0A03 E5*02              2663 	mov	a,(_main_sloc1_1_0 + 1)
   0A05 64 80              2664 	xrl	a,#0x80
   0A07 94 81              2665 	subb	a,#0x81
                           2666 ;	genIfxJump
   0A09 40 03              2667 	jc	00400$
   0A0B 02s0CrD4           2668 	ljmp	00147$
   0A0E                    2669 00400$:
                           2670 ;	main.c:294: readbyte = eebyter(startaddr+i,pcount);
                           2671 ;	genIpush
   0A0E C0 07              2672 	push	ar7
                           2673 ;	genCast
   0A10 AF*01              2674 	mov	r7,_main_sloc1_1_0
                           2675 ;	genPlus
                           2676 ;	Peephole 236.g	used r7 instead of ar7
   0A12 EF                 2677 	mov	a,r7
                           2678 ;	Peephole 236.a	used r2 instead of ar2
   0A13 2A                 2679 	add	a,r2
   0A14 FF                 2680 	mov	r7,a
                           2681 ;	genAssign
   0A15 90s00r1B           2682 	mov	dptr,#_eebyter_PARM_2
   0A18 E5*05              2683 	mov	a,_main_sloc4_1_0
   0A1A F0                 2684 	movx	@dptr,a
                           2685 ;	genCall
   0A1B 8F 82              2686 	mov	dpl,r7
   0A1D C0 02              2687 	push	ar2
   0A1F C0 03              2688 	push	ar3
   0A21 C0 04              2689 	push	ar4
   0A23 C0 07              2690 	push	ar7
   0A25 C0 01              2691 	push	ar1
   0A27 12s19r9F           2692 	lcall	_eebyter
   0A2A 85 82*03           2693 	mov	_main_sloc2_1_0,dpl
   0A2D D0 01              2694 	pop	ar1
   0A2F D0 07              2695 	pop	ar7
   0A31 D0 04              2696 	pop	ar4
   0A33 D0 03              2697 	pop	ar3
   0A35 D0 02              2698 	pop	ar2
                           2699 ;	main.c:295: s++;
                           2700 ;	genAssign
   0A37 90s00r08           2701 	mov	dptr,#_main_s_1_1
   0A3A E0                 2702 	movx	a,@dptr
   0A3B FF                 2703 	mov	r7,a
   0A3C A3                 2704 	inc	dptr
   0A3D E0                 2705 	movx	a,@dptr
   0A3E F8                 2706 	mov	r0,a
                           2707 ;	genPlus
   0A3F 90s00r08           2708 	mov	dptr,#_main_s_1_1
                           2709 ;     genPlusIncr
   0A42 74 01              2710 	mov	a,#0x01
                           2711 ;	Peephole 236.a	used r7 instead of ar7
   0A44 2F                 2712 	add	a,r7
   0A45 F0                 2713 	movx	@dptr,a
                           2714 ;	Peephole 181	changed mov to clr
   0A46 E4                 2715 	clr	a
                           2716 ;	Peephole 236.b	used r0 instead of ar0
   0A47 38                 2717 	addc	a,r0
   0A48 A3                 2718 	inc	dptr
   0A49 F0                 2719 	movx	@dptr,a
                           2720 ;	main.c:296: if(s < 17)
                           2721 ;	genAssign
   0A4A 90s00r08           2722 	mov	dptr,#_main_s_1_1
   0A4D E0                 2723 	movx	a,@dptr
   0A4E FF                 2724 	mov	r7,a
   0A4F A3                 2725 	inc	dptr
   0A50 E0                 2726 	movx	a,@dptr
   0A51 F8                 2727 	mov	r0,a
                           2728 ;	genCmpLt
                           2729 ;	genCmp
   0A52 C3                 2730 	clr	c
   0A53 EF                 2731 	mov	a,r7
   0A54 94 11              2732 	subb	a,#0x11
   0A56 E8                 2733 	mov	a,r0
   0A57 64 80              2734 	xrl	a,#0x80
   0A59 94 80              2735 	subb	a,#0x80
   0A5B E4                 2736 	clr	a
   0A5C 33                 2737 	rlc	a
                           2738 ;	genIpop
   0A5D D0 07              2739 	pop	ar7
                           2740 ;	genIfx
                           2741 ;	genIfxJump
                           2742 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0A5F 60 38              2743 	jz	00138$
                           2744 ;	Peephole 300	removed redundant label 00401$
                           2745 ;	main.c:298: printf("0x%02x  ",(readbyte & 0xFF));
                           2746 ;	genIpush
   0A61 C0 07              2747 	push	ar7
                           2748 ;	genAssign
   0A63 A8*03              2749 	mov	r0,_main_sloc2_1_0
                           2750 ;	genCast
   0A65 7F 00              2751 	mov	r7,#0x00
                           2752 ;	genIpush
   0A67 C0 02              2753 	push	ar2
   0A69 C0 03              2754 	push	ar3
   0A6B C0 04              2755 	push	ar4
   0A6D C0 07              2756 	push	ar7
   0A6F C0 01              2757 	push	ar1
   0A71 C0 00              2758 	push	ar0
   0A73 C0 07              2759 	push	ar7
                           2760 ;	genIpush
   0A75 74r30              2761 	mov	a,#__str_38
   0A77 C0 E0              2762 	push	acc
   0A79 74s04              2763 	mov	a,#(__str_38 >> 8)
   0A7B C0 E0              2764 	push	acc
   0A7D 74 80              2765 	mov	a,#0x80
   0A7F C0 E0              2766 	push	acc
                           2767 ;	genCall
   0A81 12s00r00           2768 	lcall	_printf
   0A84 E5 81              2769 	mov	a,sp
   0A86 24 FB              2770 	add	a,#0xfb
   0A88 F5 81              2771 	mov	sp,a
   0A8A D0 01              2772 	pop	ar1
   0A8C D0 07              2773 	pop	ar7
   0A8E D0 04              2774 	pop	ar4
   0A90 D0 03              2775 	pop	ar3
   0A92 D0 02              2776 	pop	ar2
                           2777 ;	genIpop
   0A94 D0 07              2778 	pop	ar7
   0A96 02s0Br49           2779 	ljmp	00231$
   0A99                    2780 00138$:
                           2781 ;	main.c:303: putchar('\n');
                           2782 ;	genIpush
   0A99 C0 07              2783 	push	ar7
                           2784 ;	genCall
   0A9B 75 82 0A           2785 	mov	dpl,#0x0A
   0A9E C0 02              2786 	push	ar2
   0AA0 C0 03              2787 	push	ar3
   0AA2 C0 04              2788 	push	ar4
   0AA4 C0 07              2789 	push	ar7
   0AA6 C0 01              2790 	push	ar1
   0AA8 12s00r00           2791 	lcall	_putchar
   0AAB D0 01              2792 	pop	ar1
   0AAD D0 07              2793 	pop	ar7
   0AAF D0 04              2794 	pop	ar4
   0AB1 D0 03              2795 	pop	ar3
   0AB3 D0 02              2796 	pop	ar2
                           2797 ;	main.c:304: putchar('\r');
                           2798 ;	genCall
   0AB5 75 82 0D           2799 	mov	dpl,#0x0D
   0AB8 C0 02              2800 	push	ar2
   0ABA C0 03              2801 	push	ar3
   0ABC C0 04              2802 	push	ar4
   0ABE C0 07              2803 	push	ar7
   0AC0 C0 01              2804 	push	ar1
   0AC2 12s00r00           2805 	lcall	_putchar
   0AC5 D0 01              2806 	pop	ar1
   0AC7 D0 07              2807 	pop	ar7
   0AC9 D0 04              2808 	pop	ar4
   0ACB D0 03              2809 	pop	ar3
   0ACD D0 02              2810 	pop	ar2
                           2811 ;	main.c:305: s = 1;
                           2812 ;	genAssign
   0ACF 90s00r08           2813 	mov	dptr,#_main_s_1_1
   0AD2 74 01              2814 	mov	a,#0x01
   0AD4 F0                 2815 	movx	@dptr,a
   0AD5 E4                 2816 	clr	a
   0AD6 A3                 2817 	inc	dptr
   0AD7 F0                 2818 	movx	@dptr,a
                           2819 ;	main.c:306: printf("\n\r0%x%02x: ",(pcount & 0x0F),((startaddr+i) & 0xFF));
                           2820 ;	genPlus
   0AD8 E5*01              2821 	mov	a,_main_sloc1_1_0
                           2822 ;	Peephole 236.a	used r3 instead of ar3
   0ADA 2B                 2823 	add	a,r3
   0ADB F8                 2824 	mov	r0,a
   0ADC E5*02              2825 	mov	a,(_main_sloc1_1_0 + 1)
                           2826 ;	Peephole 236.b	used r4 instead of ar4
   0ADE 3C                 2827 	addc	a,r4
                           2828 ;	genAnd
                           2829 ;	Peephole 177.c	removed redundant move
   0ADF 7F 00              2830 	mov	r7,#0x00
                           2831 ;	genCast
   0AE1 AE*04              2832 	mov	r6,_main_sloc3_1_0
   0AE3 7D 00              2833 	mov	r5,#0x00
                           2834 ;	genIpush
   0AE5 C0 02              2835 	push	ar2
   0AE7 C0 03              2836 	push	ar3
   0AE9 C0 04              2837 	push	ar4
   0AEB C0 07              2838 	push	ar7
   0AED C0 01              2839 	push	ar1
   0AEF C0 00              2840 	push	ar0
   0AF1 C0 07              2841 	push	ar7
                           2842 ;	genIpush
   0AF3 C0 06              2843 	push	ar6
   0AF5 C0 05              2844 	push	ar5
                           2845 ;	genIpush
   0AF7 74r24              2846 	mov	a,#__str_37
   0AF9 C0 E0              2847 	push	acc
   0AFB 74s04              2848 	mov	a,#(__str_37 >> 8)
   0AFD C0 E0              2849 	push	acc
   0AFF 74 80              2850 	mov	a,#0x80
   0B01 C0 E0              2851 	push	acc
                           2852 ;	genCall
   0B03 12s00r00           2853 	lcall	_printf
   0B06 E5 81              2854 	mov	a,sp
   0B08 24 F9              2855 	add	a,#0xf9
   0B0A F5 81              2856 	mov	sp,a
   0B0C D0 01              2857 	pop	ar1
   0B0E D0 07              2858 	pop	ar7
   0B10 D0 04              2859 	pop	ar4
   0B12 D0 03              2860 	pop	ar3
   0B14 D0 02              2861 	pop	ar2
                           2862 ;	main.c:307: printf("0x%02x  ",(readbyte & 0xFF));
                           2863 ;	genAssign
   0B16 AD*03              2864 	mov	r5,_main_sloc2_1_0
                           2865 ;	genCast
   0B18 7E 00              2866 	mov	r6,#0x00
                           2867 ;	genIpush
   0B1A C0 02              2868 	push	ar2
   0B1C C0 03              2869 	push	ar3
   0B1E C0 04              2870 	push	ar4
   0B20 C0 07              2871 	push	ar7
   0B22 C0 01              2872 	push	ar1
   0B24 C0 05              2873 	push	ar5
   0B26 C0 06              2874 	push	ar6
                           2875 ;	genIpush
   0B28 74r30              2876 	mov	a,#__str_38
   0B2A C0 E0              2877 	push	acc
   0B2C 74s04              2878 	mov	a,#(__str_38 >> 8)
   0B2E C0 E0              2879 	push	acc
   0B30 74 80              2880 	mov	a,#0x80
   0B32 C0 E0              2881 	push	acc
                           2882 ;	genCall
   0B34 12s00r00           2883 	lcall	_printf
   0B37 E5 81              2884 	mov	a,sp
   0B39 24 FB              2885 	add	a,#0xfb
   0B3B F5 81              2886 	mov	sp,a
   0B3D D0 01              2887 	pop	ar1
   0B3F D0 07              2888 	pop	ar7
   0B41 D0 04              2889 	pop	ar4
   0B43 D0 03              2890 	pop	ar3
   0B45 D0 02              2891 	pop	ar2
                           2892 ;	main.c:711: }
                           2893 ;	genIpop
   0B47 D0 07              2894 	pop	ar7
                           2895 ;	main.c:307: printf("0x%02x  ",(readbyte & 0xFF));
   0B49                    2896 00231$:
                           2897 ;	main.c:292: for(i=0;i<256;i++)
                           2898 ;	genPlus
                           2899 ;     genPlusIncr
   0B49 05*01              2900 	inc	_main_sloc1_1_0
   0B4B E4                 2901 	clr	a
   0B4C B5*01 02           2902 	cjne	a,_main_sloc1_1_0,00402$
   0B4F 05*02              2903 	inc	(_main_sloc1_1_0 + 1)
   0B51                    2904 00402$:
   0B51 02s0Ar02           2905 	ljmp	00229$
   0B54                    2906 00146$:
                           2907 ;	main.c:314: else if(pcount == pageblockw)
                           2908 ;	genCmpEq
                           2909 ;	gencjneshort
   0B54 E9                 2910 	mov	a,r1
   0B55 B5 07 02           2911 	cjne	a,ar7,00403$
   0B58 80 03              2912 	sjmp	00404$
   0B5A                    2913 00403$:
   0B5A 02s0CrD4           2914 	ljmp	00147$
   0B5D                    2915 00404$:
                           2916 ;	main.c:316: for(i=0;i<=((endaddr & 0xFF)-(startaddr & 0xFF));i++)
                           2917 ;	genAssign
   0B5D E4                 2918 	clr	a
   0B5E F5*05              2919 	mov	_main_sloc4_1_0,a
   0B60 F5*06              2920 	mov	(_main_sloc4_1_0 + 1),a
   0B62                    2921 00233$:
                           2922 ;	genIpush
   0B62 C0 07              2923 	push	ar7
                           2924 ;	genCast
   0B64 A8*09              2925 	mov	r0,_main_sloc7_1_0
   0B66 7F 00              2926 	mov	r7,#0x00
                           2927 ;	genCast
   0B68 AD*07              2928 	mov	r5,_main_sloc5_1_0
   0B6A 7E 00              2929 	mov	r6,#0x00
                           2930 ;	genMinus
   0B6C E8                 2931 	mov	a,r0
   0B6D C3                 2932 	clr	c
                           2933 ;	Peephole 236.l	used r5 instead of ar5
   0B6E 9D                 2934 	subb	a,r5
   0B6F F8                 2935 	mov	r0,a
   0B70 EF                 2936 	mov	a,r7
                           2937 ;	Peephole 236.l	used r6 instead of ar6
   0B71 9E                 2938 	subb	a,r6
   0B72 FF                 2939 	mov	r7,a
                           2940 ;	genCmpGt
                           2941 ;	genCmp
   0B73 C3                 2942 	clr	c
   0B74 E8                 2943 	mov	a,r0
   0B75 95*05              2944 	subb	a,_main_sloc4_1_0
   0B77 EF                 2945 	mov	a,r7
   0B78 64 80              2946 	xrl	a,#0x80
   0B7A 85*06 F0           2947 	mov	b,(_main_sloc4_1_0 + 1)
   0B7D 63 F0 80           2948 	xrl	b,#0x80
   0B80 95 F0              2949 	subb	a,b
   0B82 E4                 2950 	clr	a
   0B83 33                 2951 	rlc	a
                           2952 ;	genIpop
   0B84 D0 07              2953 	pop	ar7
                           2954 ;	genIfx
                           2955 ;	genIfxJump
   0B86 60 03              2956 	jz	00405$
   0B88 02s0CrD4           2957 	ljmp	00147$
   0B8B                    2958 00405$:
                           2959 ;	main.c:318: readbyte = eebyter(startaddr+i,pageblockw);
                           2960 ;	genCast
   0B8B AD*05              2961 	mov	r5,_main_sloc4_1_0
                           2962 ;	genPlus
                           2963 ;	Peephole 236.g	used r5 instead of ar5
   0B8D ED                 2964 	mov	a,r5
                           2965 ;	Peephole 236.a	used r2 instead of ar2
   0B8E 2A                 2966 	add	a,r2
   0B8F FD                 2967 	mov	r5,a
                           2968 ;	genAssign
   0B90 90s00r1B           2969 	mov	dptr,#_eebyter_PARM_2
   0B93 E5*08              2970 	mov	a,_main_sloc6_1_0
   0B95 F0                 2971 	movx	@dptr,a
                           2972 ;	genCall
   0B96 8D 82              2973 	mov	dpl,r5
   0B98 C0 02              2974 	push	ar2
   0B9A C0 03              2975 	push	ar3
   0B9C C0 04              2976 	push	ar4
   0B9E C0 07              2977 	push	ar7
   0BA0 C0 01              2978 	push	ar1
   0BA2 12s19r9F           2979 	lcall	_eebyter
   0BA5 AD 82              2980 	mov	r5,dpl
   0BA7 D0 01              2981 	pop	ar1
   0BA9 D0 07              2982 	pop	ar7
   0BAB D0 04              2983 	pop	ar4
   0BAD D0 03              2984 	pop	ar3
   0BAF D0 02              2985 	pop	ar2
                           2986 ;	main.c:320: s++;
                           2987 ;	genAssign
   0BB1 90s00r08           2988 	mov	dptr,#_main_s_1_1
   0BB4 E0                 2989 	movx	a,@dptr
   0BB5 FE                 2990 	mov	r6,a
   0BB6 A3                 2991 	inc	dptr
   0BB7 E0                 2992 	movx	a,@dptr
   0BB8 F8                 2993 	mov	r0,a
                           2994 ;	genPlus
   0BB9 90s00r08           2995 	mov	dptr,#_main_s_1_1
                           2996 ;     genPlusIncr
   0BBC 74 01              2997 	mov	a,#0x01
                           2998 ;	Peephole 236.a	used r6 instead of ar6
   0BBE 2E                 2999 	add	a,r6
   0BBF F0                 3000 	movx	@dptr,a
                           3001 ;	Peephole 181	changed mov to clr
   0BC0 E4                 3002 	clr	a
                           3003 ;	Peephole 236.b	used r0 instead of ar0
   0BC1 38                 3004 	addc	a,r0
   0BC2 A3                 3005 	inc	dptr
   0BC3 F0                 3006 	movx	@dptr,a
                           3007 ;	main.c:321: if(s < 17)
                           3008 ;	genAssign
   0BC4 90s00r08           3009 	mov	dptr,#_main_s_1_1
   0BC7 E0                 3010 	movx	a,@dptr
   0BC8 FE                 3011 	mov	r6,a
   0BC9 A3                 3012 	inc	dptr
   0BCA E0                 3013 	movx	a,@dptr
   0BCB F8                 3014 	mov	r0,a
                           3015 ;	genCmpLt
                           3016 ;	genCmp
   0BCC C3                 3017 	clr	c
   0BCD EE                 3018 	mov	a,r6
   0BCE 94 11              3019 	subb	a,#0x11
   0BD0 E8                 3020 	mov	a,r0
   0BD1 64 80              3021 	xrl	a,#0x80
   0BD3 94 80              3022 	subb	a,#0x80
                           3023 ;	genIfxJump
                           3024 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0BD5 50 34              3025 	jnc	00141$
                           3026 ;	Peephole 300	removed redundant label 00406$
                           3027 ;	main.c:323: printf("0x%02x  ",(readbyte & 0xFF));
                           3028 ;	genAssign
   0BD7 8D 06              3029 	mov	ar6,r5
                           3030 ;	genCast
   0BD9 78 00              3031 	mov	r0,#0x00
                           3032 ;	genIpush
   0BDB C0 02              3033 	push	ar2
   0BDD C0 03              3034 	push	ar3
   0BDF C0 04              3035 	push	ar4
   0BE1 C0 07              3036 	push	ar7
   0BE3 C0 01              3037 	push	ar1
   0BE5 C0 06              3038 	push	ar6
   0BE7 C0 00              3039 	push	ar0
                           3040 ;	genIpush
   0BE9 74r30              3041 	mov	a,#__str_38
   0BEB C0 E0              3042 	push	acc
   0BED 74s04              3043 	mov	a,#(__str_38 >> 8)
   0BEF C0 E0              3044 	push	acc
   0BF1 74 80              3045 	mov	a,#0x80
   0BF3 C0 E0              3046 	push	acc
                           3047 ;	genCall
   0BF5 12s00r00           3048 	lcall	_printf
   0BF8 E5 81              3049 	mov	a,sp
   0BFA 24 FB              3050 	add	a,#0xfb
   0BFC F5 81              3051 	mov	sp,a
   0BFE D0 01              3052 	pop	ar1
   0C00 D0 07              3053 	pop	ar7
   0C02 D0 04              3054 	pop	ar4
   0C04 D0 03              3055 	pop	ar3
   0C06 D0 02              3056 	pop	ar2
   0C08 02s0CrC9           3057 	ljmp	00235$
   0C0B                    3058 00141$:
                           3059 ;	main.c:328: putchar('\n');
                           3060 ;	genIpush
   0C0B C0 07              3061 	push	ar7
                           3062 ;	genCall
   0C0D 75 82 0A           3063 	mov	dpl,#0x0A
   0C10 C0 02              3064 	push	ar2
   0C12 C0 03              3065 	push	ar3
   0C14 C0 04              3066 	push	ar4
   0C16 C0 05              3067 	push	ar5
   0C18 C0 07              3068 	push	ar7
   0C1A C0 01              3069 	push	ar1
   0C1C 12s00r00           3070 	lcall	_putchar
   0C1F D0 01              3071 	pop	ar1
   0C21 D0 07              3072 	pop	ar7
   0C23 D0 05              3073 	pop	ar5
   0C25 D0 04              3074 	pop	ar4
   0C27 D0 03              3075 	pop	ar3
   0C29 D0 02              3076 	pop	ar2
                           3077 ;	main.c:329: putchar('\r');
                           3078 ;	genCall
   0C2B 75 82 0D           3079 	mov	dpl,#0x0D
   0C2E C0 02              3080 	push	ar2
   0C30 C0 03              3081 	push	ar3
   0C32 C0 04              3082 	push	ar4
   0C34 C0 05              3083 	push	ar5
   0C36 C0 07              3084 	push	ar7
   0C38 C0 01              3085 	push	ar1
   0C3A 12s00r00           3086 	lcall	_putchar
   0C3D D0 01              3087 	pop	ar1
   0C3F D0 07              3088 	pop	ar7
   0C41 D0 05              3089 	pop	ar5
   0C43 D0 04              3090 	pop	ar4
   0C45 D0 03              3091 	pop	ar3
   0C47 D0 02              3092 	pop	ar2
                           3093 ;	main.c:330: s = 1;
                           3094 ;	genAssign
   0C49 90s00r08           3095 	mov	dptr,#_main_s_1_1
   0C4C 74 01              3096 	mov	a,#0x01
   0C4E F0                 3097 	movx	@dptr,a
   0C4F E4                 3098 	clr	a
   0C50 A3                 3099 	inc	dptr
   0C51 F0                 3100 	movx	@dptr,a
                           3101 ;	main.c:331: printf("\n\r0%x%02x: ",(pageblockw & 0x0F),((startaddr+i) & 0xFF));
                           3102 ;	genPlus
   0C52 E5*05              3103 	mov	a,_main_sloc4_1_0
                           3104 ;	Peephole 236.a	used r3 instead of ar3
   0C54 2B                 3105 	add	a,r3
   0C55 FE                 3106 	mov	r6,a
   0C56 E5*06              3107 	mov	a,(_main_sloc4_1_0 + 1)
                           3108 ;	Peephole 236.b	used r4 instead of ar4
   0C58 3C                 3109 	addc	a,r4
   0C59 F8                 3110 	mov	r0,a
                           3111 ;	genAnd
   0C5A 8E*01              3112 	mov	_main_sloc1_1_0,r6
   0C5C 75*02 00           3113 	mov	(_main_sloc1_1_0 + 1),#0x00
                           3114 ;	genCast
   0C5F AF*00              3115 	mov	r7,_main_sloc0_1_0
   0C61 7E 00              3116 	mov	r6,#0x00
                           3117 ;	genIpush
   0C63 C0 02              3118 	push	ar2
   0C65 C0 03              3119 	push	ar3
   0C67 C0 04              3120 	push	ar4
   0C69 C0 05              3121 	push	ar5
   0C6B C0 07              3122 	push	ar7
   0C6D C0 01              3123 	push	ar1
   0C6F C0*01              3124 	push	_main_sloc1_1_0
   0C71 C0*02              3125 	push	(_main_sloc1_1_0 + 1)
                           3126 ;	genIpush
   0C73 C0 07              3127 	push	ar7
   0C75 C0 06              3128 	push	ar6
                           3129 ;	genIpush
   0C77 74r24              3130 	mov	a,#__str_37
   0C79 C0 E0              3131 	push	acc
   0C7B 74s04              3132 	mov	a,#(__str_37 >> 8)
   0C7D C0 E0              3133 	push	acc
   0C7F 74 80              3134 	mov	a,#0x80
   0C81 C0 E0              3135 	push	acc
                           3136 ;	genCall
   0C83 12s00r00           3137 	lcall	_printf
   0C86 E5 81              3138 	mov	a,sp
   0C88 24 F9              3139 	add	a,#0xf9
   0C8A F5 81              3140 	mov	sp,a
   0C8C D0 01              3141 	pop	ar1
   0C8E D0 07              3142 	pop	ar7
   0C90 D0 05              3143 	pop	ar5
   0C92 D0 04              3144 	pop	ar4
   0C94 D0 03              3145 	pop	ar3
   0C96 D0 02              3146 	pop	ar2
                           3147 ;	main.c:332: printf("0x%02x  ",(readbyte & 0xFF));
                           3148 ;	genAssign
                           3149 ;	genCast
   0C98 7E 00              3150 	mov	r6,#0x00
                           3151 ;	genIpush
   0C9A C0 02              3152 	push	ar2
   0C9C C0 03              3153 	push	ar3
   0C9E C0 04              3154 	push	ar4
   0CA0 C0 07              3155 	push	ar7
   0CA2 C0 01              3156 	push	ar1
   0CA4 C0 05              3157 	push	ar5
   0CA6 C0 06              3158 	push	ar6
                           3159 ;	genIpush
   0CA8 74r30              3160 	mov	a,#__str_38
   0CAA C0 E0              3161 	push	acc
   0CAC 74s04              3162 	mov	a,#(__str_38 >> 8)
   0CAE C0 E0              3163 	push	acc
   0CB0 74 80              3164 	mov	a,#0x80
   0CB2 C0 E0              3165 	push	acc
                           3166 ;	genCall
   0CB4 12s00r00           3167 	lcall	_printf
   0CB7 E5 81              3168 	mov	a,sp
   0CB9 24 FB              3169 	add	a,#0xfb
   0CBB F5 81              3170 	mov	sp,a
   0CBD D0 01              3171 	pop	ar1
   0CBF D0 07              3172 	pop	ar7
   0CC1 D0 04              3173 	pop	ar4
   0CC3 D0 03              3174 	pop	ar3
   0CC5 D0 02              3175 	pop	ar2
                           3176 ;	main.c:711: }
                           3177 ;	genIpop
   0CC7 D0 07              3178 	pop	ar7
                           3179 ;	main.c:332: printf("0x%02x  ",(readbyte & 0xFF));
   0CC9                    3180 00235$:
                           3181 ;	main.c:316: for(i=0;i<=((endaddr & 0xFF)-(startaddr & 0xFF));i++)
                           3182 ;	genPlus
                           3183 ;     genPlusIncr
   0CC9 05*05              3184 	inc	_main_sloc4_1_0
   0CCB E4                 3185 	clr	a
   0CCC B5*05 02           3186 	cjne	a,_main_sloc4_1_0,00407$
   0CCF 05*06              3187 	inc	(_main_sloc4_1_0 + 1)
   0CD1                    3188 00407$:
   0CD1 02s0Br62           3189 	ljmp	00233$
   0CD4                    3190 00147$:
                           3191 ;	main.c:337: pcount++;
                           3192 ;	genPlus
                           3193 ;     genPlusIncr
   0CD4 09                 3194 	inc	r1
                           3195 ;	genAssign
   0CD5 90s00r06           3196 	mov	dptr,#_main_pcount_1_1
   0CD8 E9                 3197 	mov	a,r1
   0CD9 F0                 3198 	movx	@dptr,a
   0CDA 02s09rD6           3199 	ljmp	00148$
   0CDD                    3200 00370$:
                           3201 ;	genAssign
   0CDD 90s00r06           3202 	mov	dptr,#_main_pcount_1_1
   0CE0 E9                 3203 	mov	a,r1
   0CE1 F0                 3204 	movx	@dptr,a
   0CE2                    3205 00153$:
                           3206 ;	main.c:341: printf_tiny("\n\r\n\rPress any key to continue\n\r");
                           3207 ;	genIpush
   0CE2 74r39              3208 	mov	a,#__str_39
   0CE4 C0 E0              3209 	push	acc
   0CE6 74s04              3210 	mov	a,#(__str_39 >> 8)
   0CE8 C0 E0              3211 	push	acc
                           3212 ;	genCall
   0CEA 12s00r00           3213 	lcall	_printf_tiny
   0CED 15 81              3214 	dec	sp
   0CEF 15 81              3215 	dec	sp
                           3216 ;	main.c:342: printf_tiny("Press 'q' to quit\n\r");
                           3217 ;	genIpush
   0CF1 74rF5              3218 	mov	a,#__str_25
   0CF3 C0 E0              3219 	push	acc
   0CF5 74s02              3220 	mov	a,#(__str_25 >> 8)
   0CF7 C0 E0              3221 	push	acc
                           3222 ;	genCall
   0CF9 12s00r00           3223 	lcall	_printf_tiny
   0CFC 15 81              3224 	dec	sp
   0CFE 15 81              3225 	dec	sp
                           3226 ;	main.c:343: printf_tiny("\n\r----------------------------------------------------\n\r");
                           3227 ;	genIpush
   0D00 74rDF              3228 	mov	a,#__str_16
   0D02 C0 E0              3229 	push	acc
   0D04 74s01              3230 	mov	a,#(__str_16 >> 8)
   0D06 C0 E0              3231 	push	acc
                           3232 ;	genCall
   0D08 12s00r00           3233 	lcall	_printf_tiny
   0D0B 15 81              3234 	dec	sp
   0D0D 15 81              3235 	dec	sp
                           3236 ;	main.c:344: cond = getchar();
                           3237 ;	genCall
   0D0F 12s00r00           3238 	lcall	_getchar
   0D12 AA 82              3239 	mov	r2,dpl
                           3240 ;	main.c:345: if(cond == 'q')
                           3241 ;	genCmpEq
                           3242 ;	gencjneshort
   0D14 BA 71 02           3243 	cjne	r2,#0x71,00408$
   0D17 80 03              3244 	sjmp	00409$
   0D19                    3245 00408$:
   0D19 02s06rCB           3246 	ljmp	00157$
   0D1C                    3247 00409$:
                           3248 ;	main.c:348: printf_tiny("\n\r----------------------------------------------------\n\r");
                           3249 ;	genIpush
   0D1C 74rDF              3250 	mov	a,#__str_16
   0D1E C0 E0              3251 	push	acc
   0D20 74s01              3252 	mov	a,#(__str_16 >> 8)
   0D22 C0 E0              3253 	push	acc
                           3254 ;	genCall
   0D24 12s00r00           3255 	lcall	_printf_tiny
   0D27 15 81              3256 	dec	sp
   0D29 15 81              3257 	dec	sp
                           3258 ;	main.c:349: break;
   0D2B 02s00rC1           3259 	ljmp	00223$
                           3260 ;	main.c:352: case '5':
   0D2E                    3261 00159$:
                           3262 ;	main.c:356: TR0=0;
                           3263 ;	genAssign
   0D2E C2 8C              3264 	clr	_TR0
                           3265 ;	main.c:357: lcdgotoxy(0,0);
                           3266 ;	genAssign
   0D30 90s00r00           3267 	mov	dptr,#_lcdgotoxy_PARM_2
                           3268 ;	Peephole 181	changed mov to clr
   0D33 E4                 3269 	clr	a
   0D34 F0                 3270 	movx	@dptr,a
                           3271 ;	genCall
   0D35 75 82 00           3272 	mov	dpl,#0x00
   0D38 12s00r00           3273 	lcall	_lcdgotoxy
                           3274 ;	main.c:358: delay(10);
                           3275 ;	genCall
                           3276 ;	Peephole 182.b	used 16 bit load of dptr
   0D3B 90 00 0A           3277 	mov	dptr,#0x000A
   0D3E 12s00r00           3278 	lcall	_delay
                           3279 ;	main.c:360: lcdgotoxy(2,10);
                           3280 ;	genAssign
   0D41 90s00r00           3281 	mov	dptr,#_lcdgotoxy_PARM_2
   0D44 74 0A              3282 	mov	a,#0x0A
   0D46 F0                 3283 	movx	@dptr,a
                           3284 ;	genCall
   0D47 75 82 02           3285 	mov	dpl,#0x02
   0D4A 12s00r00           3286 	lcall	_lcdgotoxy
                           3287 ;	main.c:361: delay(10);
                           3288 ;	genCall
                           3289 ;	Peephole 182.b	used 16 bit load of dptr
   0D4D 90 00 0A           3290 	mov	dptr,#0x000A
   0D50 12s00r00           3291 	lcall	_delay
                           3292 ;	main.c:363: delay(10);
                           3293 ;	genCall
                           3294 ;	Peephole 182.b	used 16 bit load of dptr
   0D53 90 00 0A           3295 	mov	dptr,#0x000A
   0D56 12s00r00           3296 	lcall	_delay
                           3297 ;	main.c:364: lcdputch('A');
                           3298 ;	genCall
   0D59 75 82 41           3299 	mov	dpl,#0x41
   0D5C 12s00r00           3300 	lcall	_lcdputch
                           3301 ;	main.c:365: delay(10);
                           3302 ;	genCall
                           3303 ;	Peephole 182.b	used 16 bit load of dptr
   0D5F 90 00 0A           3304 	mov	dptr,#0x000A
   0D62 12s00r00           3305 	lcall	_delay
                           3306 ;	main.c:366: lcdgotoxy(0,2);
                           3307 ;	genAssign
   0D65 90s00r00           3308 	mov	dptr,#_lcdgotoxy_PARM_2
   0D68 74 02              3309 	mov	a,#0x02
   0D6A F0                 3310 	movx	@dptr,a
                           3311 ;	genCall
   0D6B 75 82 00           3312 	mov	dpl,#0x00
   0D6E 12s00r00           3313 	lcall	_lcdgotoxy
                           3314 ;	main.c:367: delay(10);
                           3315 ;	genCall
                           3316 ;	Peephole 182.b	used 16 bit load of dptr
   0D71 90 00 0A           3317 	mov	dptr,#0x000A
   0D74 12s00r00           3318 	lcall	_delay
                           3319 ;	main.c:368: lcdputstr("Aniket");
                           3320 ;	genCall
                           3321 ;	Peephole 182.a	used 16 bit load of DPTR
   0D77 90s04r59           3322 	mov	dptr,#__str_40
   0D7A 75 F0 80           3323 	mov	b,#0x80
   0D7D 12s00r00           3324 	lcall	_lcdputstr
                           3325 ;	main.c:369: delay(10);
                           3326 ;	genCall
                           3327 ;	Peephole 182.b	used 16 bit load of dptr
   0D80 90 00 0A           3328 	mov	dptr,#0x000A
   0D83 12s00r00           3329 	lcall	_delay
                           3330 ;	main.c:370: lcdgotoxy(1,11);
                           3331 ;	genAssign
   0D86 90s00r00           3332 	mov	dptr,#_lcdgotoxy_PARM_2
   0D89 74 0B              3333 	mov	a,#0x0B
   0D8B F0                 3334 	movx	@dptr,a
                           3335 ;	genCall
   0D8C 75 82 01           3336 	mov	dpl,#0x01
   0D8F 12s00r00           3337 	lcall	_lcdgotoxy
                           3338 ;	main.c:371: lcdputstr("Kumar OLSSS");
                           3339 ;	genCall
                           3340 ;	Peephole 182.a	used 16 bit load of DPTR
   0D92 90s04r60           3341 	mov	dptr,#__str_41
   0D95 75 F0 80           3342 	mov	b,#0x80
   0D98 12s00r00           3343 	lcall	_lcdputstr
                           3344 ;	main.c:372: lcdputch(0x01);
                           3345 ;	genCall
   0D9B 75 82 01           3346 	mov	dpl,#0x01
   0D9E 12s00r00           3347 	lcall	_lcdputch
                           3348 ;	main.c:373: delay(10);
                           3349 ;	genCall
                           3350 ;	Peephole 182.b	used 16 bit load of dptr
   0DA1 90 00 0A           3351 	mov	dptr,#0x000A
   0DA4 12s00r00           3352 	lcall	_delay
                           3353 ;	main.c:374: lcdgotoxy(3,9);
                           3354 ;	genAssign
   0DA7 90s00r00           3355 	mov	dptr,#_lcdgotoxy_PARM_2
   0DAA 74 09              3356 	mov	a,#0x09
   0DAC F0                 3357 	movx	@dptr,a
                           3358 ;	genCall
   0DAD 75 82 03           3359 	mov	dpl,#0x03
   0DB0 12s00r00           3360 	lcall	_lcdgotoxy
                           3361 ;	main.c:375: delay(10);
                           3362 ;	genCall
                           3363 ;	Peephole 182.b	used 16 bit load of dptr
   0DB3 90 00 0A           3364 	mov	dptr,#0x000A
   0DB6 12s00r00           3365 	lcall	_delay
                           3366 ;	main.c:376: TR0=1;
                           3367 ;	genAssign
   0DB9 D2 8C              3368 	setb	_TR0
                           3369 ;	main.c:377: break;
   0DBB 02s00rC1           3370 	ljmp	00223$
                           3371 ;	main.c:380: case '6':
   0DBE                    3372 00160$:
                           3373 ;	main.c:384: printf_tiny("\n\r----------------------------------------------------\n\r");
                           3374 ;	genIpush
   0DBE 74rDF              3375 	mov	a,#__str_16
   0DC0 C0 E0              3376 	push	acc
   0DC2 74s01              3377 	mov	a,#(__str_16 >> 8)
   0DC4 C0 E0              3378 	push	acc
                           3379 ;	genCall
   0DC6 12s00r00           3380 	lcall	_printf_tiny
   0DC9 15 81              3381 	dec	sp
   0DCB 15 81              3382 	dec	sp
                           3383 ;	main.c:385: printf_tiny("\n\rCopy data bytes\n\r");
                           3384 ;	genIpush
   0DCD 74r6C              3385 	mov	a,#__str_42
   0DCF C0 E0              3386 	push	acc
   0DD1 74s04              3387 	mov	a,#(__str_42 >> 8)
   0DD3 C0 E0              3388 	push	acc
                           3389 ;	genCall
   0DD5 12s00r00           3390 	lcall	_printf_tiny
   0DD8 15 81              3391 	dec	sp
   0DDA 15 81              3392 	dec	sp
                           3393 ;	main.c:386: printf_tiny("\n\rEnter Source address\n\r");
                           3394 ;	genIpush
   0DDC 74r80              3395 	mov	a,#__str_43
   0DDE C0 E0              3396 	push	acc
   0DE0 74s04              3397 	mov	a,#(__str_43 >> 8)
   0DE2 C0 E0              3398 	push	acc
                           3399 ;	genCall
   0DE4 12s00r00           3400 	lcall	_printf_tiny
   0DE7 15 81              3401 	dec	sp
   0DE9 15 81              3402 	dec	sp
                           3403 ;	main.c:387: saddr = fetch_addr();                       // Fetch source address
                           3404 ;	genCall
   0DEB 12s20r6A           3405 	lcall	_fetch_addr
   0DEE AA 82              3406 	mov	r2,dpl
                           3407 ;	main.c:388: pageblock = bufsiz[0];
                           3408 ;	genPointerGet
                           3409 ;	genFarPointerGet
   0DF0 90s00r00           3410 	mov	dptr,#_bufsiz
   0DF3 E0                 3411 	movx	a,@dptr
   0DF4 FB                 3412 	mov	r3,a
                           3413 ;	main.c:389: pageblock &= 0x0F;
                           3414 ;	genAnd
   0DF5 53 03 0F           3415 	anl	ar3,#0x0F
                           3416 ;	genAssign
   0DF8 90s00r04           3417 	mov	dptr,#_main_pageblock_1_1
   0DFB EB                 3418 	mov	a,r3
   0DFC F0                 3419 	movx	@dptr,a
                           3420 ;	main.c:390: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblock);
                           3421 ;	genCast
   0DFD EB                 3422 	mov	a,r3
   0DFE 33                 3423 	rlc	a
   0DFF 95 E0              3424 	subb	a,acc
   0E01 FC                 3425 	mov	r4,a
                           3426 ;	genIpush
   0E02 C0 02              3427 	push	ar2
   0E04 C0 03              3428 	push	ar3
   0E06 C0 04              3429 	push	ar4
                           3430 ;	genIpush
   0E08 74r30              3431 	mov	a,#__str_18
   0E0A C0 E0              3432 	push	acc
   0E0C 74s02              3433 	mov	a,#(__str_18 >> 8)
   0E0E C0 E0              3434 	push	acc
                           3435 ;	genCall
   0E10 12s00r00           3436 	lcall	_printf_tiny
   0E13 E5 81              3437 	mov	a,sp
   0E15 24 FC              3438 	add	a,#0xfc
   0E17 F5 81              3439 	mov	sp,a
   0E19 D0 02              3440 	pop	ar2
                           3441 ;	main.c:391: printf("Source address: %02x\n\r",(saddr & 0xFF));
                           3442 ;	genAssign
   0E1B 8A 03              3443 	mov	ar3,r2
                           3444 ;	genCast
   0E1D 7C 00              3445 	mov	r4,#0x00
                           3446 ;	genIpush
   0E1F C0 02              3447 	push	ar2
   0E21 C0 03              3448 	push	ar3
   0E23 C0 04              3449 	push	ar4
                           3450 ;	genIpush
   0E25 74r99              3451 	mov	a,#__str_44
   0E27 C0 E0              3452 	push	acc
   0E29 74s04              3453 	mov	a,#(__str_44 >> 8)
   0E2B C0 E0              3454 	push	acc
   0E2D 74 80              3455 	mov	a,#0x80
   0E2F C0 E0              3456 	push	acc
                           3457 ;	genCall
   0E31 12s00r00           3458 	lcall	_printf
   0E34 E5 81              3459 	mov	a,sp
   0E36 24 FB              3460 	add	a,#0xfb
   0E38 F5 81              3461 	mov	sp,a
   0E3A D0 02              3462 	pop	ar2
                           3463 ;	main.c:393: printf_tiny("\n\rEnter Destination address\n\r");
                           3464 ;	genIpush
   0E3C C0 02              3465 	push	ar2
   0E3E 74rB0              3466 	mov	a,#__str_45
   0E40 C0 E0              3467 	push	acc
   0E42 74s04              3468 	mov	a,#(__str_45 >> 8)
   0E44 C0 E0              3469 	push	acc
                           3470 ;	genCall
   0E46 12s00r00           3471 	lcall	_printf_tiny
   0E49 15 81              3472 	dec	sp
   0E4B 15 81              3473 	dec	sp
   0E4D D0 02              3474 	pop	ar2
                           3475 ;	main.c:394: daddr = fetch_addr();                       // fetch destination address
                           3476 ;	genCall
   0E4F C0 02              3477 	push	ar2
   0E51 12s20r6A           3478 	lcall	_fetch_addr
   0E54 AB 82              3479 	mov	r3,dpl
   0E56 D0 02              3480 	pop	ar2
                           3481 ;	main.c:395: pageblockw = bufsiz[0];
                           3482 ;	genPointerGet
                           3483 ;	genFarPointerGet
   0E58 90s00r00           3484 	mov	dptr,#_bufsiz
   0E5B E0                 3485 	movx	a,@dptr
   0E5C FC                 3486 	mov	r4,a
                           3487 ;	main.c:396: pageblockw &= 0x0F;
                           3488 ;	genAnd
   0E5D 53 04 0F           3489 	anl	ar4,#0x0F
                           3490 ;	genAssign
   0E60 90s00r05           3491 	mov	dptr,#_main_pageblockw_1_1
   0E63 EC                 3492 	mov	a,r4
   0E64 F0                 3493 	movx	@dptr,a
                           3494 ;	main.c:397: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblockw);
                           3495 ;	genCast
   0E65 EC                 3496 	mov	a,r4
   0E66 33                 3497 	rlc	a
   0E67 95 E0              3498 	subb	a,acc
   0E69 FD                 3499 	mov	r5,a
                           3500 ;	genIpush
   0E6A C0 02              3501 	push	ar2
   0E6C C0 03              3502 	push	ar3
   0E6E C0 04              3503 	push	ar4
   0E70 C0 05              3504 	push	ar5
                           3505 ;	genIpush
   0E72 74r30              3506 	mov	a,#__str_18
   0E74 C0 E0              3507 	push	acc
   0E76 74s02              3508 	mov	a,#(__str_18 >> 8)
   0E78 C0 E0              3509 	push	acc
                           3510 ;	genCall
   0E7A 12s00r00           3511 	lcall	_printf_tiny
   0E7D E5 81              3512 	mov	a,sp
   0E7F 24 FC              3513 	add	a,#0xfc
   0E81 F5 81              3514 	mov	sp,a
   0E83 D0 03              3515 	pop	ar3
   0E85 D0 02              3516 	pop	ar2
                           3517 ;	main.c:398: printf("Destination address: %02x\n\r",(daddr & 0xFF));
                           3518 ;	genAssign
   0E87 8B 04              3519 	mov	ar4,r3
                           3520 ;	genCast
   0E89 7D 00              3521 	mov	r5,#0x00
                           3522 ;	genIpush
   0E8B C0 02              3523 	push	ar2
   0E8D C0 03              3524 	push	ar3
   0E8F C0 04              3525 	push	ar4
   0E91 C0 05              3526 	push	ar5
                           3527 ;	genIpush
   0E93 74rCE              3528 	mov	a,#__str_46
   0E95 C0 E0              3529 	push	acc
   0E97 74s04              3530 	mov	a,#(__str_46 >> 8)
   0E99 C0 E0              3531 	push	acc
   0E9B 74 80              3532 	mov	a,#0x80
   0E9D C0 E0              3533 	push	acc
                           3534 ;	genCall
   0E9F 12s00r00           3535 	lcall	_printf
   0EA2 E5 81              3536 	mov	a,sp
   0EA4 24 FB              3537 	add	a,#0xfb
   0EA6 F5 81              3538 	mov	sp,a
   0EA8 D0 03              3539 	pop	ar3
   0EAA D0 02              3540 	pop	ar2
                           3541 ;	main.c:400: printf_tiny("\n\rEnter number of bytes to be copied\n\r");
                           3542 ;	genIpush
   0EAC C0 02              3543 	push	ar2
   0EAE C0 03              3544 	push	ar3
   0EB0 74rEA              3545 	mov	a,#__str_47
   0EB2 C0 E0              3546 	push	acc
   0EB4 74s04              3547 	mov	a,#(__str_47 >> 8)
   0EB6 C0 E0              3548 	push	acc
                           3549 ;	genCall
   0EB8 12s00r00           3550 	lcall	_printf_tiny
   0EBB 15 81              3551 	dec	sp
   0EBD 15 81              3552 	dec	sp
   0EBF D0 03              3553 	pop	ar3
   0EC1 D0 02              3554 	pop	ar2
                           3555 ;	main.c:401: num=fetch_data();                           // Number of bytes to be copied
                           3556 ;	genCall
   0EC3 C0 02              3557 	push	ar2
   0EC5 C0 03              3558 	push	ar3
   0EC7 12s24rD6           3559 	lcall	_fetch_data
   0ECA AC 82              3560 	mov	r4,dpl
   0ECC D0 03              3561 	pop	ar3
   0ECE D0 02              3562 	pop	ar2
                           3563 ;	main.c:402: numint=(int)num;
                           3564 ;	genCast
   0ED0 EC                 3565 	mov	a,r4
   0ED1 33                 3566 	rlc	a
   0ED2 95 E0              3567 	subb	a,acc
   0ED4 FD                 3568 	mov	r5,a
                           3569 ;	main.c:403: printf_tiny("num = %x\n\r",numint);
                           3570 ;	genIpush
   0ED5 C0 02              3571 	push	ar2
   0ED7 C0 03              3572 	push	ar3
   0ED9 C0 04              3573 	push	ar4
   0EDB C0 05              3574 	push	ar5
   0EDD C0 04              3575 	push	ar4
   0EDF C0 05              3576 	push	ar5
                           3577 ;	genIpush
   0EE1 74r11              3578 	mov	a,#__str_48
   0EE3 C0 E0              3579 	push	acc
   0EE5 74s05              3580 	mov	a,#(__str_48 >> 8)
   0EE7 C0 E0              3581 	push	acc
                           3582 ;	genCall
   0EE9 12s00r00           3583 	lcall	_printf_tiny
   0EEC E5 81              3584 	mov	a,sp
   0EEE 24 FC              3585 	add	a,#0xfc
   0EF0 F5 81              3586 	mov	sp,a
   0EF2 D0 05              3587 	pop	ar5
   0EF4 D0 04              3588 	pop	ar4
   0EF6 D0 03              3589 	pop	ar3
   0EF8 D0 02              3590 	pop	ar2
                           3591 ;	main.c:404: for(i=0;i<numint;i++)
                           3592 ;	genAssign
   0EFA 90s00r04           3593 	mov	dptr,#_main_pageblock_1_1
   0EFD E0                 3594 	movx	a,@dptr
   0EFE F5*08              3595 	mov	_main_sloc6_1_0,a
                           3596 ;	genAssign
   0F00 90s00r05           3597 	mov	dptr,#_main_pageblockw_1_1
   0F03 E0                 3598 	movx	a,@dptr
   0F04 F5*09              3599 	mov	_main_sloc7_1_0,a
                           3600 ;	genAssign
   0F06 78 00              3601 	mov	r0,#0x00
   0F08 79 00              3602 	mov	r1,#0x00
   0F0A                    3603 00237$:
                           3604 ;	genCmpLt
                           3605 ;	genCmp
   0F0A C3                 3606 	clr	c
   0F0B E8                 3607 	mov	a,r0
   0F0C 9C                 3608 	subb	a,r4
   0F0D E9                 3609 	mov	a,r1
   0F0E 64 80              3610 	xrl	a,#0x80
   0F10 8D F0              3611 	mov	b,r5
   0F12 63 F0 80           3612 	xrl	b,#0x80
   0F15 95 F0              3613 	subb	a,b
                           3614 ;	genIfxJump
   0F17 40 03              3615 	jc	00410$
   0F19 02s00rC1           3616 	ljmp	00223$
   0F1C                    3617 00410$:
                           3618 ;	main.c:406: readbyte = eebyter(saddr+i,pageblock);          // Read from EEPROM
                           3619 ;	genIpush
   0F1C C0 04              3620 	push	ar4
   0F1E C0 05              3621 	push	ar5
                           3622 ;	genCast
                           3623 ;	genPlus
                           3624 ;	peephole 177.g	optimized mov sequence
   0F20 E8                 3625 	mov	a,r0
                           3626 ;	Peephole 236.i	used r4 instead of ar4
   0F21 FC                 3627 	mov	r4,a
                           3628 ;	Peephole 236.a	used r2 instead of ar2
   0F22 2A                 3629 	add	a,r2
   0F23 FD                 3630 	mov	r5,a
                           3631 ;	genAssign
   0F24 90s00r1B           3632 	mov	dptr,#_eebyter_PARM_2
   0F27 E5*08              3633 	mov	a,_main_sloc6_1_0
   0F29 F0                 3634 	movx	@dptr,a
                           3635 ;	genCall
   0F2A 8D 82              3636 	mov	dpl,r5
   0F2C C0 02              3637 	push	ar2
   0F2E C0 03              3638 	push	ar3
   0F30 C0 04              3639 	push	ar4
   0F32 C0 00              3640 	push	ar0
   0F34 C0 01              3641 	push	ar1
   0F36 12s19r9F           3642 	lcall	_eebyter
   0F39 AD 82              3643 	mov	r5,dpl
   0F3B D0 01              3644 	pop	ar1
   0F3D D0 00              3645 	pop	ar0
   0F3F D0 04              3646 	pop	ar4
   0F41 D0 03              3647 	pop	ar3
   0F43 D0 02              3648 	pop	ar2
                           3649 ;	main.c:407: printf_tiny("Data Read successful\n\r");
                           3650 ;	genIpush
   0F45 C0 02              3651 	push	ar2
   0F47 C0 03              3652 	push	ar3
   0F49 C0 04              3653 	push	ar4
   0F4B C0 05              3654 	push	ar5
   0F4D C0 00              3655 	push	ar0
   0F4F C0 01              3656 	push	ar1
   0F51 74rAD              3657 	mov	a,#__str_22
   0F53 C0 E0              3658 	push	acc
   0F55 74s02              3659 	mov	a,#(__str_22 >> 8)
   0F57 C0 E0              3660 	push	acc
                           3661 ;	genCall
   0F59 12s00r00           3662 	lcall	_printf_tiny
   0F5C 15 81              3663 	dec	sp
   0F5E 15 81              3664 	dec	sp
   0F60 D0 01              3665 	pop	ar1
   0F62 D0 00              3666 	pop	ar0
   0F64 D0 05              3667 	pop	ar5
   0F66 D0 04              3668 	pop	ar4
   0F68 D0 03              3669 	pop	ar3
   0F6A D0 02              3670 	pop	ar2
                           3671 ;	main.c:408: printf("Source Data: %02x\n\r",(readbyte & 0xFF));
                           3672 ;	genAssign
   0F6C 8D 07              3673 	mov	ar7,r5
                           3674 ;	genCast
   0F6E 7E 00              3675 	mov	r6,#0x00
                           3676 ;	genIpush
   0F70 C0 02              3677 	push	ar2
   0F72 C0 03              3678 	push	ar3
   0F74 C0 04              3679 	push	ar4
   0F76 C0 05              3680 	push	ar5
   0F78 C0 00              3681 	push	ar0
   0F7A C0 01              3682 	push	ar1
   0F7C C0 07              3683 	push	ar7
   0F7E C0 06              3684 	push	ar6
                           3685 ;	genIpush
   0F80 74r1C              3686 	mov	a,#__str_49
   0F82 C0 E0              3687 	push	acc
   0F84 74s05              3688 	mov	a,#(__str_49 >> 8)
   0F86 C0 E0              3689 	push	acc
   0F88 74 80              3690 	mov	a,#0x80
   0F8A C0 E0              3691 	push	acc
                           3692 ;	genCall
   0F8C 12s00r00           3693 	lcall	_printf
   0F8F E5 81              3694 	mov	a,sp
   0F91 24 FB              3695 	add	a,#0xfb
   0F93 F5 81              3696 	mov	sp,a
   0F95 D0 01              3697 	pop	ar1
   0F97 D0 00              3698 	pop	ar0
   0F99 D0 05              3699 	pop	ar5
   0F9B D0 04              3700 	pop	ar4
   0F9D D0 03              3701 	pop	ar3
   0F9F D0 02              3702 	pop	ar2
                           3703 ;	main.c:410: eebytew(daddr+i,pageblockw,readbyte);             // Write to destination address
                           3704 ;	genPlus
                           3705 ;	Peephole 236.g	used r4 instead of ar4
   0FA1 EC                 3706 	mov	a,r4
                           3707 ;	Peephole 236.a	used r3 instead of ar3
   0FA2 2B                 3708 	add	a,r3
   0FA3 FC                 3709 	mov	r4,a
                           3710 ;	genAssign
   0FA4 90s00r18           3711 	mov	dptr,#_eebytew_PARM_2
   0FA7 E5*09              3712 	mov	a,_main_sloc7_1_0
   0FA9 F0                 3713 	movx	@dptr,a
                           3714 ;	genAssign
   0FAA 90s00r19           3715 	mov	dptr,#_eebytew_PARM_3
   0FAD ED                 3716 	mov	a,r5
   0FAE F0                 3717 	movx	@dptr,a
                           3718 ;	genCall
   0FAF 8C 82              3719 	mov	dpl,r4
   0FB1 C0 02              3720 	push	ar2
   0FB3 C0 03              3721 	push	ar3
   0FB5 C0 04              3722 	push	ar4
   0FB7 C0 05              3723 	push	ar5
   0FB9 C0 00              3724 	push	ar0
   0FBB C0 01              3725 	push	ar1
   0FBD 12s19r71           3726 	lcall	_eebytew
   0FC0 D0 01              3727 	pop	ar1
   0FC2 D0 00              3728 	pop	ar0
   0FC4 D0 05              3729 	pop	ar5
   0FC6 D0 04              3730 	pop	ar4
   0FC8 D0 03              3731 	pop	ar3
   0FCA D0 02              3732 	pop	ar2
                           3733 ;	main.c:411: printf_tiny("Data Write successful\n\r");
                           3734 ;	genIpush
   0FCC C0 02              3735 	push	ar2
   0FCE C0 03              3736 	push	ar3
   0FD0 C0 04              3737 	push	ar4
   0FD2 C0 05              3738 	push	ar5
   0FD4 C0 00              3739 	push	ar0
   0FD6 C0 01              3740 	push	ar1
   0FD8 74r95              3741 	mov	a,#__str_21
   0FDA C0 E0              3742 	push	acc
   0FDC 74s02              3743 	mov	a,#(__str_21 >> 8)
   0FDE C0 E0              3744 	push	acc
                           3745 ;	genCall
   0FE0 12s00r00           3746 	lcall	_printf_tiny
   0FE3 15 81              3747 	dec	sp
   0FE5 15 81              3748 	dec	sp
   0FE7 D0 01              3749 	pop	ar1
   0FE9 D0 00              3750 	pop	ar0
   0FEB D0 05              3751 	pop	ar5
   0FED D0 04              3752 	pop	ar4
   0FEF D0 03              3753 	pop	ar3
   0FF1 D0 02              3754 	pop	ar2
                           3755 ;	main.c:413: delay(10);
                           3756 ;	genCall
                           3757 ;	Peephole 182.b	used 16 bit load of dptr
   0FF3 90 00 0A           3758 	mov	dptr,#0x000A
   0FF6 C0 02              3759 	push	ar2
   0FF8 C0 03              3760 	push	ar3
   0FFA C0 04              3761 	push	ar4
   0FFC C0 05              3762 	push	ar5
   0FFE C0 00              3763 	push	ar0
   1000 C0 01              3764 	push	ar1
   1002 12s00r00           3765 	lcall	_delay
   1005 D0 01              3766 	pop	ar1
   1007 D0 00              3767 	pop	ar0
   1009 D0 05              3768 	pop	ar5
   100B D0 04              3769 	pop	ar4
   100D D0 03              3770 	pop	ar3
   100F D0 02              3771 	pop	ar2
                           3772 ;	main.c:404: for(i=0;i<numint;i++)
                           3773 ;	genPlus
                           3774 ;     genPlusIncr
   1011 08                 3775 	inc	r0
   1012 B8 00 01           3776 	cjne	r0,#0x00,00411$
   1015 09                 3777 	inc	r1
   1016                    3778 00411$:
                           3779 ;	genIpop
   1016 D0 05              3780 	pop	ar5
   1018 D0 04              3781 	pop	ar4
   101A 02s0Fr0A           3782 	ljmp	00237$
                           3783 ;	main.c:417: case '7':
   101D                    3784 00161$:
                           3785 ;	main.c:420: printf_tiny("\n\r----------------------------------------------------\n\r");
                           3786 ;	genIpush
   101D 74rDF              3787 	mov	a,#__str_16
   101F C0 E0              3788 	push	acc
   1021 74s01              3789 	mov	a,#(__str_16 >> 8)
   1023 C0 E0              3790 	push	acc
                           3791 ;	genCall
   1025 12s00r00           3792 	lcall	_printf_tiny
   1028 15 81              3793 	dec	sp
   102A 15 81              3794 	dec	sp
                           3795 ;	main.c:421: printf_tiny("\n\rCreate custom character\n\r");
                           3796 ;	genIpush
   102C 74r30              3797 	mov	a,#__str_50
   102E C0 E0              3798 	push	acc
   1030 74s05              3799 	mov	a,#(__str_50 >> 8)
   1032 C0 E0              3800 	push	acc
                           3801 ;	genCall
   1034 12s00r00           3802 	lcall	_printf_tiny
   1037 15 81              3803 	dec	sp
   1039 15 81              3804 	dec	sp
                           3805 ;	main.c:422: printf_tiny("\n\rEnter character code from 00-07\n\r");
                           3806 ;	genIpush
   103B 74r4C              3807 	mov	a,#__str_51
   103D C0 E0              3808 	push	acc
   103F 74s05              3809 	mov	a,#(__str_51 >> 8)
   1041 C0 E0              3810 	push	acc
                           3811 ;	genCall
   1043 12s00r00           3812 	lcall	_printf_tiny
   1046 15 81              3813 	dec	sp
   1048 15 81              3814 	dec	sp
                           3815 ;	main.c:424: ccode = fetch_data();                  // fetch LCD character code
                           3816 ;	genCall
   104A 12s24rD6           3817 	lcall	_fetch_data
   104D AA 82              3818 	mov	r2,dpl
                           3819 ;	main.c:426: printf_tiny("\n\rEnter row values for the custom character\n\r");
                           3820 ;	genIpush
   104F C0 02              3821 	push	ar2
   1051 74r70              3822 	mov	a,#__str_52
   1053 C0 E0              3823 	push	acc
   1055 74s05              3824 	mov	a,#(__str_52 >> 8)
   1057 C0 E0              3825 	push	acc
                           3826 ;	genCall
   1059 12s00r00           3827 	lcall	_printf_tiny
   105C 15 81              3828 	dec	sp
   105E 15 81              3829 	dec	sp
   1060 D0 02              3830 	pop	ar2
                           3831 ;	main.c:427: for(i=0;i<8;i++)
                           3832 ;	genAssign
   1062 E4                 3833 	clr	a
   1063 F5*01              3834 	mov	_main_sloc1_1_0,a
   1065 F5*02              3835 	mov	(_main_sloc1_1_0 + 1),a
   1067                    3836 00253$:
                           3837 ;	genCmpLt
                           3838 ;	genCmp
   1067 C3                 3839 	clr	c
   1068 E5*01              3840 	mov	a,_main_sloc1_1_0
   106A 94 08              3841 	subb	a,#0x08
   106C E5*02              3842 	mov	a,(_main_sloc1_1_0 + 1)
   106E 64 80              3843 	xrl	a,#0x80
   1070 94 80              3844 	subb	a,#0x80
                           3845 ;	genIfxJump
   1072 40 03              3846 	jc	00412$
   1074 02s12r67           3847 	ljmp	00256$
   1077                    3848 00412$:
                           3849 ;	main.c:429: printf_tiny("\n\rEnter 5 pixel values for row %d \n\r",i);
                           3850 ;	genIpush
   1077 C0 02              3851 	push	ar2
   1079 C0*01              3852 	push	_main_sloc1_1_0
   107B C0*02              3853 	push	(_main_sloc1_1_0 + 1)
                           3854 ;	genIpush
   107D 74r9E              3855 	mov	a,#__str_53
   107F C0 E0              3856 	push	acc
   1081 74s05              3857 	mov	a,#(__str_53 >> 8)
   1083 C0 E0              3858 	push	acc
                           3859 ;	genCall
   1085 12s00r00           3860 	lcall	_printf_tiny
   1088 E5 81              3861 	mov	a,sp
   108A 24 FC              3862 	add	a,#0xfc
   108C F5 81              3863 	mov	sp,a
   108E D0 02              3864 	pop	ar2
                           3865 ;	main.c:430: for(j=4;j>=0;j--)                       // Fetch pixel values for 8 bytes from user
                           3866 ;	genAssign
   1090 AD*01              3867 	mov	r5,_main_sloc1_1_0
   1092 AE*02              3868 	mov	r6,(_main_sloc1_1_0 + 1)
                           3869 ;	genAssign
   1094 AF*01              3870 	mov	r7,_main_sloc1_1_0
   1096 A8*02              3871 	mov	r0,(_main_sloc1_1_0 + 1)
                           3872 ;	genAssign
   1098 75*05 04           3873 	mov	_main_sloc4_1_0,#0x04
   109B E4                 3874 	clr	a
   109C F5*06              3875 	mov	(_main_sloc4_1_0 + 1),a
   109E                    3876 00241$:
                           3877 ;	genCmpLt
                           3878 ;	genCmp
   109E E5*06              3879 	mov	a,(_main_sloc4_1_0 + 1)
                           3880 ;	genIfxJump
   10A0 30 E7 03           3881 	jnb	acc.7,00413$
   10A3 02s11r83           3882 	ljmp	00244$
   10A6                    3883 00413$:
                           3884 ;	main.c:432: while(1)
   10A6                    3885 00170$:
                           3886 ;	main.c:434: ch=getchar();
                           3887 ;	genCall
   10A6 C0 02              3888 	push	ar2
   10A8 C0 05              3889 	push	ar5
   10AA C0 06              3890 	push	ar6
   10AC C0 07              3891 	push	ar7
   10AE C0 00              3892 	push	ar0
   10B0 12s00r00           3893 	lcall	_getchar
   10B3 A9 82              3894 	mov	r1,dpl
   10B5 D0 00              3895 	pop	ar0
   10B7 D0 07              3896 	pop	ar7
   10B9 D0 06              3897 	pop	ar6
   10BB D0 05              3898 	pop	ar5
   10BD D0 02              3899 	pop	ar2
                           3900 ;	genAssign
   10BF 90s00r07           3901 	mov	dptr,#_main_ch_1_1
   10C2 E9                 3902 	mov	a,r1
   10C3 F0                 3903 	movx	@dptr,a
                           3904 ;	main.c:435: if(!((ch=='0') || (ch=='1')))
                           3905 ;	genCmpEq
                           3906 ;	gencjneshort
   10C4 B9 30 02           3907 	cjne	r1,#0x30,00414$
                           3908 ;	Peephole 112.b	changed ljmp to sjmp
   10C7 80 2A              3909 	sjmp	00166$
   10C9                    3910 00414$:
                           3911 ;	genCmpEq
                           3912 ;	gencjneshort
   10C9 B9 31 02           3913 	cjne	r1,#0x31,00415$
                           3914 ;	Peephole 112.b	changed ljmp to sjmp
   10CC 80 25              3915 	sjmp	00166$
   10CE                    3916 00415$:
                           3917 ;	main.c:437: printf_tiny("\n\rInvalid input. Please enter binary input.\n\r");
                           3918 ;	genIpush
   10CE C0 02              3919 	push	ar2
   10D0 C0 05              3920 	push	ar5
   10D2 C0 06              3921 	push	ar6
   10D4 C0 07              3922 	push	ar7
   10D6 C0 00              3923 	push	ar0
   10D8 74rC3              3924 	mov	a,#__str_54
   10DA C0 E0              3925 	push	acc
   10DC 74s05              3926 	mov	a,#(__str_54 >> 8)
   10DE C0 E0              3927 	push	acc
                           3928 ;	genCall
   10E0 12s00r00           3929 	lcall	_printf_tiny
   10E3 15 81              3930 	dec	sp
   10E5 15 81              3931 	dec	sp
   10E7 D0 00              3932 	pop	ar0
   10E9 D0 07              3933 	pop	ar7
   10EB D0 06              3934 	pop	ar6
   10ED D0 05              3935 	pop	ar5
   10EF D0 02              3936 	pop	ar2
                           3937 ;	main.c:438: continue;
                           3938 ;	Peephole 112.b	changed ljmp to sjmp
   10F1 80 B3              3939 	sjmp	00170$
   10F3                    3940 00166$:
                           3941 ;	main.c:440: else if((ch=='0') || (ch=='1'))
                           3942 ;	genAssign
   10F3 90s00r07           3943 	mov	dptr,#_main_ch_1_1
   10F6 E0                 3944 	movx	a,@dptr
   10F7 F9                 3945 	mov	r1,a
                           3946 ;	genCmpEq
                           3947 ;	gencjneshort
   10F8 B9 30 02           3948 	cjne	r1,#0x30,00416$
                           3949 ;	Peephole 112.b	changed ljmp to sjmp
   10FB 80 03              3950 	sjmp	00162$
   10FD                    3951 00416$:
                           3952 ;	genCmpEq
                           3953 ;	gencjneshort
                           3954 ;	Peephole 112.b	changed ljmp to sjmp
                           3955 ;	Peephole 198.b	optimized misc jump sequence
   10FD B9 31 A6           3956 	cjne	r1,#0x31,00170$
                           3957 ;	Peephole 200.b	removed redundant sjmp
                           3958 ;	Peephole 300	removed redundant label 00417$
                           3959 ;	Peephole 300	removed redundant label 00418$
   1100                    3960 00162$:
                           3961 ;	main.c:442: ch -= 48;
                           3962 ;	genAssign
   1100 90s00r07           3963 	mov	dptr,#_main_ch_1_1
   1103 E0                 3964 	movx	a,@dptr
                           3965 ;	genMinus
   1104 F9                 3966 	mov	r1,a
                           3967 ;	Peephole 105	removed redundant mov
   1105 24 D0              3968 	add	a,#0xd0
                           3969 ;	genAssign
   1107 90s00r07           3970 	mov	dptr,#_main_ch_1_1
   110A F0                 3971 	movx	@dptr,a
                           3972 ;	main.c:447: if(ch == 1)
                           3973 ;	genAssign
   110B 90s00r07           3974 	mov	dptr,#_main_ch_1_1
   110E E0                 3975 	movx	a,@dptr
   110F F9                 3976 	mov	r1,a
                           3977 ;	genCmpEq
                           3978 ;	gencjneshort
                           3979 ;	Peephole 112.b	changed ljmp to sjmp
                           3980 ;	Peephole 198.b	optimized misc jump sequence
   1110 B9 01 33           3981 	cjne	r1,#0x01,00175$
                           3982 ;	Peephole 200.b	removed redundant sjmp
                           3983 ;	Peephole 300	removed redundant label 00419$
                           3984 ;	Peephole 300	removed redundant label 00420$
                           3985 ;	main.c:450: ch1 <<= j;
                           3986 ;	genIpush
   1113 C0 02              3987 	push	ar2
                           3988 ;	genLeftShift
   1115 85*05 F0           3989 	mov	b,_main_sloc4_1_0
   1118 05 F0              3990 	inc	b
   111A 7A 01              3991 	mov	r2,#0x01
   111C 7B 00              3992 	mov	r3,#0x00
   111E 80 06              3993 	sjmp	00422$
   1120                    3994 00421$:
   1120 EA                 3995 	mov	a,r2
                           3996 ;	Peephole 254	optimized left shift
   1121 2A                 3997 	add	a,r2
   1122 FA                 3998 	mov	r2,a
   1123 EB                 3999 	mov	a,r3
   1124 33                 4000 	rlc	a
   1125 FB                 4001 	mov	r3,a
   1126                    4002 00422$:
   1126 D5 F0 F7           4003 	djnz	b,00421$
                           4004 ;	genCast
   1129 8A 01              4005 	mov	ar1,r2
                           4006 ;	main.c:451: row_vals[i] |= ch1;
                           4007 ;	genPlus
                           4008 ;	Peephole 236.g	used r7 instead of ar7
   112B EF                 4009 	mov	a,r7
   112C 24r0C              4010 	add	a,#_main_row_vals_1_1
   112E FB                 4011 	mov	r3,a
                           4012 ;	Peephole 236.g	used r0 instead of ar0
   112F E8                 4013 	mov	a,r0
   1130 34s00              4014 	addc	a,#(_main_row_vals_1_1 >> 8)
   1132 FC                 4015 	mov	r4,a
                           4016 ;	genPointerGet
                           4017 ;	genFarPointerGet
   1133 8B 82              4018 	mov	dpl,r3
   1135 8C 83              4019 	mov	dph,r4
   1137 E0                 4020 	movx	a,@dptr
   1138 FA                 4021 	mov	r2,a
                           4022 ;	genOr
   1139 E9                 4023 	mov	a,r1
   113A 42 02              4024 	orl	ar2,a
                           4025 ;	genPointerSet
                           4026 ;     genFarPointerSet
   113C 8B 82              4027 	mov	dpl,r3
   113E 8C 83              4028 	mov	dph,r4
   1140 EA                 4029 	mov	a,r2
   1141 F0                 4030 	movx	@dptr,a
                           4031 ;	genIpop
   1142 D0 02              4032 	pop	ar2
                           4033 ;	Peephole 112.b	changed ljmp to sjmp
   1144 80 31              4034 	sjmp	00243$
   1146                    4035 00175$:
                           4036 ;	main.c:454: else if(ch == 0)
                           4037 ;	genIfx
   1146 E9                 4038 	mov	a,r1
                           4039 ;	genIfxJump
                           4040 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1147 70 2E              4041 	jnz	00243$
                           4042 ;	Peephole 300	removed redundant label 00423$
                           4043 ;	main.c:457: ch0 <<= j;
                           4044 ;	genIpush
   1149 C0 02              4045 	push	ar2
                           4046 ;	genLeftShift
   114B 85*05 F0           4047 	mov	b,_main_sloc4_1_0
   114E 05 F0              4048 	inc	b
   1150 7B FE              4049 	mov	r3,#0xFE
   1152 7C FF              4050 	mov	r4,#0xFF
   1154 80 06              4051 	sjmp	00425$
   1156                    4052 00424$:
   1156 EB                 4053 	mov	a,r3
                           4054 ;	Peephole 254	optimized left shift
   1157 2B                 4055 	add	a,r3
   1158 FB                 4056 	mov	r3,a
   1159 EC                 4057 	mov	a,r4
   115A 33                 4058 	rlc	a
   115B FC                 4059 	mov	r4,a
   115C                    4060 00425$:
   115C D5 F0 F7           4061 	djnz	b,00424$
                           4062 ;	genCast
                           4063 ;	main.c:458: row_vals[i] &= ch0;
                           4064 ;	genPlus
                           4065 ;	Peephole 236.g	used r5 instead of ar5
   115F ED                 4066 	mov	a,r5
   1160 24r0C              4067 	add	a,#_main_row_vals_1_1
   1162 FC                 4068 	mov	r4,a
                           4069 ;	Peephole 236.g	used r6 instead of ar6
   1163 EE                 4070 	mov	a,r6
   1164 34s00              4071 	addc	a,#(_main_row_vals_1_1 >> 8)
   1166 F9                 4072 	mov	r1,a
                           4073 ;	genPointerGet
                           4074 ;	genFarPointerGet
   1167 8C 82              4075 	mov	dpl,r4
   1169 89 83              4076 	mov	dph,r1
   116B E0                 4077 	movx	a,@dptr
                           4078 ;	genAnd
   116C FA                 4079 	mov	r2,a
                           4080 ;	Peephole 105	removed redundant mov
   116D 52 03              4081 	anl	ar3,a
                           4082 ;	genPointerSet
                           4083 ;     genFarPointerSet
   116F 8C 82              4084 	mov	dpl,r4
   1171 89 83              4085 	mov	dph,r1
   1173 EB                 4086 	mov	a,r3
   1174 F0                 4087 	movx	@dptr,a
                           4088 ;	main.c:711: }
                           4089 ;	genIpop
   1175 D0 02              4090 	pop	ar2
                           4091 ;	main.c:458: row_vals[i] &= ch0;
   1177                    4092 00243$:
                           4093 ;	main.c:430: for(j=4;j>=0;j--)                       // Fetch pixel values for 8 bytes from user
                           4094 ;	genMinus
                           4095 ;	genMinusDec
   1177 15*05              4096 	dec	_main_sloc4_1_0
   1179 74 FF              4097 	mov	a,#0xff
   117B B5*05 02           4098 	cjne	a,_main_sloc4_1_0,00426$
   117E 15*06              4099 	dec	(_main_sloc4_1_0 + 1)
   1180                    4100 00426$:
   1180 02s10r9E           4101 	ljmp	00241$
   1183                    4102 00244$:
                           4103 ;	main.c:462: printf("\n\r");
                           4104 ;	genIpush
   1183 C0 02              4105 	push	ar2
   1185 74rF1              4106 	mov	a,#__str_55
   1187 C0 E0              4107 	push	acc
   1189 74s05              4108 	mov	a,#(__str_55 >> 8)
   118B C0 E0              4109 	push	acc
   118D 74 80              4110 	mov	a,#0x80
   118F C0 E0              4111 	push	acc
                           4112 ;	genCall
   1191 12s00r00           4113 	lcall	_printf
   1194 15 81              4114 	dec	sp
   1196 15 81              4115 	dec	sp
   1198 15 81              4116 	dec	sp
   119A D0 02              4117 	pop	ar2
                           4118 ;	main.c:463: for(j=0;j<=i;j++)               // print row values entered
                           4119 ;	genAssign
   119C AB*01              4120 	mov	r3,_main_sloc1_1_0
   119E AC*02              4121 	mov	r4,(_main_sloc1_1_0 + 1)
                           4122 ;	genAssign
   11A0 7D 00              4123 	mov	r5,#0x00
   11A2 7E 00              4124 	mov	r6,#0x00
   11A4                    4125 00249$:
                           4126 ;	genCmpGt
                           4127 ;	genCmp
   11A4 C3                 4128 	clr	c
   11A5 EB                 4129 	mov	a,r3
   11A6 9D                 4130 	subb	a,r5
   11A7 EC                 4131 	mov	a,r4
   11A8 64 80              4132 	xrl	a,#0x80
   11AA 8E F0              4133 	mov	b,r6
   11AC 63 F0 80           4134 	xrl	b,#0x80
   11AF 95 F0              4135 	subb	a,b
                           4136 ;	genIfxJump
   11B1 50 03              4137 	jnc	00427$
   11B3 02s12r5B           4138 	ljmp	00255$
   11B6                    4139 00427$:
                           4140 ;	main.c:465: for(r=4;r>=0;r--)
                           4141 ;	genAssign
   11B6 8D 07              4142 	mov	ar7,r5
   11B8 8E 00              4143 	mov	ar0,r6
                           4144 ;	genAssign
   11BA 75*05 04           4145 	mov	_main_sloc4_1_0,#0x04
   11BD E4                 4146 	clr	a
   11BE F5*06              4147 	mov	(_main_sloc4_1_0 + 1),a
   11C0                    4148 00245$:
                           4149 ;	genCmpLt
                           4150 ;	genCmp
   11C0 E5*06              4151 	mov	a,(_main_sloc4_1_0 + 1)
                           4152 ;	genIfxJump
                           4153 ;	Peephole 108.e	removed ljmp by inverse jump logic
   11C2 20 E7 6B           4154 	jb	acc.7,00248$
                           4155 ;	Peephole 300	removed redundant label 00428$
                           4156 ;	main.c:467: temp = row_vals[j];
                           4157 ;	genIpush
   11C5 C0 02              4158 	push	ar2
                           4159 ;	genPlus
                           4160 ;	Peephole 236.g	used r7 instead of ar7
   11C7 EF                 4161 	mov	a,r7
   11C8 24r0C              4162 	add	a,#_main_row_vals_1_1
   11CA F5 82              4163 	mov	dpl,a
                           4164 ;	Peephole 236.g	used r0 instead of ar0
   11CC E8                 4165 	mov	a,r0
   11CD 34s00              4166 	addc	a,#(_main_row_vals_1_1 >> 8)
   11CF F5 83              4167 	mov	dph,a
                           4168 ;	genPointerGet
                           4169 ;	genFarPointerGet
   11D1 E0                 4170 	movx	a,@dptr
                           4171 ;	genCast
   11D2 F9                 4172 	mov	r1,a
                           4173 ;	Peephole 105	removed redundant mov
   11D3 33                 4174 	rlc	a
   11D4 95 E0              4175 	subb	a,acc
   11D6 FA                 4176 	mov	r2,a
                           4177 ;	main.c:468: temp >>= r;
                           4178 ;	genRightShift
                           4179 ;	genSignedRightShift
   11D7 85*05 F0           4180 	mov	b,_main_sloc4_1_0
   11DA 05 F0              4181 	inc	b
   11DC EA                 4182 	mov	a,r2
   11DD 33                 4183 	rlc	a
   11DE 92 D2              4184 	mov	ov,c
   11E0 80 08              4185 	sjmp	00430$
   11E2                    4186 00429$:
   11E2 A2 D2              4187 	mov	c,ov
   11E4 EA                 4188 	mov	a,r2
   11E5 13                 4189 	rrc	a
   11E6 FA                 4190 	mov	r2,a
   11E7 E9                 4191 	mov	a,r1
   11E8 13                 4192 	rrc	a
   11E9 F9                 4193 	mov	r1,a
   11EA                    4194 00430$:
   11EA D5 F0 F5           4195 	djnz	b,00429$
                           4196 ;	main.c:469: temp &= 0x01;
                           4197 ;	genAnd
   11ED 53 01 01           4198 	anl	ar1,#0x01
   11F0 7A 00              4199 	mov	r2,#0x00
                           4200 ;	main.c:470: printf_tiny("%d ",temp);
                           4201 ;	genIpush
   11F2 C0 02              4202 	push	ar2
   11F4 C0 03              4203 	push	ar3
   11F6 C0 04              4204 	push	ar4
   11F8 C0 05              4205 	push	ar5
   11FA C0 06              4206 	push	ar6
   11FC C0 07              4207 	push	ar7
   11FE C0 00              4208 	push	ar0
   1200 C0 01              4209 	push	ar1
   1202 C0 02              4210 	push	ar2
                           4211 ;	genIpush
   1204 74rF4              4212 	mov	a,#__str_56
   1206 C0 E0              4213 	push	acc
   1208 74s05              4214 	mov	a,#(__str_56 >> 8)
   120A C0 E0              4215 	push	acc
                           4216 ;	genCall
   120C 12s00r00           4217 	lcall	_printf_tiny
   120F E5 81              4218 	mov	a,sp
   1211 24 FC              4219 	add	a,#0xfc
   1213 F5 81              4220 	mov	sp,a
   1215 D0 00              4221 	pop	ar0
   1217 D0 07              4222 	pop	ar7
   1219 D0 06              4223 	pop	ar6
   121B D0 05              4224 	pop	ar5
   121D D0 04              4225 	pop	ar4
   121F D0 03              4226 	pop	ar3
   1221 D0 02              4227 	pop	ar2
                           4228 ;	main.c:465: for(r=4;r>=0;r--)
                           4229 ;	genMinus
                           4230 ;	genMinusDec
   1223 15*05              4231 	dec	_main_sloc4_1_0
   1225 74 FF              4232 	mov	a,#0xff
   1227 B5*05 02           4233 	cjne	a,_main_sloc4_1_0,00431$
   122A 15*06              4234 	dec	(_main_sloc4_1_0 + 1)
   122C                    4235 00431$:
                           4236 ;	genIpop
   122C D0 02              4237 	pop	ar2
                           4238 ;	Peephole 112.b	changed ljmp to sjmp
   122E 80 90              4239 	sjmp	00245$
   1230                    4240 00248$:
                           4241 ;	main.c:473: printf_tiny("\n\r");
                           4242 ;	genIpush
   1230 C0 02              4243 	push	ar2
   1232 C0 03              4244 	push	ar3
   1234 C0 04              4245 	push	ar4
   1236 C0 05              4246 	push	ar5
   1238 C0 06              4247 	push	ar6
   123A 74rF1              4248 	mov	a,#__str_55
   123C C0 E0              4249 	push	acc
   123E 74s05              4250 	mov	a,#(__str_55 >> 8)
   1240 C0 E0              4251 	push	acc
                           4252 ;	genCall
   1242 12s00r00           4253 	lcall	_printf_tiny
   1245 15 81              4254 	dec	sp
   1247 15 81              4255 	dec	sp
   1249 D0 06              4256 	pop	ar6
   124B D0 05              4257 	pop	ar5
   124D D0 04              4258 	pop	ar4
   124F D0 03              4259 	pop	ar3
   1251 D0 02              4260 	pop	ar2
                           4261 ;	main.c:463: for(j=0;j<=i;j++)               // print row values entered
                           4262 ;	genPlus
                           4263 ;     genPlusIncr
   1253 0D                 4264 	inc	r5
   1254 BD 00 01           4265 	cjne	r5,#0x00,00432$
   1257 0E                 4266 	inc	r6
   1258                    4267 00432$:
   1258 02s11rA4           4268 	ljmp	00249$
   125B                    4269 00255$:
                           4270 ;	main.c:427: for(i=0;i<8;i++)
                           4271 ;	genPlus
                           4272 ;     genPlusIncr
   125B 74 01              4273 	mov	a,#0x01
                           4274 ;	Peephole 236.a	used r3 instead of ar3
   125D 2B                 4275 	add	a,r3
   125E F5*01              4276 	mov	_main_sloc1_1_0,a
                           4277 ;	Peephole 181	changed mov to clr
   1260 E4                 4278 	clr	a
                           4279 ;	Peephole 236.b	used r4 instead of ar4
   1261 3C                 4280 	addc	a,r4
   1262 F5*02              4281 	mov	(_main_sloc1_1_0 + 1),a
   1264 02s10r67           4282 	ljmp	00253$
   1267                    4283 00256$:
                           4284 ;	main.c:477: lcdcreatechar(ccode,&row_vals);             // create custom character calling lcd create char
                           4285 ;	genCast
   1267 90s00r00           4286 	mov	dptr,#_lcdcreatechar_PARM_2
   126A 74r0C              4287 	mov	a,#_main_row_vals_1_1
   126C F0                 4288 	movx	@dptr,a
   126D A3                 4289 	inc	dptr
   126E 74s00              4290 	mov	a,#(_main_row_vals_1_1 >> 8)
   1270 F0                 4291 	movx	@dptr,a
   1271 A3                 4292 	inc	dptr
   1272 74 00              4293 	mov	a,#0x0
   1274 F0                 4294 	movx	@dptr,a
                           4295 ;	genCall
   1275 8A 82              4296 	mov	dpl,r2
   1277 12s00r00           4297 	lcall	_lcdcreatechar
                           4298 ;	main.c:478: TR0=0;
                           4299 ;	genAssign
   127A C2 8C              4300 	clr	_TR0
                           4301 ;	main.c:479: lcdgotoxy(0,0);
                           4302 ;	genAssign
   127C 90s00r00           4303 	mov	dptr,#_lcdgotoxy_PARM_2
                           4304 ;	Peephole 181	changed mov to clr
   127F E4                 4305 	clr	a
   1280 F0                 4306 	movx	@dptr,a
                           4307 ;	genCall
   1281 75 82 00           4308 	mov	dpl,#0x00
   1284 12s00r00           4309 	lcall	_lcdgotoxy
                           4310 ;	main.c:480: delay(1);
                           4311 ;	genCall
                           4312 ;	Peephole 182.b	used 16 bit load of dptr
   1287 90 00 01           4313 	mov	dptr,#0x0001
   128A 12s00r00           4314 	lcall	_delay
                           4315 ;	main.c:481: lcdputch(0x00);
                           4316 ;	genCall
   128D 75 82 00           4317 	mov	dpl,#0x00
   1290 12s00r00           4318 	lcall	_lcdputch
                           4319 ;	main.c:482: delay(1);
                           4320 ;	genCall
                           4321 ;	Peephole 182.b	used 16 bit load of dptr
   1293 90 00 01           4322 	mov	dptr,#0x0001
   1296 12s00r00           4323 	lcall	_delay
                           4324 ;	main.c:483: lcdgotoxy(0,1);
                           4325 ;	genAssign
   1299 90s00r00           4326 	mov	dptr,#_lcdgotoxy_PARM_2
   129C 74 01              4327 	mov	a,#0x01
   129E F0                 4328 	movx	@dptr,a
                           4329 ;	genCall
   129F 75 82 00           4330 	mov	dpl,#0x00
   12A2 12s00r00           4331 	lcall	_lcdgotoxy
                           4332 ;	main.c:484: delay(1);
                           4333 ;	genCall
                           4334 ;	Peephole 182.b	used 16 bit load of dptr
   12A5 90 00 01           4335 	mov	dptr,#0x0001
   12A8 12s00r00           4336 	lcall	_delay
                           4337 ;	main.c:485: lcdputch(0x01);
                           4338 ;	genCall
   12AB 75 82 01           4339 	mov	dpl,#0x01
   12AE 12s00r00           4340 	lcall	_lcdputch
                           4341 ;	main.c:486: delay(1);
                           4342 ;	genCall
                           4343 ;	Peephole 182.b	used 16 bit load of dptr
   12B1 90 00 01           4344 	mov	dptr,#0x0001
   12B4 12s00r00           4345 	lcall	_delay
                           4346 ;	main.c:487: lcdgotoxy(3,9);
                           4347 ;	genAssign
   12B7 90s00r00           4348 	mov	dptr,#_lcdgotoxy_PARM_2
   12BA 74 09              4349 	mov	a,#0x09
   12BC F0                 4350 	movx	@dptr,a
                           4351 ;	genCall
   12BD 75 82 03           4352 	mov	dpl,#0x03
   12C0 12s00r00           4353 	lcall	_lcdgotoxy
                           4354 ;	main.c:488: delay(1);
                           4355 ;	genCall
                           4356 ;	Peephole 182.b	used 16 bit load of dptr
   12C3 90 00 01           4357 	mov	dptr,#0x0001
   12C6 12s00r00           4358 	lcall	_delay
                           4359 ;	main.c:489: TR0=1;
                           4360 ;	genAssign
   12C9 D2 8C              4361 	setb	_TR0
                           4362 ;	main.c:490: break;
   12CB 02s00rC1           4363 	ljmp	00223$
                           4364 ;	main.c:492: case '8':
   12CE                    4365 00177$:
                           4366 ;	main.c:495: watchdog_isr();
                           4367 ;	genCall
   12CE 12s00r00           4368 	lcall	_watchdog_isr
                           4369 ;	main.c:496: break;
   12D1 02s00rC1           4370 	ljmp	00223$
                           4371 ;	main.c:498: case '9':
   12D4                    4372 00178$:
                           4373 ;	main.c:501: printf_tiny("\n\rI/O Expander\n\r");
                           4374 ;	genIpush
   12D4 74rF8              4375 	mov	a,#__str_57
   12D6 C0 E0              4376 	push	acc
   12D8 74s05              4377 	mov	a,#(__str_57 >> 8)
   12DA C0 E0              4378 	push	acc
                           4379 ;	genCall
   12DC 12s00r00           4380 	lcall	_printf_tiny
   12DF 15 81              4381 	dec	sp
   12E1 15 81              4382 	dec	sp
                           4383 ;	main.c:502: printf_tiny("Enter one of the following options:\n\r");
                           4384 ;	genIpush
   12E3 74r09              4385 	mov	a,#__str_58
   12E5 C0 E0              4386 	push	acc
   12E7 74s06              4387 	mov	a,#(__str_58 >> 8)
   12E9 C0 E0              4388 	push	acc
                           4389 ;	genCall
   12EB 12s00r00           4390 	lcall	_printf_tiny
   12EE 15 81              4391 	dec	sp
   12F0 15 81              4392 	dec	sp
                           4393 ;	main.c:504: printf_tiny("1-Write to port pins\n\r");
                           4394 ;	genIpush
   12F2 74r2F              4395 	mov	a,#__str_59
   12F4 C0 E0              4396 	push	acc
   12F6 74s06              4397 	mov	a,#(__str_59 >> 8)
   12F8 C0 E0              4398 	push	acc
                           4399 ;	genCall
   12FA 12s00r00           4400 	lcall	_printf_tiny
   12FD 15 81              4401 	dec	sp
   12FF 15 81              4402 	dec	sp
                           4403 ;	main.c:505: printf_tiny("2-Read from Port Pins\n\r");
                           4404 ;	genIpush
   1301 74r46              4405 	mov	a,#__str_60
   1303 C0 E0              4406 	push	acc
   1305 74s06              4407 	mov	a,#(__str_60 >> 8)
   1307 C0 E0              4408 	push	acc
                           4409 ;	genCall
   1309 12s00r00           4410 	lcall	_printf_tiny
   130C 15 81              4411 	dec	sp
   130E 15 81              4412 	dec	sp
                           4413 ;	main.c:507: ch=getchar();
                           4414 ;	genCall
   1310 12s00r00           4415 	lcall	_getchar
   1313 AA 82              4416 	mov	r2,dpl
                           4417 ;	main.c:509: switch(ch)
                           4418 ;	genCmpEq
                           4419 ;	gencjneshort
   1315 BA 31 02           4420 	cjne	r2,#0x31,00433$
                           4421 ;	Peephole 112.b	changed ljmp to sjmp
   1318 80 2F              4422 	sjmp	00180$
   131A                    4423 00433$:
                           4424 ;	genCmpEq
                           4425 ;	gencjneshort
   131A BA 32 02           4426 	cjne	r2,#0x32,00434$
   131D 80 03              4427 	sjmp	00435$
   131F                    4428 00434$:
   131F 02s00rC1           4429 	ljmp	00223$
   1322                    4430 00435$:
                           4431 ;	main.c:513: data1 = IOByteRead();       // read data from i/o port
                           4432 ;	genCall
   1322 12s2Ar4B           4433 	lcall	_IOByteRead
   1325 AA 82              4434 	mov	r2,dpl
                           4435 ;	genAssign
   1327 90s00r03           4436 	mov	dptr,#_data1
   132A EA                 4437 	mov	a,r2
   132B F0                 4438 	movx	@dptr,a
                           4439 ;	main.c:514: printf_tiny("\n\rIOByteRead: %x",data1);
                           4440 ;	genCast
   132C EA                 4441 	mov	a,r2
   132D 33                 4442 	rlc	a
   132E 95 E0              4443 	subb	a,acc
   1330 FB                 4444 	mov	r3,a
                           4445 ;	genIpush
   1331 C0 02              4446 	push	ar2
   1333 C0 03              4447 	push	ar3
                           4448 ;	genIpush
   1335 74r5E              4449 	mov	a,#__str_61
   1337 C0 E0              4450 	push	acc
   1339 74s06              4451 	mov	a,#(__str_61 >> 8)
   133B C0 E0              4452 	push	acc
                           4453 ;	genCall
   133D 12s00r00           4454 	lcall	_printf_tiny
   1340 E5 81              4455 	mov	a,sp
   1342 24 FC              4456 	add	a,#0xfc
   1344 F5 81              4457 	mov	sp,a
                           4458 ;	main.c:515: break;
   1346 02s00rC1           4459 	ljmp	00223$
                           4460 ;	main.c:517: case '1':                   // write to port pins
   1349                    4461 00180$:
                           4462 ;	main.c:520: printf_tiny("\n\rEnter data to be written to IO port:\n\r");
                           4463 ;	genIpush
   1349 74r6F              4464 	mov	a,#__str_62
   134B C0 E0              4465 	push	acc
   134D 74s06              4466 	mov	a,#(__str_62 >> 8)
   134F C0 E0              4467 	push	acc
                           4468 ;	genCall
   1351 12s00r00           4469 	lcall	_printf_tiny
   1354 15 81              4470 	dec	sp
   1356 15 81              4471 	dec	sp
                           4472 ;	main.c:521: wrdata=fetch_data();
                           4473 ;	genCall
   1358 12s24rD6           4474 	lcall	_fetch_data
   135B AA 82              4475 	mov	r2,dpl
                           4476 ;	main.c:522: ConfIOExp(block,wrdata);            //write command to port pins
                           4477 ;	genAssign
   135D 90s00r37           4478 	mov	dptr,#_ConfIOExp_PARM_2
   1360 EA                 4479 	mov	a,r2
   1361 F0                 4480 	movx	@dptr,a
                           4481 ;	genCall
   1362 75 82 00           4482 	mov	dpl,#0x00
   1365 12s28rE3           4483 	lcall	_ConfIOExp
                           4484 ;	main.c:526: break;
   1368 02s00rC1           4485 	ljmp	00223$
                           4486 ;	main.c:528: case 'A':
   136B                    4487 00182$:
                           4488 ;	main.c:532: P1_0=0;
                           4489 ;	genAssign
   136B C2 90              4490 	clr	_P1_0
                           4491 ;	main.c:533: printf_tiny("\n\rTimed Block Fill\n\r");
                           4492 ;	genIpush
   136D 74r98              4493 	mov	a,#__str_63
   136F C0 E0              4494 	push	acc
   1371 74s06              4495 	mov	a,#(__str_63 >> 8)
   1373 C0 E0              4496 	push	acc
                           4497 ;	genCall
   1375 12s00r00           4498 	lcall	_printf_tiny
   1378 15 81              4499 	dec	sp
   137A 15 81              4500 	dec	sp
                           4501 ;	main.c:534: printf_tiny("\n\rEnter Start address for block fill\n\r");
                           4502 ;	genIpush
   137C 74rAD              4503 	mov	a,#__str_64
   137E C0 E0              4504 	push	acc
   1380 74s06              4505 	mov	a,#(__str_64 >> 8)
   1382 C0 E0              4506 	push	acc
                           4507 ;	genCall
   1384 12s00r00           4508 	lcall	_printf_tiny
   1387 15 81              4509 	dec	sp
   1389 15 81              4510 	dec	sp
                           4511 ;	main.c:535: saddr = fetch_addr();               // fetch block start address
                           4512 ;	genCall
   138B 12s20r6A           4513 	lcall	_fetch_addr
   138E 85 82*09           4514 	mov	_main_sloc7_1_0,dpl
                           4515 ;	main.c:537: pageblock = bufsiz[0];
                           4516 ;	genPointerGet
                           4517 ;	genFarPointerGet
   1391 90s00r00           4518 	mov	dptr,#_bufsiz
   1394 E0                 4519 	movx	a,@dptr
   1395 FB                 4520 	mov	r3,a
                           4521 ;	main.c:538: pageblock &= 0x0F;
                           4522 ;	genAnd
   1396 53 03 0F           4523 	anl	ar3,#0x0F
                           4524 ;	genAssign
   1399 90s00r04           4525 	mov	dptr,#_main_pageblock_1_1
   139C EB                 4526 	mov	a,r3
   139D F0                 4527 	movx	@dptr,a
                           4528 ;	main.c:539: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblock);
                           4529 ;	genCast
   139E EB                 4530 	mov	a,r3
   139F 33                 4531 	rlc	a
   13A0 95 E0              4532 	subb	a,acc
   13A2 FC                 4533 	mov	r4,a
                           4534 ;	genIpush
   13A3 C0 03              4535 	push	ar3
   13A5 C0 04              4536 	push	ar4
                           4537 ;	genIpush
   13A7 74r30              4538 	mov	a,#__str_18
   13A9 C0 E0              4539 	push	acc
   13AB 74s02              4540 	mov	a,#(__str_18 >> 8)
   13AD C0 E0              4541 	push	acc
                           4542 ;	genCall
   13AF 12s00r00           4543 	lcall	_printf_tiny
   13B2 E5 81              4544 	mov	a,sp
   13B4 24 FC              4545 	add	a,#0xfc
   13B6 F5 81              4546 	mov	sp,a
                           4547 ;	main.c:540: printf("Start address: %02x\n\r",(saddr & 0xFF));
                           4548 ;	genAssign
   13B8 AB*09              4549 	mov	r3,_main_sloc7_1_0
                           4550 ;	genCast
   13BA 7C 00              4551 	mov	r4,#0x00
                           4552 ;	genIpush
   13BC C0 03              4553 	push	ar3
   13BE C0 04              4554 	push	ar4
                           4555 ;	genIpush
   13C0 74rD4              4556 	mov	a,#__str_65
   13C2 C0 E0              4557 	push	acc
   13C4 74s06              4558 	mov	a,#(__str_65 >> 8)
   13C6 C0 E0              4559 	push	acc
   13C8 74 80              4560 	mov	a,#0x80
   13CA C0 E0              4561 	push	acc
                           4562 ;	genCall
   13CC 12s00r00           4563 	lcall	_printf
   13CF E5 81              4564 	mov	a,sp
   13D1 24 FB              4565 	add	a,#0xfb
   13D3 F5 81              4566 	mov	sp,a
                           4567 ;	main.c:542: printf_tiny("\n\rEnter End address for block fill\n\r");
                           4568 ;	genIpush
   13D5 74rEA              4569 	mov	a,#__str_66
   13D7 C0 E0              4570 	push	acc
   13D9 74s06              4571 	mov	a,#(__str_66 >> 8)
   13DB C0 E0              4572 	push	acc
                           4573 ;	genCall
   13DD 12s00r00           4574 	lcall	_printf_tiny
   13E0 15 81              4575 	dec	sp
   13E2 15 81              4576 	dec	sp
                           4577 ;	main.c:543: daddr = fetch_addr();               // fetch end address
                           4578 ;	genCall
   13E4 12s20r6A           4579 	lcall	_fetch_addr
   13E7 AB 82              4580 	mov	r3,dpl
                           4581 ;	main.c:545: pageblockw = bufsiz[0];
                           4582 ;	genPointerGet
                           4583 ;	genFarPointerGet
   13E9 90s00r00           4584 	mov	dptr,#_bufsiz
   13EC E0                 4585 	movx	a,@dptr
   13ED FC                 4586 	mov	r4,a
                           4587 ;	main.c:546: pageblockw &= 0x0F;
                           4588 ;	genAnd
   13EE 53 04 0F           4589 	anl	ar4,#0x0F
                           4590 ;	genAssign
   13F1 90s00r05           4591 	mov	dptr,#_main_pageblockw_1_1
   13F4 EC                 4592 	mov	a,r4
   13F5 F0                 4593 	movx	@dptr,a
                           4594 ;	main.c:547: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblockw);
                           4595 ;	genCast
   13F6 EC                 4596 	mov	a,r4
   13F7 33                 4597 	rlc	a
   13F8 95 E0              4598 	subb	a,acc
   13FA FD                 4599 	mov	r5,a
                           4600 ;	genIpush
   13FB C0 03              4601 	push	ar3
   13FD C0 04              4602 	push	ar4
   13FF C0 05              4603 	push	ar5
                           4604 ;	genIpush
   1401 74r30              4605 	mov	a,#__str_18
   1403 C0 E0              4606 	push	acc
   1405 74s02              4607 	mov	a,#(__str_18 >> 8)
   1407 C0 E0              4608 	push	acc
                           4609 ;	genCall
   1409 12s00r00           4610 	lcall	_printf_tiny
   140C E5 81              4611 	mov	a,sp
   140E 24 FC              4612 	add	a,#0xfc
   1410 F5 81              4613 	mov	sp,a
   1412 D0 03              4614 	pop	ar3
                           4615 ;	main.c:548: printf("End address: %02x\n\r",(daddr & 0xFF));
                           4616 ;	genAssign
   1414 8B 04              4617 	mov	ar4,r3
                           4618 ;	genCast
   1416 7D 00              4619 	mov	r5,#0x00
                           4620 ;	genIpush
   1418 C0 03              4621 	push	ar3
   141A C0 04              4622 	push	ar4
   141C C0 05              4623 	push	ar5
                           4624 ;	genIpush
   141E 74r0F              4625 	mov	a,#__str_67
   1420 C0 E0              4626 	push	acc
   1422 74s07              4627 	mov	a,#(__str_67 >> 8)
   1424 C0 E0              4628 	push	acc
   1426 74 80              4629 	mov	a,#0x80
   1428 C0 E0              4630 	push	acc
                           4631 ;	genCall
   142A 12s00r00           4632 	lcall	_printf
   142D E5 81              4633 	mov	a,sp
   142F 24 FB              4634 	add	a,#0xfb
   1431 F5 81              4635 	mov	sp,a
   1433 D0 03              4636 	pop	ar3
                           4637 ;	main.c:550: printf_tiny("\n\rEnter the value for block fill\n\r");
                           4638 ;	genIpush
   1435 C0 03              4639 	push	ar3
   1437 74r23              4640 	mov	a,#__str_68
   1439 C0 E0              4641 	push	acc
   143B 74s07              4642 	mov	a,#(__str_68 >> 8)
   143D C0 E0              4643 	push	acc
                           4644 ;	genCall
   143F 12s00r00           4645 	lcall	_printf_tiny
   1442 15 81              4646 	dec	sp
   1444 15 81              4647 	dec	sp
   1446 D0 03              4648 	pop	ar3
                           4649 ;	main.c:551: num=fetch_data();                   // fetch data for block fill
                           4650 ;	genCall
   1448 C0 03              4651 	push	ar3
   144A 12s24rD6           4652 	lcall	_fetch_data
   144D AC 82              4653 	mov	r4,dpl
   144F D0 03              4654 	pop	ar3
                           4655 ;	main.c:553: P1_0=1;
                           4656 ;	genAssign
   1451 D2 90              4657 	setb	_P1_0
                           4658 ;	main.c:557: if(pageblock == pageblockw)
                           4659 ;	genAssign
   1453 90s00r04           4660 	mov	dptr,#_main_pageblock_1_1
   1456 E0                 4661 	movx	a,@dptr
   1457 FD                 4662 	mov	r5,a
                           4663 ;	genAssign
   1458 90s00r05           4664 	mov	dptr,#_main_pageblockw_1_1
   145B E0                 4665 	movx	a,@dptr
   145C FE                 4666 	mov	r6,a
                           4667 ;	genCmpEq
                           4668 ;	gencjneshort
   145D ED                 4669 	mov	a,r5
                           4670 ;	Peephole 112.b	changed ljmp to sjmp
                           4671 ;	Peephole 198.b	optimized misc jump sequence
   145E B5 06 62           4672 	cjne	a,ar6,00340$
                           4673 ;	Peephole 200.b	removed redundant sjmp
                           4674 ;	Peephole 300	removed redundant label 00436$
                           4675 ;	Peephole 300	removed redundant label 00437$
                           4676 ;	main.c:559: for(i=0;i<=(daddr-saddr);i++)
                           4677 ;	genAssign
   1461 8E 05              4678 	mov	ar5,r6
                           4679 ;	genAssign
   1463 7F 00              4680 	mov	r7,#0x00
   1465 78 00              4681 	mov	r0,#0x00
   1467                    4682 00257$:
                           4683 ;	genIpush
   1467 C0 05              4684 	push	ar5
                           4685 ;	genCast
                           4686 ;	peephole 177.h	optimized mov sequence
   1469 EB                 4687 	mov	a,r3
                           4688 ;	Peephole 236.i	used r6 instead of ar6
   146A FE                 4689 	mov	r6,a
   146B 33                 4690 	rlc	a
   146C 95 E0              4691 	subb	a,acc
   146E F9                 4692 	mov	r1,a
                           4693 ;	genCast
   146F AA*09              4694 	mov	r2,_main_sloc7_1_0
   1471 E5*09              4695 	mov	a,_main_sloc7_1_0
   1473 33                 4696 	rlc	a
   1474 95 E0              4697 	subb	a,acc
   1476 FD                 4698 	mov	r5,a
                           4699 ;	genMinus
   1477 EE                 4700 	mov	a,r6
   1478 C3                 4701 	clr	c
                           4702 ;	Peephole 236.l	used r2 instead of ar2
   1479 9A                 4703 	subb	a,r2
   147A FA                 4704 	mov	r2,a
   147B E9                 4705 	mov	a,r1
                           4706 ;	Peephole 236.l	used r5 instead of ar5
   147C 9D                 4707 	subb	a,r5
   147D FD                 4708 	mov	r5,a
                           4709 ;	genCmpGt
                           4710 ;	genCmp
   147E C3                 4711 	clr	c
   147F EA                 4712 	mov	a,r2
   1480 9F                 4713 	subb	a,r7
   1481 ED                 4714 	mov	a,r5
   1482 64 80              4715 	xrl	a,#0x80
   1484 88 F0              4716 	mov	b,r0
   1486 63 F0 80           4717 	xrl	b,#0x80
   1489 95 F0              4718 	subb	a,b
   148B E4                 4719 	clr	a
   148C 33                 4720 	rlc	a
                           4721 ;	genIpop
   148D D0 05              4722 	pop	ar5
                           4723 ;	genIfx
                           4724 ;	genIfxJump
   148F 60 03              4725 	jz	00438$
   1491 02s15rAB           4726 	ljmp	00193$
   1494                    4727 00438$:
                           4728 ;	main.c:560: eebytew(saddr+i,pageblockw,num);
                           4729 ;	genCast
                           4730 ;	genPlus
                           4731 ;	peephole 177.g	optimized mov sequence
   1494 EF                 4732 	mov	a,r7
                           4733 ;	Peephole 236.i	used r2 instead of ar2
   1495 FA                 4734 	mov	r2,a
   1496 25*09              4735 	add	a,_main_sloc7_1_0
   1498 FA                 4736 	mov	r2,a
                           4737 ;	genAssign
   1499 90s00r18           4738 	mov	dptr,#_eebytew_PARM_2
   149C ED                 4739 	mov	a,r5
   149D F0                 4740 	movx	@dptr,a
                           4741 ;	genAssign
   149E 90s00r19           4742 	mov	dptr,#_eebytew_PARM_3
   14A1 EC                 4743 	mov	a,r4
   14A2 F0                 4744 	movx	@dptr,a
                           4745 ;	genCall
   14A3 8A 82              4746 	mov	dpl,r2
   14A5 C0 03              4747 	push	ar3
   14A7 C0 04              4748 	push	ar4
   14A9 C0 05              4749 	push	ar5
   14AB C0 07              4750 	push	ar7
   14AD C0 00              4751 	push	ar0
   14AF 12s19r71           4752 	lcall	_eebytew
   14B2 D0 00              4753 	pop	ar0
   14B4 D0 07              4754 	pop	ar7
   14B6 D0 05              4755 	pop	ar5
   14B8 D0 04              4756 	pop	ar4
   14BA D0 03              4757 	pop	ar3
                           4758 ;	main.c:559: for(i=0;i<=(daddr-saddr);i++)
                           4759 ;	genPlus
                           4760 ;     genPlusIncr
   14BC 0F                 4761 	inc	r7
                           4762 ;	main.c:565: while(pcount<=pageblockw)
                           4763 ;	Peephole 112.b	changed ljmp to sjmp
                           4764 ;	Peephole 243	avoided branch to sjmp
   14BD BF 00 A7           4765 	cjne	r7,#0x00,00257$
   14C0 08                 4766 	inc	r0
                           4767 ;	Peephole 300	removed redundant label 00439$
   14C1 80 A4              4768 	sjmp	00257$
   14C3                    4769 00340$:
                           4770 ;	genAssign
   14C3 8E*08              4771 	mov	_main_sloc6_1_0,r6
                           4772 ;	genAssign
   14C5 8E 05              4773 	mov	ar5,r6
                           4774 ;	genAssign
   14C7 90s00r06           4775 	mov	dptr,#_main_pcount_1_1
   14CA E0                 4776 	movx	a,@dptr
   14CB FE                 4777 	mov	r6,a
   14CC                    4778 00188$:
                           4779 ;	genCmpGt
                           4780 ;	genCmp
   14CC C3                 4781 	clr	c
   14CD ED                 4782 	mov	a,r5
   14CE 64 80              4783 	xrl	a,#0x80
   14D0 8E F0              4784 	mov	b,r6
   14D2 63 F0 80           4785 	xrl	b,#0x80
   14D5 95 F0              4786 	subb	a,b
                           4787 ;	genIfxJump
   14D7 50 03              4788 	jnc	00440$
   14D9 02s15rA6           4789 	ljmp	00371$
   14DC                    4790 00440$:
                           4791 ;	main.c:567: if(pcount<pageblockw)
                           4792 ;	genCmpLt
                           4793 ;	genCmp
   14DC C3                 4794 	clr	c
   14DD EE                 4795 	mov	a,r6
   14DE 64 80              4796 	xrl	a,#0x80
   14E0 8D F0              4797 	mov	b,r5
   14E2 63 F0 80           4798 	xrl	b,#0x80
   14E5 95 F0              4799 	subb	a,b
                           4800 ;	genIfxJump
                           4801 ;	Peephole 108.a	removed ljmp by inverse jump logic
   14E7 50 4C              4802 	jnc	00186$
                           4803 ;	Peephole 300	removed redundant label 00441$
                           4804 ;	main.c:569: for(i=0;i<256;i++)
                           4805 ;	genAssign
   14E9 8E 07              4806 	mov	ar7,r6
                           4807 ;	genAssign
   14EB 78 00              4808 	mov	r0,#0x00
   14ED 79 00              4809 	mov	r1,#0x00
   14EF                    4810 00261$:
                           4811 ;	genCmpLt
                           4812 ;	genCmp
   14EF C3                 4813 	clr	c
   14F0 E9                 4814 	mov	a,r1
   14F1 64 80              4815 	xrl	a,#0x80
   14F3 94 81              4816 	subb	a,#0x81
                           4817 ;	genIfxJump
   14F5 40 03              4818 	jc	00442$
   14F7 02s15r9D           4819 	ljmp	00187$
   14FA                    4820 00442$:
                           4821 ;	main.c:570: eebytew(saddr+i,pcount,num);
                           4822 ;	genIpush
   14FA C0 05              4823 	push	ar5
                           4824 ;	genCast
                           4825 ;	genPlus
                           4826 ;	peephole 177.g	optimized mov sequence
   14FC E8                 4827 	mov	a,r0
                           4828 ;	Peephole 236.i	used r5 instead of ar5
   14FD FD                 4829 	mov	r5,a
   14FE 25*09              4830 	add	a,_main_sloc7_1_0
   1500 FD                 4831 	mov	r5,a
                           4832 ;	genAssign
   1501 90s00r18           4833 	mov	dptr,#_eebytew_PARM_2
   1504 EF                 4834 	mov	a,r7
   1505 F0                 4835 	movx	@dptr,a
                           4836 ;	genAssign
   1506 90s00r19           4837 	mov	dptr,#_eebytew_PARM_3
   1509 EC                 4838 	mov	a,r4
   150A F0                 4839 	movx	@dptr,a
                           4840 ;	genCall
   150B 8D 82              4841 	mov	dpl,r5
   150D C0 03              4842 	push	ar3
   150F C0 04              4843 	push	ar4
   1511 C0 05              4844 	push	ar5
   1513 C0 06              4845 	push	ar6
   1515 C0 07              4846 	push	ar7
   1517 C0 00              4847 	push	ar0
   1519 C0 01              4848 	push	ar1
   151B 12s19r71           4849 	lcall	_eebytew
   151E D0 01              4850 	pop	ar1
   1520 D0 00              4851 	pop	ar0
   1522 D0 07              4852 	pop	ar7
   1524 D0 06              4853 	pop	ar6
   1526 D0 05              4854 	pop	ar5
   1528 D0 04              4855 	pop	ar4
   152A D0 03              4856 	pop	ar3
                           4857 ;	main.c:569: for(i=0;i<256;i++)
                           4858 ;	genPlus
                           4859 ;     genPlusIncr
   152C 08                 4860 	inc	r0
   152D B8 00 01           4861 	cjne	r0,#0x00,00443$
   1530 09                 4862 	inc	r1
   1531                    4863 00443$:
                           4864 ;	genIpop
   1531 D0 05              4865 	pop	ar5
                           4866 ;	Peephole 112.b	changed ljmp to sjmp
   1533 80 BA              4867 	sjmp	00261$
   1535                    4868 00186$:
                           4869 ;	main.c:572: else if(pcount == pageblockw)
                           4870 ;	genCmpEq
                           4871 ;	gencjneshort
   1535 EE                 4872 	mov	a,r6
                           4873 ;	Peephole 112.b	changed ljmp to sjmp
                           4874 ;	Peephole 198.b	optimized misc jump sequence
   1536 B5 05 64           4875 	cjne	a,ar5,00187$
                           4876 ;	Peephole 200.b	removed redundant sjmp
                           4877 ;	Peephole 300	removed redundant label 00444$
                           4878 ;	Peephole 300	removed redundant label 00445$
                           4879 ;	main.c:574: for(i=0;i<=(daddr-saddr);i++)
                           4880 ;	genAssign
   1539 7F 00              4881 	mov	r7,#0x00
   153B 78 00              4882 	mov	r0,#0x00
   153D                    4883 00265$:
                           4884 ;	genIpush
   153D C0 05              4885 	push	ar5
                           4886 ;	genCast
                           4887 ;	peephole 177.h	optimized mov sequence
   153F EB                 4888 	mov	a,r3
   1540 F5*05              4889 	mov	_main_sloc4_1_0,a
   1542 33                 4890 	rlc	a
   1543 95 E0              4891 	subb	a,acc
   1545 F5*06              4892 	mov	(_main_sloc4_1_0 + 1),a
                           4893 ;	genCast
   1547 AA*09              4894 	mov	r2,_main_sloc7_1_0
   1549 E5*09              4895 	mov	a,_main_sloc7_1_0
   154B 33                 4896 	rlc	a
   154C 95 E0              4897 	subb	a,acc
   154E FD                 4898 	mov	r5,a
                           4899 ;	genMinus
   154F E5*05              4900 	mov	a,_main_sloc4_1_0
   1551 C3                 4901 	clr	c
                           4902 ;	Peephole 236.l	used r2 instead of ar2
   1552 9A                 4903 	subb	a,r2
   1553 FA                 4904 	mov	r2,a
   1554 E5*06              4905 	mov	a,(_main_sloc4_1_0 + 1)
                           4906 ;	Peephole 236.l	used r5 instead of ar5
   1556 9D                 4907 	subb	a,r5
   1557 FD                 4908 	mov	r5,a
                           4909 ;	genCmpGt
                           4910 ;	genCmp
   1558 C3                 4911 	clr	c
   1559 EA                 4912 	mov	a,r2
   155A 9F                 4913 	subb	a,r7
   155B ED                 4914 	mov	a,r5
   155C 64 80              4915 	xrl	a,#0x80
   155E 88 F0              4916 	mov	b,r0
   1560 63 F0 80           4917 	xrl	b,#0x80
   1563 95 F0              4918 	subb	a,b
                           4919 ;	genIpop
                           4920 ;	genIfx
                           4921 ;	genIfxJump
                           4922 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           4923 ;	Peephole 129.b	optimized condition
   1565 D0 05              4924 	pop	ar5
   1567 40 34              4925 	jc	00187$
                           4926 ;	Peephole 300	removed redundant label 00446$
                           4927 ;	main.c:575: eebytew(saddr+i,pageblockw,num);
                           4928 ;	genCast
                           4929 ;	genPlus
                           4930 ;	peephole 177.g	optimized mov sequence
   1569 EF                 4931 	mov	a,r7
                           4932 ;	Peephole 236.i	used r2 instead of ar2
   156A FA                 4933 	mov	r2,a
   156B 25*09              4934 	add	a,_main_sloc7_1_0
   156D FA                 4935 	mov	r2,a
                           4936 ;	genAssign
   156E 90s00r18           4937 	mov	dptr,#_eebytew_PARM_2
   1571 E5*08              4938 	mov	a,_main_sloc6_1_0
   1573 F0                 4939 	movx	@dptr,a
                           4940 ;	genAssign
   1574 90s00r19           4941 	mov	dptr,#_eebytew_PARM_3
   1577 EC                 4942 	mov	a,r4
   1578 F0                 4943 	movx	@dptr,a
                           4944 ;	genCall
   1579 8A 82              4945 	mov	dpl,r2
   157B C0 03              4946 	push	ar3
   157D C0 04              4947 	push	ar4
   157F C0 05              4948 	push	ar5
   1581 C0 06              4949 	push	ar6
   1583 C0 07              4950 	push	ar7
   1585 C0 00              4951 	push	ar0
   1587 12s19r71           4952 	lcall	_eebytew
   158A D0 00              4953 	pop	ar0
   158C D0 07              4954 	pop	ar7
   158E D0 06              4955 	pop	ar6
   1590 D0 05              4956 	pop	ar5
   1592 D0 04              4957 	pop	ar4
   1594 D0 03              4958 	pop	ar3
                           4959 ;	main.c:574: for(i=0;i<=(daddr-saddr);i++)
                           4960 ;	genPlus
                           4961 ;     genPlusIncr
   1596 0F                 4962 	inc	r7
                           4963 ;	Peephole 112.b	changed ljmp to sjmp
                           4964 ;	Peephole 243	avoided branch to sjmp
   1597 BF 00 A3           4965 	cjne	r7,#0x00,00265$
   159A 08                 4966 	inc	r0
                           4967 ;	Peephole 300	removed redundant label 00447$
   159B 80 A0              4968 	sjmp	00265$
   159D                    4969 00187$:
                           4970 ;	main.c:577: pcount++;
                           4971 ;	genPlus
                           4972 ;     genPlusIncr
   159D 0E                 4973 	inc	r6
                           4974 ;	genAssign
   159E 90s00r06           4975 	mov	dptr,#_main_pcount_1_1
   15A1 EE                 4976 	mov	a,r6
   15A2 F0                 4977 	movx	@dptr,a
   15A3 02s14rCC           4978 	ljmp	00188$
   15A6                    4979 00371$:
                           4980 ;	genAssign
   15A6 90s00r06           4981 	mov	dptr,#_main_pcount_1_1
   15A9 EE                 4982 	mov	a,r6
   15AA F0                 4983 	movx	@dptr,a
   15AB                    4984 00193$:
                           4985 ;	main.c:581: P1_0=0;
                           4986 ;	genAssign
   15AB C2 90              4987 	clr	_P1_0
                           4988 ;	main.c:582: break;
   15AD 02s00rC1           4989 	ljmp	00223$
                           4990 ;	main.c:585: case 'B':
   15B0                    4991 00194$:
                           4992 ;	main.c:591: printf_tiny("\n\rMeasure EEPROM write times\n\r");
                           4993 ;	genIpush
   15B0 74r46              4994 	mov	a,#__str_69
   15B2 C0 E0              4995 	push	acc
   15B4 74s07              4996 	mov	a,#(__str_69 >> 8)
   15B6 C0 E0              4997 	push	acc
                           4998 ;	genCall
   15B8 12s00r00           4999 	lcall	_printf_tiny
   15BB 15 81              5000 	dec	sp
   15BD 15 81              5001 	dec	sp
                           5002 ;	main.c:593: printf_tiny("\n\rByte write mode\n\r");
                           5003 ;	genIpush
   15BF 74r65              5004 	mov	a,#__str_70
   15C1 C0 E0              5005 	push	acc
   15C3 74s07              5006 	mov	a,#(__str_70 >> 8)
   15C5 C0 E0              5007 	push	acc
                           5008 ;	genCall
   15C7 12s00r00           5009 	lcall	_printf_tiny
   15CA 15 81              5010 	dec	sp
   15CC 15 81              5011 	dec	sp
                           5012 ;	main.c:594: printf_tiny("\n\rEnter Start address for byte write:\n\r");
                           5013 ;	genIpush
   15CE 74r79              5014 	mov	a,#__str_71
   15D0 C0 E0              5015 	push	acc
   15D2 74s07              5016 	mov	a,#(__str_71 >> 8)
   15D4 C0 E0              5017 	push	acc
                           5018 ;	genCall
   15D6 12s00r00           5019 	lcall	_printf_tiny
   15D9 15 81              5020 	dec	sp
   15DB 15 81              5021 	dec	sp
                           5022 ;	main.c:595: saddr = fetch_addr();           //fetch start address for byte write
                           5023 ;	genCall
   15DD 12s20r6A           5024 	lcall	_fetch_addr
   15E0 AA 82              5025 	mov	r2,dpl
                           5026 ;	main.c:597: pageblock = bufsiz[0];
                           5027 ;	genPointerGet
                           5028 ;	genFarPointerGet
   15E2 90s00r00           5029 	mov	dptr,#_bufsiz
   15E5 E0                 5030 	movx	a,@dptr
   15E6 FB                 5031 	mov	r3,a
                           5032 ;	main.c:598: pageblock &= 0x0F;
                           5033 ;	genAnd
   15E7 53 03 0F           5034 	anl	ar3,#0x0F
                           5035 ;	genAssign
   15EA 90s00r04           5036 	mov	dptr,#_main_pageblock_1_1
   15ED EB                 5037 	mov	a,r3
   15EE F0                 5038 	movx	@dptr,a
                           5039 ;	main.c:600: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblock);
                           5040 ;	genCast
   15EF EB                 5041 	mov	a,r3
   15F0 33                 5042 	rlc	a
   15F1 95 E0              5043 	subb	a,acc
   15F3 FC                 5044 	mov	r4,a
                           5045 ;	genIpush
   15F4 C0 02              5046 	push	ar2
   15F6 C0 03              5047 	push	ar3
   15F8 C0 04              5048 	push	ar4
                           5049 ;	genIpush
   15FA 74r30              5050 	mov	a,#__str_18
   15FC C0 E0              5051 	push	acc
   15FE 74s02              5052 	mov	a,#(__str_18 >> 8)
   1600 C0 E0              5053 	push	acc
                           5054 ;	genCall
   1602 12s00r00           5055 	lcall	_printf_tiny
   1605 E5 81              5056 	mov	a,sp
   1607 24 FC              5057 	add	a,#0xfc
   1609 F5 81              5058 	mov	sp,a
   160B D0 02              5059 	pop	ar2
                           5060 ;	main.c:601: printf("Start address: %02x\n\r",(saddr & 0xFF));
                           5061 ;	genAssign
   160D 8A 03              5062 	mov	ar3,r2
                           5063 ;	genCast
   160F 7C 00              5064 	mov	r4,#0x00
                           5065 ;	genIpush
   1611 C0 02              5066 	push	ar2
   1613 C0 03              5067 	push	ar3
   1615 C0 04              5068 	push	ar4
                           5069 ;	genIpush
   1617 74rD4              5070 	mov	a,#__str_65
   1619 C0 E0              5071 	push	acc
   161B 74s06              5072 	mov	a,#(__str_65 >> 8)
   161D C0 E0              5073 	push	acc
   161F 74 80              5074 	mov	a,#0x80
   1621 C0 E0              5075 	push	acc
                           5076 ;	genCall
   1623 12s00r00           5077 	lcall	_printf
   1626 E5 81              5078 	mov	a,sp
   1628 24 FB              5079 	add	a,#0xfb
   162A F5 81              5080 	mov	sp,a
   162C D0 02              5081 	pop	ar2
                           5082 ;	main.c:603: printf_tiny("\n\rEnter number of bytes to be written:\n\r");
                           5083 ;	genIpush
   162E C0 02              5084 	push	ar2
   1630 74rA1              5085 	mov	a,#__str_72
   1632 C0 E0              5086 	push	acc
   1634 74s07              5087 	mov	a,#(__str_72 >> 8)
   1636 C0 E0              5088 	push	acc
                           5089 ;	genCall
   1638 12s00r00           5090 	lcall	_printf_tiny
   163B 15 81              5091 	dec	sp
   163D 15 81              5092 	dec	sp
   163F D0 02              5093 	pop	ar2
                           5094 ;	main.c:604: daddr = fetch_addr();           // fetch number of bytes to be written
                           5095 ;	genCall
   1641 C0 02              5096 	push	ar2
   1643 12s20r6A           5097 	lcall	_fetch_addr
   1646 AB 82              5098 	mov	r3,dpl
   1648 D0 02              5099 	pop	ar2
                           5100 ;	main.c:607: printf_tiny("\n\rEnter the data for byte write\n\r");
                           5101 ;	genIpush
   164A C0 02              5102 	push	ar2
   164C C0 03              5103 	push	ar3
   164E 74rCA              5104 	mov	a,#__str_73
   1650 C0 E0              5105 	push	acc
   1652 74s07              5106 	mov	a,#(__str_73 >> 8)
   1654 C0 E0              5107 	push	acc
                           5108 ;	genCall
   1656 12s00r00           5109 	lcall	_printf_tiny
   1659 15 81              5110 	dec	sp
   165B 15 81              5111 	dec	sp
   165D D0 03              5112 	pop	ar3
   165F D0 02              5113 	pop	ar2
                           5114 ;	main.c:608: num=fetch_data();               // fetch byte to be written
                           5115 ;	genCall
   1661 C0 02              5116 	push	ar2
   1663 C0 03              5117 	push	ar3
   1665 12s24rD6           5118 	lcall	_fetch_data
   1668 AC 82              5119 	mov	r4,dpl
   166A D0 03              5120 	pop	ar3
   166C D0 02              5121 	pop	ar2
                           5122 ;	main.c:609: printf_tiny("num: %x\n\r",num);
                           5123 ;	genCast
                           5124 ;	peephole 177.h	optimized mov sequence
   166E EC                 5125 	mov	a,r4
                           5126 ;	Peephole 236.i	used r5 instead of ar5
   166F FD                 5127 	mov	r5,a
   1670 33                 5128 	rlc	a
   1671 95 E0              5129 	subb	a,acc
   1673 FE                 5130 	mov	r6,a
                           5131 ;	genIpush
   1674 C0 02              5132 	push	ar2
   1676 C0 03              5133 	push	ar3
   1678 C0 04              5134 	push	ar4
   167A C0 05              5135 	push	ar5
   167C C0 06              5136 	push	ar6
                           5137 ;	genIpush
   167E 74rEC              5138 	mov	a,#__str_74
   1680 C0 E0              5139 	push	acc
   1682 74s07              5140 	mov	a,#(__str_74 >> 8)
   1684 C0 E0              5141 	push	acc
                           5142 ;	genCall
   1686 12s00r00           5143 	lcall	_printf_tiny
   1689 E5 81              5144 	mov	a,sp
   168B 24 FC              5145 	add	a,#0xfc
   168D F5 81              5146 	mov	sp,a
   168F D0 04              5147 	pop	ar4
   1691 D0 03              5148 	pop	ar3
   1693 D0 02              5149 	pop	ar2
                           5150 ;	main.c:611: P1_3=0;
                           5151 ;	genAssign
   1695 C2 93              5152 	clr	_P1_3
                           5153 ;	main.c:612: for(pc=0;pc<=daddr;pc++)
                           5154 ;	genAssign
                           5155 ;	genAssign
                           5156 ;	genAssign
                           5157 ;	genAssign
   1697 90s00r04           5158 	mov	dptr,#_main_pageblock_1_1
   169A E0                 5159 	movx	a,@dptr
   169B FD                 5160 	mov	r5,a
                           5161 ;	genAssign
   169C 7E 00              5162 	mov	r6,#0x00
   169E 7F 00              5163 	mov	r7,#0x00
   16A0                    5164 00269$:
                           5165 ;	genCast
                           5166 ;	peephole 177.h	optimized mov sequence
   16A0 EB                 5167 	mov	a,r3
                           5168 ;	Peephole 236.i	used r0 instead of ar0
   16A1 F8                 5169 	mov	r0,a
   16A2 33                 5170 	rlc	a
   16A3 95 E0              5171 	subb	a,acc
   16A5 F9                 5172 	mov	r1,a
                           5173 ;	genCmpGt
                           5174 ;	genCmp
   16A6 C3                 5175 	clr	c
   16A7 E8                 5176 	mov	a,r0
   16A8 9E                 5177 	subb	a,r6
   16A9 E9                 5178 	mov	a,r1
   16AA 64 80              5179 	xrl	a,#0x80
   16AC 8F F0              5180 	mov	b,r7
   16AE 63 F0 80           5181 	xrl	b,#0x80
   16B1 95 F0              5182 	subb	a,b
                           5183 ;	genIfxJump
                           5184 ;	Peephole 112.b	changed ljmp to sjmp
                           5185 ;	Peephole 160.a	removed sjmp by inverse jump logic
   16B3 40 39              5186 	jc	00272$
                           5187 ;	Peephole 300	removed redundant label 00448$
                           5188 ;	main.c:614: eebytew((saddr+pc),pageblock,num);      //write byte to address
                           5189 ;	genCast
                           5190 ;	genPlus
                           5191 ;	peephole 177.g	optimized mov sequence
   16B5 EE                 5192 	mov	a,r6
                           5193 ;	Peephole 236.i	used r0 instead of ar0
   16B6 F8                 5194 	mov	r0,a
                           5195 ;	Peephole 236.a	used r2 instead of ar2
   16B7 2A                 5196 	add	a,r2
   16B8 F8                 5197 	mov	r0,a
                           5198 ;	genAssign
   16B9 90s00r18           5199 	mov	dptr,#_eebytew_PARM_2
   16BC ED                 5200 	mov	a,r5
   16BD F0                 5201 	movx	@dptr,a
                           5202 ;	genAssign
   16BE 90s00r19           5203 	mov	dptr,#_eebytew_PARM_3
   16C1 EC                 5204 	mov	a,r4
   16C2 F0                 5205 	movx	@dptr,a
                           5206 ;	genCall
   16C3 88 82              5207 	mov	dpl,r0
   16C5 C0 02              5208 	push	ar2
   16C7 C0 03              5209 	push	ar3
   16C9 C0 04              5210 	push	ar4
   16CB C0 05              5211 	push	ar5
   16CD C0 06              5212 	push	ar6
   16CF C0 07              5213 	push	ar7
   16D1 12s19r71           5214 	lcall	_eebytew
   16D4 D0 07              5215 	pop	ar7
   16D6 D0 06              5216 	pop	ar6
   16D8 D0 05              5217 	pop	ar5
   16DA D0 04              5218 	pop	ar4
   16DC D0 03              5219 	pop	ar3
   16DE D0 02              5220 	pop	ar2
                           5221 ;	main.c:615: if(pc==256)
                           5222 ;	genCmpEq
                           5223 ;	gencjneshort
                           5224 ;	Peephole 112.b	changed ljmp to sjmp
                           5225 ;	Peephole 198.a	optimized misc jump sequence
   16E0 BE 00 04           5226 	cjne	r6,#0x00,00271$
   16E3 BF 01 01           5227 	cjne	r7,#0x01,00271$
                           5228 ;	Peephole 200.b	removed redundant sjmp
                           5229 ;	Peephole 300	removed redundant label 00449$
                           5230 ;	Peephole 300	removed redundant label 00450$
                           5231 ;	main.c:616: pageblock++;
                           5232 ;	genPlus
                           5233 ;     genPlusIncr
   16E6 0D                 5234 	inc	r5
   16E7                    5235 00271$:
                           5236 ;	main.c:612: for(pc=0;pc<=daddr;pc++)
                           5237 ;	genPlus
                           5238 ;     genPlusIncr
   16E7 0E                 5239 	inc	r6
                           5240 ;	Peephole 112.b	changed ljmp to sjmp
                           5241 ;	Peephole 243	avoided branch to sjmp
   16E8 BE 00 B5           5242 	cjne	r6,#0x00,00269$
   16EB 0F                 5243 	inc	r7
                           5244 ;	Peephole 300	removed redundant label 00451$
   16EC 80 B2              5245 	sjmp	00269$
   16EE                    5246 00272$:
                           5247 ;	main.c:618: P1_3=1;
                           5248 ;	genAssign
   16EE D2 93              5249 	setb	_P1_3
                           5250 ;	main.c:622: printf_tiny("\n\rPage write mode\n\r");
                           5251 ;	genIpush
   16F0 74rF6              5252 	mov	a,#__str_75
   16F2 C0 E0              5253 	push	acc
   16F4 74s07              5254 	mov	a,#(__str_75 >> 8)
   16F6 C0 E0              5255 	push	acc
                           5256 ;	genCall
   16F8 12s00r00           5257 	lcall	_printf_tiny
   16FB 15 81              5258 	dec	sp
   16FD 15 81              5259 	dec	sp
                           5260 ;	main.c:623: printf_tiny("\n\rEnter Start address for page write of 1024 bytes\n\r");
                           5261 ;	genIpush
   16FF 74r0A              5262 	mov	a,#__str_76
   1701 C0 E0              5263 	push	acc
   1703 74s08              5264 	mov	a,#(__str_76 >> 8)
   1705 C0 E0              5265 	push	acc
                           5266 ;	genCall
   1707 12s00r00           5267 	lcall	_printf_tiny
   170A 15 81              5268 	dec	sp
   170C 15 81              5269 	dec	sp
                           5270 ;	main.c:624: saddr = fetch_addr();               //fetch page start address
                           5271 ;	genCall
   170E 12s20r6A           5272 	lcall	_fetch_addr
   1711 AA 82              5273 	mov	r2,dpl
                           5274 ;	main.c:626: pageblock = bufsiz[0];
                           5275 ;	genPointerGet
                           5276 ;	genFarPointerGet
   1713 90s00r00           5277 	mov	dptr,#_bufsiz
   1716 E0                 5278 	movx	a,@dptr
   1717 FB                 5279 	mov	r3,a
                           5280 ;	main.c:627: pageblock &= 0x0F;
                           5281 ;	genAnd
   1718 53 03 0F           5282 	anl	ar3,#0x0F
                           5283 ;	genAssign
   171B 90s00r04           5284 	mov	dptr,#_main_pageblock_1_1
   171E EB                 5285 	mov	a,r3
   171F F0                 5286 	movx	@dptr,a
                           5287 ;	main.c:629: printf_tiny("\n\rPageblock selected is: %x\n\r",pageblock);
                           5288 ;	genCast
   1720 EB                 5289 	mov	a,r3
   1721 33                 5290 	rlc	a
   1722 95 E0              5291 	subb	a,acc
   1724 FC                 5292 	mov	r4,a
                           5293 ;	genIpush
   1725 C0 02              5294 	push	ar2
   1727 C0 03              5295 	push	ar3
   1729 C0 04              5296 	push	ar4
                           5297 ;	genIpush
   172B 74r30              5298 	mov	a,#__str_18
   172D C0 E0              5299 	push	acc
   172F 74s02              5300 	mov	a,#(__str_18 >> 8)
   1731 C0 E0              5301 	push	acc
                           5302 ;	genCall
   1733 12s00r00           5303 	lcall	_printf_tiny
   1736 E5 81              5304 	mov	a,sp
   1738 24 FC              5305 	add	a,#0xfc
   173A F5 81              5306 	mov	sp,a
   173C D0 02              5307 	pop	ar2
                           5308 ;	main.c:630: printf("Start address: %02x\n\r",(saddr & 0xFF));
                           5309 ;	genAssign
   173E 8A 03              5310 	mov	ar3,r2
                           5311 ;	genCast
   1740 7C 00              5312 	mov	r4,#0x00
                           5313 ;	genIpush
   1742 C0 02              5314 	push	ar2
   1744 C0 03              5315 	push	ar3
   1746 C0 04              5316 	push	ar4
                           5317 ;	genIpush
   1748 74rD4              5318 	mov	a,#__str_65
   174A C0 E0              5319 	push	acc
   174C 74s06              5320 	mov	a,#(__str_65 >> 8)
   174E C0 E0              5321 	push	acc
   1750 74 80              5322 	mov	a,#0x80
   1752 C0 E0              5323 	push	acc
                           5324 ;	genCall
   1754 12s00r00           5325 	lcall	_printf
   1757 E5 81              5326 	mov	a,sp
   1759 24 FB              5327 	add	a,#0xfb
   175B F5 81              5328 	mov	sp,a
   175D D0 02              5329 	pop	ar2
                           5330 ;	main.c:632: printf_tiny("\n\rEnter number of pages to be written:\n\r");
                           5331 ;	genIpush
   175F C0 02              5332 	push	ar2
   1761 74r3F              5333 	mov	a,#__str_77
   1763 C0 E0              5334 	push	acc
   1765 74s08              5335 	mov	a,#(__str_77 >> 8)
   1767 C0 E0              5336 	push	acc
                           5337 ;	genCall
   1769 12s00r00           5338 	lcall	_printf_tiny
   176C 15 81              5339 	dec	sp
   176E 15 81              5340 	dec	sp
   1770 D0 02              5341 	pop	ar2
                           5342 ;	main.c:633: daddr = fetch_addr();               // fetch number of pages to be written
                           5343 ;	genCall
   1772 C0 02              5344 	push	ar2
   1774 12s20r6A           5345 	lcall	_fetch_addr
   1777 AB 82              5346 	mov	r3,dpl
   1779 D0 02              5347 	pop	ar2
                           5348 ;	main.c:636: printf_tiny("\n\rEnter the data for page write\n\r");
                           5349 ;	genIpush
   177B C0 02              5350 	push	ar2
   177D C0 03              5351 	push	ar3
   177F 74r68              5352 	mov	a,#__str_78
   1781 C0 E0              5353 	push	acc
   1783 74s08              5354 	mov	a,#(__str_78 >> 8)
   1785 C0 E0              5355 	push	acc
                           5356 ;	genCall
   1787 12s00r00           5357 	lcall	_printf_tiny
   178A 15 81              5358 	dec	sp
   178C 15 81              5359 	dec	sp
   178E D0 03              5360 	pop	ar3
   1790 D0 02              5361 	pop	ar2
                           5362 ;	main.c:637: num=fetch_data();                      // Fetch data to be written
                           5363 ;	genCall
   1792 C0 02              5364 	push	ar2
   1794 C0 03              5365 	push	ar3
   1796 12s24rD6           5366 	lcall	_fetch_data
   1799 AC 82              5367 	mov	r4,dpl
   179B D0 03              5368 	pop	ar3
   179D D0 02              5369 	pop	ar2
                           5370 ;	main.c:638: printf_tiny("\n\rnum: %x\n\r",num);
                           5371 ;	genCast
                           5372 ;	peephole 177.h	optimized mov sequence
   179F EC                 5373 	mov	a,r4
                           5374 ;	Peephole 236.i	used r5 instead of ar5
   17A0 FD                 5375 	mov	r5,a
   17A1 33                 5376 	rlc	a
   17A2 95 E0              5377 	subb	a,acc
   17A4 FE                 5378 	mov	r6,a
                           5379 ;	genIpush
   17A5 C0 02              5380 	push	ar2
   17A7 C0 03              5381 	push	ar3
   17A9 C0 04              5382 	push	ar4
   17AB C0 05              5383 	push	ar5
   17AD C0 06              5384 	push	ar6
                           5385 ;	genIpush
   17AF 74r8A              5386 	mov	a,#__str_79
   17B1 C0 E0              5387 	push	acc
   17B3 74s08              5388 	mov	a,#(__str_79 >> 8)
   17B5 C0 E0              5389 	push	acc
                           5390 ;	genCall
   17B7 12s00r00           5391 	lcall	_printf_tiny
   17BA E5 81              5392 	mov	a,sp
   17BC 24 FC              5393 	add	a,#0xfc
   17BE F5 81              5394 	mov	sp,a
   17C0 D0 04              5395 	pop	ar4
   17C2 D0 03              5396 	pop	ar3
   17C4 D0 02              5397 	pop	ar2
                           5398 ;	main.c:640: P1_4=0;
                           5399 ;	genAssign
   17C6 C2 94              5400 	clr	_P1_4
                           5401 ;	main.c:642: for(pc=0;pc<daddr;pc++)
                           5402 ;	genAssign
   17C8 90s00r04           5403 	mov	dptr,#_main_pageblock_1_1
   17CB E0                 5404 	movx	a,@dptr
   17CC FD                 5405 	mov	r5,a
                           5406 ;	genAssign
   17CD 7E 00              5407 	mov	r6,#0x00
   17CF 7F 00              5408 	mov	r7,#0x00
   17D1                    5409 00273$:
                           5410 ;	genCast
                           5411 ;	peephole 177.h	optimized mov sequence
   17D1 EB                 5412 	mov	a,r3
                           5413 ;	Peephole 236.i	used r0 instead of ar0
   17D2 F8                 5414 	mov	r0,a
   17D3 33                 5415 	rlc	a
   17D4 95 E0              5416 	subb	a,acc
   17D6 F9                 5417 	mov	r1,a
                           5418 ;	genCmpLt
                           5419 ;	genCmp
   17D7 C3                 5420 	clr	c
   17D8 EE                 5421 	mov	a,r6
   17D9 98                 5422 	subb	a,r0
   17DA EF                 5423 	mov	a,r7
   17DB 64 80              5424 	xrl	a,#0x80
   17DD 89 F0              5425 	mov	b,r1
   17DF 63 F0 80           5426 	xrl	b,#0x80
   17E2 95 F0              5427 	subb	a,b
                           5428 ;	genIfxJump
                           5429 ;	Peephole 108.a	removed ljmp by inverse jump logic
   17E4 50 3D              5430 	jnc	00276$
                           5431 ;	Peephole 300	removed redundant label 00452$
                           5432 ;	main.c:644: eepagew((saddr+(16*pc)),pageblock,num);
                           5433 ;	genCast
   17E6 8E 00              5434 	mov	ar0,r6
                           5435 ;	genLeftShift
                           5436 ;	genLeftShiftLiteral
                           5437 ;	genlshOne
   17E8 E8                 5438 	mov	a,r0
   17E9 C4                 5439 	swap	a
   17EA 54 F0              5440 	anl	a,#0xf0
                           5441 ;	genPlus
                           5442 ;	Peephole 177.b	removed redundant mov
                           5443 ;	Peephole 215	removed some moves
                           5444 ;	Peephole 236.a	used r2 instead of ar2
   17EC 2A                 5445 	add	a,r2
   17ED F8                 5446 	mov	r0,a
                           5447 ;	genAssign
   17EE 90s00r15           5448 	mov	dptr,#_eepagew_PARM_2
   17F1 ED                 5449 	mov	a,r5
   17F2 F0                 5450 	movx	@dptr,a
                           5451 ;	genAssign
   17F3 90s00r16           5452 	mov	dptr,#_eepagew_PARM_3
   17F6 EC                 5453 	mov	a,r4
   17F7 F0                 5454 	movx	@dptr,a
                           5455 ;	genCall
   17F8 88 82              5456 	mov	dpl,r0
   17FA C0 02              5457 	push	ar2
   17FC C0 03              5458 	push	ar3
   17FE C0 04              5459 	push	ar4
   1800 C0 05              5460 	push	ar5
   1802 C0 06              5461 	push	ar6
   1804 C0 07              5462 	push	ar7
   1806 12s19r43           5463 	lcall	_eepagew
   1809 D0 07              5464 	pop	ar7
   180B D0 06              5465 	pop	ar6
   180D D0 05              5466 	pop	ar5
   180F D0 04              5467 	pop	ar4
   1811 D0 03              5468 	pop	ar3
   1813 D0 02              5469 	pop	ar2
                           5470 ;	main.c:645: if(pc==16)
                           5471 ;	genCmpEq
                           5472 ;	gencjneshort
                           5473 ;	Peephole 112.b	changed ljmp to sjmp
                           5474 ;	Peephole 198.a	optimized misc jump sequence
   1815 BE 10 04           5475 	cjne	r6,#0x10,00275$
   1818 BF 00 01           5476 	cjne	r7,#0x00,00275$
                           5477 ;	Peephole 200.b	removed redundant sjmp
                           5478 ;	Peephole 300	removed redundant label 00453$
                           5479 ;	Peephole 300	removed redundant label 00454$
                           5480 ;	main.c:646: pageblock++;
                           5481 ;	genPlus
                           5482 ;     genPlusIncr
   181B 0D                 5483 	inc	r5
   181C                    5484 00275$:
                           5485 ;	main.c:642: for(pc=0;pc<daddr;pc++)
                           5486 ;	genPlus
                           5487 ;     genPlusIncr
   181C 0E                 5488 	inc	r6
                           5489 ;	Peephole 112.b	changed ljmp to sjmp
                           5490 ;	Peephole 243	avoided branch to sjmp
   181D BE 00 B1           5491 	cjne	r6,#0x00,00273$
   1820 0F                 5492 	inc	r7
                           5493 ;	Peephole 300	removed redundant label 00455$
   1821 80 AE              5494 	sjmp	00273$
   1823                    5495 00276$:
                           5496 ;	main.c:650: P1_4=1;
                           5497 ;	genAssign
   1823 D2 94              5498 	setb	_P1_4
                           5499 ;	main.c:653: break;
   1825 02s00rC1           5500 	ljmp	00223$
                           5501 ;	main.c:655: case 'C':
   1828                    5502 00199$:
                           5503 ;	main.c:659: printf_tiny("\n\rClock Menu options\n\r");
                           5504 ;	genIpush
   1828 74r96              5505 	mov	a,#__str_80
   182A C0 E0              5506 	push	acc
   182C 74s08              5507 	mov	a,#(__str_80 >> 8)
   182E C0 E0              5508 	push	acc
                           5509 ;	genCall
   1830 12s00r00           5510 	lcall	_printf_tiny
   1833 15 81              5511 	dec	sp
   1835 15 81              5512 	dec	sp
                           5513 ;	main.c:660: while(1)
   1837                    5514 00219$:
                           5515 ;	main.c:662: printf_tiny("\n\rChoose one of the below options\n\r");
                           5516 ;	genIpush
   1837 74rAD              5517 	mov	a,#__str_81
   1839 C0 E0              5518 	push	acc
   183B 74s08              5519 	mov	a,#(__str_81 >> 8)
   183D C0 E0              5520 	push	acc
                           5521 ;	genCall
   183F 12s00r00           5522 	lcall	_printf_tiny
   1842 15 81              5523 	dec	sp
   1844 15 81              5524 	dec	sp
                           5525 ;	main.c:663: printf_tiny("1 - Stop clock\n\r");
                           5526 ;	genIpush
   1846 74rD1              5527 	mov	a,#__str_82
   1848 C0 E0              5528 	push	acc
   184A 74s08              5529 	mov	a,#(__str_82 >> 8)
   184C C0 E0              5530 	push	acc
                           5531 ;	genCall
   184E 12s00r00           5532 	lcall	_printf_tiny
   1851 15 81              5533 	dec	sp
   1853 15 81              5534 	dec	sp
                           5535 ;	main.c:664: printf_tiny("2 - Restart clock\n\r");
                           5536 ;	genIpush
   1855 74rE2              5537 	mov	a,#__str_83
   1857 C0 E0              5538 	push	acc
   1859 74s08              5539 	mov	a,#(__str_83 >> 8)
   185B C0 E0              5540 	push	acc
                           5541 ;	genCall
   185D 12s00r00           5542 	lcall	_printf_tiny
   1860 15 81              5543 	dec	sp
   1862 15 81              5544 	dec	sp
                           5545 ;	main.c:665: printf_tiny("3 - Reset clock\n\r");
                           5546 ;	genIpush
   1864 74rF6              5547 	mov	a,#__str_84
   1866 C0 E0              5548 	push	acc
   1868 74s08              5549 	mov	a,#(__str_84 >> 8)
   186A C0 E0              5550 	push	acc
                           5551 ;	genCall
   186C 12s00r00           5552 	lcall	_printf_tiny
   186F 15 81              5553 	dec	sp
   1871 15 81              5554 	dec	sp
                           5555 ;	main.c:667: while(1)
   1873                    5556 00210$:
                           5557 ;	main.c:669: cl=getchar();
                           5558 ;	genCall
   1873 12s00r00           5559 	lcall	_getchar
   1876 AA 82              5560 	mov	r2,dpl
                           5561 ;	genAssign
   1878 90s00r14           5562 	mov	dptr,#_main_cl_4_55
   187B EA                 5563 	mov	a,r2
   187C F0                 5564 	movx	@dptr,a
                           5565 ;	main.c:670: if(!((cl=='1') || (cl=='2') || (cl=='3')))
                           5566 ;	genCmpEq
                           5567 ;	gencjneshort
   187D BA 31 02           5568 	cjne	r2,#0x31,00456$
                           5569 ;	Peephole 112.b	changed ljmp to sjmp
   1880 80 1B              5570 	sjmp	00205$
   1882                    5571 00456$:
                           5572 ;	genCmpEq
                           5573 ;	gencjneshort
   1882 BA 32 02           5574 	cjne	r2,#0x32,00457$
                           5575 ;	Peephole 112.b	changed ljmp to sjmp
   1885 80 16              5576 	sjmp	00205$
   1887                    5577 00457$:
                           5578 ;	genCmpEq
                           5579 ;	gencjneshort
   1887 BA 33 02           5580 	cjne	r2,#0x33,00458$
                           5581 ;	Peephole 112.b	changed ljmp to sjmp
   188A 80 11              5582 	sjmp	00205$
   188C                    5583 00458$:
                           5584 ;	main.c:672: printf_tiny("\n\rInvalid input. Please enter binary input.\n\r");
                           5585 ;	genIpush
   188C 74rC3              5586 	mov	a,#__str_54
   188E C0 E0              5587 	push	acc
   1890 74s05              5588 	mov	a,#(__str_54 >> 8)
   1892 C0 E0              5589 	push	acc
                           5590 ;	genCall
   1894 12s00r00           5591 	lcall	_printf_tiny
   1897 15 81              5592 	dec	sp
   1899 15 81              5593 	dec	sp
                           5594 ;	main.c:673: continue;
                           5595 ;	Peephole 112.b	changed ljmp to sjmp
   189B 80 D6              5596 	sjmp	00210$
   189D                    5597 00205$:
                           5598 ;	main.c:675: else if((cl=='1') || (cl=='2') || (cl=='3'))
                           5599 ;	genAssign
   189D 90s00r14           5600 	mov	dptr,#_main_cl_4_55
   18A0 E0                 5601 	movx	a,@dptr
   18A1 FA                 5602 	mov	r2,a
                           5603 ;	genCmpEq
                           5604 ;	gencjneshort
   18A2 BA 31 02           5605 	cjne	r2,#0x31,00459$
                           5606 ;	Peephole 112.b	changed ljmp to sjmp
   18A5 80 08              5607 	sjmp	00200$
   18A7                    5608 00459$:
                           5609 ;	genCmpEq
                           5610 ;	gencjneshort
   18A7 BA 32 02           5611 	cjne	r2,#0x32,00460$
                           5612 ;	Peephole 112.b	changed ljmp to sjmp
   18AA 80 03              5613 	sjmp	00200$
   18AC                    5614 00460$:
                           5615 ;	genCmpEq
                           5616 ;	gencjneshort
                           5617 ;	Peephole 112.b	changed ljmp to sjmp
                           5618 ;	Peephole 198.b	optimized misc jump sequence
   18AC BA 33 C4           5619 	cjne	r2,#0x33,00210$
                           5620 ;	Peephole 200.b	removed redundant sjmp
                           5621 ;	Peephole 300	removed redundant label 00461$
                           5622 ;	Peephole 300	removed redundant label 00462$
   18AF                    5623 00200$:
                           5624 ;	main.c:677: cl -= 48;
                           5625 ;	genAssign
   18AF 90s00r14           5626 	mov	dptr,#_main_cl_4_55
   18B2 E0                 5627 	movx	a,@dptr
                           5628 ;	genMinus
   18B3 FA                 5629 	mov	r2,a
                           5630 ;	Peephole 105	removed redundant mov
   18B4 24 D0              5631 	add	a,#0xd0
                           5632 ;	genAssign
   18B6 90s00r14           5633 	mov	dptr,#_main_cl_4_55
   18B9 F0                 5634 	movx	@dptr,a
                           5635 ;	main.c:681: switch(cl)
                           5636 ;	genAssign
   18BA 90s00r14           5637 	mov	dptr,#_main_cl_4_55
   18BD E0                 5638 	movx	a,@dptr
   18BE FA                 5639 	mov	r2,a
                           5640 ;	genCmpEq
                           5641 ;	gencjneshort
   18BF BA 01 02           5642 	cjne	r2,#0x01,00463$
                           5643 ;	Peephole 112.b	changed ljmp to sjmp
   18C2 80 0A              5644 	sjmp	00212$
   18C4                    5645 00463$:
                           5646 ;	genCmpEq
                           5647 ;	gencjneshort
   18C4 BA 02 02           5648 	cjne	r2,#0x02,00464$
                           5649 ;	Peephole 112.b	changed ljmp to sjmp
   18C7 80 18              5650 	sjmp	00213$
   18C9                    5651 00464$:
                           5652 ;	genCmpEq
                           5653 ;	gencjneshort
                           5654 ;	Peephole 112.b	changed ljmp to sjmp
                           5655 ;	main.c:683: case 1:
                           5656 ;	Peephole 112.b	changed ljmp to sjmp
                           5657 ;	Peephole 198.b	optimized misc jump sequence
   18C9 BA 03 3A           5658 	cjne	r2,#0x03,00215$
   18CC 80 26              5659 	sjmp	00214$
                           5660 ;	Peephole 300	removed redundant label 00465$
   18CE                    5661 00212$:
                           5662 ;	main.c:685: TR0=0;                       // stop clock; stop timer0
                           5663 ;	genAssign
   18CE C2 8C              5664 	clr	_TR0
                           5665 ;	main.c:686: printf_tiny("\nClock stopped\r");
                           5666 ;	genIpush
   18D0 74r08              5667 	mov	a,#__str_85
   18D2 C0 E0              5668 	push	acc
   18D4 74s09              5669 	mov	a,#(__str_85 >> 8)
   18D6 C0 E0              5670 	push	acc
                           5671 ;	genCall
   18D8 12s00r00           5672 	lcall	_printf_tiny
   18DB 15 81              5673 	dec	sp
   18DD 15 81              5674 	dec	sp
                           5675 ;	main.c:687: break;
                           5676 ;	main.c:689: case 2:
                           5677 ;	Peephole 112.b	changed ljmp to sjmp
   18DF 80 25              5678 	sjmp	00215$
   18E1                    5679 00213$:
                           5680 ;	main.c:691: TR0=1;                       // restart clock; restart timer0
                           5681 ;	genAssign
   18E1 D2 8C              5682 	setb	_TR0
                           5683 ;	main.c:692: printf_tiny("Clock restarted\n\r");
                           5684 ;	genIpush
   18E3 74r18              5685 	mov	a,#__str_86
   18E5 C0 E0              5686 	push	acc
   18E7 74s09              5687 	mov	a,#(__str_86 >> 8)
   18E9 C0 E0              5688 	push	acc
                           5689 ;	genCall
   18EB 12s00r00           5690 	lcall	_printf_tiny
   18EE 15 81              5691 	dec	sp
   18F0 15 81              5692 	dec	sp
                           5693 ;	main.c:693: break;
                           5694 ;	main.c:695: case 3:
                           5695 ;	Peephole 112.b	changed ljmp to sjmp
   18F2 80 12              5696 	sjmp	00215$
   18F4                    5697 00214$:
                           5698 ;	main.c:697: InitTimer0();                // Reset timer
                           5699 ;	genCall
   18F4 12s00r00           5700 	lcall	_InitTimer0
                           5701 ;	main.c:698: printf_tiny("\nClock resetted\n\r");
                           5702 ;	genIpush
   18F7 74r2A              5703 	mov	a,#__str_87
   18F9 C0 E0              5704 	push	acc
   18FB 74s09              5705 	mov	a,#(__str_87 >> 8)
   18FD C0 E0              5706 	push	acc
                           5707 ;	genCall
   18FF 12s00r00           5708 	lcall	_printf_tiny
   1902 15 81              5709 	dec	sp
   1904 15 81              5710 	dec	sp
                           5711 ;	main.c:701: }
   1906                    5712 00215$:
                           5713 ;	main.c:703: printf_tiny("\n\r\n\rPress any key to continue\n\r");
                           5714 ;	genIpush
   1906 74r39              5715 	mov	a,#__str_39
   1908 C0 E0              5716 	push	acc
   190A 74s04              5717 	mov	a,#(__str_39 >> 8)
   190C C0 E0              5718 	push	acc
                           5719 ;	genCall
   190E 12s00r00           5720 	lcall	_printf_tiny
   1911 15 81              5721 	dec	sp
   1913 15 81              5722 	dec	sp
                           5723 ;	main.c:704: printf_tiny("Press 'q' to quit\n\r");
                           5724 ;	genIpush
   1915 74rF5              5725 	mov	a,#__str_25
   1917 C0 E0              5726 	push	acc
   1919 74s02              5727 	mov	a,#(__str_25 >> 8)
   191B C0 E0              5728 	push	acc
                           5729 ;	genCall
   191D 12s00r00           5730 	lcall	_printf_tiny
   1920 15 81              5731 	dec	sp
   1922 15 81              5732 	dec	sp
                           5733 ;	main.c:705: printf_tiny("\n\r----------------------------------------------------\n\r");
                           5734 ;	genIpush
   1924 74rDF              5735 	mov	a,#__str_16
   1926 C0 E0              5736 	push	acc
   1928 74s01              5737 	mov	a,#(__str_16 >> 8)
   192A C0 E0              5738 	push	acc
                           5739 ;	genCall
   192C 12s00r00           5740 	lcall	_printf_tiny
   192F 15 81              5741 	dec	sp
   1931 15 81              5742 	dec	sp
                           5743 ;	main.c:706: cond1 = getchar();
                           5744 ;	genCall
   1933 12s00r00           5745 	lcall	_getchar
   1936 AA 82              5746 	mov	r2,dpl
                           5747 ;	main.c:707: if(cond1 == 'q')
                           5748 ;	genCmpEq
                           5749 ;	gencjneshort
   1938 BA 71 02           5750 	cjne	r2,#0x71,00466$
   193B 80 03              5751 	sjmp	00467$
   193D                    5752 00466$:
   193D 02s18r37           5753 	ljmp	00219$
   1940                    5754 00467$:
                           5755 ;	main.c:711: }
   1940                    5756 00221$:
   1940 02s00rC1           5757 	ljmp	00223$
                           5758 ;	Peephole 259.b	removed redundant label 00277$ and ret
                           5759 ;
                           5760 ;------------------------------------------------------------
                           5761 ;Allocation info for local variables in function 'eepagew'
                           5762 ;------------------------------------------------------------
                           5763 ;block                     Allocated with name '_eepagew_PARM_2'
                           5764 ;databyte                  Allocated with name '_eepagew_PARM_3'
                           5765 ;addr                      Allocated with name '_eepagew_addr_1_1'
                           5766 ;------------------------------------------------------------
                           5767 ;	main.c:717: int eepagew(char addr, char block, char databyte)
                           5768 ;	-----------------------------------------
                           5769 ;	 function eepagew
                           5770 ;	-----------------------------------------
   1943                    5771 _eepagew:
                           5772 ;	genReceive
   1943 E5 82              5773 	mov	a,dpl
   1945 90s00r17           5774 	mov	dptr,#_eepagew_addr_1_1
   1948 F0                 5775 	movx	@dptr,a
                           5776 ;	main.c:719: I2CStart();
                           5777 ;	genCall
   1949 12s19rC7           5778 	lcall	_I2CStart
                           5779 ;	main.c:720: I2CPageWrite(addr,block,databyte);
                           5780 ;	genAssign
   194C 90s00r17           5781 	mov	dptr,#_eepagew_addr_1_1
   194F E0                 5782 	movx	a,@dptr
   1950 FA                 5783 	mov	r2,a
                           5784 ;	genAssign
   1951 90s00r15           5785 	mov	dptr,#_eepagew_PARM_2
   1954 E0                 5786 	movx	a,@dptr
   1955 FB                 5787 	mov	r3,a
                           5788 ;	genAssign
   1956 90s00r16           5789 	mov	dptr,#_eepagew_PARM_3
   1959 E0                 5790 	movx	a,@dptr
   195A FC                 5791 	mov	r4,a
                           5792 ;	genAssign
   195B 90s00r25           5793 	mov	dptr,#_I2CPageWrite_PARM_2
   195E EB                 5794 	mov	a,r3
   195F F0                 5795 	movx	@dptr,a
                           5796 ;	genAssign
   1960 90s00r26           5797 	mov	dptr,#_I2CPageWrite_PARM_3
   1963 EC                 5798 	mov	a,r4
   1964 F0                 5799 	movx	@dptr,a
                           5800 ;	genCall
   1965 8A 82              5801 	mov	dpl,r2
   1967 12s1Cr8E           5802 	lcall	_I2CPageWrite
                           5803 ;	main.c:721: I2CStop();
                           5804 ;	genCall
   196A 12s19rE7           5805 	lcall	_I2CStop
                           5806 ;	main.c:722: return 0;
                           5807 ;	genRet
                           5808 ;	Peephole 182.b	used 16 bit load of dptr
   196D 90 00 00           5809 	mov	dptr,#0x0000
                           5810 ;	Peephole 300	removed redundant label 00101$
   1970 22                 5811 	ret
                           5812 ;------------------------------------------------------------
                           5813 ;Allocation info for local variables in function 'eebytew'
                           5814 ;------------------------------------------------------------
                           5815 ;block                     Allocated with name '_eebytew_PARM_2'
                           5816 ;databyte                  Allocated with name '_eebytew_PARM_3'
                           5817 ;addr                      Allocated with name '_eebytew_addr_1_1'
                           5818 ;------------------------------------------------------------
                           5819 ;	main.c:726: int eebytew(char addr, char block, char databyte)
                           5820 ;	-----------------------------------------
                           5821 ;	 function eebytew
                           5822 ;	-----------------------------------------
   1971                    5823 _eebytew:
                           5824 ;	genReceive
   1971 E5 82              5825 	mov	a,dpl
   1973 90s00r1A           5826 	mov	dptr,#_eebytew_addr_1_1
   1976 F0                 5827 	movx	@dptr,a
                           5828 ;	main.c:728: I2CStart();
                           5829 ;	genCall
   1977 12s19rC7           5830 	lcall	_I2CStart
                           5831 ;	main.c:729: I2CByteWrite(addr,block,databyte);
                           5832 ;	genAssign
   197A 90s00r1A           5833 	mov	dptr,#_eebytew_addr_1_1
   197D E0                 5834 	movx	a,@dptr
   197E FA                 5835 	mov	r2,a
                           5836 ;	genAssign
   197F 90s00r18           5837 	mov	dptr,#_eebytew_PARM_2
   1982 E0                 5838 	movx	a,@dptr
   1983 FB                 5839 	mov	r3,a
                           5840 ;	genAssign
   1984 90s00r19           5841 	mov	dptr,#_eebytew_PARM_3
   1987 E0                 5842 	movx	a,@dptr
   1988 FC                 5843 	mov	r4,a
                           5844 ;	genAssign
   1989 90s00r21           5845 	mov	dptr,#_I2CByteWrite_PARM_2
   198C EB                 5846 	mov	a,r3
   198D F0                 5847 	movx	@dptr,a
                           5848 ;	genAssign
   198E 90s00r22           5849 	mov	dptr,#_I2CByteWrite_PARM_3
   1991 EC                 5850 	mov	a,r4
   1992 F0                 5851 	movx	@dptr,a
                           5852 ;	genCall
   1993 8A 82              5853 	mov	dpl,r2
   1995 12s1Br8D           5854 	lcall	_I2CByteWrite
                           5855 ;	main.c:730: I2CStop();
                           5856 ;	genCall
   1998 12s19rE7           5857 	lcall	_I2CStop
                           5858 ;	main.c:731: return 0;
                           5859 ;	genRet
                           5860 ;	Peephole 182.b	used 16 bit load of dptr
   199B 90 00 00           5861 	mov	dptr,#0x0000
                           5862 ;	Peephole 300	removed redundant label 00101$
   199E 22                 5863 	ret
                           5864 ;------------------------------------------------------------
                           5865 ;Allocation info for local variables in function 'eebyter'
                           5866 ;------------------------------------------------------------
                           5867 ;block                     Allocated with name '_eebyter_PARM_2'
                           5868 ;addr                      Allocated with name '_eebyter_addr_1_1'
                           5869 ;databyte                  Allocated with name '_eebyter_databyte_1_1'
                           5870 ;------------------------------------------------------------
                           5871 ;	main.c:735: char eebyter(char addr,char block)
                           5872 ;	-----------------------------------------
                           5873 ;	 function eebyter
                           5874 ;	-----------------------------------------
   199F                    5875 _eebyter:
                           5876 ;	genReceive
   199F E5 82              5877 	mov	a,dpl
   19A1 90s00r1C           5878 	mov	dptr,#_eebyter_addr_1_1
   19A4 F0                 5879 	movx	@dptr,a
                           5880 ;	main.c:738: I2CStart();
                           5881 ;	genCall
   19A5 12s19rC7           5882 	lcall	_I2CStart
                           5883 ;	main.c:739: databyte = I2CByteRead(addr,block);
                           5884 ;	genAssign
   19A8 90s00r1C           5885 	mov	dptr,#_eebyter_addr_1_1
   19AB E0                 5886 	movx	a,@dptr
   19AC FA                 5887 	mov	r2,a
                           5888 ;	genAssign
   19AD 90s00r1B           5889 	mov	dptr,#_eebyter_PARM_2
   19B0 E0                 5890 	movx	a,@dptr
                           5891 ;	genAssign
   19B1 FB                 5892 	mov	r3,a
   19B2 90s00r1D           5893 	mov	dptr,#_I2CByteRead_PARM_2
                           5894 ;	Peephole 100	removed redundant mov
   19B5 F0                 5895 	movx	@dptr,a
                           5896 ;	genCall
   19B6 8A 82              5897 	mov	dpl,r2
   19B8 12s1Ar02           5898 	lcall	_I2CByteRead
   19BB AA 82              5899 	mov	r2,dpl
                           5900 ;	main.c:740: I2CStop();
                           5901 ;	genCall
   19BD C0 02              5902 	push	ar2
   19BF 12s19rE7           5903 	lcall	_I2CStop
   19C2 D0 02              5904 	pop	ar2
                           5905 ;	main.c:741: return databyte;
                           5906 ;	genRet
   19C4 8A 82              5907 	mov	dpl,r2
                           5908 ;	Peephole 300	removed redundant label 00101$
   19C6 22                 5909 	ret
                           5910 ;------------------------------------------------------------
                           5911 ;Allocation info for local variables in function 'I2CStart'
                           5912 ;------------------------------------------------------------
                           5913 ;------------------------------------------------------------
                           5914 ;	main.c:745: void I2CStart()
                           5915 ;	-----------------------------------------
                           5916 ;	 function I2CStart
                           5917 ;	-----------------------------------------
   19C7                    5918 _I2CStart:
                           5919 ;	main.c:747: SDA = 1;
                           5920 ;	genAssign
   19C7 D2 92              5921 	setb	_P1_2
                           5922 ;	main.c:748: delay(1);
                           5923 ;	genCall
                           5924 ;	Peephole 182.b	used 16 bit load of dptr
   19C9 90 00 01           5925 	mov	dptr,#0x0001
   19CC 12s00r00           5926 	lcall	_delay
                           5927 ;	main.c:749: SCL = 1;
                           5928 ;	genAssign
   19CF D2 91              5929 	setb	_P1_1
                           5930 ;	main.c:750: delay(1);
                           5931 ;	genCall
                           5932 ;	Peephole 182.b	used 16 bit load of dptr
   19D1 90 00 01           5933 	mov	dptr,#0x0001
   19D4 12s00r00           5934 	lcall	_delay
                           5935 ;	main.c:751: SDA = 0;
                           5936 ;	genAssign
   19D7 C2 92              5937 	clr	_P1_2
                           5938 ;	main.c:752: delay(1);
                           5939 ;	genCall
                           5940 ;	Peephole 182.b	used 16 bit load of dptr
   19D9 90 00 01           5941 	mov	dptr,#0x0001
   19DC 12s00r00           5942 	lcall	_delay
                           5943 ;	main.c:753: SCL =0;
                           5944 ;	genAssign
   19DF C2 91              5945 	clr	_P1_1
                           5946 ;	main.c:754: delay(1);
                           5947 ;	genCall
                           5948 ;	Peephole 182.b	used 16 bit load of dptr
   19E1 90 00 01           5949 	mov	dptr,#0x0001
                           5950 ;	Peephole 253.b	replaced lcall/ret with ljmp
   19E4 02s00r00           5951 	ljmp	_delay
                           5952 ;
                           5953 ;------------------------------------------------------------
                           5954 ;Allocation info for local variables in function 'I2CStop'
                           5955 ;------------------------------------------------------------
                           5956 ;------------------------------------------------------------
                           5957 ;	main.c:758: void I2CStop()
                           5958 ;	-----------------------------------------
                           5959 ;	 function I2CStop
                           5960 ;	-----------------------------------------
   19E7                    5961 _I2CStop:
                           5962 ;	main.c:760: SDA = 0;
                           5963 ;	genAssign
   19E7 C2 92              5964 	clr	_P1_2
                           5965 ;	main.c:761: delay(1);
                           5966 ;	genCall
                           5967 ;	Peephole 182.b	used 16 bit load of dptr
   19E9 90 00 01           5968 	mov	dptr,#0x0001
   19EC 12s00r00           5969 	lcall	_delay
                           5970 ;	main.c:762: SCL = 1;
                           5971 ;	genAssign
   19EF D2 91              5972 	setb	_P1_1
                           5973 ;	main.c:763: delay(1);
                           5974 ;	genCall
                           5975 ;	Peephole 182.b	used 16 bit load of dptr
   19F1 90 00 01           5976 	mov	dptr,#0x0001
   19F4 12s00r00           5977 	lcall	_delay
                           5978 ;	main.c:764: SDA = 1;
                           5979 ;	genAssign
   19F7 D2 92              5980 	setb	_P1_2
                           5981 ;	main.c:765: delay(1);
                           5982 ;	genCall
                           5983 ;	Peephole 182.b	used 16 bit load of dptr
   19F9 90 00 01           5984 	mov	dptr,#0x0001
   19FC 12s00r00           5985 	lcall	_delay
                           5986 ;	main.c:766: SCL = 0;
                           5987 ;	genAssign
   19FF C2 91              5988 	clr	_P1_1
                           5989 ;	Peephole 300	removed redundant label 00101$
   1A01 22                 5990 	ret
                           5991 ;------------------------------------------------------------
                           5992 ;Allocation info for local variables in function 'I2CByteRead'
                           5993 ;------------------------------------------------------------
                           5994 ;block                     Allocated with name '_I2CByteRead_PARM_2'
                           5995 ;address                   Allocated with name '_I2CByteRead_address_1_1'
                           5996 ;temp                      Allocated with name '_I2CByteRead_temp_1_1'
                           5997 ;databyte                  Allocated with name '_I2CByteRead_databyte_1_1'
                           5998 ;mask                      Allocated with name '_I2CByteRead_mask_1_1'
                           5999 ;i                         Allocated with name '_I2CByteRead_i_1_1'
                           6000 ;------------------------------------------------------------
                           6001 ;	main.c:770: char I2CByteRead(char address, char block)
                           6002 ;	-----------------------------------------
                           6003 ;	 function I2CByteRead
                           6004 ;	-----------------------------------------
   1A02                    6005 _I2CByteRead:
                           6006 ;	genReceive
   1A02 E5 82              6007 	mov	a,dpl
   1A04 90s00r1E           6008 	mov	dptr,#_I2CByteRead_address_1_1
   1A07 F0                 6009 	movx	@dptr,a
                           6010 ;	main.c:772: char temp,databyte=0x00,mask=0x80;
                           6011 ;	genAssign
   1A08 90s00r20           6012 	mov	dptr,#_I2CByteRead_databyte_1_1
                           6013 ;	Peephole 181	changed mov to clr
   1A0B E4                 6014 	clr	a
   1A0C F0                 6015 	movx	@dptr,a
                           6016 ;	main.c:777: block <<= 1;
                           6017 ;	genAssign
   1A0D 90s00r1D           6018 	mov	dptr,#_I2CByteRead_PARM_2
   1A10 E0                 6019 	movx	a,@dptr
                           6020 ;	genLeftShift
                           6021 ;	genLeftShiftLiteral
                           6022 ;	genlshOne
                           6023 ;	Peephole 105	removed redundant mov
                           6024 ;	genAssign
                           6025 ;	Peephole 204	removed redundant mov
   1A11 25 E0              6026 	add	a,acc
   1A13 FA                 6027 	mov	r2,a
   1A14 90s00r1D           6028 	mov	dptr,#_I2CByteRead_PARM_2
                           6029 ;	Peephole 100	removed redundant mov
   1A17 F0                 6030 	movx	@dptr,a
                           6031 ;	main.c:778: temp |= block;
                           6032 ;	genAssign
   1A18 90s00r1D           6033 	mov	dptr,#_I2CByteRead_PARM_2
   1A1B E0                 6034 	movx	a,@dptr
   1A1C FA                 6035 	mov	r2,a
                           6036 ;	genOr
   1A1D 90s00r1F           6037 	mov	dptr,#_I2CByteRead_temp_1_1
   1A20 74 A0              6038 	mov	a,#0xA0
   1A22 4A                 6039 	orl	a,r2
   1A23 F0                 6040 	movx	@dptr,a
                           6041 ;	main.c:781: for(i=0;i<8;i++)
                           6042 ;	genAssign
   1A24 7A 00              6043 	mov	r2,#0x00
   1A26 7B 00              6044 	mov	r3,#0x00
   1A28                    6045 00101$:
                           6046 ;	genCmpLt
                           6047 ;	genCmp
   1A28 C3                 6048 	clr	c
   1A29 EA                 6049 	mov	a,r2
   1A2A 94 08              6050 	subb	a,#0x08
   1A2C EB                 6051 	mov	a,r3
   1A2D 64 80              6052 	xrl	a,#0x80
   1A2F 94 80              6053 	subb	a,#0x80
                           6054 ;	genIfxJump
                           6055 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1A31 50 3A              6056 	jnc	00104$
                           6057 ;	Peephole 300	removed redundant label 00131$
                           6058 ;	main.c:783: SDA = temp & 0x80;
                           6059 ;	genAssign
   1A33 90s00r1F           6060 	mov	dptr,#_I2CByteRead_temp_1_1
   1A36 E0                 6061 	movx	a,@dptr
                           6062 ;	genGetHbit
   1A37 FC                 6063 	mov	r4,a
                           6064 ;	Peephole 105	removed redundant mov
   1A38 33                 6065 	rlc	a
   1A39 92 92              6066 	mov	_P1_2,c
                           6067 ;	main.c:784: delay(1);
                           6068 ;	genCall
                           6069 ;	Peephole 182.b	used 16 bit load of dptr
   1A3B 90 00 01           6070 	mov	dptr,#0x0001
   1A3E C0 02              6071 	push	ar2
   1A40 C0 03              6072 	push	ar3
   1A42 C0 04              6073 	push	ar4
   1A44 12s00r00           6074 	lcall	_delay
   1A47 D0 04              6075 	pop	ar4
   1A49 D0 03              6076 	pop	ar3
   1A4B D0 02              6077 	pop	ar2
                           6078 ;	main.c:785: SCL = 1;
                           6079 ;	genAssign
   1A4D D2 91              6080 	setb	_P1_1
                           6081 ;	main.c:786: temp = temp << 1;
                           6082 ;	genLeftShift
                           6083 ;	genLeftShiftLiteral
                           6084 ;	genlshOne
   1A4F EC                 6085 	mov	a,r4
                           6086 ;	Peephole 254	optimized left shift
   1A50 2C                 6087 	add	a,r4
                           6088 ;	genAssign
   1A51 FC                 6089 	mov	r4,a
   1A52 90s00r1F           6090 	mov	dptr,#_I2CByteRead_temp_1_1
                           6091 ;	Peephole 100	removed redundant mov
   1A55 F0                 6092 	movx	@dptr,a
                           6093 ;	main.c:787: delay(1);
                           6094 ;	genCall
                           6095 ;	Peephole 182.b	used 16 bit load of dptr
   1A56 90 00 01           6096 	mov	dptr,#0x0001
   1A59 C0 02              6097 	push	ar2
   1A5B C0 03              6098 	push	ar3
   1A5D 12s00r00           6099 	lcall	_delay
   1A60 D0 03              6100 	pop	ar3
   1A62 D0 02              6101 	pop	ar2
                           6102 ;	main.c:788: SCL = 0;
                           6103 ;	genAssign
   1A64 C2 91              6104 	clr	_P1_1
                           6105 ;	main.c:781: for(i=0;i<8;i++)
                           6106 ;	genPlus
                           6107 ;     genPlusIncr
   1A66 0A                 6108 	inc	r2
                           6109 ;	Peephole 112.b	changed ljmp to sjmp
                           6110 ;	Peephole 243	avoided branch to sjmp
   1A67 BA 00 BE           6111 	cjne	r2,#0x00,00101$
   1A6A 0B                 6112 	inc	r3
                           6113 ;	Peephole 300	removed redundant label 00132$
   1A6B 80 BB              6114 	sjmp	00101$
   1A6D                    6115 00104$:
                           6116 ;	main.c:792: ack();
                           6117 ;	genCall
   1A6D 12s1DrD5           6118 	lcall	_ack
                           6119 ;	main.c:795: for(i=0;i<8;i++)
                           6120 ;	genAssign
   1A70 7A 00              6121 	mov	r2,#0x00
   1A72 7B 00              6122 	mov	r3,#0x00
   1A74                    6123 00105$:
                           6124 ;	genCmpLt
                           6125 ;	genCmp
   1A74 C3                 6126 	clr	c
   1A75 EA                 6127 	mov	a,r2
   1A76 94 08              6128 	subb	a,#0x08
   1A78 EB                 6129 	mov	a,r3
   1A79 64 80              6130 	xrl	a,#0x80
   1A7B 94 80              6131 	subb	a,#0x80
                           6132 ;	genIfxJump
                           6133 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1A7D 50 3A              6134 	jnc	00108$
                           6135 ;	Peephole 300	removed redundant label 00133$
                           6136 ;	main.c:797: SDA = address & 0x80;
                           6137 ;	genAssign
   1A7F 90s00r1E           6138 	mov	dptr,#_I2CByteRead_address_1_1
   1A82 E0                 6139 	movx	a,@dptr
                           6140 ;	genGetHbit
   1A83 FC                 6141 	mov	r4,a
                           6142 ;	Peephole 105	removed redundant mov
   1A84 33                 6143 	rlc	a
   1A85 92 92              6144 	mov	_P1_2,c
                           6145 ;	main.c:798: delay(1);
                           6146 ;	genCall
                           6147 ;	Peephole 182.b	used 16 bit load of dptr
   1A87 90 00 01           6148 	mov	dptr,#0x0001
   1A8A C0 02              6149 	push	ar2
   1A8C C0 03              6150 	push	ar3
   1A8E C0 04              6151 	push	ar4
   1A90 12s00r00           6152 	lcall	_delay
   1A93 D0 04              6153 	pop	ar4
   1A95 D0 03              6154 	pop	ar3
   1A97 D0 02              6155 	pop	ar2
                           6156 ;	main.c:799: SCL = 1;
                           6157 ;	genAssign
   1A99 D2 91              6158 	setb	_P1_1
                           6159 ;	main.c:800: address = address << 1;
                           6160 ;	genLeftShift
                           6161 ;	genLeftShiftLiteral
                           6162 ;	genlshOne
   1A9B EC                 6163 	mov	a,r4
                           6164 ;	Peephole 254	optimized left shift
   1A9C 2C                 6165 	add	a,r4
                           6166 ;	genAssign
   1A9D FC                 6167 	mov	r4,a
   1A9E 90s00r1E           6168 	mov	dptr,#_I2CByteRead_address_1_1
                           6169 ;	Peephole 100	removed redundant mov
   1AA1 F0                 6170 	movx	@dptr,a
                           6171 ;	main.c:801: delay(1);
                           6172 ;	genCall
                           6173 ;	Peephole 182.b	used 16 bit load of dptr
   1AA2 90 00 01           6174 	mov	dptr,#0x0001
   1AA5 C0 02              6175 	push	ar2
   1AA7 C0 03              6176 	push	ar3
   1AA9 12s00r00           6177 	lcall	_delay
   1AAC D0 03              6178 	pop	ar3
   1AAE D0 02              6179 	pop	ar2
                           6180 ;	main.c:802: SCL = 0;
                           6181 ;	genAssign
   1AB0 C2 91              6182 	clr	_P1_1
                           6183 ;	main.c:795: for(i=0;i<8;i++)
                           6184 ;	genPlus
                           6185 ;     genPlusIncr
   1AB2 0A                 6186 	inc	r2
                           6187 ;	Peephole 112.b	changed ljmp to sjmp
                           6188 ;	Peephole 243	avoided branch to sjmp
   1AB3 BA 00 BE           6189 	cjne	r2,#0x00,00105$
   1AB6 0B                 6190 	inc	r3
                           6191 ;	Peephole 300	removed redundant label 00134$
   1AB7 80 BB              6192 	sjmp	00105$
   1AB9                    6193 00108$:
                           6194 ;	main.c:806: ack();
                           6195 ;	genCall
   1AB9 12s1DrD5           6196 	lcall	_ack
                           6197 ;	main.c:809: I2CStart();
                           6198 ;	genCall
   1ABC 12s19rC7           6199 	lcall	_I2CStart
                           6200 ;	main.c:812: temp = 0xA1;
                           6201 ;	genAssign
   1ABF 90s00r1F           6202 	mov	dptr,#_I2CByteRead_temp_1_1
   1AC2 74 A1              6203 	mov	a,#0xA1
   1AC4 F0                 6204 	movx	@dptr,a
                           6205 ;	main.c:814: for(i=0;i<8;i++)
                           6206 ;	genAssign
   1AC5 7A 00              6207 	mov	r2,#0x00
   1AC7 7B 00              6208 	mov	r3,#0x00
   1AC9                    6209 00109$:
                           6210 ;	genCmpLt
                           6211 ;	genCmp
   1AC9 C3                 6212 	clr	c
   1ACA EA                 6213 	mov	a,r2
   1ACB 94 08              6214 	subb	a,#0x08
   1ACD EB                 6215 	mov	a,r3
   1ACE 64 80              6216 	xrl	a,#0x80
   1AD0 94 80              6217 	subb	a,#0x80
                           6218 ;	genIfxJump
                           6219 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1AD2 50 3A              6220 	jnc	00112$
                           6221 ;	Peephole 300	removed redundant label 00135$
                           6222 ;	main.c:816: SDA = temp & 0x80;
                           6223 ;	genAssign
   1AD4 90s00r1F           6224 	mov	dptr,#_I2CByteRead_temp_1_1
   1AD7 E0                 6225 	movx	a,@dptr
                           6226 ;	genGetHbit
   1AD8 FC                 6227 	mov	r4,a
                           6228 ;	Peephole 105	removed redundant mov
   1AD9 33                 6229 	rlc	a
   1ADA 92 92              6230 	mov	_P1_2,c
                           6231 ;	main.c:817: delay(1);
                           6232 ;	genCall
                           6233 ;	Peephole 182.b	used 16 bit load of dptr
   1ADC 90 00 01           6234 	mov	dptr,#0x0001
   1ADF C0 02              6235 	push	ar2
   1AE1 C0 03              6236 	push	ar3
   1AE3 C0 04              6237 	push	ar4
   1AE5 12s00r00           6238 	lcall	_delay
   1AE8 D0 04              6239 	pop	ar4
   1AEA D0 03              6240 	pop	ar3
   1AEC D0 02              6241 	pop	ar2
                           6242 ;	main.c:818: SCL = 1;
                           6243 ;	genAssign
   1AEE D2 91              6244 	setb	_P1_1
                           6245 ;	main.c:819: temp = temp << 1;
                           6246 ;	genLeftShift
                           6247 ;	genLeftShiftLiteral
                           6248 ;	genlshOne
   1AF0 EC                 6249 	mov	a,r4
                           6250 ;	Peephole 254	optimized left shift
   1AF1 2C                 6251 	add	a,r4
                           6252 ;	genAssign
   1AF2 FC                 6253 	mov	r4,a
   1AF3 90s00r1F           6254 	mov	dptr,#_I2CByteRead_temp_1_1
                           6255 ;	Peephole 100	removed redundant mov
   1AF6 F0                 6256 	movx	@dptr,a
                           6257 ;	main.c:820: delay(1);
                           6258 ;	genCall
                           6259 ;	Peephole 182.b	used 16 bit load of dptr
   1AF7 90 00 01           6260 	mov	dptr,#0x0001
   1AFA C0 02              6261 	push	ar2
   1AFC C0 03              6262 	push	ar3
   1AFE 12s00r00           6263 	lcall	_delay
   1B01 D0 03              6264 	pop	ar3
   1B03 D0 02              6265 	pop	ar2
                           6266 ;	main.c:821: SCL = 0;
                           6267 ;	genAssign
   1B05 C2 91              6268 	clr	_P1_1
                           6269 ;	main.c:814: for(i=0;i<8;i++)
                           6270 ;	genPlus
                           6271 ;     genPlusIncr
   1B07 0A                 6272 	inc	r2
                           6273 ;	Peephole 112.b	changed ljmp to sjmp
                           6274 ;	Peephole 243	avoided branch to sjmp
   1B08 BA 00 BE           6275 	cjne	r2,#0x00,00109$
   1B0B 0B                 6276 	inc	r3
                           6277 ;	Peephole 300	removed redundant label 00136$
   1B0C 80 BB              6278 	sjmp	00109$
   1B0E                    6279 00112$:
                           6280 ;	main.c:823: delay(1);
                           6281 ;	genCall
                           6282 ;	Peephole 182.b	used 16 bit load of dptr
   1B0E 90 00 01           6283 	mov	dptr,#0x0001
   1B11 12s00r00           6284 	lcall	_delay
                           6285 ;	main.c:826: ack();
                           6286 ;	genCall
   1B14 12s1DrD5           6287 	lcall	_ack
                           6288 ;	main.c:827: delay(1);
                           6289 ;	genCall
                           6290 ;	Peephole 182.b	used 16 bit load of dptr
   1B17 90 00 01           6291 	mov	dptr,#0x0001
   1B1A 12s00r00           6292 	lcall	_delay
                           6293 ;	main.c:828: SDA = 1;
                           6294 ;	genAssign
   1B1D D2 92              6295 	setb	_P1_2
                           6296 ;	main.c:831: for(i=7;i>=0;i--)
                           6297 ;	genAssign
   1B1F 7A 07              6298 	mov	r2,#0x07
   1B21 7B 00              6299 	mov	r3,#0x00
   1B23                    6300 00113$:
                           6301 ;	genCmpLt
                           6302 ;	genCmp
   1B23 EB                 6303 	mov	a,r3
                           6304 ;	genIfxJump
                           6305 ;	Peephole 108.e	removed ljmp by inverse jump logic
   1B24 20 E7 52           6306 	jb	acc.7,00116$
                           6307 ;	Peephole 300	removed redundant label 00137$
                           6308 ;	main.c:833: SCL = 1;
                           6309 ;	genAssign
   1B27 D2 91              6310 	setb	_P1_1
                           6311 ;	main.c:834: delay(1);
                           6312 ;	genCall
                           6313 ;	Peephole 182.b	used 16 bit load of dptr
   1B29 90 00 01           6314 	mov	dptr,#0x0001
   1B2C C0 02              6315 	push	ar2
   1B2E C0 03              6316 	push	ar3
   1B30 12s00r00           6317 	lcall	_delay
   1B33 D0 03              6318 	pop	ar3
   1B35 D0 02              6319 	pop	ar2
                           6320 ;	main.c:835: databyte |= (SDA << i);
                           6321 ;	genAssign
   1B37 E4                 6322 	clr	a
   1B38 A2 92              6323 	mov	c,_P1_2
   1B3A 33                 6324 	rlc	a
   1B3B FC                 6325 	mov	r4,a
                           6326 ;	genLeftShift
   1B3C 8A F0              6327 	mov	b,r2
   1B3E 05 F0              6328 	inc	b
   1B40 7D 00              6329 	mov	r5,#0x00
   1B42 80 06              6330 	sjmp	00139$
   1B44                    6331 00138$:
   1B44 EC                 6332 	mov	a,r4
                           6333 ;	Peephole 254	optimized left shift
   1B45 2C                 6334 	add	a,r4
   1B46 FC                 6335 	mov	r4,a
   1B47 ED                 6336 	mov	a,r5
   1B48 33                 6337 	rlc	a
   1B49 FD                 6338 	mov	r5,a
   1B4A                    6339 00139$:
   1B4A D5 F0 F7           6340 	djnz	b,00138$
                           6341 ;	genAssign
                           6342 ;	genCast
                           6343 ;	genOr
   1B4D 90s00r20           6344 	mov	dptr,#_I2CByteRead_databyte_1_1
   1B50 E0                 6345 	movx	a,@dptr
   1B51 FE                 6346 	mov	r6,a
                           6347 ;	Peephole 248.a	optimized or to xdata
   1B52 4C                 6348 	orl	a,r4
   1B53 F0                 6349 	movx	@dptr,a
                           6350 ;	main.c:836: delay(1);
                           6351 ;	genCall
                           6352 ;	Peephole 182.b	used 16 bit load of dptr
   1B54 90 00 01           6353 	mov	dptr,#0x0001
   1B57 C0 02              6354 	push	ar2
   1B59 C0 03              6355 	push	ar3
   1B5B 12s00r00           6356 	lcall	_delay
   1B5E D0 03              6357 	pop	ar3
   1B60 D0 02              6358 	pop	ar2
                           6359 ;	main.c:837: SCL = 0;
                           6360 ;	genAssign
   1B62 C2 91              6361 	clr	_P1_1
                           6362 ;	main.c:838: delay(1);
                           6363 ;	genCall
                           6364 ;	Peephole 182.b	used 16 bit load of dptr
   1B64 90 00 01           6365 	mov	dptr,#0x0001
   1B67 C0 02              6366 	push	ar2
   1B69 C0 03              6367 	push	ar3
   1B6B 12s00r00           6368 	lcall	_delay
   1B6E D0 03              6369 	pop	ar3
   1B70 D0 02              6370 	pop	ar2
                           6371 ;	main.c:831: for(i=7;i>=0;i--)
                           6372 ;	genMinus
                           6373 ;	genMinusDec
   1B72 1A                 6374 	dec	r2
   1B73 BA FF 01           6375 	cjne	r2,#0xff,00140$
   1B76 1B                 6376 	dec	r3
   1B77                    6377 00140$:
                           6378 ;	Peephole 112.b	changed ljmp to sjmp
   1B77 80 AA              6379 	sjmp	00113$
   1B79                    6380 00116$:
                           6381 ;	main.c:841: SCL=1;
                           6382 ;	genAssign
   1B79 D2 91              6383 	setb	_P1_1
                           6384 ;	main.c:842: delay(1);
                           6385 ;	genCall
                           6386 ;	Peephole 182.b	used 16 bit load of dptr
   1B7B 90 00 01           6387 	mov	dptr,#0x0001
   1B7E 12s00r00           6388 	lcall	_delay
                           6389 ;	main.c:843: SCL=0;
                           6390 ;	genAssign
   1B81 C2 91              6391 	clr	_P1_1
                           6392 ;	main.c:845: I2CStop();
                           6393 ;	genCall
   1B83 12s19rE7           6394 	lcall	_I2CStop
                           6395 ;	main.c:847: return databyte;
                           6396 ;	genAssign
   1B86 90s00r20           6397 	mov	dptr,#_I2CByteRead_databyte_1_1
   1B89 E0                 6398 	movx	a,@dptr
                           6399 ;	genRet
                           6400 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   1B8A F5 82              6401 	mov	dpl,a
                           6402 ;	Peephole 300	removed redundant label 00117$
   1B8C 22                 6403 	ret
                           6404 ;------------------------------------------------------------
                           6405 ;Allocation info for local variables in function 'I2CByteWrite'
                           6406 ;------------------------------------------------------------
                           6407 ;block                     Allocated with name '_I2CByteWrite_PARM_2'
                           6408 ;databyte                  Allocated with name '_I2CByteWrite_PARM_3'
                           6409 ;address                   Allocated with name '_I2CByteWrite_address_1_1'
                           6410 ;temp                      Allocated with name '_I2CByteWrite_temp_1_1'
                           6411 ;i                         Allocated with name '_I2CByteWrite_i_1_1'
                           6412 ;------------------------------------------------------------
                           6413 ;	main.c:851: void I2CByteWrite(char address, char block,char databyte)
                           6414 ;	-----------------------------------------
                           6415 ;	 function I2CByteWrite
                           6416 ;	-----------------------------------------
   1B8D                    6417 _I2CByteWrite:
                           6418 ;	genReceive
   1B8D E5 82              6419 	mov	a,dpl
   1B8F 90s00r23           6420 	mov	dptr,#_I2CByteWrite_address_1_1
   1B92 F0                 6421 	movx	@dptr,a
                           6422 ;	main.c:858: block <<= 1;
                           6423 ;	genAssign
   1B93 90s00r21           6424 	mov	dptr,#_I2CByteWrite_PARM_2
   1B96 E0                 6425 	movx	a,@dptr
                           6426 ;	genLeftShift
                           6427 ;	genLeftShiftLiteral
                           6428 ;	genlshOne
                           6429 ;	Peephole 105	removed redundant mov
                           6430 ;	genAssign
                           6431 ;	Peephole 204	removed redundant mov
   1B97 25 E0              6432 	add	a,acc
   1B99 FA                 6433 	mov	r2,a
   1B9A 90s00r21           6434 	mov	dptr,#_I2CByteWrite_PARM_2
                           6435 ;	Peephole 100	removed redundant mov
   1B9D F0                 6436 	movx	@dptr,a
                           6437 ;	main.c:859: temp |= block;
                           6438 ;	genAssign
   1B9E 90s00r21           6439 	mov	dptr,#_I2CByteWrite_PARM_2
   1BA1 E0                 6440 	movx	a,@dptr
   1BA2 FA                 6441 	mov	r2,a
                           6442 ;	genOr
   1BA3 90s00r24           6443 	mov	dptr,#_I2CByteWrite_temp_1_1
   1BA6 74 A0              6444 	mov	a,#0xA0
   1BA8 4A                 6445 	orl	a,r2
   1BA9 F0                 6446 	movx	@dptr,a
                           6447 ;	main.c:862: for(i=0;i<8;i++)
                           6448 ;	genAssign
   1BAA 7A 00              6449 	mov	r2,#0x00
   1BAC 7B 00              6450 	mov	r3,#0x00
   1BAE                    6451 00101$:
                           6452 ;	genCmpLt
                           6453 ;	genCmp
   1BAE C3                 6454 	clr	c
   1BAF EA                 6455 	mov	a,r2
   1BB0 94 08              6456 	subb	a,#0x08
   1BB2 EB                 6457 	mov	a,r3
   1BB3 64 80              6458 	xrl	a,#0x80
   1BB5 94 80              6459 	subb	a,#0x80
                           6460 ;	genIfxJump
                           6461 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1BB7 50 3A              6462 	jnc	00104$
                           6463 ;	Peephole 300	removed redundant label 00124$
                           6464 ;	main.c:864: SDA = temp & 0x80;
                           6465 ;	genAssign
   1BB9 90s00r24           6466 	mov	dptr,#_I2CByteWrite_temp_1_1
   1BBC E0                 6467 	movx	a,@dptr
                           6468 ;	genGetHbit
   1BBD FC                 6469 	mov	r4,a
                           6470 ;	Peephole 105	removed redundant mov
   1BBE 33                 6471 	rlc	a
   1BBF 92 92              6472 	mov	_P1_2,c
                           6473 ;	main.c:865: delay(1);
                           6474 ;	genCall
                           6475 ;	Peephole 182.b	used 16 bit load of dptr
   1BC1 90 00 01           6476 	mov	dptr,#0x0001
   1BC4 C0 02              6477 	push	ar2
   1BC6 C0 03              6478 	push	ar3
   1BC8 C0 04              6479 	push	ar4
   1BCA 12s00r00           6480 	lcall	_delay
   1BCD D0 04              6481 	pop	ar4
   1BCF D0 03              6482 	pop	ar3
   1BD1 D0 02              6483 	pop	ar2
                           6484 ;	main.c:866: SCL = 1;
                           6485 ;	genAssign
   1BD3 D2 91              6486 	setb	_P1_1
                           6487 ;	main.c:867: temp = temp << 1;
                           6488 ;	genLeftShift
                           6489 ;	genLeftShiftLiteral
                           6490 ;	genlshOne
   1BD5 EC                 6491 	mov	a,r4
                           6492 ;	Peephole 254	optimized left shift
   1BD6 2C                 6493 	add	a,r4
                           6494 ;	genAssign
   1BD7 FC                 6495 	mov	r4,a
   1BD8 90s00r24           6496 	mov	dptr,#_I2CByteWrite_temp_1_1
                           6497 ;	Peephole 100	removed redundant mov
   1BDB F0                 6498 	movx	@dptr,a
                           6499 ;	main.c:868: delay(1);
                           6500 ;	genCall
                           6501 ;	Peephole 182.b	used 16 bit load of dptr
   1BDC 90 00 01           6502 	mov	dptr,#0x0001
   1BDF C0 02              6503 	push	ar2
   1BE1 C0 03              6504 	push	ar3
   1BE3 12s00r00           6505 	lcall	_delay
   1BE6 D0 03              6506 	pop	ar3
   1BE8 D0 02              6507 	pop	ar2
                           6508 ;	main.c:869: SCL = 0;
                           6509 ;	genAssign
   1BEA C2 91              6510 	clr	_P1_1
                           6511 ;	main.c:862: for(i=0;i<8;i++)
                           6512 ;	genPlus
                           6513 ;     genPlusIncr
   1BEC 0A                 6514 	inc	r2
                           6515 ;	Peephole 112.b	changed ljmp to sjmp
                           6516 ;	Peephole 243	avoided branch to sjmp
   1BED BA 00 BE           6517 	cjne	r2,#0x00,00101$
   1BF0 0B                 6518 	inc	r3
                           6519 ;	Peephole 300	removed redundant label 00125$
   1BF1 80 BB              6520 	sjmp	00101$
   1BF3                    6521 00104$:
                           6522 ;	main.c:873: ack();
                           6523 ;	genCall
   1BF3 12s1DrD5           6524 	lcall	_ack
                           6525 ;	main.c:876: for(i=0;i<8;i++)
                           6526 ;	genAssign
   1BF6 7A 00              6527 	mov	r2,#0x00
   1BF8 7B 00              6528 	mov	r3,#0x00
   1BFA                    6529 00105$:
                           6530 ;	genCmpLt
                           6531 ;	genCmp
   1BFA C3                 6532 	clr	c
   1BFB EA                 6533 	mov	a,r2
   1BFC 94 08              6534 	subb	a,#0x08
   1BFE EB                 6535 	mov	a,r3
   1BFF 64 80              6536 	xrl	a,#0x80
   1C01 94 80              6537 	subb	a,#0x80
                           6538 ;	genIfxJump
                           6539 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1C03 50 3A              6540 	jnc	00108$
                           6541 ;	Peephole 300	removed redundant label 00126$
                           6542 ;	main.c:878: SDA = address & 0x80;
                           6543 ;	genAssign
   1C05 90s00r23           6544 	mov	dptr,#_I2CByteWrite_address_1_1
   1C08 E0                 6545 	movx	a,@dptr
                           6546 ;	genGetHbit
   1C09 FC                 6547 	mov	r4,a
                           6548 ;	Peephole 105	removed redundant mov
   1C0A 33                 6549 	rlc	a
   1C0B 92 92              6550 	mov	_P1_2,c
                           6551 ;	main.c:879: delay(1);
                           6552 ;	genCall
                           6553 ;	Peephole 182.b	used 16 bit load of dptr
   1C0D 90 00 01           6554 	mov	dptr,#0x0001
   1C10 C0 02              6555 	push	ar2
   1C12 C0 03              6556 	push	ar3
   1C14 C0 04              6557 	push	ar4
   1C16 12s00r00           6558 	lcall	_delay
   1C19 D0 04              6559 	pop	ar4
   1C1B D0 03              6560 	pop	ar3
   1C1D D0 02              6561 	pop	ar2
                           6562 ;	main.c:880: SCL = 1;
                           6563 ;	genAssign
   1C1F D2 91              6564 	setb	_P1_1
                           6565 ;	main.c:881: address = address << 1;
                           6566 ;	genLeftShift
                           6567 ;	genLeftShiftLiteral
                           6568 ;	genlshOne
   1C21 EC                 6569 	mov	a,r4
                           6570 ;	Peephole 254	optimized left shift
   1C22 2C                 6571 	add	a,r4
                           6572 ;	genAssign
   1C23 FC                 6573 	mov	r4,a
   1C24 90s00r23           6574 	mov	dptr,#_I2CByteWrite_address_1_1
                           6575 ;	Peephole 100	removed redundant mov
   1C27 F0                 6576 	movx	@dptr,a
                           6577 ;	main.c:882: delay(1);
                           6578 ;	genCall
                           6579 ;	Peephole 182.b	used 16 bit load of dptr
   1C28 90 00 01           6580 	mov	dptr,#0x0001
   1C2B C0 02              6581 	push	ar2
   1C2D C0 03              6582 	push	ar3
   1C2F 12s00r00           6583 	lcall	_delay
   1C32 D0 03              6584 	pop	ar3
   1C34 D0 02              6585 	pop	ar2
                           6586 ;	main.c:883: SCL = 0;
                           6587 ;	genAssign
   1C36 C2 91              6588 	clr	_P1_1
                           6589 ;	main.c:876: for(i=0;i<8;i++)
                           6590 ;	genPlus
                           6591 ;     genPlusIncr
   1C38 0A                 6592 	inc	r2
                           6593 ;	Peephole 112.b	changed ljmp to sjmp
                           6594 ;	Peephole 243	avoided branch to sjmp
   1C39 BA 00 BE           6595 	cjne	r2,#0x00,00105$
   1C3C 0B                 6596 	inc	r3
                           6597 ;	Peephole 300	removed redundant label 00127$
   1C3D 80 BB              6598 	sjmp	00105$
   1C3F                    6599 00108$:
                           6600 ;	main.c:887: ack();
                           6601 ;	genCall
   1C3F 12s1DrD5           6602 	lcall	_ack
                           6603 ;	main.c:890: for(i=0;i<8;i++)
                           6604 ;	genAssign
   1C42 7A 00              6605 	mov	r2,#0x00
   1C44 7B 00              6606 	mov	r3,#0x00
   1C46                    6607 00109$:
                           6608 ;	genCmpLt
                           6609 ;	genCmp
   1C46 C3                 6610 	clr	c
   1C47 EA                 6611 	mov	a,r2
   1C48 94 08              6612 	subb	a,#0x08
   1C4A EB                 6613 	mov	a,r3
   1C4B 64 80              6614 	xrl	a,#0x80
   1C4D 94 80              6615 	subb	a,#0x80
                           6616 ;	genIfxJump
                           6617 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1C4F 50 3A              6618 	jnc	00112$
                           6619 ;	Peephole 300	removed redundant label 00128$
                           6620 ;	main.c:892: SDA = databyte & 0x80;
                           6621 ;	genAssign
   1C51 90s00r22           6622 	mov	dptr,#_I2CByteWrite_PARM_3
   1C54 E0                 6623 	movx	a,@dptr
                           6624 ;	genGetHbit
   1C55 FC                 6625 	mov	r4,a
                           6626 ;	Peephole 105	removed redundant mov
   1C56 33                 6627 	rlc	a
   1C57 92 92              6628 	mov	_P1_2,c
                           6629 ;	main.c:893: delay(1);
                           6630 ;	genCall
                           6631 ;	Peephole 182.b	used 16 bit load of dptr
   1C59 90 00 01           6632 	mov	dptr,#0x0001
   1C5C C0 02              6633 	push	ar2
   1C5E C0 03              6634 	push	ar3
   1C60 C0 04              6635 	push	ar4
   1C62 12s00r00           6636 	lcall	_delay
   1C65 D0 04              6637 	pop	ar4
   1C67 D0 03              6638 	pop	ar3
   1C69 D0 02              6639 	pop	ar2
                           6640 ;	main.c:894: SCL = 1;
                           6641 ;	genAssign
   1C6B D2 91              6642 	setb	_P1_1
                           6643 ;	main.c:895: databyte = databyte << 1;
                           6644 ;	genLeftShift
                           6645 ;	genLeftShiftLiteral
                           6646 ;	genlshOne
   1C6D EC                 6647 	mov	a,r4
                           6648 ;	Peephole 254	optimized left shift
   1C6E 2C                 6649 	add	a,r4
                           6650 ;	genAssign
   1C6F FC                 6651 	mov	r4,a
   1C70 90s00r22           6652 	mov	dptr,#_I2CByteWrite_PARM_3
                           6653 ;	Peephole 100	removed redundant mov
   1C73 F0                 6654 	movx	@dptr,a
                           6655 ;	main.c:896: delay(1);
                           6656 ;	genCall
                           6657 ;	Peephole 182.b	used 16 bit load of dptr
   1C74 90 00 01           6658 	mov	dptr,#0x0001
   1C77 C0 02              6659 	push	ar2
   1C79 C0 03              6660 	push	ar3
   1C7B 12s00r00           6661 	lcall	_delay
   1C7E D0 03              6662 	pop	ar3
   1C80 D0 02              6663 	pop	ar2
                           6664 ;	main.c:897: SCL = 0;
                           6665 ;	genAssign
   1C82 C2 91              6666 	clr	_P1_1
                           6667 ;	main.c:890: for(i=0;i<8;i++)
                           6668 ;	genPlus
                           6669 ;     genPlusIncr
   1C84 0A                 6670 	inc	r2
                           6671 ;	Peephole 112.b	changed ljmp to sjmp
                           6672 ;	Peephole 243	avoided branch to sjmp
   1C85 BA 00 BE           6673 	cjne	r2,#0x00,00109$
   1C88 0B                 6674 	inc	r3
                           6675 ;	Peephole 300	removed redundant label 00129$
   1C89 80 BB              6676 	sjmp	00109$
   1C8B                    6677 00112$:
                           6678 ;	main.c:902: ack();
                           6679 ;	genCall
                           6680 ;	Peephole 253.b	replaced lcall/ret with ljmp
   1C8B 02s1DrD5           6681 	ljmp	_ack
                           6682 ;
                           6683 ;------------------------------------------------------------
                           6684 ;Allocation info for local variables in function 'I2CPageWrite'
                           6685 ;------------------------------------------------------------
                           6686 ;block                     Allocated with name '_I2CPageWrite_PARM_2'
                           6687 ;databyte                  Allocated with name '_I2CPageWrite_PARM_3'
                           6688 ;address                   Allocated with name '_I2CPageWrite_address_1_1'
                           6689 ;temp                      Allocated with name '_I2CPageWrite_temp_1_1'
                           6690 ;pgdata                    Allocated with name '_I2CPageWrite_pgdata_1_1'
                           6691 ;i                         Allocated with name '_I2CPageWrite_i_1_1'
                           6692 ;pc                        Allocated with name '_I2CPageWrite_pc_1_1'
                           6693 ;------------------------------------------------------------
                           6694 ;	main.c:906: void I2CPageWrite(char address, char block,char databyte)
                           6695 ;	-----------------------------------------
                           6696 ;	 function I2CPageWrite
                           6697 ;	-----------------------------------------
   1C8E                    6698 _I2CPageWrite:
                           6699 ;	genReceive
   1C8E E5 82              6700 	mov	a,dpl
   1C90 90s00r27           6701 	mov	dptr,#_I2CPageWrite_address_1_1
   1C93 F0                 6702 	movx	@dptr,a
                           6703 ;	main.c:914: block <<= 1;
                           6704 ;	genAssign
   1C94 90s00r25           6705 	mov	dptr,#_I2CPageWrite_PARM_2
   1C97 E0                 6706 	movx	a,@dptr
                           6707 ;	genLeftShift
                           6708 ;	genLeftShiftLiteral
                           6709 ;	genlshOne
                           6710 ;	Peephole 105	removed redundant mov
                           6711 ;	genAssign
                           6712 ;	Peephole 204	removed redundant mov
   1C98 25 E0              6713 	add	a,acc
   1C9A FA                 6714 	mov	r2,a
   1C9B 90s00r25           6715 	mov	dptr,#_I2CPageWrite_PARM_2
                           6716 ;	Peephole 100	removed redundant mov
   1C9E F0                 6717 	movx	@dptr,a
                           6718 ;	main.c:915: temp |= block;
                           6719 ;	genAssign
   1C9F 90s00r25           6720 	mov	dptr,#_I2CPageWrite_PARM_2
   1CA2 E0                 6721 	movx	a,@dptr
   1CA3 FA                 6722 	mov	r2,a
                           6723 ;	genOr
   1CA4 90s00r28           6724 	mov	dptr,#_I2CPageWrite_temp_1_1
   1CA7 74 A0              6725 	mov	a,#0xA0
   1CA9 4A                 6726 	orl	a,r2
   1CAA F0                 6727 	movx	@dptr,a
                           6728 ;	main.c:918: for(i=0;i<8;i++)
                           6729 ;	genAssign
   1CAB 7A 00              6730 	mov	r2,#0x00
   1CAD 7B 00              6731 	mov	r3,#0x00
   1CAF                    6732 00101$:
                           6733 ;	genCmpLt
                           6734 ;	genCmp
   1CAF C3                 6735 	clr	c
   1CB0 EA                 6736 	mov	a,r2
   1CB1 94 08              6737 	subb	a,#0x08
   1CB3 EB                 6738 	mov	a,r3
   1CB4 64 80              6739 	xrl	a,#0x80
   1CB6 94 80              6740 	subb	a,#0x80
                           6741 ;	genIfxJump
                           6742 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1CB8 50 3A              6743 	jnc	00104$
                           6744 ;	Peephole 300	removed redundant label 00131$
                           6745 ;	main.c:920: SDA = temp & 0x80;
                           6746 ;	genAssign
   1CBA 90s00r28           6747 	mov	dptr,#_I2CPageWrite_temp_1_1
   1CBD E0                 6748 	movx	a,@dptr
                           6749 ;	genGetHbit
   1CBE FC                 6750 	mov	r4,a
                           6751 ;	Peephole 105	removed redundant mov
   1CBF 33                 6752 	rlc	a
   1CC0 92 92              6753 	mov	_P1_2,c
                           6754 ;	main.c:921: delay(1);
                           6755 ;	genCall
                           6756 ;	Peephole 182.b	used 16 bit load of dptr
   1CC2 90 00 01           6757 	mov	dptr,#0x0001
   1CC5 C0 02              6758 	push	ar2
   1CC7 C0 03              6759 	push	ar3
   1CC9 C0 04              6760 	push	ar4
   1CCB 12s00r00           6761 	lcall	_delay
   1CCE D0 04              6762 	pop	ar4
   1CD0 D0 03              6763 	pop	ar3
   1CD2 D0 02              6764 	pop	ar2
                           6765 ;	main.c:922: SCL = 1;
                           6766 ;	genAssign
   1CD4 D2 91              6767 	setb	_P1_1
                           6768 ;	main.c:923: temp = temp << 1;
                           6769 ;	genLeftShift
                           6770 ;	genLeftShiftLiteral
                           6771 ;	genlshOne
   1CD6 EC                 6772 	mov	a,r4
                           6773 ;	Peephole 254	optimized left shift
   1CD7 2C                 6774 	add	a,r4
                           6775 ;	genAssign
   1CD8 FC                 6776 	mov	r4,a
   1CD9 90s00r28           6777 	mov	dptr,#_I2CPageWrite_temp_1_1
                           6778 ;	Peephole 100	removed redundant mov
   1CDC F0                 6779 	movx	@dptr,a
                           6780 ;	main.c:924: delay(1);
                           6781 ;	genCall
                           6782 ;	Peephole 182.b	used 16 bit load of dptr
   1CDD 90 00 01           6783 	mov	dptr,#0x0001
   1CE0 C0 02              6784 	push	ar2
   1CE2 C0 03              6785 	push	ar3
   1CE4 12s00r00           6786 	lcall	_delay
   1CE7 D0 03              6787 	pop	ar3
   1CE9 D0 02              6788 	pop	ar2
                           6789 ;	main.c:925: SCL = 0;
                           6790 ;	genAssign
   1CEB C2 91              6791 	clr	_P1_1
                           6792 ;	main.c:918: for(i=0;i<8;i++)
                           6793 ;	genPlus
                           6794 ;     genPlusIncr
   1CED 0A                 6795 	inc	r2
                           6796 ;	Peephole 112.b	changed ljmp to sjmp
                           6797 ;	Peephole 243	avoided branch to sjmp
   1CEE BA 00 BE           6798 	cjne	r2,#0x00,00101$
   1CF1 0B                 6799 	inc	r3
                           6800 ;	Peephole 300	removed redundant label 00132$
   1CF2 80 BB              6801 	sjmp	00101$
   1CF4                    6802 00104$:
                           6803 ;	main.c:929: ack();
                           6804 ;	genCall
   1CF4 12s1DrD5           6805 	lcall	_ack
                           6806 ;	main.c:932: for(i=0;i<8;i++)
                           6807 ;	genAssign
   1CF7 7A 00              6808 	mov	r2,#0x00
   1CF9 7B 00              6809 	mov	r3,#0x00
   1CFB                    6810 00105$:
                           6811 ;	genCmpLt
                           6812 ;	genCmp
   1CFB C3                 6813 	clr	c
   1CFC EA                 6814 	mov	a,r2
   1CFD 94 08              6815 	subb	a,#0x08
   1CFF EB                 6816 	mov	a,r3
   1D00 64 80              6817 	xrl	a,#0x80
   1D02 94 80              6818 	subb	a,#0x80
                           6819 ;	genIfxJump
                           6820 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1D04 50 3A              6821 	jnc	00108$
                           6822 ;	Peephole 300	removed redundant label 00133$
                           6823 ;	main.c:934: SDA = address & 0x80;
                           6824 ;	genAssign
   1D06 90s00r27           6825 	mov	dptr,#_I2CPageWrite_address_1_1
   1D09 E0                 6826 	movx	a,@dptr
                           6827 ;	genGetHbit
   1D0A FC                 6828 	mov	r4,a
                           6829 ;	Peephole 105	removed redundant mov
   1D0B 33                 6830 	rlc	a
   1D0C 92 92              6831 	mov	_P1_2,c
                           6832 ;	main.c:935: delay(1);
                           6833 ;	genCall
                           6834 ;	Peephole 182.b	used 16 bit load of dptr
   1D0E 90 00 01           6835 	mov	dptr,#0x0001
   1D11 C0 02              6836 	push	ar2
   1D13 C0 03              6837 	push	ar3
   1D15 C0 04              6838 	push	ar4
   1D17 12s00r00           6839 	lcall	_delay
   1D1A D0 04              6840 	pop	ar4
   1D1C D0 03              6841 	pop	ar3
   1D1E D0 02              6842 	pop	ar2
                           6843 ;	main.c:936: SCL = 1;
                           6844 ;	genAssign
   1D20 D2 91              6845 	setb	_P1_1
                           6846 ;	main.c:937: address = address << 1;
                           6847 ;	genLeftShift
                           6848 ;	genLeftShiftLiteral
                           6849 ;	genlshOne
   1D22 EC                 6850 	mov	a,r4
                           6851 ;	Peephole 254	optimized left shift
   1D23 2C                 6852 	add	a,r4
                           6853 ;	genAssign
   1D24 FC                 6854 	mov	r4,a
   1D25 90s00r27           6855 	mov	dptr,#_I2CPageWrite_address_1_1
                           6856 ;	Peephole 100	removed redundant mov
   1D28 F0                 6857 	movx	@dptr,a
                           6858 ;	main.c:938: delay(1);
                           6859 ;	genCall
                           6860 ;	Peephole 182.b	used 16 bit load of dptr
   1D29 90 00 01           6861 	mov	dptr,#0x0001
   1D2C C0 02              6862 	push	ar2
   1D2E C0 03              6863 	push	ar3
   1D30 12s00r00           6864 	lcall	_delay
   1D33 D0 03              6865 	pop	ar3
   1D35 D0 02              6866 	pop	ar2
                           6867 ;	main.c:939: SCL = 0;
                           6868 ;	genAssign
   1D37 C2 91              6869 	clr	_P1_1
                           6870 ;	main.c:932: for(i=0;i<8;i++)
                           6871 ;	genPlus
                           6872 ;     genPlusIncr
   1D39 0A                 6873 	inc	r2
                           6874 ;	Peephole 112.b	changed ljmp to sjmp
                           6875 ;	Peephole 243	avoided branch to sjmp
   1D3A BA 00 BE           6876 	cjne	r2,#0x00,00105$
   1D3D 0B                 6877 	inc	r3
                           6878 ;	Peephole 300	removed redundant label 00134$
   1D3E 80 BB              6879 	sjmp	00105$
   1D40                    6880 00108$:
                           6881 ;	main.c:943: ack();
                           6882 ;	genCall
   1D40 12s1DrD5           6883 	lcall	_ack
                           6884 ;	main.c:946: for(pc=0;pc<16;pc++)
                           6885 ;	genAssign
   1D43 90s00r26           6886 	mov	dptr,#_I2CPageWrite_PARM_3
   1D46 E0                 6887 	movx	a,@dptr
   1D47 FA                 6888 	mov	r2,a
                           6889 ;	genAssign
   1D48 7B 00              6890 	mov	r3,#0x00
   1D4A 7C 00              6891 	mov	r4,#0x00
   1D4C                    6892 00113$:
                           6893 ;	genCmpLt
                           6894 ;	genCmp
   1D4C C3                 6895 	clr	c
   1D4D EB                 6896 	mov	a,r3
   1D4E 94 10              6897 	subb	a,#0x10
   1D50 EC                 6898 	mov	a,r4
   1D51 64 80              6899 	xrl	a,#0x80
   1D53 94 80              6900 	subb	a,#0x80
                           6901 ;	genIfxJump
   1D55 40 01              6902 	jc	00135$
                           6903 ;	Peephole 251.a	replaced ljmp to ret with ret
   1D57 22                 6904 	ret
   1D58                    6905 00135$:
                           6906 ;	main.c:948: pgdata = databyte;
                           6907 ;	genAssign
   1D58 90s00r29           6908 	mov	dptr,#_I2CPageWrite_pgdata_1_1
   1D5B EA                 6909 	mov	a,r2
   1D5C F0                 6910 	movx	@dptr,a
                           6911 ;	main.c:950: for(i=0;i<8;i++)
                           6912 ;	genAssign
   1D5D 7D 00              6913 	mov	r5,#0x00
   1D5F 7E 00              6914 	mov	r6,#0x00
   1D61                    6915 00109$:
                           6916 ;	genCmpLt
                           6917 ;	genCmp
   1D61 C3                 6918 	clr	c
   1D62 ED                 6919 	mov	a,r5
   1D63 94 08              6920 	subb	a,#0x08
   1D65 EE                 6921 	mov	a,r6
   1D66 64 80              6922 	xrl	a,#0x80
   1D68 94 80              6923 	subb	a,#0x80
                           6924 ;	genIfxJump
                           6925 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1D6A 50 52              6926 	jnc	00112$
                           6927 ;	Peephole 300	removed redundant label 00136$
                           6928 ;	main.c:952: SDA = pgdata & 0x80;
                           6929 ;	genAssign
   1D6C 90s00r29           6930 	mov	dptr,#_I2CPageWrite_pgdata_1_1
   1D6F E0                 6931 	movx	a,@dptr
                           6932 ;	genGetHbit
   1D70 FF                 6933 	mov	r7,a
                           6934 ;	Peephole 105	removed redundant mov
   1D71 33                 6935 	rlc	a
   1D72 92 92              6936 	mov	_P1_2,c
                           6937 ;	main.c:953: delay(1);
                           6938 ;	genCall
                           6939 ;	Peephole 182.b	used 16 bit load of dptr
   1D74 90 00 01           6940 	mov	dptr,#0x0001
   1D77 C0 02              6941 	push	ar2
   1D79 C0 03              6942 	push	ar3
   1D7B C0 04              6943 	push	ar4
   1D7D C0 05              6944 	push	ar5
   1D7F C0 06              6945 	push	ar6
   1D81 C0 07              6946 	push	ar7
   1D83 12s00r00           6947 	lcall	_delay
   1D86 D0 07              6948 	pop	ar7
   1D88 D0 06              6949 	pop	ar6
   1D8A D0 05              6950 	pop	ar5
   1D8C D0 04              6951 	pop	ar4
   1D8E D0 03              6952 	pop	ar3
   1D90 D0 02              6953 	pop	ar2
                           6954 ;	main.c:954: SCL = 1;
                           6955 ;	genAssign
   1D92 D2 91              6956 	setb	_P1_1
                           6957 ;	main.c:955: pgdata = pgdata << 1;
                           6958 ;	genLeftShift
                           6959 ;	genLeftShiftLiteral
                           6960 ;	genlshOne
   1D94 EF                 6961 	mov	a,r7
                           6962 ;	Peephole 254	optimized left shift
   1D95 2F                 6963 	add	a,r7
                           6964 ;	genAssign
   1D96 FF                 6965 	mov	r7,a
   1D97 90s00r29           6966 	mov	dptr,#_I2CPageWrite_pgdata_1_1
                           6967 ;	Peephole 100	removed redundant mov
   1D9A F0                 6968 	movx	@dptr,a
                           6969 ;	main.c:956: delay(1);
                           6970 ;	genCall
                           6971 ;	Peephole 182.b	used 16 bit load of dptr
   1D9B 90 00 01           6972 	mov	dptr,#0x0001
   1D9E C0 02              6973 	push	ar2
   1DA0 C0 03              6974 	push	ar3
   1DA2 C0 04              6975 	push	ar4
   1DA4 C0 05              6976 	push	ar5
   1DA6 C0 06              6977 	push	ar6
   1DA8 12s00r00           6978 	lcall	_delay
   1DAB D0 06              6979 	pop	ar6
   1DAD D0 05              6980 	pop	ar5
   1DAF D0 04              6981 	pop	ar4
   1DB1 D0 03              6982 	pop	ar3
   1DB3 D0 02              6983 	pop	ar2
                           6984 ;	main.c:957: SCL = 0;
                           6985 ;	genAssign
   1DB5 C2 91              6986 	clr	_P1_1
                           6987 ;	main.c:950: for(i=0;i<8;i++)
                           6988 ;	genPlus
                           6989 ;     genPlusIncr
   1DB7 0D                 6990 	inc	r5
                           6991 ;	Peephole 112.b	changed ljmp to sjmp
                           6992 ;	Peephole 243	avoided branch to sjmp
   1DB8 BD 00 A6           6993 	cjne	r5,#0x00,00109$
   1DBB 0E                 6994 	inc	r6
                           6995 ;	Peephole 300	removed redundant label 00137$
   1DBC 80 A3              6996 	sjmp	00109$
   1DBE                    6997 00112$:
                           6998 ;	main.c:961: ack();
                           6999 ;	genCall
   1DBE C0 02              7000 	push	ar2
   1DC0 C0 03              7001 	push	ar3
   1DC2 C0 04              7002 	push	ar4
   1DC4 12s1DrD5           7003 	lcall	_ack
   1DC7 D0 04              7004 	pop	ar4
   1DC9 D0 03              7005 	pop	ar3
   1DCB D0 02              7006 	pop	ar2
                           7007 ;	main.c:946: for(pc=0;pc<16;pc++)
                           7008 ;	genPlus
                           7009 ;     genPlusIncr
   1DCD 0B                 7010 	inc	r3
   1DCE BB 00 01           7011 	cjne	r3,#0x00,00138$
   1DD1 0C                 7012 	inc	r4
   1DD2                    7013 00138$:
   1DD2 02s1Dr4C           7014 	ljmp	00113$
                           7015 ;	Peephole 259.b	removed redundant label 00117$ and ret
                           7016 ;
                           7017 ;------------------------------------------------------------
                           7018 ;Allocation info for local variables in function 'ack'
                           7019 ;------------------------------------------------------------
                           7020 ;------------------------------------------------------------
                           7021 ;	main.c:966: void ack()
                           7022 ;	-----------------------------------------
                           7023 ;	 function ack
                           7024 ;	-----------------------------------------
   1DD5                    7025 _ack:
                           7026 ;	main.c:968: SDA=1;
                           7027 ;	genAssign
   1DD5 D2 92              7028 	setb	_P1_2
                           7029 ;	main.c:969: delay(1);
                           7030 ;	genCall
                           7031 ;	Peephole 182.b	used 16 bit load of dptr
   1DD7 90 00 01           7032 	mov	dptr,#0x0001
   1DDA 12s00r00           7033 	lcall	_delay
                           7034 ;	main.c:970: SCL=1;
                           7035 ;	genAssign
   1DDD D2 91              7036 	setb	_P1_1
                           7037 ;	main.c:971: delay(1);
                           7038 ;	genCall
                           7039 ;	Peephole 182.b	used 16 bit load of dptr
   1DDF 90 00 01           7040 	mov	dptr,#0x0001
   1DE2 12s00r00           7041 	lcall	_delay
                           7042 ;	main.c:972: while(SDA == 1);
   1DE5                    7043 00101$:
                           7044 ;	genIfx
                           7045 ;	genIfxJump
                           7046 ;	Peephole 108.e	removed ljmp by inverse jump logic
   1DE5 20 92 FD           7047 	jb	_P1_2,00101$
                           7048 ;	Peephole 300	removed redundant label 00108$
                           7049 ;	main.c:973: delay(1);
                           7050 ;	genCall
                           7051 ;	Peephole 182.b	used 16 bit load of dptr
   1DE8 90 00 01           7052 	mov	dptr,#0x0001
   1DEB 12s00r00           7053 	lcall	_delay
                           7054 ;	main.c:974: SCL=0;
                           7055 ;	genAssign
   1DEE C2 91              7056 	clr	_P1_1
                           7057 ;	Peephole 300	removed redundant label 00104$
   1DF0 22                 7058 	ret
                           7059 ;------------------------------------------------------------
                           7060 ;Allocation info for local variables in function 'eereset'
                           7061 ;------------------------------------------------------------
                           7062 ;i                         Allocated with name '_eereset_i_1_1'
                           7063 ;------------------------------------------------------------
                           7064 ;	main.c:979: void eereset()
                           7065 ;	-----------------------------------------
                           7066 ;	 function eereset
                           7067 ;	-----------------------------------------
   1DF1                    7068 _eereset:
                           7069 ;	main.c:982: I2CStart();
                           7070 ;	genCall
   1DF1 12s19rC7           7071 	lcall	_I2CStart
                           7072 ;	main.c:983: for(i=0;i<9;i++)
                           7073 ;	genAssign
   1DF4 7A 00              7074 	mov	r2,#0x00
   1DF6 7B 00              7075 	mov	r3,#0x00
   1DF8                    7076 00101$:
                           7077 ;	genCmpLt
                           7078 ;	genCmp
   1DF8 C3                 7079 	clr	c
   1DF9 EA                 7080 	mov	a,r2
   1DFA 94 09              7081 	subb	a,#0x09
   1DFC EB                 7082 	mov	a,r3
   1DFD 64 80              7083 	xrl	a,#0x80
   1DFF 94 80              7084 	subb	a,#0x80
                           7085 ;	genIfxJump
                           7086 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1E01 50 37              7087 	jnc	00104$
                           7088 ;	Peephole 300	removed redundant label 00110$
                           7089 ;	main.c:985: SDA=1;
                           7090 ;	genAssign
   1E03 D2 92              7091 	setb	_P1_2
                           7092 ;	main.c:986: delay(1);
                           7093 ;	genCall
                           7094 ;	Peephole 182.b	used 16 bit load of dptr
   1E05 90 00 01           7095 	mov	dptr,#0x0001
   1E08 C0 02              7096 	push	ar2
   1E0A C0 03              7097 	push	ar3
   1E0C 12s00r00           7098 	lcall	_delay
   1E0F D0 03              7099 	pop	ar3
   1E11 D0 02              7100 	pop	ar2
                           7101 ;	main.c:987: SCL=1;
                           7102 ;	genAssign
   1E13 D2 91              7103 	setb	_P1_1
                           7104 ;	main.c:988: delay(1);
                           7105 ;	genCall
                           7106 ;	Peephole 182.b	used 16 bit load of dptr
   1E15 90 00 01           7107 	mov	dptr,#0x0001
   1E18 C0 02              7108 	push	ar2
   1E1A C0 03              7109 	push	ar3
   1E1C 12s00r00           7110 	lcall	_delay
   1E1F D0 03              7111 	pop	ar3
   1E21 D0 02              7112 	pop	ar2
                           7113 ;	main.c:989: SCL=0;
                           7114 ;	genAssign
   1E23 C2 91              7115 	clr	_P1_1
                           7116 ;	main.c:990: delay(1);
                           7117 ;	genCall
                           7118 ;	Peephole 182.b	used 16 bit load of dptr
   1E25 90 00 01           7119 	mov	dptr,#0x0001
   1E28 C0 02              7120 	push	ar2
   1E2A C0 03              7121 	push	ar3
   1E2C 12s00r00           7122 	lcall	_delay
   1E2F D0 03              7123 	pop	ar3
   1E31 D0 02              7124 	pop	ar2
                           7125 ;	main.c:983: for(i=0;i<9;i++)
                           7126 ;	genPlus
                           7127 ;     genPlusIncr
   1E33 0A                 7128 	inc	r2
                           7129 ;	Peephole 112.b	changed ljmp to sjmp
                           7130 ;	Peephole 243	avoided branch to sjmp
   1E34 BA 00 C1           7131 	cjne	r2,#0x00,00101$
   1E37 0B                 7132 	inc	r3
                           7133 ;	Peephole 300	removed redundant label 00111$
   1E38 80 BE              7134 	sjmp	00101$
   1E3A                    7135 00104$:
                           7136 ;	main.c:992: I2CStart();
                           7137 ;	genCall
   1E3A 12s19rC7           7138 	lcall	_I2CStart
                           7139 ;	main.c:993: delay(1);
                           7140 ;	genCall
                           7141 ;	Peephole 182.b	used 16 bit load of dptr
   1E3D 90 00 01           7142 	mov	dptr,#0x0001
   1E40 12s00r00           7143 	lcall	_delay
                           7144 ;	main.c:994: I2CStop();
                           7145 ;	genCall
                           7146 ;	Peephole 253.b	replaced lcall/ret with ljmp
   1E43 02s19rE7           7147 	ljmp	_I2CStop
                           7148 ;
                           7149 ;------------------------------------------------------------
                           7150 ;Allocation info for local variables in function 'lcdprint'
                           7151 ;------------------------------------------------------------
                           7152 ;pageblock                 Allocated with name '_lcdprint_PARM_2'
                           7153 ;readbyte                  Allocated with name '_lcdprint_PARM_3'
                           7154 ;addr                      Allocated with name '_lcdprint_addr_1_1'
                           7155 ;data1                     Allocated with name '_lcdprint_data1_1_1'
                           7156 ;data2                     Allocated with name '_lcdprint_data2_1_1'
                           7157 ;addr1                     Allocated with name '_lcdprint_addr1_1_1'
                           7158 ;addr2                     Allocated with name '_lcdprint_addr2_1_1'
                           7159 ;rowval                    Allocated with name '_lcdprint_rowval_1_1'
                           7160 ;------------------------------------------------------------
                           7161 ;	main.c:998: void lcdprint(char addr,char pageblock,char readbyte)
                           7162 ;	-----------------------------------------
                           7163 ;	 function lcdprint
                           7164 ;	-----------------------------------------
   1E46                    7165 _lcdprint:
                           7166 ;	genReceive
   1E46 E5 82              7167 	mov	a,dpl
   1E48 90s00r2C           7168 	mov	dptr,#_lcdprint_addr_1_1
   1E4B F0                 7169 	movx	@dptr,a
                           7170 ;	main.c:1003: data1 = readbyte & 0x0F;
                           7171 ;	genAssign
   1E4C 90s00r2B           7172 	mov	dptr,#_lcdprint_PARM_3
   1E4F E0                 7173 	movx	a,@dptr
   1E50 FA                 7174 	mov	r2,a
                           7175 ;	genAnd
   1E51 74 0F              7176 	mov	a,#0x0F
   1E53 5A                 7177 	anl	a,r2
                           7178 ;	main.c:1004: data1 = lcdformat(data1);
                           7179 ;	genCall
   1E54 FB                 7180 	mov	r3,a
                           7181 ;	Peephole 244.c	loading dpl from a instead of r3
   1E55 F5 82              7182 	mov	dpl,a
   1E57 C0 02              7183 	push	ar2
   1E59 12s00r00           7184 	lcall	_lcdformat
   1E5C AB 82              7185 	mov	r3,dpl
   1E5E D0 02              7186 	pop	ar2
                           7187 ;	main.c:1005: readbyte >>= 4;
                           7188 ;	genRightShift
                           7189 ;	genSignedRightShift
                           7190 ;	genRightShiftLiteral
                           7191 ;	genrshOne
   1E60 EA                 7192 	mov	a,r2
   1E61 C4                 7193 	swap	a
   1E62 54 0F              7194 	anl	a,#0x0f
   1E64 30 E3 02           7195 	jnb	acc.3,00106$
   1E67 44 F0              7196 	orl	a,#0xf0
   1E69                    7197 00106$:
                           7198 ;	genAssign
   1E69 FA                 7199 	mov	r2,a
   1E6A 90s00r2B           7200 	mov	dptr,#_lcdprint_PARM_3
                           7201 ;	Peephole 100	removed redundant mov
   1E6D F0                 7202 	movx	@dptr,a
                           7203 ;	main.c:1006: data2 = readbyte & 0x0F;
                           7204 ;	genAssign
   1E6E 90s00r2B           7205 	mov	dptr,#_lcdprint_PARM_3
   1E71 E0                 7206 	movx	a,@dptr
   1E72 FA                 7207 	mov	r2,a
                           7208 ;	genAnd
   1E73 53 02 0F           7209 	anl	ar2,#0x0F
                           7210 ;	main.c:1007: data2 = lcdformat(data2);
                           7211 ;	genCall
   1E76 8A 82              7212 	mov	dpl,r2
   1E78 C0 03              7213 	push	ar3
   1E7A 12s00r00           7214 	lcall	_lcdformat
   1E7D AA 82              7215 	mov	r2,dpl
   1E7F D0 03              7216 	pop	ar3
                           7217 ;	main.c:1010: addr1 = addr & 0x0F;
                           7218 ;	genAssign
   1E81 90s00r2C           7219 	mov	dptr,#_lcdprint_addr_1_1
   1E84 E0                 7220 	movx	a,@dptr
   1E85 FC                 7221 	mov	r4,a
                           7222 ;	genAnd
   1E86 74 0F              7223 	mov	a,#0x0F
   1E88 5C                 7224 	anl	a,r4
                           7225 ;	main.c:1011: addr1 = lcdformat(addr1);
                           7226 ;	genCall
   1E89 FD                 7227 	mov	r5,a
                           7228 ;	Peephole 244.c	loading dpl from a instead of r5
   1E8A F5 82              7229 	mov	dpl,a
   1E8C C0 02              7230 	push	ar2
   1E8E C0 03              7231 	push	ar3
   1E90 C0 04              7232 	push	ar4
   1E92 12s00r00           7233 	lcall	_lcdformat
   1E95 AD 82              7234 	mov	r5,dpl
   1E97 D0 04              7235 	pop	ar4
   1E99 D0 03              7236 	pop	ar3
   1E9B D0 02              7237 	pop	ar2
                           7238 ;	main.c:1012: addr >>= 4;
                           7239 ;	genRightShift
                           7240 ;	genSignedRightShift
                           7241 ;	genRightShiftLiteral
                           7242 ;	genrshOne
   1E9D EC                 7243 	mov	a,r4
   1E9E C4                 7244 	swap	a
   1E9F 54 0F              7245 	anl	a,#0x0f
   1EA1 30 E3 02           7246 	jnb	acc.3,00107$
   1EA4 44 F0              7247 	orl	a,#0xf0
   1EA6                    7248 00107$:
                           7249 ;	genAssign
   1EA6 FC                 7250 	mov	r4,a
   1EA7 90s00r2C           7251 	mov	dptr,#_lcdprint_addr_1_1
                           7252 ;	Peephole 100	removed redundant mov
   1EAA F0                 7253 	movx	@dptr,a
                           7254 ;	main.c:1013: addr2 = addr & 0x0F;
                           7255 ;	genAssign
   1EAB 90s00r2C           7256 	mov	dptr,#_lcdprint_addr_1_1
   1EAE E0                 7257 	movx	a,@dptr
   1EAF FC                 7258 	mov	r4,a
                           7259 ;	genAnd
   1EB0 53 04 0F           7260 	anl	ar4,#0x0F
                           7261 ;	main.c:1015: addr2 = lcdformat(addr2);
                           7262 ;	genCall
   1EB3 8C 82              7263 	mov	dpl,r4
   1EB5 C0 02              7264 	push	ar2
   1EB7 C0 03              7265 	push	ar3
   1EB9 C0 05              7266 	push	ar5
   1EBB 12s00r00           7267 	lcall	_lcdformat
   1EBE AC 82              7268 	mov	r4,dpl
   1EC0 D0 05              7269 	pop	ar5
   1EC2 D0 03              7270 	pop	ar3
   1EC4 D0 02              7271 	pop	ar2
                           7272 ;	main.c:1017: pageblock = lcdformat(pageblock);
                           7273 ;	genAssign
   1EC6 90s00r2A           7274 	mov	dptr,#_lcdprint_PARM_2
   1EC9 E0                 7275 	movx	a,@dptr
                           7276 ;	genCall
   1ECA FE                 7277 	mov	r6,a
                           7278 ;	Peephole 244.c	loading dpl from a instead of r6
   1ECB F5 82              7279 	mov	dpl,a
   1ECD C0 02              7280 	push	ar2
   1ECF C0 03              7281 	push	ar3
   1ED1 C0 04              7282 	push	ar4
   1ED3 C0 05              7283 	push	ar5
   1ED5 12s00r00           7284 	lcall	_lcdformat
   1ED8 AE 82              7285 	mov	r6,dpl
   1EDA D0 05              7286 	pop	ar5
   1EDC D0 04              7287 	pop	ar4
   1EDE D0 03              7288 	pop	ar3
   1EE0 D0 02              7289 	pop	ar2
                           7290 ;	main.c:1019: if(rowval==4)
                           7291 ;	genAssign
   1EE2 90s00r2D           7292 	mov	dptr,#_lcdprint_rowval_1_1
   1EE5 E0                 7293 	movx	a,@dptr
   1EE6 FF                 7294 	mov	r7,a
   1EE7 A3                 7295 	inc	dptr
   1EE8 E0                 7296 	movx	a,@dptr
   1EE9 F8                 7297 	mov	r0,a
                           7298 ;	genCmpEq
                           7299 ;	gencjneshort
                           7300 ;	Peephole 112.b	changed ljmp to sjmp
                           7301 ;	Peephole 198.a	optimized misc jump sequence
   1EEA BF 04 0A           7302 	cjne	r7,#0x04,00102$
   1EED B8 00 07           7303 	cjne	r0,#0x00,00102$
                           7304 ;	Peephole 200.b	removed redundant sjmp
                           7305 ;	Peephole 300	removed redundant label 00108$
                           7306 ;	Peephole 300	removed redundant label 00109$
                           7307 ;	main.c:1020: rowval = 0;
                           7308 ;	genAssign
   1EF0 90s00r2D           7309 	mov	dptr,#_lcdprint_rowval_1_1
   1EF3 E4                 7310 	clr	a
   1EF4 F0                 7311 	movx	@dptr,a
   1EF5 A3                 7312 	inc	dptr
   1EF6 F0                 7313 	movx	@dptr,a
   1EF7                    7314 00102$:
                           7315 ;	main.c:1021: printf_tiny("rowval:%x\n\r",rowval);
                           7316 ;	genIpush
   1EF7 C0 02              7317 	push	ar2
   1EF9 C0 03              7318 	push	ar3
   1EFB C0 04              7319 	push	ar4
   1EFD C0 05              7320 	push	ar5
   1EFF C0 06              7321 	push	ar6
   1F01 90s00r2D           7322 	mov	dptr,#_lcdprint_rowval_1_1
   1F04 E0                 7323 	movx	a,@dptr
   1F05 C0 E0              7324 	push	acc
   1F07 A3                 7325 	inc	dptr
   1F08 E0                 7326 	movx	a,@dptr
   1F09 C0 E0              7327 	push	acc
                           7328 ;	genIpush
   1F0B 74r3C              7329 	mov	a,#__str_88
   1F0D C0 E0              7330 	push	acc
   1F0F 74s09              7331 	mov	a,#(__str_88 >> 8)
   1F11 C0 E0              7332 	push	acc
                           7333 ;	genCall
   1F13 12s00r00           7334 	lcall	_printf_tiny
   1F16 E5 81              7335 	mov	a,sp
   1F18 24 FC              7336 	add	a,#0xfc
   1F1A F5 81              7337 	mov	sp,a
   1F1C D0 06              7338 	pop	ar6
   1F1E D0 05              7339 	pop	ar5
   1F20 D0 04              7340 	pop	ar4
   1F22 D0 03              7341 	pop	ar3
   1F24 D0 02              7342 	pop	ar2
                           7343 ;	main.c:1022: TR0=0;
                           7344 ;	genAssign
   1F26 C2 8C              7345 	clr	_TR0
                           7346 ;	main.c:1023: lcdgotoxy(rowval,0);
                           7347 ;	genAssign
   1F28 90s00r2D           7348 	mov	dptr,#_lcdprint_rowval_1_1
   1F2B E0                 7349 	movx	a,@dptr
   1F2C FF                 7350 	mov	r7,a
   1F2D A3                 7351 	inc	dptr
   1F2E E0                 7352 	movx	a,@dptr
   1F2F F8                 7353 	mov	r0,a
                           7354 ;	genCast
                           7355 ;	genAssign
   1F30 90s00r00           7356 	mov	dptr,#_lcdgotoxy_PARM_2
                           7357 ;	Peephole 181	changed mov to clr
   1F33 E4                 7358 	clr	a
   1F34 F0                 7359 	movx	@dptr,a
                           7360 ;	genCall
   1F35 8F 82              7361 	mov	dpl,r7
   1F37 C0 02              7362 	push	ar2
   1F39 C0 03              7363 	push	ar3
   1F3B C0 04              7364 	push	ar4
   1F3D C0 05              7365 	push	ar5
   1F3F C0 06              7366 	push	ar6
   1F41 12s00r00           7367 	lcall	_lcdgotoxy
   1F44 D0 06              7368 	pop	ar6
   1F46 D0 05              7369 	pop	ar5
   1F48 D0 04              7370 	pop	ar4
   1F4A D0 03              7371 	pop	ar3
   1F4C D0 02              7372 	pop	ar2
                           7373 ;	main.c:1024: delay(10);
                           7374 ;	genCall
                           7375 ;	Peephole 182.b	used 16 bit load of dptr
   1F4E 90 00 0A           7376 	mov	dptr,#0x000A
   1F51 C0 02              7377 	push	ar2
   1F53 C0 03              7378 	push	ar3
   1F55 C0 04              7379 	push	ar4
   1F57 C0 05              7380 	push	ar5
   1F59 C0 06              7381 	push	ar6
   1F5B 12s00r00           7382 	lcall	_delay
   1F5E D0 06              7383 	pop	ar6
   1F60 D0 05              7384 	pop	ar5
   1F62 D0 04              7385 	pop	ar4
   1F64 D0 03              7386 	pop	ar3
   1F66 D0 02              7387 	pop	ar2
                           7388 ;	main.c:1025: lcdputch('0');
                           7389 ;	genCall
   1F68 75 82 30           7390 	mov	dpl,#0x30
   1F6B C0 02              7391 	push	ar2
   1F6D C0 03              7392 	push	ar3
   1F6F C0 04              7393 	push	ar4
   1F71 C0 05              7394 	push	ar5
   1F73 C0 06              7395 	push	ar6
   1F75 12s00r00           7396 	lcall	_lcdputch
   1F78 D0 06              7397 	pop	ar6
   1F7A D0 05              7398 	pop	ar5
   1F7C D0 04              7399 	pop	ar4
   1F7E D0 03              7400 	pop	ar3
   1F80 D0 02              7401 	pop	ar2
                           7402 ;	main.c:1026: delay(10);
                           7403 ;	genCall
                           7404 ;	Peephole 182.b	used 16 bit load of dptr
   1F82 90 00 0A           7405 	mov	dptr,#0x000A
   1F85 C0 02              7406 	push	ar2
   1F87 C0 03              7407 	push	ar3
   1F89 C0 04              7408 	push	ar4
   1F8B C0 05              7409 	push	ar5
   1F8D C0 06              7410 	push	ar6
   1F8F 12s00r00           7411 	lcall	_delay
   1F92 D0 06              7412 	pop	ar6
   1F94 D0 05              7413 	pop	ar5
   1F96 D0 04              7414 	pop	ar4
   1F98 D0 03              7415 	pop	ar3
   1F9A D0 02              7416 	pop	ar2
                           7417 ;	main.c:1027: lcdputch(pageblock);
                           7418 ;	genCall
   1F9C 8E 82              7419 	mov	dpl,r6
   1F9E C0 02              7420 	push	ar2
   1FA0 C0 03              7421 	push	ar3
   1FA2 C0 04              7422 	push	ar4
   1FA4 C0 05              7423 	push	ar5
   1FA6 12s00r00           7424 	lcall	_lcdputch
   1FA9 D0 05              7425 	pop	ar5
   1FAB D0 04              7426 	pop	ar4
   1FAD D0 03              7427 	pop	ar3
   1FAF D0 02              7428 	pop	ar2
                           7429 ;	main.c:1028: delay(10);
                           7430 ;	genCall
                           7431 ;	Peephole 182.b	used 16 bit load of dptr
   1FB1 90 00 0A           7432 	mov	dptr,#0x000A
   1FB4 C0 02              7433 	push	ar2
   1FB6 C0 03              7434 	push	ar3
   1FB8 C0 04              7435 	push	ar4
   1FBA C0 05              7436 	push	ar5
   1FBC 12s00r00           7437 	lcall	_delay
   1FBF D0 05              7438 	pop	ar5
   1FC1 D0 04              7439 	pop	ar4
   1FC3 D0 03              7440 	pop	ar3
   1FC5 D0 02              7441 	pop	ar2
                           7442 ;	main.c:1029: lcdputch(addr2);
                           7443 ;	genCall
   1FC7 8C 82              7444 	mov	dpl,r4
   1FC9 C0 02              7445 	push	ar2
   1FCB C0 03              7446 	push	ar3
   1FCD C0 05              7447 	push	ar5
   1FCF 12s00r00           7448 	lcall	_lcdputch
   1FD2 D0 05              7449 	pop	ar5
   1FD4 D0 03              7450 	pop	ar3
   1FD6 D0 02              7451 	pop	ar2
                           7452 ;	main.c:1030: delay(10);
                           7453 ;	genCall
                           7454 ;	Peephole 182.b	used 16 bit load of dptr
   1FD8 90 00 0A           7455 	mov	dptr,#0x000A
   1FDB C0 02              7456 	push	ar2
   1FDD C0 03              7457 	push	ar3
   1FDF C0 05              7458 	push	ar5
   1FE1 12s00r00           7459 	lcall	_delay
   1FE4 D0 05              7460 	pop	ar5
   1FE6 D0 03              7461 	pop	ar3
   1FE8 D0 02              7462 	pop	ar2
                           7463 ;	main.c:1031: lcdputch(addr1);
                           7464 ;	genCall
   1FEA 8D 82              7465 	mov	dpl,r5
   1FEC C0 02              7466 	push	ar2
   1FEE C0 03              7467 	push	ar3
   1FF0 12s00r00           7468 	lcall	_lcdputch
   1FF3 D0 03              7469 	pop	ar3
   1FF5 D0 02              7470 	pop	ar2
                           7471 ;	main.c:1032: delay(10);
                           7472 ;	genCall
                           7473 ;	Peephole 182.b	used 16 bit load of dptr
   1FF7 90 00 0A           7474 	mov	dptr,#0x000A
   1FFA C0 02              7475 	push	ar2
   1FFC C0 03              7476 	push	ar3
   1FFE 12s00r00           7477 	lcall	_delay
   2001 D0 03              7478 	pop	ar3
   2003 D0 02              7479 	pop	ar2
                           7480 ;	main.c:1033: lcdputstr(": ");
                           7481 ;	genCall
                           7482 ;	Peephole 182.a	used 16 bit load of DPTR
   2005 90s09r48           7483 	mov	dptr,#__str_89
   2008 75 F0 80           7484 	mov	b,#0x80
   200B C0 02              7485 	push	ar2
   200D C0 03              7486 	push	ar3
   200F 12s00r00           7487 	lcall	_lcdputstr
   2012 D0 03              7488 	pop	ar3
   2014 D0 02              7489 	pop	ar2
                           7490 ;	main.c:1034: delay(10);
                           7491 ;	genCall
                           7492 ;	Peephole 182.b	used 16 bit load of dptr
   2016 90 00 0A           7493 	mov	dptr,#0x000A
   2019 C0 02              7494 	push	ar2
   201B C0 03              7495 	push	ar3
   201D 12s00r00           7496 	lcall	_delay
   2020 D0 03              7497 	pop	ar3
   2022 D0 02              7498 	pop	ar2
                           7499 ;	main.c:1035: lcdputch((data2));
                           7500 ;	genCall
   2024 8A 82              7501 	mov	dpl,r2
   2026 C0 03              7502 	push	ar3
   2028 12s00r00           7503 	lcall	_lcdputch
   202B D0 03              7504 	pop	ar3
                           7505 ;	main.c:1036: delay(10);
                           7506 ;	genCall
                           7507 ;	Peephole 182.b	used 16 bit load of dptr
   202D 90 00 0A           7508 	mov	dptr,#0x000A
   2030 C0 03              7509 	push	ar3
   2032 12s00r00           7510 	lcall	_delay
   2035 D0 03              7511 	pop	ar3
                           7512 ;	main.c:1037: lcdputch((data1));
                           7513 ;	genCall
   2037 8B 82              7514 	mov	dpl,r3
   2039 12s00r00           7515 	lcall	_lcdputch
                           7516 ;	main.c:1038: delay(10);
                           7517 ;	genCall
                           7518 ;	Peephole 182.b	used 16 bit load of dptr
   203C 90 00 0A           7519 	mov	dptr,#0x000A
   203F 12s00r00           7520 	lcall	_delay
                           7521 ;	main.c:1039: lcdgotoxy(3,9);
                           7522 ;	genAssign
   2042 90s00r00           7523 	mov	dptr,#_lcdgotoxy_PARM_2
   2045 74 09              7524 	mov	a,#0x09
   2047 F0                 7525 	movx	@dptr,a
                           7526 ;	genCall
   2048 75 82 03           7527 	mov	dpl,#0x03
   204B 12s00r00           7528 	lcall	_lcdgotoxy
                           7529 ;	main.c:1040: delay(10);
                           7530 ;	genCall
                           7531 ;	Peephole 182.b	used 16 bit load of dptr
   204E 90 00 0A           7532 	mov	dptr,#0x000A
   2051 12s00r00           7533 	lcall	_delay
                           7534 ;	main.c:1041: TR0=1;
                           7535 ;	genAssign
   2054 D2 8C              7536 	setb	_TR0
                           7537 ;	main.c:1042: rowval++;
                           7538 ;	genAssign
   2056 90s00r2D           7539 	mov	dptr,#_lcdprint_rowval_1_1
   2059 E0                 7540 	movx	a,@dptr
   205A FA                 7541 	mov	r2,a
   205B A3                 7542 	inc	dptr
   205C E0                 7543 	movx	a,@dptr
   205D FB                 7544 	mov	r3,a
                           7545 ;	genPlus
   205E 90s00r2D           7546 	mov	dptr,#_lcdprint_rowval_1_1
                           7547 ;     genPlusIncr
   2061 74 01              7548 	mov	a,#0x01
                           7549 ;	Peephole 236.a	used r2 instead of ar2
   2063 2A                 7550 	add	a,r2
   2064 F0                 7551 	movx	@dptr,a
                           7552 ;	Peephole 181	changed mov to clr
   2065 E4                 7553 	clr	a
                           7554 ;	Peephole 236.b	used r3 instead of ar3
   2066 3B                 7555 	addc	a,r3
   2067 A3                 7556 	inc	dptr
   2068 F0                 7557 	movx	@dptr,a
                           7558 ;	Peephole 300	removed redundant label 00103$
   2069 22                 7559 	ret
                           7560 ;------------------------------------------------------------
                           7561 ;Allocation info for local variables in function 'fetch_addr'
                           7562 ;------------------------------------------------------------
                           7563 ;i1                        Allocated with name '_fetch_addr_i1_1_1'
                           7564 ;i                         Allocated with name '_fetch_addr_i_1_1'
                           7565 ;ch                        Allocated with name '_fetch_addr_ch_1_1'
                           7566 ;finalval                  Allocated with name '_fetch_addr_finalval_1_1'
                           7567 ;------------------------------------------------------------
                           7568 ;	main.c:1047: char fetch_addr()
                           7569 ;	-----------------------------------------
                           7570 ;	 function fetch_addr
                           7571 ;	-----------------------------------------
   206A                    7572 _fetch_addr:
                           7573 ;	main.c:1053: do
   206A                    7574 00125$:
                           7575 ;	main.c:1056: printf_tiny("\nEnter EEPROM address:\n\r");
                           7576 ;	genIpush
   206A 74r4B              7577 	mov	a,#__str_90
   206C C0 E0              7578 	push	acc
   206E 74s09              7579 	mov	a,#(__str_90 >> 8)
   2070 C0 E0              7580 	push	acc
                           7581 ;	genCall
   2072 12s00r00           7582 	lcall	_printf_tiny
   2075 15 81              7583 	dec	sp
   2077 15 81              7584 	dec	sp
                           7585 ;	main.c:1057: printf_tiny("\nAddress Range: 000h - 7FFh\n\r");
                           7586 ;	genIpush
   2079 74r64              7587 	mov	a,#__str_91
   207B C0 E0              7588 	push	acc
   207D 74s09              7589 	mov	a,#(__str_91 >> 8)
   207F C0 E0              7590 	push	acc
                           7591 ;	genCall
   2081 12s00r00           7592 	lcall	_printf_tiny
   2084 15 81              7593 	dec	sp
   2086 15 81              7594 	dec	sp
                           7595 ;	main.c:1058: memset(bufsiz,'\0',BUFSIZ);
                           7596 ;	genAssign
   2088 90s00r00           7597 	mov	dptr,#_memset_PARM_2
                           7598 ;	Peephole 181	changed mov to clr
   208B E4                 7599 	clr	a
   208C F0                 7600 	movx	@dptr,a
                           7601 ;	genAssign
   208D 90s00r00           7602 	mov	dptr,#_memset_PARM_3
   2090 74 03              7603 	mov	a,#0x03
   2092 F0                 7604 	movx	@dptr,a
   2093 E4                 7605 	clr	a
   2094 A3                 7606 	inc	dptr
   2095 F0                 7607 	movx	@dptr,a
                           7608 ;	genCall
                           7609 ;	Peephole 182.a	used 16 bit load of DPTR
   2096 90s00r00           7610 	mov	dptr,#_bufsiz
   2099 75 F0 00           7611 	mov	b,#0x00
   209C 12s00r00           7612 	lcall	_memset
                           7613 ;	main.c:1060: for(i1=0;i1<3;i1++)
                           7614 ;	genAssign
   209F 90s00r2F           7615 	mov	dptr,#_fetch_addr_i1_1_1
   20A2 E4                 7616 	clr	a
   20A3 F0                 7617 	movx	@dptr,a
   20A4 A3                 7618 	inc	dptr
   20A5 F0                 7619 	movx	@dptr,a
                           7620 ;	genAssign
   20A6 7A 00              7621 	mov	r2,#0x00
   20A8 7B 00              7622 	mov	r3,#0x00
   20AA                    7623 00121$:
                           7624 ;	genCmpLt
                           7625 ;	genCmp
   20AA C3                 7626 	clr	c
   20AB EA                 7627 	mov	a,r2
   20AC 94 03              7628 	subb	a,#0x03
   20AE EB                 7629 	mov	a,r3
   20AF 64 80              7630 	xrl	a,#0x80
   20B1 94 80              7631 	subb	a,#0x80
                           7632 ;	genIfxJump
   20B3 40 03              7633 	jc	00283$
   20B5 02s21r8D           7634 	ljmp	00126$
   20B8                    7635 00283$:
                           7636 ;	main.c:1062: ch = getchar();
                           7637 ;	genCall
   20B8 C0 02              7638 	push	ar2
   20BA C0 03              7639 	push	ar3
   20BC 12s00r00           7640 	lcall	_getchar
   20BF AC 82              7641 	mov	r4,dpl
   20C1 D0 03              7642 	pop	ar3
   20C3 D0 02              7643 	pop	ar2
                           7644 ;	main.c:1063: if(((ch > 47) && (ch < 59)) || ((ch > 96) && (ch < 103)) || ((ch > 64) && (ch < 71)))
                           7645 ;	genCmpGt
                           7646 ;	genCmp
   20C5 C3                 7647 	clr	c
                           7648 ;	Peephole 159	avoided xrl during execution
   20C6 74 AF              7649 	mov	a,#(0x2F ^ 0x80)
   20C8 8C F0              7650 	mov	b,r4
   20CA 63 F0 80           7651 	xrl	b,#0x80
   20CD 95 F0              7652 	subb	a,b
   20CF E4                 7653 	clr	a
   20D0 33                 7654 	rlc	a
                           7655 ;	genIfx
   20D1 FD                 7656 	mov	r5,a
                           7657 ;	Peephole 105	removed redundant mov
                           7658 ;	genIfxJump
                           7659 ;	Peephole 108.c	removed ljmp by inverse jump logic
   20D2 60 08              7660 	jz	00113$
                           7661 ;	Peephole 300	removed redundant label 00284$
                           7662 ;	genCmpLt
                           7663 ;	genCmp
   20D4 C3                 7664 	clr	c
   20D5 EC                 7665 	mov	a,r4
   20D6 64 80              7666 	xrl	a,#0x80
   20D8 94 BB              7667 	subb	a,#0xbb
                           7668 ;	genIfxJump
                           7669 ;	Peephole 112.b	changed ljmp to sjmp
                           7670 ;	Peephole 160.a	removed sjmp by inverse jump logic
   20DA 40 2E              7671 	jc	00108$
                           7672 ;	Peephole 300	removed redundant label 00285$
   20DC                    7673 00113$:
                           7674 ;	genCmpGt
                           7675 ;	genCmp
   20DC C3                 7676 	clr	c
                           7677 ;	Peephole 159	avoided xrl during execution
   20DD 74 E0              7678 	mov	a,#(0x60 ^ 0x80)
   20DF 8C F0              7679 	mov	b,r4
   20E1 63 F0 80           7680 	xrl	b,#0x80
   20E4 95 F0              7681 	subb	a,b
   20E6 E4                 7682 	clr	a
   20E7 33                 7683 	rlc	a
                           7684 ;	genIfx
   20E8 FE                 7685 	mov	r6,a
                           7686 ;	Peephole 105	removed redundant mov
                           7687 ;	genIfxJump
                           7688 ;	Peephole 108.c	removed ljmp by inverse jump logic
   20E9 60 08              7689 	jz	00115$
                           7690 ;	Peephole 300	removed redundant label 00286$
                           7691 ;	genCmpLt
                           7692 ;	genCmp
   20EB C3                 7693 	clr	c
   20EC EC                 7694 	mov	a,r4
   20ED 64 80              7695 	xrl	a,#0x80
   20EF 94 E7              7696 	subb	a,#0xe7
                           7697 ;	genIfxJump
                           7698 ;	Peephole 112.b	changed ljmp to sjmp
                           7699 ;	Peephole 160.a	removed sjmp by inverse jump logic
   20F1 40 17              7700 	jc	00108$
                           7701 ;	Peephole 300	removed redundant label 00287$
   20F3                    7702 00115$:
                           7703 ;	genCmpGt
                           7704 ;	genCmp
   20F3 C3                 7705 	clr	c
                           7706 ;	Peephole 159	avoided xrl during execution
   20F4 74 C0              7707 	mov	a,#(0x40 ^ 0x80)
   20F6 8C F0              7708 	mov	b,r4
   20F8 63 F0 80           7709 	xrl	b,#0x80
   20FB 95 F0              7710 	subb	a,b
   20FD E4                 7711 	clr	a
   20FE 33                 7712 	rlc	a
                           7713 ;	genIfx
   20FF FF                 7714 	mov	r7,a
                           7715 ;	Peephole 105	removed redundant mov
                           7716 ;	genIfxJump
                           7717 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2100 60 16              7718 	jz	00109$
                           7719 ;	Peephole 300	removed redundant label 00288$
                           7720 ;	genCmpLt
                           7721 ;	genCmp
   2102 C3                 7722 	clr	c
   2103 EC                 7723 	mov	a,r4
   2104 64 80              7724 	xrl	a,#0x80
   2106 94 C7              7725 	subb	a,#0xc7
                           7726 ;	genIfxJump
                           7727 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2108 50 0E              7728 	jnc	00109$
                           7729 ;	Peephole 300	removed redundant label 00289$
   210A                    7730 00108$:
                           7731 ;	main.c:1065: bufsiz[i1] = ch;
                           7732 ;	genPlus
                           7733 ;	Peephole 236.g	used r2 instead of ar2
   210A EA                 7734 	mov	a,r2
   210B 24r00              7735 	add	a,#_bufsiz
   210D F5 82              7736 	mov	dpl,a
                           7737 ;	Peephole 236.g	used r3 instead of ar3
   210F EB                 7738 	mov	a,r3
   2110 34s00              7739 	addc	a,#(_bufsiz >> 8)
   2112 F5 83              7740 	mov	dph,a
                           7741 ;	genPointerSet
                           7742 ;     genFarPointerSet
   2114 EC                 7743 	mov	a,r4
   2115 F0                 7744 	movx	@dptr,a
                           7745 ;	Peephole 112.b	changed ljmp to sjmp
   2116 80 32              7746 	sjmp	00110$
   2118                    7747 00109$:
                           7748 ;	main.c:1067: else if(!(((ch > 47) && (ch < 59)) || ((ch > 96) && (ch < 103)) || ((ch > 64) && (ch < 71))))
                           7749 ;	genIfx
   2118 ED                 7750 	mov	a,r5
                           7751 ;	genIfxJump
                           7752 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2119 60 08              7753 	jz	00105$
                           7754 ;	Peephole 300	removed redundant label 00290$
                           7755 ;	genCmpLt
                           7756 ;	genCmp
   211B C3                 7757 	clr	c
   211C EC                 7758 	mov	a,r4
   211D 64 80              7759 	xrl	a,#0x80
   211F 94 BB              7760 	subb	a,#0xbb
                           7761 ;	genIfxJump
                           7762 ;	Peephole 112.b	changed ljmp to sjmp
                           7763 ;	Peephole 160.a	removed sjmp by inverse jump logic
   2121 40 27              7764 	jc	00110$
                           7765 ;	Peephole 300	removed redundant label 00291$
   2123                    7766 00105$:
                           7767 ;	genIfx
   2123 EE                 7768 	mov	a,r6
                           7769 ;	genIfxJump
                           7770 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2124 60 08              7771 	jz	00107$
                           7772 ;	Peephole 300	removed redundant label 00292$
                           7773 ;	genCmpLt
                           7774 ;	genCmp
   2126 C3                 7775 	clr	c
   2127 EC                 7776 	mov	a,r4
   2128 64 80              7777 	xrl	a,#0x80
   212A 94 E7              7778 	subb	a,#0xe7
                           7779 ;	genIfxJump
                           7780 ;	Peephole 112.b	changed ljmp to sjmp
                           7781 ;	Peephole 160.a	removed sjmp by inverse jump logic
   212C 40 1C              7782 	jc	00110$
                           7783 ;	Peephole 300	removed redundant label 00293$
   212E                    7784 00107$:
                           7785 ;	genIfx
   212E EF                 7786 	mov	a,r7
                           7787 ;	genIfxJump
                           7788 ;	Peephole 108.c	removed ljmp by inverse jump logic
   212F 60 08              7789 	jz	00101$
                           7790 ;	Peephole 300	removed redundant label 00294$
                           7791 ;	genCmpLt
                           7792 ;	genCmp
   2131 C3                 7793 	clr	c
   2132 EC                 7794 	mov	a,r4
   2133 64 80              7795 	xrl	a,#0x80
   2135 94 C7              7796 	subb	a,#0xc7
                           7797 ;	genIfxJump
                           7798 ;	Peephole 112.b	changed ljmp to sjmp
                           7799 ;	Peephole 160.a	removed sjmp by inverse jump logic
   2137 40 11              7800 	jc	00110$
                           7801 ;	Peephole 300	removed redundant label 00295$
   2139                    7802 00101$:
                           7803 ;	main.c:1069: printf_tiny("\n\rPlease enter hexadecimal input. Special characters are not allowed.\n\r");
                           7804 ;	genIpush
   2139 74r82              7805 	mov	a,#__str_92
   213B C0 E0              7806 	push	acc
   213D 74s09              7807 	mov	a,#(__str_92 >> 8)
   213F C0 E0              7808 	push	acc
                           7809 ;	genCall
   2141 12s00r00           7810 	lcall	_printf_tiny
   2144 15 81              7811 	dec	sp
   2146 15 81              7812 	dec	sp
                           7813 ;	main.c:1070: break;
                           7814 ;	Peephole 112.b	changed ljmp to sjmp
   2148 80 43              7815 	sjmp	00126$
   214A                    7816 00110$:
                           7817 ;	main.c:1073: if(i1==0)
                           7818 ;	genIfx
   214A EA                 7819 	mov	a,r2
   214B 4B                 7820 	orl	a,r3
                           7821 ;	genIfxJump
                           7822 ;	Peephole 108.b	removed ljmp by inverse jump logic
   214C 70 2F              7823 	jnz	00123$
                           7824 ;	Peephole 300	removed redundant label 00296$
                           7825 ;	main.c:1075: if((bufsiz[i1] < '0') || (bufsiz[i1] > '7'))
                           7826 ;	genPlus
                           7827 ;	Peephole 236.g	used r2 instead of ar2
   214E EA                 7828 	mov	a,r2
   214F 24r00              7829 	add	a,#_bufsiz
   2151 F5 82              7830 	mov	dpl,a
                           7831 ;	Peephole 236.g	used r3 instead of ar3
   2153 EB                 7832 	mov	a,r3
   2154 34s00              7833 	addc	a,#(_bufsiz >> 8)
   2156 F5 83              7834 	mov	dph,a
                           7835 ;	genPointerGet
                           7836 ;	genFarPointerGet
   2158 E0                 7837 	movx	a,@dptr
                           7838 ;	genCmpLt
                           7839 ;	genCmp
   2159 FC                 7840 	mov	r4,a
   215A C3                 7841 	clr	c
                           7842 ;	Peephole 106	removed redundant mov
   215B 64 80              7843 	xrl	a,#0x80
   215D 94 B0              7844 	subb	a,#0xb0
                           7845 ;	genIfxJump
                           7846 ;	Peephole 112.b	changed ljmp to sjmp
                           7847 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           7848 ;	genCmpGt
                           7849 ;	genCmp
   215F 40 0B              7850 	jc	00116$
                           7851 ;	Peephole 300	removed redundant label 00297$
                           7852 ;	Peephole 256.a	removed redundant clr c
                           7853 ;	Peephole 159	avoided xrl during execution
   2161 74 B7              7854 	mov	a,#(0x37 ^ 0x80)
   2163 8C F0              7855 	mov	b,r4
   2165 63 F0 80           7856 	xrl	b,#0x80
   2168 95 F0              7857 	subb	a,b
                           7858 ;	genIfxJump
                           7859 ;	Peephole 108.a	removed ljmp by inverse jump logic
   216A 50 11              7860 	jnc	00123$
                           7861 ;	Peephole 300	removed redundant label 00298$
   216C                    7862 00116$:
                           7863 ;	main.c:1077: printf_tiny("\n\rAddress out of range. Enter address in the range of 000h-7FFh.\n\r");
                           7864 ;	genIpush
   216C 74rCA              7865 	mov	a,#__str_93
   216E C0 E0              7866 	push	acc
   2170 74s09              7867 	mov	a,#(__str_93 >> 8)
   2172 C0 E0              7868 	push	acc
                           7869 ;	genCall
   2174 12s00r00           7870 	lcall	_printf_tiny
   2177 15 81              7871 	dec	sp
   2179 15 81              7872 	dec	sp
                           7873 ;	main.c:1078: break;
                           7874 ;	Peephole 112.b	changed ljmp to sjmp
   217B 80 10              7875 	sjmp	00126$
   217D                    7876 00123$:
                           7877 ;	main.c:1060: for(i1=0;i1<3;i1++)
                           7878 ;	genPlus
                           7879 ;     genPlusIncr
   217D 0A                 7880 	inc	r2
   217E BA 00 01           7881 	cjne	r2,#0x00,00299$
   2181 0B                 7882 	inc	r3
   2182                    7883 00299$:
                           7884 ;	genAssign
   2182 90s00r2F           7885 	mov	dptr,#_fetch_addr_i1_1_1
   2185 EA                 7886 	mov	a,r2
   2186 F0                 7887 	movx	@dptr,a
   2187 A3                 7888 	inc	dptr
   2188 EB                 7889 	mov	a,r3
   2189 F0                 7890 	movx	@dptr,a
   218A 02s20rAA           7891 	ljmp	00121$
   218D                    7892 00126$:
                           7893 ;	main.c:1082: }while(i1<3);
                           7894 ;	genAssign
   218D 90s00r2F           7895 	mov	dptr,#_fetch_addr_i1_1_1
   2190 E0                 7896 	movx	a,@dptr
   2191 FA                 7897 	mov	r2,a
   2192 A3                 7898 	inc	dptr
   2193 E0                 7899 	movx	a,@dptr
   2194 FB                 7900 	mov	r3,a
                           7901 ;	genCmpLt
                           7902 ;	genCmp
   2195 C3                 7903 	clr	c
   2196 EA                 7904 	mov	a,r2
   2197 94 03              7905 	subb	a,#0x03
   2199 EB                 7906 	mov	a,r3
   219A 64 80              7907 	xrl	a,#0x80
   219C 94 80              7908 	subb	a,#0x80
                           7909 ;	genIfxJump
   219E 50 03              7910 	jnc	00300$
   21A0 02s20r6A           7911 	ljmp	00125$
   21A3                    7912 00300$:
                           7913 ;	main.c:1084: finalval=0;
                           7914 ;	genAssign
   21A3 90s00r31           7915 	mov	dptr,#_fetch_addr_finalval_1_1
                           7916 ;	Peephole 181	changed mov to clr
   21A6 E4                 7917 	clr	a
   21A7 F0                 7918 	movx	@dptr,a
                           7919 ;	main.c:1087: for(i=1;i<3;i++)
                           7920 ;	genAssign
   21A8 7A 01              7921 	mov	r2,#0x01
   21AA 7B 00              7922 	mov	r3,#0x00
   21AC                    7923 00218$:
                           7924 ;	genCmpLt
                           7925 ;	genCmp
   21AC C3                 7926 	clr	c
   21AD EA                 7927 	mov	a,r2
   21AE 94 03              7928 	subb	a,#0x03
   21B0 EB                 7929 	mov	a,r3
   21B1 64 80              7930 	xrl	a,#0x80
   21B3 94 80              7931 	subb	a,#0x80
                           7932 ;	genIfxJump
   21B5 40 03              7933 	jc	00301$
   21B7 02s24rCF           7934 	ljmp	00221$
   21BA                    7935 00301$:
                           7936 ;	main.c:1090: if((bufsiz[i] >= '0') && (bufsiz[i] <= '9'))
                           7937 ;	genPlus
                           7938 ;	Peephole 236.g	used r2 instead of ar2
   21BA EA                 7939 	mov	a,r2
   21BB 24r00              7940 	add	a,#_bufsiz
   21BD FC                 7941 	mov	r4,a
                           7942 ;	Peephole 236.g	used r3 instead of ar3
   21BE EB                 7943 	mov	a,r3
   21BF 34s00              7944 	addc	a,#(_bufsiz >> 8)
   21C1 FD                 7945 	mov	r5,a
                           7946 ;	genPointerGet
                           7947 ;	genFarPointerGet
   21C2 8C 82              7948 	mov	dpl,r4
   21C4 8D 83              7949 	mov	dph,r5
   21C6 E0                 7950 	movx	a,@dptr
                           7951 ;	genCmpLt
                           7952 ;	genCmp
   21C7 FE                 7953 	mov	r6,a
   21C8 C3                 7954 	clr	c
                           7955 ;	Peephole 106	removed redundant mov
   21C9 64 80              7956 	xrl	a,#0x80
   21CB 94 B0              7957 	subb	a,#0xb0
                           7958 ;	genIfxJump
                           7959 ;	Peephole 112.b	changed ljmp to sjmp
                           7960 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           7961 ;	genCmpGt
                           7962 ;	genCmp
   21CD 40 51              7963 	jc	00215$
                           7964 ;	Peephole 300	removed redundant label 00302$
                           7965 ;	Peephole 256.a	removed redundant clr c
                           7966 ;	Peephole 159	avoided xrl during execution
   21CF 74 B9              7967 	mov	a,#(0x39 ^ 0x80)
   21D1 8E F0              7968 	mov	b,r6
   21D3 63 F0 80           7969 	xrl	b,#0x80
   21D6 95 F0              7970 	subb	a,b
                           7971 ;	genIfxJump
                           7972 ;	Peephole 112.b	changed ljmp to sjmp
                           7973 ;	Peephole 160.a	removed sjmp by inverse jump logic
   21D8 40 46              7974 	jc	00215$
                           7975 ;	Peephole 300	removed redundant label 00303$
                           7976 ;	main.c:1092: bufsiz[i] -= 48;
                           7977 ;	genMinus
   21DA EE                 7978 	mov	a,r6
   21DB 24 D0              7979 	add	a,#0xd0
                           7980 ;	genPointerSet
                           7981 ;     genFarPointerSet
   21DD FE                 7982 	mov	r6,a
   21DE 8C 82              7983 	mov	dpl,r4
   21E0 8D 83              7984 	mov	dph,r5
                           7985 ;	Peephole 136	removed redundant move
   21E2 F0                 7986 	movx	@dptr,a
                           7987 ;	main.c:1093: if(i==1)
                           7988 ;	genCmpEq
                           7989 ;	gencjneshort
                           7990 ;	Peephole 112.b	changed ljmp to sjmp
                           7991 ;	Peephole 198.a	optimized misc jump sequence
   21E3 BA 01 1B           7992 	cjne	r2,#0x01,00131$
   21E6 BB 00 18           7993 	cjne	r3,#0x00,00131$
                           7994 ;	Peephole 200.b	removed redundant sjmp
                           7995 ;	Peephole 300	removed redundant label 00304$
                           7996 ;	Peephole 300	removed redundant label 00305$
                           7997 ;	main.c:1095: finalval += (bufsiz[i]*16);
                           7998 ;	genPointerGet
                           7999 ;	genFarPointerGet
   21E9 8C 82              8000 	mov	dpl,r4
   21EB 8D 83              8001 	mov	dph,r5
   21ED E0                 8002 	movx	a,@dptr
                           8003 ;	genLeftShift
                           8004 ;	genLeftShiftLiteral
                           8005 ;	genlshOne
   21EE FE                 8006 	mov	r6,a
                           8007 ;	Peephole 105	removed redundant mov
   21EF C4                 8008 	swap	a
   21F0 54 F0              8009 	anl	a,#0xf0
   21F2 FE                 8010 	mov	r6,a
                           8011 ;	genAssign
   21F3 90s00r31           8012 	mov	dptr,#_fetch_addr_finalval_1_1
   21F6 E0                 8013 	movx	a,@dptr
   21F7 FF                 8014 	mov	r7,a
                           8015 ;	genPlus
   21F8 90s00r31           8016 	mov	dptr,#_fetch_addr_finalval_1_1
                           8017 ;	Peephole 236.g	used r6 instead of ar6
   21FB EE                 8018 	mov	a,r6
                           8019 ;	Peephole 236.a	used r7 instead of ar7
   21FC 2F                 8020 	add	a,r7
   21FD F0                 8021 	movx	@dptr,a
   21FE 02s24rC7           8022 	ljmp	00220$
   2201                    8023 00131$:
                           8024 ;	main.c:1097: else if(i==2)
                           8025 ;	genCmpEq
                           8026 ;	gencjneshort
   2201 BA 02 05           8027 	cjne	r2,#0x02,00306$
   2204 BB 00 02           8028 	cjne	r3,#0x00,00306$
   2207 80 03              8029 	sjmp	00307$
   2209                    8030 00306$:
   2209 02s24rC7           8031 	ljmp	00220$
   220C                    8032 00307$:
                           8033 ;	main.c:1099: finalval += bufsiz[i];
                           8034 ;	genPointerGet
                           8035 ;	genFarPointerGet
   220C 8C 82              8036 	mov	dpl,r4
   220E 8D 83              8037 	mov	dph,r5
   2210 E0                 8038 	movx	a,@dptr
   2211 FC                 8039 	mov	r4,a
                           8040 ;	genAssign
   2212 90s00r31           8041 	mov	dptr,#_fetch_addr_finalval_1_1
   2215 E0                 8042 	movx	a,@dptr
   2216 FD                 8043 	mov	r5,a
                           8044 ;	genPlus
   2217 90s00r31           8045 	mov	dptr,#_fetch_addr_finalval_1_1
                           8046 ;	Peephole 236.g	used r4 instead of ar4
   221A EC                 8047 	mov	a,r4
                           8048 ;	Peephole 236.a	used r5 instead of ar5
   221B 2D                 8049 	add	a,r5
   221C F0                 8050 	movx	@dptr,a
   221D 02s24rC7           8051 	ljmp	00220$
   2220                    8052 00215$:
                           8053 ;	main.c:1105: else if((bufsiz[i] >= 'A') && (bufsiz[i] <= 'F'))
                           8054 ;	genPlus
                           8055 ;	Peephole 236.g	used r2 instead of ar2
   2220 EA                 8056 	mov	a,r2
   2221 24r00              8057 	add	a,#_bufsiz
   2223 F5 82              8058 	mov	dpl,a
                           8059 ;	Peephole 236.g	used r3 instead of ar3
   2225 EB                 8060 	mov	a,r3
   2226 34s00              8061 	addc	a,#(_bufsiz >> 8)
   2228 F5 83              8062 	mov	dph,a
                           8063 ;	genPointerGet
                           8064 ;	genFarPointerGet
   222A E0                 8065 	movx	a,@dptr
                           8066 ;	genCmpLt
                           8067 ;	genCmp
   222B FC                 8068 	mov	r4,a
   222C C3                 8069 	clr	c
                           8070 ;	Peephole 106	removed redundant mov
   222D 64 80              8071 	xrl	a,#0x80
   222F 94 C1              8072 	subb	a,#0xc1
                           8073 ;	genIfxJump
   2231 50 03              8074 	jnc	00308$
   2233 02s23r84           8075 	ljmp	00211$
   2236                    8076 00308$:
                           8077 ;	genCmpGt
                           8078 ;	genCmp
   2236 C3                 8079 	clr	c
                           8080 ;	Peephole 159	avoided xrl during execution
   2237 74 C6              8081 	mov	a,#(0x46 ^ 0x80)
   2239 8C F0              8082 	mov	b,r4
   223B 63 F0 80           8083 	xrl	b,#0x80
   223E 95 F0              8084 	subb	a,b
                           8085 ;	genIfxJump
   2240 50 03              8086 	jnc	00309$
   2242 02s23r84           8087 	ljmp	00211$
   2245                    8088 00309$:
                           8089 ;	main.c:1107: switch(bufsiz[i])
                           8090 ;	genCmpEq
                           8091 ;	gencjneshort
   2245 BC 41 02           8092 	cjne	r4,#0x41,00310$
                           8093 ;	Peephole 112.b	changed ljmp to sjmp
   2248 80 20              8094 	sjmp	00133$
   224A                    8095 00310$:
                           8096 ;	genCmpEq
                           8097 ;	gencjneshort
   224A BC 42 02           8098 	cjne	r4,#0x42,00311$
                           8099 ;	Peephole 112.b	changed ljmp to sjmp
   224D 80 4A              8100 	sjmp	00139$
   224F                    8101 00311$:
                           8102 ;	genCmpEq
                           8103 ;	gencjneshort
   224F BC 43 03           8104 	cjne	r4,#0x43,00312$
   2252 02s22rC8           8105 	ljmp	00145$
   2255                    8106 00312$:
                           8107 ;	genCmpEq
                           8108 ;	gencjneshort
   2255 BC 44 03           8109 	cjne	r4,#0x44,00313$
   2258 02s22rF7           8110 	ljmp	00151$
   225B                    8111 00313$:
                           8112 ;	genCmpEq
                           8113 ;	gencjneshort
   225B BC 45 03           8114 	cjne	r4,#0x45,00314$
   225E 02s23r26           8115 	ljmp	00157$
   2261                    8116 00314$:
                           8117 ;	genCmpEq
                           8118 ;	gencjneshort
   2261 BC 46 03           8119 	cjne	r4,#0x46,00315$
   2264 02s23r55           8120 	ljmp	00163$
   2267                    8121 00315$:
   2267 02s24rC7           8122 	ljmp	00220$
                           8123 ;	main.c:1109: case 'A':
   226A                    8124 00133$:
                           8125 ;	main.c:1110: if(i==1)
                           8126 ;	genCmpEq
                           8127 ;	gencjneshort
                           8128 ;	Peephole 112.b	changed ljmp to sjmp
                           8129 ;	Peephole 198.a	optimized misc jump sequence
   226A BA 01 12           8130 	cjne	r2,#0x01,00137$
   226D BB 00 0F           8131 	cjne	r3,#0x00,00137$
                           8132 ;	Peephole 200.b	removed redundant sjmp
                           8133 ;	Peephole 300	removed redundant label 00316$
                           8134 ;	Peephole 300	removed redundant label 00317$
                           8135 ;	main.c:1111: finalval += (10*16);
                           8136 ;	genAssign
   2270 90s00r31           8137 	mov	dptr,#_fetch_addr_finalval_1_1
   2273 E0                 8138 	movx	a,@dptr
   2274 FD                 8139 	mov	r5,a
                           8140 ;	genPlus
   2275 90s00r31           8141 	mov	dptr,#_fetch_addr_finalval_1_1
                           8142 ;     genPlusIncr
   2278 74 A0              8143 	mov	a,#0xA0
                           8144 ;	Peephole 236.a	used r5 instead of ar5
   227A 2D                 8145 	add	a,r5
   227B F0                 8146 	movx	@dptr,a
   227C 02s24rC7           8147 	ljmp	00220$
   227F                    8148 00137$:
                           8149 ;	main.c:1112: else if(i==2)
                           8150 ;	genCmpEq
                           8151 ;	gencjneshort
   227F BA 02 05           8152 	cjne	r2,#0x02,00318$
   2282 BB 00 02           8153 	cjne	r3,#0x00,00318$
   2285 80 03              8154 	sjmp	00319$
   2287                    8155 00318$:
   2287 02s24rC7           8156 	ljmp	00220$
   228A                    8157 00319$:
                           8158 ;	main.c:1113: finalval += 10;
                           8159 ;	genAssign
   228A 90s00r31           8160 	mov	dptr,#_fetch_addr_finalval_1_1
   228D E0                 8161 	movx	a,@dptr
   228E FD                 8162 	mov	r5,a
                           8163 ;	genPlus
   228F 90s00r31           8164 	mov	dptr,#_fetch_addr_finalval_1_1
                           8165 ;     genPlusIncr
   2292 74 0A              8166 	mov	a,#0x0A
                           8167 ;	Peephole 236.a	used r5 instead of ar5
   2294 2D                 8168 	add	a,r5
   2295 F0                 8169 	movx	@dptr,a
                           8170 ;	main.c:1114: break;
   2296 02s24rC7           8171 	ljmp	00220$
                           8172 ;	main.c:1115: case 'B':
   2299                    8173 00139$:
                           8174 ;	main.c:1116: if(i==1)
                           8175 ;	genCmpEq
                           8176 ;	gencjneshort
                           8177 ;	Peephole 112.b	changed ljmp to sjmp
                           8178 ;	Peephole 198.a	optimized misc jump sequence
   2299 BA 01 12           8179 	cjne	r2,#0x01,00143$
   229C BB 00 0F           8180 	cjne	r3,#0x00,00143$
                           8181 ;	Peephole 200.b	removed redundant sjmp
                           8182 ;	Peephole 300	removed redundant label 00320$
                           8183 ;	Peephole 300	removed redundant label 00321$
                           8184 ;	main.c:1117: finalval += (11*16);
                           8185 ;	genAssign
   229F 90s00r31           8186 	mov	dptr,#_fetch_addr_finalval_1_1
   22A2 E0                 8187 	movx	a,@dptr
   22A3 FD                 8188 	mov	r5,a
                           8189 ;	genPlus
   22A4 90s00r31           8190 	mov	dptr,#_fetch_addr_finalval_1_1
                           8191 ;     genPlusIncr
   22A7 74 B0              8192 	mov	a,#0xB0
                           8193 ;	Peephole 236.a	used r5 instead of ar5
   22A9 2D                 8194 	add	a,r5
   22AA F0                 8195 	movx	@dptr,a
   22AB 02s24rC7           8196 	ljmp	00220$
   22AE                    8197 00143$:
                           8198 ;	main.c:1118: else if(i==2)
                           8199 ;	genCmpEq
                           8200 ;	gencjneshort
   22AE BA 02 05           8201 	cjne	r2,#0x02,00322$
   22B1 BB 00 02           8202 	cjne	r3,#0x00,00322$
   22B4 80 03              8203 	sjmp	00323$
   22B6                    8204 00322$:
   22B6 02s24rC7           8205 	ljmp	00220$
   22B9                    8206 00323$:
                           8207 ;	main.c:1119: finalval += 11;
                           8208 ;	genAssign
   22B9 90s00r31           8209 	mov	dptr,#_fetch_addr_finalval_1_1
   22BC E0                 8210 	movx	a,@dptr
   22BD FD                 8211 	mov	r5,a
                           8212 ;	genPlus
   22BE 90s00r31           8213 	mov	dptr,#_fetch_addr_finalval_1_1
                           8214 ;     genPlusIncr
   22C1 74 0B              8215 	mov	a,#0x0B
                           8216 ;	Peephole 236.a	used r5 instead of ar5
   22C3 2D                 8217 	add	a,r5
   22C4 F0                 8218 	movx	@dptr,a
                           8219 ;	main.c:1120: break;
   22C5 02s24rC7           8220 	ljmp	00220$
                           8221 ;	main.c:1121: case 'C':
   22C8                    8222 00145$:
                           8223 ;	main.c:1122: if(i==1)
                           8224 ;	genCmpEq
                           8225 ;	gencjneshort
                           8226 ;	Peephole 112.b	changed ljmp to sjmp
                           8227 ;	Peephole 198.a	optimized misc jump sequence
   22C8 BA 01 12           8228 	cjne	r2,#0x01,00149$
   22CB BB 00 0F           8229 	cjne	r3,#0x00,00149$
                           8230 ;	Peephole 200.b	removed redundant sjmp
                           8231 ;	Peephole 300	removed redundant label 00324$
                           8232 ;	Peephole 300	removed redundant label 00325$
                           8233 ;	main.c:1123: finalval += (12*16);
                           8234 ;	genAssign
   22CE 90s00r31           8235 	mov	dptr,#_fetch_addr_finalval_1_1
   22D1 E0                 8236 	movx	a,@dptr
   22D2 FD                 8237 	mov	r5,a
                           8238 ;	genPlus
   22D3 90s00r31           8239 	mov	dptr,#_fetch_addr_finalval_1_1
                           8240 ;     genPlusIncr
   22D6 74 C0              8241 	mov	a,#0xC0
                           8242 ;	Peephole 236.a	used r5 instead of ar5
   22D8 2D                 8243 	add	a,r5
   22D9 F0                 8244 	movx	@dptr,a
   22DA 02s24rC7           8245 	ljmp	00220$
   22DD                    8246 00149$:
                           8247 ;	main.c:1124: else if(i==2)
                           8248 ;	genCmpEq
                           8249 ;	gencjneshort
   22DD BA 02 05           8250 	cjne	r2,#0x02,00326$
   22E0 BB 00 02           8251 	cjne	r3,#0x00,00326$
   22E3 80 03              8252 	sjmp	00327$
   22E5                    8253 00326$:
   22E5 02s24rC7           8254 	ljmp	00220$
   22E8                    8255 00327$:
                           8256 ;	main.c:1125: finalval += 12;
                           8257 ;	genAssign
   22E8 90s00r31           8258 	mov	dptr,#_fetch_addr_finalval_1_1
   22EB E0                 8259 	movx	a,@dptr
   22EC FD                 8260 	mov	r5,a
                           8261 ;	genPlus
   22ED 90s00r31           8262 	mov	dptr,#_fetch_addr_finalval_1_1
                           8263 ;     genPlusIncr
   22F0 74 0C              8264 	mov	a,#0x0C
                           8265 ;	Peephole 236.a	used r5 instead of ar5
   22F2 2D                 8266 	add	a,r5
   22F3 F0                 8267 	movx	@dptr,a
                           8268 ;	main.c:1126: break;
   22F4 02s24rC7           8269 	ljmp	00220$
                           8270 ;	main.c:1127: case 'D':
   22F7                    8271 00151$:
                           8272 ;	main.c:1128: if(i==1)
                           8273 ;	genCmpEq
                           8274 ;	gencjneshort
                           8275 ;	Peephole 112.b	changed ljmp to sjmp
                           8276 ;	Peephole 198.a	optimized misc jump sequence
   22F7 BA 01 12           8277 	cjne	r2,#0x01,00155$
   22FA BB 00 0F           8278 	cjne	r3,#0x00,00155$
                           8279 ;	Peephole 200.b	removed redundant sjmp
                           8280 ;	Peephole 300	removed redundant label 00328$
                           8281 ;	Peephole 300	removed redundant label 00329$
                           8282 ;	main.c:1129: finalval += (13*16);
                           8283 ;	genAssign
   22FD 90s00r31           8284 	mov	dptr,#_fetch_addr_finalval_1_1
   2300 E0                 8285 	movx	a,@dptr
   2301 FD                 8286 	mov	r5,a
                           8287 ;	genPlus
   2302 90s00r31           8288 	mov	dptr,#_fetch_addr_finalval_1_1
                           8289 ;     genPlusIncr
   2305 74 D0              8290 	mov	a,#0xD0
                           8291 ;	Peephole 236.a	used r5 instead of ar5
   2307 2D                 8292 	add	a,r5
   2308 F0                 8293 	movx	@dptr,a
   2309 02s24rC7           8294 	ljmp	00220$
   230C                    8295 00155$:
                           8296 ;	main.c:1130: else if(i==2)
                           8297 ;	genCmpEq
                           8298 ;	gencjneshort
   230C BA 02 05           8299 	cjne	r2,#0x02,00330$
   230F BB 00 02           8300 	cjne	r3,#0x00,00330$
   2312 80 03              8301 	sjmp	00331$
   2314                    8302 00330$:
   2314 02s24rC7           8303 	ljmp	00220$
   2317                    8304 00331$:
                           8305 ;	main.c:1131: finalval += 13;
                           8306 ;	genAssign
   2317 90s00r31           8307 	mov	dptr,#_fetch_addr_finalval_1_1
   231A E0                 8308 	movx	a,@dptr
   231B FD                 8309 	mov	r5,a
                           8310 ;	genPlus
   231C 90s00r31           8311 	mov	dptr,#_fetch_addr_finalval_1_1
                           8312 ;     genPlusIncr
   231F 74 0D              8313 	mov	a,#0x0D
                           8314 ;	Peephole 236.a	used r5 instead of ar5
   2321 2D                 8315 	add	a,r5
   2322 F0                 8316 	movx	@dptr,a
                           8317 ;	main.c:1132: break;
   2323 02s24rC7           8318 	ljmp	00220$
                           8319 ;	main.c:1133: case 'E':
   2326                    8320 00157$:
                           8321 ;	main.c:1134: if(i==1)
                           8322 ;	genCmpEq
                           8323 ;	gencjneshort
                           8324 ;	Peephole 112.b	changed ljmp to sjmp
                           8325 ;	Peephole 198.a	optimized misc jump sequence
   2326 BA 01 12           8326 	cjne	r2,#0x01,00161$
   2329 BB 00 0F           8327 	cjne	r3,#0x00,00161$
                           8328 ;	Peephole 200.b	removed redundant sjmp
                           8329 ;	Peephole 300	removed redundant label 00332$
                           8330 ;	Peephole 300	removed redundant label 00333$
                           8331 ;	main.c:1135: finalval += (14*16);
                           8332 ;	genAssign
   232C 90s00r31           8333 	mov	dptr,#_fetch_addr_finalval_1_1
   232F E0                 8334 	movx	a,@dptr
   2330 FD                 8335 	mov	r5,a
                           8336 ;	genPlus
   2331 90s00r31           8337 	mov	dptr,#_fetch_addr_finalval_1_1
                           8338 ;     genPlusIncr
   2334 74 E0              8339 	mov	a,#0xE0
                           8340 ;	Peephole 236.a	used r5 instead of ar5
   2336 2D                 8341 	add	a,r5
   2337 F0                 8342 	movx	@dptr,a
   2338 02s24rC7           8343 	ljmp	00220$
   233B                    8344 00161$:
                           8345 ;	main.c:1136: else if(i==2)
                           8346 ;	genCmpEq
                           8347 ;	gencjneshort
   233B BA 02 05           8348 	cjne	r2,#0x02,00334$
   233E BB 00 02           8349 	cjne	r3,#0x00,00334$
   2341 80 03              8350 	sjmp	00335$
   2343                    8351 00334$:
   2343 02s24rC7           8352 	ljmp	00220$
   2346                    8353 00335$:
                           8354 ;	main.c:1137: finalval += 14;
                           8355 ;	genAssign
   2346 90s00r31           8356 	mov	dptr,#_fetch_addr_finalval_1_1
   2349 E0                 8357 	movx	a,@dptr
   234A FD                 8358 	mov	r5,a
                           8359 ;	genPlus
   234B 90s00r31           8360 	mov	dptr,#_fetch_addr_finalval_1_1
                           8361 ;     genPlusIncr
   234E 74 0E              8362 	mov	a,#0x0E
                           8363 ;	Peephole 236.a	used r5 instead of ar5
   2350 2D                 8364 	add	a,r5
   2351 F0                 8365 	movx	@dptr,a
                           8366 ;	main.c:1138: break;
   2352 02s24rC7           8367 	ljmp	00220$
                           8368 ;	main.c:1139: case 'F':
   2355                    8369 00163$:
                           8370 ;	main.c:1140: if(i==1)
                           8371 ;	genCmpEq
                           8372 ;	gencjneshort
                           8373 ;	Peephole 112.b	changed ljmp to sjmp
                           8374 ;	Peephole 198.a	optimized misc jump sequence
   2355 BA 01 12           8375 	cjne	r2,#0x01,00167$
   2358 BB 00 0F           8376 	cjne	r3,#0x00,00167$
                           8377 ;	Peephole 200.b	removed redundant sjmp
                           8378 ;	Peephole 300	removed redundant label 00336$
                           8379 ;	Peephole 300	removed redundant label 00337$
                           8380 ;	main.c:1141: finalval += (15*16);
                           8381 ;	genAssign
   235B 90s00r31           8382 	mov	dptr,#_fetch_addr_finalval_1_1
   235E E0                 8383 	movx	a,@dptr
   235F FD                 8384 	mov	r5,a
                           8385 ;	genPlus
   2360 90s00r31           8386 	mov	dptr,#_fetch_addr_finalval_1_1
                           8387 ;     genPlusIncr
   2363 74 F0              8388 	mov	a,#0xF0
                           8389 ;	Peephole 236.a	used r5 instead of ar5
   2365 2D                 8390 	add	a,r5
   2366 F0                 8391 	movx	@dptr,a
   2367 02s24rC7           8392 	ljmp	00220$
   236A                    8393 00167$:
                           8394 ;	main.c:1142: else if(i==2)
                           8395 ;	genCmpEq
                           8396 ;	gencjneshort
   236A BA 02 05           8397 	cjne	r2,#0x02,00338$
   236D BB 00 02           8398 	cjne	r3,#0x00,00338$
   2370 80 03              8399 	sjmp	00339$
   2372                    8400 00338$:
   2372 02s24rC7           8401 	ljmp	00220$
   2375                    8402 00339$:
                           8403 ;	main.c:1143: finalval += 15;
                           8404 ;	genAssign
   2375 90s00r31           8405 	mov	dptr,#_fetch_addr_finalval_1_1
   2378 E0                 8406 	movx	a,@dptr
   2379 FD                 8407 	mov	r5,a
                           8408 ;	genPlus
   237A 90s00r31           8409 	mov	dptr,#_fetch_addr_finalval_1_1
                           8410 ;     genPlusIncr
   237D 74 0F              8411 	mov	a,#0x0F
                           8412 ;	Peephole 236.a	used r5 instead of ar5
   237F 2D                 8413 	add	a,r5
   2380 F0                 8414 	movx	@dptr,a
                           8415 ;	main.c:1145: }
   2381 02s24rC7           8416 	ljmp	00220$
   2384                    8417 00211$:
                           8418 ;	main.c:1148: else if((bufsiz[i] >= 'a') && (bufsiz[i] <= 'f'))
                           8419 ;	genCmpLt
                           8420 ;	genCmp
   2384 C3                 8421 	clr	c
   2385 EC                 8422 	mov	a,r4
   2386 64 80              8423 	xrl	a,#0x80
   2388 94 E1              8424 	subb	a,#0xe1
                           8425 ;	genIfxJump
   238A 50 03              8426 	jnc	00340$
   238C 02s24rC7           8427 	ljmp	00220$
   238F                    8428 00340$:
                           8429 ;	genCmpGt
                           8430 ;	genCmp
   238F C3                 8431 	clr	c
                           8432 ;	Peephole 159	avoided xrl during execution
   2390 74 E6              8433 	mov	a,#(0x66 ^ 0x80)
   2392 8C F0              8434 	mov	b,r4
   2394 63 F0 80           8435 	xrl	b,#0x80
   2397 95 F0              8436 	subb	a,b
                           8437 ;	genIfxJump
   2399 50 03              8438 	jnc	00341$
   239B 02s24rC7           8439 	ljmp	00220$
   239E                    8440 00341$:
                           8441 ;	main.c:1150: switch(bufsiz[i])
                           8442 ;	genCmpEq
                           8443 ;	gencjneshort
   239E BC 61 02           8444 	cjne	r4,#0x61,00342$
                           8445 ;	Peephole 112.b	changed ljmp to sjmp
   23A1 80 20              8446 	sjmp	00170$
   23A3                    8447 00342$:
                           8448 ;	genCmpEq
                           8449 ;	gencjneshort
   23A3 BC 62 02           8450 	cjne	r4,#0x62,00343$
                           8451 ;	Peephole 112.b	changed ljmp to sjmp
   23A6 80 4A              8452 	sjmp	00176$
   23A8                    8453 00343$:
                           8454 ;	genCmpEq
                           8455 ;	gencjneshort
   23A8 BC 63 03           8456 	cjne	r4,#0x63,00344$
   23AB 02s24r21           8457 	ljmp	00182$
   23AE                    8458 00344$:
                           8459 ;	genCmpEq
                           8460 ;	gencjneshort
   23AE BC 64 03           8461 	cjne	r4,#0x64,00345$
   23B1 02s24r50           8462 	ljmp	00188$
   23B4                    8463 00345$:
                           8464 ;	genCmpEq
                           8465 ;	gencjneshort
   23B4 BC 65 03           8466 	cjne	r4,#0x65,00346$
   23B7 02s24r79           8467 	ljmp	00194$
   23BA                    8468 00346$:
                           8469 ;	genCmpEq
                           8470 ;	gencjneshort
   23BA BC 66 03           8471 	cjne	r4,#0x66,00347$
   23BD 02s24rA1           8472 	ljmp	00200$
   23C0                    8473 00347$:
   23C0 02s24rC7           8474 	ljmp	00220$
                           8475 ;	main.c:1152: case 'a':
   23C3                    8476 00170$:
                           8477 ;	main.c:1153: if(i==1)
                           8478 ;	genCmpEq
                           8479 ;	gencjneshort
                           8480 ;	Peephole 112.b	changed ljmp to sjmp
                           8481 ;	Peephole 198.a	optimized misc jump sequence
   23C3 BA 01 12           8482 	cjne	r2,#0x01,00174$
   23C6 BB 00 0F           8483 	cjne	r3,#0x00,00174$
                           8484 ;	Peephole 200.b	removed redundant sjmp
                           8485 ;	Peephole 300	removed redundant label 00348$
                           8486 ;	Peephole 300	removed redundant label 00349$
                           8487 ;	main.c:1154: finalval += (10*16);
                           8488 ;	genAssign
   23C9 90s00r31           8489 	mov	dptr,#_fetch_addr_finalval_1_1
   23CC E0                 8490 	movx	a,@dptr
   23CD FC                 8491 	mov	r4,a
                           8492 ;	genPlus
   23CE 90s00r31           8493 	mov	dptr,#_fetch_addr_finalval_1_1
                           8494 ;     genPlusIncr
   23D1 74 A0              8495 	mov	a,#0xA0
                           8496 ;	Peephole 236.a	used r4 instead of ar4
   23D3 2C                 8497 	add	a,r4
   23D4 F0                 8498 	movx	@dptr,a
   23D5 02s24rC7           8499 	ljmp	00220$
   23D8                    8500 00174$:
                           8501 ;	main.c:1155: else if(i==2)
                           8502 ;	genCmpEq
                           8503 ;	gencjneshort
   23D8 BA 02 05           8504 	cjne	r2,#0x02,00350$
   23DB BB 00 02           8505 	cjne	r3,#0x00,00350$
   23DE 80 03              8506 	sjmp	00351$
   23E0                    8507 00350$:
   23E0 02s24rC7           8508 	ljmp	00220$
   23E3                    8509 00351$:
                           8510 ;	main.c:1156: finalval += 10;
                           8511 ;	genAssign
   23E3 90s00r31           8512 	mov	dptr,#_fetch_addr_finalval_1_1
   23E6 E0                 8513 	movx	a,@dptr
   23E7 FC                 8514 	mov	r4,a
                           8515 ;	genPlus
   23E8 90s00r31           8516 	mov	dptr,#_fetch_addr_finalval_1_1
                           8517 ;     genPlusIncr
   23EB 74 0A              8518 	mov	a,#0x0A
                           8519 ;	Peephole 236.a	used r4 instead of ar4
   23ED 2C                 8520 	add	a,r4
   23EE F0                 8521 	movx	@dptr,a
                           8522 ;	main.c:1157: break;
   23EF 02s24rC7           8523 	ljmp	00220$
                           8524 ;	main.c:1158: case 'b':
   23F2                    8525 00176$:
                           8526 ;	main.c:1159: if(i==1)
                           8527 ;	genCmpEq
                           8528 ;	gencjneshort
                           8529 ;	Peephole 112.b	changed ljmp to sjmp
                           8530 ;	Peephole 198.a	optimized misc jump sequence
   23F2 BA 01 12           8531 	cjne	r2,#0x01,00180$
   23F5 BB 00 0F           8532 	cjne	r3,#0x00,00180$
                           8533 ;	Peephole 200.b	removed redundant sjmp
                           8534 ;	Peephole 300	removed redundant label 00352$
                           8535 ;	Peephole 300	removed redundant label 00353$
                           8536 ;	main.c:1160: finalval += (11*16);
                           8537 ;	genAssign
   23F8 90s00r31           8538 	mov	dptr,#_fetch_addr_finalval_1_1
   23FB E0                 8539 	movx	a,@dptr
   23FC FC                 8540 	mov	r4,a
                           8541 ;	genPlus
   23FD 90s00r31           8542 	mov	dptr,#_fetch_addr_finalval_1_1
                           8543 ;     genPlusIncr
   2400 74 B0              8544 	mov	a,#0xB0
                           8545 ;	Peephole 236.a	used r4 instead of ar4
   2402 2C                 8546 	add	a,r4
   2403 F0                 8547 	movx	@dptr,a
   2404 02s24rC7           8548 	ljmp	00220$
   2407                    8549 00180$:
                           8550 ;	main.c:1161: else if(i==2)
                           8551 ;	genCmpEq
                           8552 ;	gencjneshort
   2407 BA 02 05           8553 	cjne	r2,#0x02,00354$
   240A BB 00 02           8554 	cjne	r3,#0x00,00354$
   240D 80 03              8555 	sjmp	00355$
   240F                    8556 00354$:
   240F 02s24rC7           8557 	ljmp	00220$
   2412                    8558 00355$:
                           8559 ;	main.c:1162: finalval += 11;
                           8560 ;	genAssign
   2412 90s00r31           8561 	mov	dptr,#_fetch_addr_finalval_1_1
   2415 E0                 8562 	movx	a,@dptr
   2416 FC                 8563 	mov	r4,a
                           8564 ;	genPlus
   2417 90s00r31           8565 	mov	dptr,#_fetch_addr_finalval_1_1
                           8566 ;     genPlusIncr
   241A 74 0B              8567 	mov	a,#0x0B
                           8568 ;	Peephole 236.a	used r4 instead of ar4
   241C 2C                 8569 	add	a,r4
   241D F0                 8570 	movx	@dptr,a
                           8571 ;	main.c:1163: break;
   241E 02s24rC7           8572 	ljmp	00220$
                           8573 ;	main.c:1164: case 'c':
   2421                    8574 00182$:
                           8575 ;	main.c:1165: if(i==1)
                           8576 ;	genCmpEq
                           8577 ;	gencjneshort
                           8578 ;	Peephole 112.b	changed ljmp to sjmp
                           8579 ;	Peephole 198.a	optimized misc jump sequence
   2421 BA 01 12           8580 	cjne	r2,#0x01,00186$
   2424 BB 00 0F           8581 	cjne	r3,#0x00,00186$
                           8582 ;	Peephole 200.b	removed redundant sjmp
                           8583 ;	Peephole 300	removed redundant label 00356$
                           8584 ;	Peephole 300	removed redundant label 00357$
                           8585 ;	main.c:1166: finalval += (12*16);
                           8586 ;	genAssign
   2427 90s00r31           8587 	mov	dptr,#_fetch_addr_finalval_1_1
   242A E0                 8588 	movx	a,@dptr
   242B FC                 8589 	mov	r4,a
                           8590 ;	genPlus
   242C 90s00r31           8591 	mov	dptr,#_fetch_addr_finalval_1_1
                           8592 ;     genPlusIncr
   242F 74 C0              8593 	mov	a,#0xC0
                           8594 ;	Peephole 236.a	used r4 instead of ar4
   2431 2C                 8595 	add	a,r4
   2432 F0                 8596 	movx	@dptr,a
   2433 02s24rC7           8597 	ljmp	00220$
   2436                    8598 00186$:
                           8599 ;	main.c:1167: else if(i==2)
                           8600 ;	genCmpEq
                           8601 ;	gencjneshort
   2436 BA 02 05           8602 	cjne	r2,#0x02,00358$
   2439 BB 00 02           8603 	cjne	r3,#0x00,00358$
   243C 80 03              8604 	sjmp	00359$
   243E                    8605 00358$:
   243E 02s24rC7           8606 	ljmp	00220$
   2441                    8607 00359$:
                           8608 ;	main.c:1168: finalval += 12;
                           8609 ;	genAssign
   2441 90s00r31           8610 	mov	dptr,#_fetch_addr_finalval_1_1
   2444 E0                 8611 	movx	a,@dptr
   2445 FC                 8612 	mov	r4,a
                           8613 ;	genPlus
   2446 90s00r31           8614 	mov	dptr,#_fetch_addr_finalval_1_1
                           8615 ;     genPlusIncr
   2449 74 0C              8616 	mov	a,#0x0C
                           8617 ;	Peephole 236.a	used r4 instead of ar4
   244B 2C                 8618 	add	a,r4
   244C F0                 8619 	movx	@dptr,a
                           8620 ;	main.c:1169: break;
   244D 02s24rC7           8621 	ljmp	00220$
                           8622 ;	main.c:1170: case 'd':
   2450                    8623 00188$:
                           8624 ;	main.c:1171: if(i==1)
                           8625 ;	genCmpEq
                           8626 ;	gencjneshort
                           8627 ;	Peephole 112.b	changed ljmp to sjmp
                           8628 ;	Peephole 198.a	optimized misc jump sequence
   2450 BA 01 12           8629 	cjne	r2,#0x01,00192$
   2453 BB 00 0F           8630 	cjne	r3,#0x00,00192$
                           8631 ;	Peephole 200.b	removed redundant sjmp
                           8632 ;	Peephole 300	removed redundant label 00360$
                           8633 ;	Peephole 300	removed redundant label 00361$
                           8634 ;	main.c:1172: finalval += (13*16);
                           8635 ;	genAssign
   2456 90s00r31           8636 	mov	dptr,#_fetch_addr_finalval_1_1
   2459 E0                 8637 	movx	a,@dptr
   245A FC                 8638 	mov	r4,a
                           8639 ;	genPlus
   245B 90s00r31           8640 	mov	dptr,#_fetch_addr_finalval_1_1
                           8641 ;     genPlusIncr
   245E 74 D0              8642 	mov	a,#0xD0
                           8643 ;	Peephole 236.a	used r4 instead of ar4
   2460 2C                 8644 	add	a,r4
   2461 F0                 8645 	movx	@dptr,a
   2462 02s24rC7           8646 	ljmp	00220$
   2465                    8647 00192$:
                           8648 ;	main.c:1173: else if(i==2)
                           8649 ;	genCmpEq
                           8650 ;	gencjneshort
                           8651 ;	Peephole 112.b	changed ljmp to sjmp
                           8652 ;	Peephole 198.a	optimized misc jump sequence
   2465 BA 02 5F           8653 	cjne	r2,#0x02,00220$
   2468 BB 00 5C           8654 	cjne	r3,#0x00,00220$
                           8655 ;	Peephole 200.b	removed redundant sjmp
                           8656 ;	Peephole 300	removed redundant label 00362$
                           8657 ;	Peephole 300	removed redundant label 00363$
                           8658 ;	main.c:1174: finalval += 13;
                           8659 ;	genAssign
   246B 90s00r31           8660 	mov	dptr,#_fetch_addr_finalval_1_1
   246E E0                 8661 	movx	a,@dptr
   246F FC                 8662 	mov	r4,a
                           8663 ;	genPlus
   2470 90s00r31           8664 	mov	dptr,#_fetch_addr_finalval_1_1
                           8665 ;     genPlusIncr
   2473 74 0D              8666 	mov	a,#0x0D
                           8667 ;	Peephole 236.a	used r4 instead of ar4
   2475 2C                 8668 	add	a,r4
   2476 F0                 8669 	movx	@dptr,a
                           8670 ;	main.c:1175: break;
                           8671 ;	main.c:1176: case 'e':
                           8672 ;	Peephole 112.b	changed ljmp to sjmp
   2477 80 4E              8673 	sjmp	00220$
   2479                    8674 00194$:
                           8675 ;	main.c:1177: if(i==1)
                           8676 ;	genCmpEq
                           8677 ;	gencjneshort
                           8678 ;	Peephole 112.b	changed ljmp to sjmp
                           8679 ;	Peephole 198.a	optimized misc jump sequence
   2479 BA 01 11           8680 	cjne	r2,#0x01,00198$
   247C BB 00 0E           8681 	cjne	r3,#0x00,00198$
                           8682 ;	Peephole 200.b	removed redundant sjmp
                           8683 ;	Peephole 300	removed redundant label 00364$
                           8684 ;	Peephole 300	removed redundant label 00365$
                           8685 ;	main.c:1178: finalval += (14*16);
                           8686 ;	genAssign
   247F 90s00r31           8687 	mov	dptr,#_fetch_addr_finalval_1_1
   2482 E0                 8688 	movx	a,@dptr
   2483 FC                 8689 	mov	r4,a
                           8690 ;	genPlus
   2484 90s00r31           8691 	mov	dptr,#_fetch_addr_finalval_1_1
                           8692 ;     genPlusIncr
   2487 74 E0              8693 	mov	a,#0xE0
                           8694 ;	Peephole 236.a	used r4 instead of ar4
   2489 2C                 8695 	add	a,r4
   248A F0                 8696 	movx	@dptr,a
                           8697 ;	Peephole 112.b	changed ljmp to sjmp
   248B 80 3A              8698 	sjmp	00220$
   248D                    8699 00198$:
                           8700 ;	main.c:1179: else if(i==2)
                           8701 ;	genCmpEq
                           8702 ;	gencjneshort
                           8703 ;	Peephole 112.b	changed ljmp to sjmp
                           8704 ;	Peephole 198.a	optimized misc jump sequence
   248D BA 02 37           8705 	cjne	r2,#0x02,00220$
   2490 BB 00 34           8706 	cjne	r3,#0x00,00220$
                           8707 ;	Peephole 200.b	removed redundant sjmp
                           8708 ;	Peephole 300	removed redundant label 00366$
                           8709 ;	Peephole 300	removed redundant label 00367$
                           8710 ;	main.c:1180: finalval += 14;
                           8711 ;	genAssign
   2493 90s00r31           8712 	mov	dptr,#_fetch_addr_finalval_1_1
   2496 E0                 8713 	movx	a,@dptr
   2497 FC                 8714 	mov	r4,a
                           8715 ;	genPlus
   2498 90s00r31           8716 	mov	dptr,#_fetch_addr_finalval_1_1
                           8717 ;     genPlusIncr
   249B 74 0E              8718 	mov	a,#0x0E
                           8719 ;	Peephole 236.a	used r4 instead of ar4
   249D 2C                 8720 	add	a,r4
   249E F0                 8721 	movx	@dptr,a
                           8722 ;	main.c:1181: break;
                           8723 ;	main.c:1182: case 'f':
                           8724 ;	Peephole 112.b	changed ljmp to sjmp
   249F 80 26              8725 	sjmp	00220$
   24A1                    8726 00200$:
                           8727 ;	main.c:1183: if(i==1)
                           8728 ;	genCmpEq
                           8729 ;	gencjneshort
                           8730 ;	Peephole 112.b	changed ljmp to sjmp
                           8731 ;	Peephole 198.a	optimized misc jump sequence
   24A1 BA 01 11           8732 	cjne	r2,#0x01,00204$
   24A4 BB 00 0E           8733 	cjne	r3,#0x00,00204$
                           8734 ;	Peephole 200.b	removed redundant sjmp
                           8735 ;	Peephole 300	removed redundant label 00368$
                           8736 ;	Peephole 300	removed redundant label 00369$
                           8737 ;	main.c:1184: finalval += (15*16);
                           8738 ;	genAssign
   24A7 90s00r31           8739 	mov	dptr,#_fetch_addr_finalval_1_1
   24AA E0                 8740 	movx	a,@dptr
   24AB FC                 8741 	mov	r4,a
                           8742 ;	genPlus
   24AC 90s00r31           8743 	mov	dptr,#_fetch_addr_finalval_1_1
                           8744 ;     genPlusIncr
   24AF 74 F0              8745 	mov	a,#0xF0
                           8746 ;	Peephole 236.a	used r4 instead of ar4
   24B1 2C                 8747 	add	a,r4
   24B2 F0                 8748 	movx	@dptr,a
                           8749 ;	Peephole 112.b	changed ljmp to sjmp
   24B3 80 12              8750 	sjmp	00220$
   24B5                    8751 00204$:
                           8752 ;	main.c:1185: else if(i==2)
                           8753 ;	genCmpEq
                           8754 ;	gencjneshort
                           8755 ;	Peephole 112.b	changed ljmp to sjmp
                           8756 ;	Peephole 198.a	optimized misc jump sequence
   24B5 BA 02 0F           8757 	cjne	r2,#0x02,00220$
   24B8 BB 00 0C           8758 	cjne	r3,#0x00,00220$
                           8759 ;	Peephole 200.b	removed redundant sjmp
                           8760 ;	Peephole 300	removed redundant label 00370$
                           8761 ;	Peephole 300	removed redundant label 00371$
                           8762 ;	main.c:1186: finalval += 15;
                           8763 ;	genAssign
   24BB 90s00r31           8764 	mov	dptr,#_fetch_addr_finalval_1_1
   24BE E0                 8765 	movx	a,@dptr
   24BF FC                 8766 	mov	r4,a
                           8767 ;	genPlus
   24C0 90s00r31           8768 	mov	dptr,#_fetch_addr_finalval_1_1
                           8769 ;     genPlusIncr
   24C3 74 0F              8770 	mov	a,#0x0F
                           8771 ;	Peephole 236.a	used r4 instead of ar4
   24C5 2C                 8772 	add	a,r4
   24C6 F0                 8773 	movx	@dptr,a
                           8774 ;	main.c:1188: }
   24C7                    8775 00220$:
                           8776 ;	main.c:1087: for(i=1;i<3;i++)
                           8777 ;	genPlus
                           8778 ;     genPlusIncr
   24C7 0A                 8779 	inc	r2
   24C8 BA 00 01           8780 	cjne	r2,#0x00,00372$
   24CB 0B                 8781 	inc	r3
   24CC                    8782 00372$:
   24CC 02s21rAC           8783 	ljmp	00218$
   24CF                    8784 00221$:
                           8785 ;	main.c:1193: return finalval;
                           8786 ;	genAssign
   24CF 90s00r31           8787 	mov	dptr,#_fetch_addr_finalval_1_1
   24D2 E0                 8788 	movx	a,@dptr
                           8789 ;	genRet
                           8790 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   24D3 F5 82              8791 	mov	dpl,a
                           8792 ;	Peephole 300	removed redundant label 00222$
   24D5 22                 8793 	ret
                           8794 ;------------------------------------------------------------
                           8795 ;Allocation info for local variables in function 'fetch_data'
                           8796 ;------------------------------------------------------------
                           8797 ;i1                        Allocated with name '_fetch_data_i1_1_1'
                           8798 ;i                         Allocated with name '_fetch_data_i_1_1'
                           8799 ;ch                        Allocated with name '_fetch_data_ch_1_1'
                           8800 ;finalval                  Allocated with name '_fetch_data_finalval_1_1'
                           8801 ;bufsiz1                   Allocated with name '_fetch_data_bufsiz1_1_1'
                           8802 ;------------------------------------------------------------
                           8803 ;	main.c:1197: char fetch_data()
                           8804 ;	-----------------------------------------
                           8805 ;	 function fetch_data
                           8806 ;	-----------------------------------------
   24D6                    8807 _fetch_data:
                           8808 ;	main.c:1204: do
   24D6                    8809 00120$:
                           8810 ;	main.c:1206: printf_tiny("\nEnter data to be written to EEPROM in hex:\n\r");
                           8811 ;	genIpush
   24D6 74r0D              8812 	mov	a,#__str_94
   24D8 C0 E0              8813 	push	acc
   24DA 74s0A              8814 	mov	a,#(__str_94 >> 8)
   24DC C0 E0              8815 	push	acc
                           8816 ;	genCall
   24DE 12s00r00           8817 	lcall	_printf_tiny
   24E1 15 81              8818 	dec	sp
   24E3 15 81              8819 	dec	sp
                           8820 ;	main.c:1208: memset(bufsiz1,'\0',BUFSIZ);
                           8821 ;	genAssign
   24E5 90s00r00           8822 	mov	dptr,#_memset_PARM_2
                           8823 ;	Peephole 181	changed mov to clr
   24E8 E4                 8824 	clr	a
   24E9 F0                 8825 	movx	@dptr,a
                           8826 ;	genAssign
   24EA 90s00r00           8827 	mov	dptr,#_memset_PARM_3
   24ED 74 03              8828 	mov	a,#0x03
   24EF F0                 8829 	movx	@dptr,a
   24F0 E4                 8830 	clr	a
   24F1 A3                 8831 	inc	dptr
   24F2 F0                 8832 	movx	@dptr,a
                           8833 ;	genCall
                           8834 ;	Peephole 182.a	used 16 bit load of DPTR
   24F3 90s00r35           8835 	mov	dptr,#_fetch_data_bufsiz1_1_1
   24F6 75 F0 00           8836 	mov	b,#0x00
   24F9 12s00r00           8837 	lcall	_memset
                           8838 ;	main.c:1210: for(i1=0;i1<2;i1++)
                           8839 ;	genAssign
   24FC 90s00r32           8840 	mov	dptr,#_fetch_data_i1_1_1
   24FF E4                 8841 	clr	a
   2500 F0                 8842 	movx	@dptr,a
   2501 A3                 8843 	inc	dptr
   2502 F0                 8844 	movx	@dptr,a
                           8845 ;	genAssign
   2503 7A 00              8846 	mov	r2,#0x00
   2505 7B 00              8847 	mov	r3,#0x00
   2507                    8848 00116$:
                           8849 ;	genCmpLt
                           8850 ;	genCmp
   2507 C3                 8851 	clr	c
   2508 EA                 8852 	mov	a,r2
   2509 94 02              8853 	subb	a,#0x02
   250B EB                 8854 	mov	a,r3
   250C 64 80              8855 	xrl	a,#0x80
   250E 94 80              8856 	subb	a,#0x80
                           8857 ;	genIfxJump
   2510 40 03              8858 	jc	00276$
   2512 02s25rB7           8859 	ljmp	00121$
   2515                    8860 00276$:
                           8861 ;	main.c:1212: ch = getchar();
                           8862 ;	genCall
   2515 C0 02              8863 	push	ar2
   2517 C0 03              8864 	push	ar3
   2519 12s00r00           8865 	lcall	_getchar
   251C AC 82              8866 	mov	r4,dpl
   251E D0 03              8867 	pop	ar3
   2520 D0 02              8868 	pop	ar2
                           8869 ;	main.c:1213: if(((ch > 47) && (ch < 59)) || ((ch > 96) && (ch < 103)) || ((ch > 64) && (ch < 71)))
                           8870 ;	genCmpGt
                           8871 ;	genCmp
   2522 C3                 8872 	clr	c
                           8873 ;	Peephole 159	avoided xrl during execution
   2523 74 AF              8874 	mov	a,#(0x2F ^ 0x80)
   2525 8C F0              8875 	mov	b,r4
   2527 63 F0 80           8876 	xrl	b,#0x80
   252A 95 F0              8877 	subb	a,b
   252C E4                 8878 	clr	a
   252D 33                 8879 	rlc	a
                           8880 ;	genIfx
   252E FD                 8881 	mov	r5,a
                           8882 ;	Peephole 105	removed redundant mov
                           8883 ;	genIfxJump
                           8884 ;	Peephole 108.c	removed ljmp by inverse jump logic
   252F 60 08              8885 	jz	00113$
                           8886 ;	Peephole 300	removed redundant label 00277$
                           8887 ;	genCmpLt
                           8888 ;	genCmp
   2531 C3                 8889 	clr	c
   2532 EC                 8890 	mov	a,r4
   2533 64 80              8891 	xrl	a,#0x80
   2535 94 BB              8892 	subb	a,#0xbb
                           8893 ;	genIfxJump
                           8894 ;	Peephole 112.b	changed ljmp to sjmp
                           8895 ;	Peephole 160.a	removed sjmp by inverse jump logic
   2537 40 2E              8896 	jc	00108$
                           8897 ;	Peephole 300	removed redundant label 00278$
   2539                    8898 00113$:
                           8899 ;	genCmpGt
                           8900 ;	genCmp
   2539 C3                 8901 	clr	c
                           8902 ;	Peephole 159	avoided xrl during execution
   253A 74 E0              8903 	mov	a,#(0x60 ^ 0x80)
   253C 8C F0              8904 	mov	b,r4
   253E 63 F0 80           8905 	xrl	b,#0x80
   2541 95 F0              8906 	subb	a,b
   2543 E4                 8907 	clr	a
   2544 33                 8908 	rlc	a
                           8909 ;	genIfx
   2545 FE                 8910 	mov	r6,a
                           8911 ;	Peephole 105	removed redundant mov
                           8912 ;	genIfxJump
                           8913 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2546 60 08              8914 	jz	00115$
                           8915 ;	Peephole 300	removed redundant label 00279$
                           8916 ;	genCmpLt
                           8917 ;	genCmp
   2548 C3                 8918 	clr	c
   2549 EC                 8919 	mov	a,r4
   254A 64 80              8920 	xrl	a,#0x80
   254C 94 E7              8921 	subb	a,#0xe7
                           8922 ;	genIfxJump
                           8923 ;	Peephole 112.b	changed ljmp to sjmp
                           8924 ;	Peephole 160.a	removed sjmp by inverse jump logic
   254E 40 17              8925 	jc	00108$
                           8926 ;	Peephole 300	removed redundant label 00280$
   2550                    8927 00115$:
                           8928 ;	genCmpGt
                           8929 ;	genCmp
   2550 C3                 8930 	clr	c
                           8931 ;	Peephole 159	avoided xrl during execution
   2551 74 C0              8932 	mov	a,#(0x40 ^ 0x80)
   2553 8C F0              8933 	mov	b,r4
   2555 63 F0 80           8934 	xrl	b,#0x80
   2558 95 F0              8935 	subb	a,b
   255A E4                 8936 	clr	a
   255B 33                 8937 	rlc	a
                           8938 ;	genIfx
   255C FF                 8939 	mov	r7,a
                           8940 ;	Peephole 105	removed redundant mov
                           8941 ;	genIfxJump
                           8942 ;	Peephole 108.c	removed ljmp by inverse jump logic
   255D 60 16              8943 	jz	00109$
                           8944 ;	Peephole 300	removed redundant label 00281$
                           8945 ;	genCmpLt
                           8946 ;	genCmp
   255F C3                 8947 	clr	c
   2560 EC                 8948 	mov	a,r4
   2561 64 80              8949 	xrl	a,#0x80
   2563 94 C7              8950 	subb	a,#0xc7
                           8951 ;	genIfxJump
                           8952 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2565 50 0E              8953 	jnc	00109$
                           8954 ;	Peephole 300	removed redundant label 00282$
   2567                    8955 00108$:
                           8956 ;	main.c:1215: bufsiz1[i1] = ch;
                           8957 ;	genPlus
                           8958 ;	Peephole 236.g	used r2 instead of ar2
   2567 EA                 8959 	mov	a,r2
   2568 24r35              8960 	add	a,#_fetch_data_bufsiz1_1_1
   256A F5 82              8961 	mov	dpl,a
                           8962 ;	Peephole 236.g	used r3 instead of ar3
   256C EB                 8963 	mov	a,r3
   256D 34s00              8964 	addc	a,#(_fetch_data_bufsiz1_1_1 >> 8)
   256F F5 83              8965 	mov	dph,a
                           8966 ;	genPointerSet
                           8967 ;     genFarPointerSet
   2571 EC                 8968 	mov	a,r4
   2572 F0                 8969 	movx	@dptr,a
                           8970 ;	Peephole 112.b	changed ljmp to sjmp
   2573 80 32              8971 	sjmp	00118$
   2575                    8972 00109$:
                           8973 ;	main.c:1217: else if(!(((ch > 47) && (ch < 59)) || ((ch > 96) && (ch < 103)) || ((ch > 64) && (ch < 71))))
                           8974 ;	genIfx
   2575 ED                 8975 	mov	a,r5
                           8976 ;	genIfxJump
                           8977 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2576 60 08              8978 	jz	00105$
                           8979 ;	Peephole 300	removed redundant label 00283$
                           8980 ;	genCmpLt
                           8981 ;	genCmp
   2578 C3                 8982 	clr	c
   2579 EC                 8983 	mov	a,r4
   257A 64 80              8984 	xrl	a,#0x80
   257C 94 BB              8985 	subb	a,#0xbb
                           8986 ;	genIfxJump
                           8987 ;	Peephole 112.b	changed ljmp to sjmp
                           8988 ;	Peephole 160.a	removed sjmp by inverse jump logic
   257E 40 27              8989 	jc	00118$
                           8990 ;	Peephole 300	removed redundant label 00284$
   2580                    8991 00105$:
                           8992 ;	genIfx
   2580 EE                 8993 	mov	a,r6
                           8994 ;	genIfxJump
                           8995 ;	Peephole 108.c	removed ljmp by inverse jump logic
   2581 60 08              8996 	jz	00107$
                           8997 ;	Peephole 300	removed redundant label 00285$
                           8998 ;	genCmpLt
                           8999 ;	genCmp
   2583 C3                 9000 	clr	c
   2584 EC                 9001 	mov	a,r4
   2585 64 80              9002 	xrl	a,#0x80
   2587 94 E7              9003 	subb	a,#0xe7
                           9004 ;	genIfxJump
                           9005 ;	Peephole 112.b	changed ljmp to sjmp
                           9006 ;	Peephole 160.a	removed sjmp by inverse jump logic
   2589 40 1C              9007 	jc	00118$
                           9008 ;	Peephole 300	removed redundant label 00286$
   258B                    9009 00107$:
                           9010 ;	genIfx
   258B EF                 9011 	mov	a,r7
                           9012 ;	genIfxJump
                           9013 ;	Peephole 108.c	removed ljmp by inverse jump logic
   258C 60 08              9014 	jz	00101$
                           9015 ;	Peephole 300	removed redundant label 00287$
                           9016 ;	genCmpLt
                           9017 ;	genCmp
   258E C3                 9018 	clr	c
   258F EC                 9019 	mov	a,r4
   2590 64 80              9020 	xrl	a,#0x80
   2592 94 C7              9021 	subb	a,#0xc7
                           9022 ;	genIfxJump
                           9023 ;	Peephole 112.b	changed ljmp to sjmp
                           9024 ;	Peephole 160.a	removed sjmp by inverse jump logic
   2594 40 11              9025 	jc	00118$
                           9026 ;	Peephole 300	removed redundant label 00288$
   2596                    9027 00101$:
                           9028 ;	main.c:1219: printf_tiny("\n\rPlease enter hexadecimal input. Special characters are not allowed.\n\r");
                           9029 ;	genIpush
   2596 74r82              9030 	mov	a,#__str_92
   2598 C0 E0              9031 	push	acc
   259A 74s09              9032 	mov	a,#(__str_92 >> 8)
   259C C0 E0              9033 	push	acc
                           9034 ;	genCall
   259E 12s00r00           9035 	lcall	_printf_tiny
   25A1 15 81              9036 	dec	sp
   25A3 15 81              9037 	dec	sp
                           9038 ;	main.c:1220: break;
                           9039 ;	Peephole 112.b	changed ljmp to sjmp
   25A5 80 10              9040 	sjmp	00121$
   25A7                    9041 00118$:
                           9042 ;	main.c:1210: for(i1=0;i1<2;i1++)
                           9043 ;	genPlus
                           9044 ;     genPlusIncr
   25A7 0A                 9045 	inc	r2
   25A8 BA 00 01           9046 	cjne	r2,#0x00,00289$
   25AB 0B                 9047 	inc	r3
   25AC                    9048 00289$:
                           9049 ;	genAssign
   25AC 90s00r32           9050 	mov	dptr,#_fetch_data_i1_1_1
   25AF EA                 9051 	mov	a,r2
   25B0 F0                 9052 	movx	@dptr,a
   25B1 A3                 9053 	inc	dptr
   25B2 EB                 9054 	mov	a,r3
   25B3 F0                 9055 	movx	@dptr,a
   25B4 02s25r07           9056 	ljmp	00116$
   25B7                    9057 00121$:
                           9058 ;	main.c:1224: }while(i1<2);
                           9059 ;	genAssign
   25B7 90s00r32           9060 	mov	dptr,#_fetch_data_i1_1_1
   25BA E0                 9061 	movx	a,@dptr
   25BB FA                 9062 	mov	r2,a
   25BC A3                 9063 	inc	dptr
   25BD E0                 9064 	movx	a,@dptr
   25BE FB                 9065 	mov	r3,a
                           9066 ;	genCmpLt
                           9067 ;	genCmp
   25BF C3                 9068 	clr	c
   25C0 EA                 9069 	mov	a,r2
   25C1 94 02              9070 	subb	a,#0x02
   25C3 EB                 9071 	mov	a,r3
   25C4 64 80              9072 	xrl	a,#0x80
   25C6 94 80              9073 	subb	a,#0x80
                           9074 ;	genIfxJump
   25C8 50 03              9075 	jnc	00290$
   25CA 02s24rD6           9076 	ljmp	00120$
   25CD                    9077 00290$:
                           9078 ;	main.c:1226: finalval=0;
                           9079 ;	genAssign
   25CD 90s00r34           9080 	mov	dptr,#_fetch_data_finalval_1_1
                           9081 ;	Peephole 181	changed mov to clr
   25D0 E4                 9082 	clr	a
   25D1 F0                 9083 	movx	@dptr,a
                           9084 ;	main.c:1229: for(i=0;i<2;i++)
                           9085 ;	genAssign
   25D2 7A 00              9086 	mov	r2,#0x00
   25D4 7B 00              9087 	mov	r3,#0x00
   25D6                    9088 00213$:
                           9089 ;	genCmpLt
                           9090 ;	genCmp
   25D6 C3                 9091 	clr	c
   25D7 EA                 9092 	mov	a,r2
   25D8 94 02              9093 	subb	a,#0x02
   25DA EB                 9094 	mov	a,r3
   25DB 64 80              9095 	xrl	a,#0x80
   25DD 94 80              9096 	subb	a,#0x80
                           9097 ;	genIfxJump
   25DF 40 03              9098 	jc	00291$
   25E1 02s28rDC           9099 	ljmp	00216$
   25E4                    9100 00291$:
                           9101 ;	main.c:1232: if((bufsiz1[i] >= '0') && (bufsiz1[i] <= '9'))
                           9102 ;	genPlus
                           9103 ;	Peephole 236.g	used r2 instead of ar2
   25E4 EA                 9104 	mov	a,r2
   25E5 24r35              9105 	add	a,#_fetch_data_bufsiz1_1_1
   25E7 FC                 9106 	mov	r4,a
                           9107 ;	Peephole 236.g	used r3 instead of ar3
   25E8 EB                 9108 	mov	a,r3
   25E9 34s00              9109 	addc	a,#(_fetch_data_bufsiz1_1_1 >> 8)
   25EB FD                 9110 	mov	r5,a
                           9111 ;	genPointerGet
                           9112 ;	genFarPointerGet
   25EC 8C 82              9113 	mov	dpl,r4
   25EE 8D 83              9114 	mov	dph,r5
   25F0 E0                 9115 	movx	a,@dptr
                           9116 ;	genCmpLt
                           9117 ;	genCmp
   25F1 FE                 9118 	mov	r6,a
   25F2 C3                 9119 	clr	c
                           9120 ;	Peephole 106	removed redundant mov
   25F3 64 80              9121 	xrl	a,#0x80
   25F5 94 B0              9122 	subb	a,#0xb0
                           9123 ;	genIfxJump
                           9124 ;	Peephole 112.b	changed ljmp to sjmp
                           9125 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           9126 ;	genCmpGt
                           9127 ;	genCmp
   25F7 40 4F              9128 	jc	00210$
                           9129 ;	Peephole 300	removed redundant label 00292$
                           9130 ;	Peephole 256.a	removed redundant clr c
                           9131 ;	Peephole 159	avoided xrl during execution
   25F9 74 B9              9132 	mov	a,#(0x39 ^ 0x80)
   25FB 8E F0              9133 	mov	b,r6
   25FD 63 F0 80           9134 	xrl	b,#0x80
   2600 95 F0              9135 	subb	a,b
                           9136 ;	genIfxJump
                           9137 ;	Peephole 112.b	changed ljmp to sjmp
                           9138 ;	Peephole 160.a	removed sjmp by inverse jump logic
   2602 40 44              9139 	jc	00210$
                           9140 ;	Peephole 300	removed redundant label 00293$
                           9141 ;	main.c:1234: bufsiz1[i] -= 48;
                           9142 ;	genMinus
   2604 EE                 9143 	mov	a,r6
   2605 24 D0              9144 	add	a,#0xd0
                           9145 ;	genPointerSet
                           9146 ;     genFarPointerSet
   2607 FE                 9147 	mov	r6,a
   2608 8C 82              9148 	mov	dpl,r4
   260A 8D 83              9149 	mov	dph,r5
                           9150 ;	Peephole 136	removed redundant move
   260C F0                 9151 	movx	@dptr,a
                           9152 ;	main.c:1235: if(i==0)
                           9153 ;	genIfx
   260D EA                 9154 	mov	a,r2
   260E 4B                 9155 	orl	a,r3
                           9156 ;	genIfxJump
                           9157 ;	Peephole 108.b	removed ljmp by inverse jump logic
   260F 70 18              9158 	jnz	00126$
                           9159 ;	Peephole 300	removed redundant label 00294$
                           9160 ;	main.c:1237: finalval += (bufsiz1[i]*16);
                           9161 ;	genPointerGet
                           9162 ;	genFarPointerGet
   2611 8C 82              9163 	mov	dpl,r4
   2613 8D 83              9164 	mov	dph,r5
   2615 E0                 9165 	movx	a,@dptr
                           9166 ;	genLeftShift
                           9167 ;	genLeftShiftLiteral
                           9168 ;	genlshOne
   2616 FE                 9169 	mov	r6,a
                           9170 ;	Peephole 105	removed redundant mov
   2617 C4                 9171 	swap	a
   2618 54 F0              9172 	anl	a,#0xf0
   261A FE                 9173 	mov	r6,a
                           9174 ;	genAssign
   261B 90s00r34           9175 	mov	dptr,#_fetch_data_finalval_1_1
   261E E0                 9176 	movx	a,@dptr
   261F FF                 9177 	mov	r7,a
                           9178 ;	genPlus
   2620 90s00r34           9179 	mov	dptr,#_fetch_data_finalval_1_1
                           9180 ;	Peephole 236.g	used r6 instead of ar6
   2623 EE                 9181 	mov	a,r6
                           9182 ;	Peephole 236.a	used r7 instead of ar7
   2624 2F                 9183 	add	a,r7
   2625 F0                 9184 	movx	@dptr,a
   2626 02s28rD4           9185 	ljmp	00215$
   2629                    9186 00126$:
                           9187 ;	main.c:1239: else if(i==1)
                           9188 ;	genCmpEq
                           9189 ;	gencjneshort
   2629 BA 01 05           9190 	cjne	r2,#0x01,00295$
   262C BB 00 02           9191 	cjne	r3,#0x00,00295$
   262F 80 03              9192 	sjmp	00296$
   2631                    9193 00295$:
   2631 02s28rD4           9194 	ljmp	00215$
   2634                    9195 00296$:
                           9196 ;	main.c:1241: finalval += bufsiz1[i];
                           9197 ;	genPointerGet
                           9198 ;	genFarPointerGet
   2634 8C 82              9199 	mov	dpl,r4
   2636 8D 83              9200 	mov	dph,r5
   2638 E0                 9201 	movx	a,@dptr
   2639 FC                 9202 	mov	r4,a
                           9203 ;	genAssign
   263A 90s00r34           9204 	mov	dptr,#_fetch_data_finalval_1_1
   263D E0                 9205 	movx	a,@dptr
   263E FD                 9206 	mov	r5,a
                           9207 ;	genPlus
   263F 90s00r34           9208 	mov	dptr,#_fetch_data_finalval_1_1
                           9209 ;	Peephole 236.g	used r4 instead of ar4
   2642 EC                 9210 	mov	a,r4
                           9211 ;	Peephole 236.a	used r5 instead of ar5
   2643 2D                 9212 	add	a,r5
   2644 F0                 9213 	movx	@dptr,a
   2645 02s28rD4           9214 	ljmp	00215$
   2648                    9215 00210$:
                           9216 ;	main.c:1247: else if((bufsiz1[i] >= 'A') && (bufsiz1[i] <= 'F'))
                           9217 ;	genPlus
                           9218 ;	Peephole 236.g	used r2 instead of ar2
   2648 EA                 9219 	mov	a,r2
   2649 24r35              9220 	add	a,#_fetch_data_bufsiz1_1_1
   264B F5 82              9221 	mov	dpl,a
                           9222 ;	Peephole 236.g	used r3 instead of ar3
   264D EB                 9223 	mov	a,r3
   264E 34s00              9224 	addc	a,#(_fetch_data_bufsiz1_1_1 >> 8)
   2650 F5 83              9225 	mov	dph,a
                           9226 ;	genPointerGet
                           9227 ;	genFarPointerGet
   2652 E0                 9228 	movx	a,@dptr
                           9229 ;	genCmpLt
                           9230 ;	genCmp
   2653 FC                 9231 	mov	r4,a
   2654 C3                 9232 	clr	c
                           9233 ;	Peephole 106	removed redundant mov
   2655 64 80              9234 	xrl	a,#0x80
   2657 94 C1              9235 	subb	a,#0xc1
                           9236 ;	genIfxJump
   2659 50 03              9237 	jnc	00297$
   265B 02s27r9F           9238 	ljmp	00206$
   265E                    9239 00297$:
                           9240 ;	genCmpGt
                           9241 ;	genCmp
   265E C3                 9242 	clr	c
                           9243 ;	Peephole 159	avoided xrl during execution
   265F 74 C6              9244 	mov	a,#(0x46 ^ 0x80)
   2661 8C F0              9245 	mov	b,r4
   2663 63 F0 80           9246 	xrl	b,#0x80
   2666 95 F0              9247 	subb	a,b
                           9248 ;	genIfxJump
   2668 50 03              9249 	jnc	00298$
   266A 02s27r9F           9250 	ljmp	00206$
   266D                    9251 00298$:
                           9252 ;	main.c:1249: switch(bufsiz1[i])
                           9253 ;	genCmpEq
                           9254 ;	gencjneshort
   266D BC 41 02           9255 	cjne	r4,#0x41,00299$
                           9256 ;	Peephole 112.b	changed ljmp to sjmp
   2670 80 1F              9257 	sjmp	00128$
   2672                    9258 00299$:
                           9259 ;	genCmpEq
                           9260 ;	gencjneshort
   2672 BC 42 02           9261 	cjne	r4,#0x42,00300$
                           9262 ;	Peephole 112.b	changed ljmp to sjmp
   2675 80 47              9263 	sjmp	00134$
   2677                    9264 00300$:
                           9265 ;	genCmpEq
                           9266 ;	gencjneshort
   2677 BC 43 02           9267 	cjne	r4,#0x43,00301$
                           9268 ;	Peephole 112.b	changed ljmp to sjmp
   267A 80 6F              9269 	sjmp	00140$
   267C                    9270 00301$:
                           9271 ;	genCmpEq
                           9272 ;	gencjneshort
   267C BC 44 03           9273 	cjne	r4,#0x44,00302$
   267F 02s27r18           9274 	ljmp	00146$
   2682                    9275 00302$:
                           9276 ;	genCmpEq
                           9277 ;	gencjneshort
   2682 BC 45 03           9278 	cjne	r4,#0x45,00303$
   2685 02s27r45           9279 	ljmp	00152$
   2688                    9280 00303$:
                           9281 ;	genCmpEq
                           9282 ;	gencjneshort
   2688 BC 46 03           9283 	cjne	r4,#0x46,00304$
   268B 02s27r72           9284 	ljmp	00158$
   268E                    9285 00304$:
   268E 02s28rD4           9286 	ljmp	00215$
                           9287 ;	main.c:1251: case 'A':
   2691                    9288 00128$:
                           9289 ;	main.c:1252: if(i==0)
                           9290 ;	genIfx
   2691 EA                 9291 	mov	a,r2
   2692 4B                 9292 	orl	a,r3
                           9293 ;	genIfxJump
                           9294 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2693 70 0F              9295 	jnz	00132$
                           9296 ;	Peephole 300	removed redundant label 00305$
                           9297 ;	main.c:1253: finalval += (10*16);
                           9298 ;	genAssign
   2695 90s00r34           9299 	mov	dptr,#_fetch_data_finalval_1_1
   2698 E0                 9300 	movx	a,@dptr
   2699 FD                 9301 	mov	r5,a
                           9302 ;	genPlus
   269A 90s00r34           9303 	mov	dptr,#_fetch_data_finalval_1_1
                           9304 ;     genPlusIncr
   269D 74 A0              9305 	mov	a,#0xA0
                           9306 ;	Peephole 236.a	used r5 instead of ar5
   269F 2D                 9307 	add	a,r5
   26A0 F0                 9308 	movx	@dptr,a
   26A1 02s28rD4           9309 	ljmp	00215$
   26A4                    9310 00132$:
                           9311 ;	main.c:1254: else if(i==1)
                           9312 ;	genCmpEq
                           9313 ;	gencjneshort
   26A4 BA 01 05           9314 	cjne	r2,#0x01,00306$
   26A7 BB 00 02           9315 	cjne	r3,#0x00,00306$
   26AA 80 03              9316 	sjmp	00307$
   26AC                    9317 00306$:
   26AC 02s28rD4           9318 	ljmp	00215$
   26AF                    9319 00307$:
                           9320 ;	main.c:1255: finalval += 10;
                           9321 ;	genAssign
   26AF 90s00r34           9322 	mov	dptr,#_fetch_data_finalval_1_1
   26B2 E0                 9323 	movx	a,@dptr
   26B3 FD                 9324 	mov	r5,a
                           9325 ;	genPlus
   26B4 90s00r34           9326 	mov	dptr,#_fetch_data_finalval_1_1
                           9327 ;     genPlusIncr
   26B7 74 0A              9328 	mov	a,#0x0A
                           9329 ;	Peephole 236.a	used r5 instead of ar5
   26B9 2D                 9330 	add	a,r5
   26BA F0                 9331 	movx	@dptr,a
                           9332 ;	main.c:1256: break;
   26BB 02s28rD4           9333 	ljmp	00215$
                           9334 ;	main.c:1257: case 'B':
   26BE                    9335 00134$:
                           9336 ;	main.c:1258: if(i==0)
                           9337 ;	genIfx
   26BE EA                 9338 	mov	a,r2
   26BF 4B                 9339 	orl	a,r3
                           9340 ;	genIfxJump
                           9341 ;	Peephole 108.b	removed ljmp by inverse jump logic
   26C0 70 0F              9342 	jnz	00138$
                           9343 ;	Peephole 300	removed redundant label 00308$
                           9344 ;	main.c:1259: finalval += (11*16);
                           9345 ;	genAssign
   26C2 90s00r34           9346 	mov	dptr,#_fetch_data_finalval_1_1
   26C5 E0                 9347 	movx	a,@dptr
   26C6 FD                 9348 	mov	r5,a
                           9349 ;	genPlus
   26C7 90s00r34           9350 	mov	dptr,#_fetch_data_finalval_1_1
                           9351 ;     genPlusIncr
   26CA 74 B0              9352 	mov	a,#0xB0
                           9353 ;	Peephole 236.a	used r5 instead of ar5
   26CC 2D                 9354 	add	a,r5
   26CD F0                 9355 	movx	@dptr,a
   26CE 02s28rD4           9356 	ljmp	00215$
   26D1                    9357 00138$:
                           9358 ;	main.c:1260: else if(i==1)
                           9359 ;	genCmpEq
                           9360 ;	gencjneshort
   26D1 BA 01 05           9361 	cjne	r2,#0x01,00309$
   26D4 BB 00 02           9362 	cjne	r3,#0x00,00309$
   26D7 80 03              9363 	sjmp	00310$
   26D9                    9364 00309$:
   26D9 02s28rD4           9365 	ljmp	00215$
   26DC                    9366 00310$:
                           9367 ;	main.c:1261: finalval += 11;
                           9368 ;	genAssign
   26DC 90s00r34           9369 	mov	dptr,#_fetch_data_finalval_1_1
   26DF E0                 9370 	movx	a,@dptr
   26E0 FD                 9371 	mov	r5,a
                           9372 ;	genPlus
   26E1 90s00r34           9373 	mov	dptr,#_fetch_data_finalval_1_1
                           9374 ;     genPlusIncr
   26E4 74 0B              9375 	mov	a,#0x0B
                           9376 ;	Peephole 236.a	used r5 instead of ar5
   26E6 2D                 9377 	add	a,r5
   26E7 F0                 9378 	movx	@dptr,a
                           9379 ;	main.c:1262: break;
   26E8 02s28rD4           9380 	ljmp	00215$
                           9381 ;	main.c:1263: case 'C':
   26EB                    9382 00140$:
                           9383 ;	main.c:1264: if(i==0)
                           9384 ;	genIfx
   26EB EA                 9385 	mov	a,r2
   26EC 4B                 9386 	orl	a,r3
                           9387 ;	genIfxJump
                           9388 ;	Peephole 108.b	removed ljmp by inverse jump logic
   26ED 70 0F              9389 	jnz	00144$
                           9390 ;	Peephole 300	removed redundant label 00311$
                           9391 ;	main.c:1265: finalval += (12*16);
                           9392 ;	genAssign
   26EF 90s00r34           9393 	mov	dptr,#_fetch_data_finalval_1_1
   26F2 E0                 9394 	movx	a,@dptr
   26F3 FD                 9395 	mov	r5,a
                           9396 ;	genPlus
   26F4 90s00r34           9397 	mov	dptr,#_fetch_data_finalval_1_1
                           9398 ;     genPlusIncr
   26F7 74 C0              9399 	mov	a,#0xC0
                           9400 ;	Peephole 236.a	used r5 instead of ar5
   26F9 2D                 9401 	add	a,r5
   26FA F0                 9402 	movx	@dptr,a
   26FB 02s28rD4           9403 	ljmp	00215$
   26FE                    9404 00144$:
                           9405 ;	main.c:1266: else if(i==1)
                           9406 ;	genCmpEq
                           9407 ;	gencjneshort
   26FE BA 01 05           9408 	cjne	r2,#0x01,00312$
   2701 BB 00 02           9409 	cjne	r3,#0x00,00312$
   2704 80 03              9410 	sjmp	00313$
   2706                    9411 00312$:
   2706 02s28rD4           9412 	ljmp	00215$
   2709                    9413 00313$:
                           9414 ;	main.c:1267: finalval += 12;
                           9415 ;	genAssign
   2709 90s00r34           9416 	mov	dptr,#_fetch_data_finalval_1_1
   270C E0                 9417 	movx	a,@dptr
   270D FD                 9418 	mov	r5,a
                           9419 ;	genPlus
   270E 90s00r34           9420 	mov	dptr,#_fetch_data_finalval_1_1
                           9421 ;     genPlusIncr
   2711 74 0C              9422 	mov	a,#0x0C
                           9423 ;	Peephole 236.a	used r5 instead of ar5
   2713 2D                 9424 	add	a,r5
   2714 F0                 9425 	movx	@dptr,a
                           9426 ;	main.c:1268: break;
   2715 02s28rD4           9427 	ljmp	00215$
                           9428 ;	main.c:1269: case 'D':
   2718                    9429 00146$:
                           9430 ;	main.c:1270: if(i==0)
                           9431 ;	genIfx
   2718 EA                 9432 	mov	a,r2
   2719 4B                 9433 	orl	a,r3
                           9434 ;	genIfxJump
                           9435 ;	Peephole 108.b	removed ljmp by inverse jump logic
   271A 70 0F              9436 	jnz	00150$
                           9437 ;	Peephole 300	removed redundant label 00314$
                           9438 ;	main.c:1271: finalval += (13*16);
                           9439 ;	genAssign
   271C 90s00r34           9440 	mov	dptr,#_fetch_data_finalval_1_1
   271F E0                 9441 	movx	a,@dptr
   2720 FD                 9442 	mov	r5,a
                           9443 ;	genPlus
   2721 90s00r34           9444 	mov	dptr,#_fetch_data_finalval_1_1
                           9445 ;     genPlusIncr
   2724 74 D0              9446 	mov	a,#0xD0
                           9447 ;	Peephole 236.a	used r5 instead of ar5
   2726 2D                 9448 	add	a,r5
   2727 F0                 9449 	movx	@dptr,a
   2728 02s28rD4           9450 	ljmp	00215$
   272B                    9451 00150$:
                           9452 ;	main.c:1272: else if(i==1)
                           9453 ;	genCmpEq
                           9454 ;	gencjneshort
   272B BA 01 05           9455 	cjne	r2,#0x01,00315$
   272E BB 00 02           9456 	cjne	r3,#0x00,00315$
   2731 80 03              9457 	sjmp	00316$
   2733                    9458 00315$:
   2733 02s28rD4           9459 	ljmp	00215$
   2736                    9460 00316$:
                           9461 ;	main.c:1273: finalval += 13;
                           9462 ;	genAssign
   2736 90s00r34           9463 	mov	dptr,#_fetch_data_finalval_1_1
   2739 E0                 9464 	movx	a,@dptr
   273A FD                 9465 	mov	r5,a
                           9466 ;	genPlus
   273B 90s00r34           9467 	mov	dptr,#_fetch_data_finalval_1_1
                           9468 ;     genPlusIncr
   273E 74 0D              9469 	mov	a,#0x0D
                           9470 ;	Peephole 236.a	used r5 instead of ar5
   2740 2D                 9471 	add	a,r5
   2741 F0                 9472 	movx	@dptr,a
                           9473 ;	main.c:1274: break;
   2742 02s28rD4           9474 	ljmp	00215$
                           9475 ;	main.c:1275: case 'E':
   2745                    9476 00152$:
                           9477 ;	main.c:1276: if(i==0)
                           9478 ;	genIfx
   2745 EA                 9479 	mov	a,r2
   2746 4B                 9480 	orl	a,r3
                           9481 ;	genIfxJump
                           9482 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2747 70 0F              9483 	jnz	00156$
                           9484 ;	Peephole 300	removed redundant label 00317$
                           9485 ;	main.c:1277: finalval += (14*16);
                           9486 ;	genAssign
   2749 90s00r34           9487 	mov	dptr,#_fetch_data_finalval_1_1
   274C E0                 9488 	movx	a,@dptr
   274D FD                 9489 	mov	r5,a
                           9490 ;	genPlus
   274E 90s00r34           9491 	mov	dptr,#_fetch_data_finalval_1_1
                           9492 ;     genPlusIncr
   2751 74 E0              9493 	mov	a,#0xE0
                           9494 ;	Peephole 236.a	used r5 instead of ar5
   2753 2D                 9495 	add	a,r5
   2754 F0                 9496 	movx	@dptr,a
   2755 02s28rD4           9497 	ljmp	00215$
   2758                    9498 00156$:
                           9499 ;	main.c:1278: else if(i==1)
                           9500 ;	genCmpEq
                           9501 ;	gencjneshort
   2758 BA 01 05           9502 	cjne	r2,#0x01,00318$
   275B BB 00 02           9503 	cjne	r3,#0x00,00318$
   275E 80 03              9504 	sjmp	00319$
   2760                    9505 00318$:
   2760 02s28rD4           9506 	ljmp	00215$
   2763                    9507 00319$:
                           9508 ;	main.c:1279: finalval += 14;
                           9509 ;	genAssign
   2763 90s00r34           9510 	mov	dptr,#_fetch_data_finalval_1_1
   2766 E0                 9511 	movx	a,@dptr
   2767 FD                 9512 	mov	r5,a
                           9513 ;	genPlus
   2768 90s00r34           9514 	mov	dptr,#_fetch_data_finalval_1_1
                           9515 ;     genPlusIncr
   276B 74 0E              9516 	mov	a,#0x0E
                           9517 ;	Peephole 236.a	used r5 instead of ar5
   276D 2D                 9518 	add	a,r5
   276E F0                 9519 	movx	@dptr,a
                           9520 ;	main.c:1280: break;
   276F 02s28rD4           9521 	ljmp	00215$
                           9522 ;	main.c:1281: case 'F':
   2772                    9523 00158$:
                           9524 ;	main.c:1282: if(i==0)
                           9525 ;	genIfx
   2772 EA                 9526 	mov	a,r2
   2773 4B                 9527 	orl	a,r3
                           9528 ;	genIfxJump
                           9529 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2774 70 0F              9530 	jnz	00162$
                           9531 ;	Peephole 300	removed redundant label 00320$
                           9532 ;	main.c:1283: finalval += (15*16);
                           9533 ;	genAssign
   2776 90s00r34           9534 	mov	dptr,#_fetch_data_finalval_1_1
   2779 E0                 9535 	movx	a,@dptr
   277A FD                 9536 	mov	r5,a
                           9537 ;	genPlus
   277B 90s00r34           9538 	mov	dptr,#_fetch_data_finalval_1_1
                           9539 ;     genPlusIncr
   277E 74 F0              9540 	mov	a,#0xF0
                           9541 ;	Peephole 236.a	used r5 instead of ar5
   2780 2D                 9542 	add	a,r5
   2781 F0                 9543 	movx	@dptr,a
   2782 02s28rD4           9544 	ljmp	00215$
   2785                    9545 00162$:
                           9546 ;	main.c:1284: else if(i==1)
                           9547 ;	genCmpEq
                           9548 ;	gencjneshort
   2785 BA 01 05           9549 	cjne	r2,#0x01,00321$
   2788 BB 00 02           9550 	cjne	r3,#0x00,00321$
   278B 80 03              9551 	sjmp	00322$
   278D                    9552 00321$:
   278D 02s28rD4           9553 	ljmp	00215$
   2790                    9554 00322$:
                           9555 ;	main.c:1285: finalval += 15;
                           9556 ;	genAssign
   2790 90s00r34           9557 	mov	dptr,#_fetch_data_finalval_1_1
   2793 E0                 9558 	movx	a,@dptr
   2794 FD                 9559 	mov	r5,a
                           9560 ;	genPlus
   2795 90s00r34           9561 	mov	dptr,#_fetch_data_finalval_1_1
                           9562 ;     genPlusIncr
   2798 74 0F              9563 	mov	a,#0x0F
                           9564 ;	Peephole 236.a	used r5 instead of ar5
   279A 2D                 9565 	add	a,r5
   279B F0                 9566 	movx	@dptr,a
                           9567 ;	main.c:1287: }
   279C 02s28rD4           9568 	ljmp	00215$
   279F                    9569 00206$:
                           9570 ;	main.c:1290: else if((bufsiz1[i] >= 'a') && (bufsiz1[i] <= 'f'))
                           9571 ;	genCmpLt
                           9572 ;	genCmp
   279F C3                 9573 	clr	c
   27A0 EC                 9574 	mov	a,r4
   27A1 64 80              9575 	xrl	a,#0x80
   27A3 94 E1              9576 	subb	a,#0xe1
                           9577 ;	genIfxJump
   27A5 50 03              9578 	jnc	00323$
   27A7 02s28rD4           9579 	ljmp	00215$
   27AA                    9580 00323$:
                           9581 ;	genCmpGt
                           9582 ;	genCmp
   27AA C3                 9583 	clr	c
                           9584 ;	Peephole 159	avoided xrl during execution
   27AB 74 E6              9585 	mov	a,#(0x66 ^ 0x80)
   27AD 8C F0              9586 	mov	b,r4
   27AF 63 F0 80           9587 	xrl	b,#0x80
   27B2 95 F0              9588 	subb	a,b
                           9589 ;	genIfxJump
   27B4 50 03              9590 	jnc	00324$
   27B6 02s28rD4           9591 	ljmp	00215$
   27B9                    9592 00324$:
                           9593 ;	main.c:1292: switch(bufsiz1[i])
                           9594 ;	genCmpEq
                           9595 ;	gencjneshort
   27B9 BC 61 02           9596 	cjne	r4,#0x61,00325$
                           9597 ;	Peephole 112.b	changed ljmp to sjmp
   27BC 80 1F              9598 	sjmp	00165$
   27BE                    9599 00325$:
                           9600 ;	genCmpEq
                           9601 ;	gencjneshort
   27BE BC 62 02           9602 	cjne	r4,#0x62,00326$
                           9603 ;	Peephole 112.b	changed ljmp to sjmp
   27C1 80 47              9604 	sjmp	00171$
   27C3                    9605 00326$:
                           9606 ;	genCmpEq
                           9607 ;	gencjneshort
   27C3 BC 63 02           9608 	cjne	r4,#0x63,00327$
                           9609 ;	Peephole 112.b	changed ljmp to sjmp
   27C6 80 6F              9610 	sjmp	00177$
   27C8                    9611 00327$:
                           9612 ;	genCmpEq
                           9613 ;	gencjneshort
   27C8 BC 64 03           9614 	cjne	r4,#0x64,00328$
   27CB 02s28r64           9615 	ljmp	00183$
   27CE                    9616 00328$:
                           9617 ;	genCmpEq
                           9618 ;	gencjneshort
   27CE BC 65 03           9619 	cjne	r4,#0x65,00329$
   27D1 02s28r8A           9620 	ljmp	00189$
   27D4                    9621 00329$:
                           9622 ;	genCmpEq
                           9623 ;	gencjneshort
   27D4 BC 66 03           9624 	cjne	r4,#0x66,00330$
   27D7 02s28rB0           9625 	ljmp	00195$
   27DA                    9626 00330$:
   27DA 02s28rD4           9627 	ljmp	00215$
                           9628 ;	main.c:1294: case 'a':
   27DD                    9629 00165$:
                           9630 ;	main.c:1295: if(i==0)
                           9631 ;	genIfx
   27DD EA                 9632 	mov	a,r2
   27DE 4B                 9633 	orl	a,r3
                           9634 ;	genIfxJump
                           9635 ;	Peephole 108.b	removed ljmp by inverse jump logic
   27DF 70 0F              9636 	jnz	00169$
                           9637 ;	Peephole 300	removed redundant label 00331$
                           9638 ;	main.c:1296: finalval += (10*16);
                           9639 ;	genAssign
   27E1 90s00r34           9640 	mov	dptr,#_fetch_data_finalval_1_1
   27E4 E0                 9641 	movx	a,@dptr
   27E5 FC                 9642 	mov	r4,a
                           9643 ;	genPlus
   27E6 90s00r34           9644 	mov	dptr,#_fetch_data_finalval_1_1
                           9645 ;     genPlusIncr
   27E9 74 A0              9646 	mov	a,#0xA0
                           9647 ;	Peephole 236.a	used r4 instead of ar4
   27EB 2C                 9648 	add	a,r4
   27EC F0                 9649 	movx	@dptr,a
   27ED 02s28rD4           9650 	ljmp	00215$
   27F0                    9651 00169$:
                           9652 ;	main.c:1297: else if(i==1)
                           9653 ;	genCmpEq
                           9654 ;	gencjneshort
   27F0 BA 01 05           9655 	cjne	r2,#0x01,00332$
   27F3 BB 00 02           9656 	cjne	r3,#0x00,00332$
   27F6 80 03              9657 	sjmp	00333$
   27F8                    9658 00332$:
   27F8 02s28rD4           9659 	ljmp	00215$
   27FB                    9660 00333$:
                           9661 ;	main.c:1298: finalval += 10;
                           9662 ;	genAssign
   27FB 90s00r34           9663 	mov	dptr,#_fetch_data_finalval_1_1
   27FE E0                 9664 	movx	a,@dptr
   27FF FC                 9665 	mov	r4,a
                           9666 ;	genPlus
   2800 90s00r34           9667 	mov	dptr,#_fetch_data_finalval_1_1
                           9668 ;     genPlusIncr
   2803 74 0A              9669 	mov	a,#0x0A
                           9670 ;	Peephole 236.a	used r4 instead of ar4
   2805 2C                 9671 	add	a,r4
   2806 F0                 9672 	movx	@dptr,a
                           9673 ;	main.c:1299: break;
   2807 02s28rD4           9674 	ljmp	00215$
                           9675 ;	main.c:1300: case 'b':
   280A                    9676 00171$:
                           9677 ;	main.c:1301: if(i==0)
                           9678 ;	genIfx
   280A EA                 9679 	mov	a,r2
   280B 4B                 9680 	orl	a,r3
                           9681 ;	genIfxJump
                           9682 ;	Peephole 108.b	removed ljmp by inverse jump logic
   280C 70 0F              9683 	jnz	00175$
                           9684 ;	Peephole 300	removed redundant label 00334$
                           9685 ;	main.c:1302: finalval += (11*16);
                           9686 ;	genAssign
   280E 90s00r34           9687 	mov	dptr,#_fetch_data_finalval_1_1
   2811 E0                 9688 	movx	a,@dptr
   2812 FC                 9689 	mov	r4,a
                           9690 ;	genPlus
   2813 90s00r34           9691 	mov	dptr,#_fetch_data_finalval_1_1
                           9692 ;     genPlusIncr
   2816 74 B0              9693 	mov	a,#0xB0
                           9694 ;	Peephole 236.a	used r4 instead of ar4
   2818 2C                 9695 	add	a,r4
   2819 F0                 9696 	movx	@dptr,a
   281A 02s28rD4           9697 	ljmp	00215$
   281D                    9698 00175$:
                           9699 ;	main.c:1303: else if(i==1)
                           9700 ;	genCmpEq
                           9701 ;	gencjneshort
   281D BA 01 05           9702 	cjne	r2,#0x01,00335$
   2820 BB 00 02           9703 	cjne	r3,#0x00,00335$
   2823 80 03              9704 	sjmp	00336$
   2825                    9705 00335$:
   2825 02s28rD4           9706 	ljmp	00215$
   2828                    9707 00336$:
                           9708 ;	main.c:1304: finalval += 11;
                           9709 ;	genAssign
   2828 90s00r34           9710 	mov	dptr,#_fetch_data_finalval_1_1
   282B E0                 9711 	movx	a,@dptr
   282C FC                 9712 	mov	r4,a
                           9713 ;	genPlus
   282D 90s00r34           9714 	mov	dptr,#_fetch_data_finalval_1_1
                           9715 ;     genPlusIncr
   2830 74 0B              9716 	mov	a,#0x0B
                           9717 ;	Peephole 236.a	used r4 instead of ar4
   2832 2C                 9718 	add	a,r4
   2833 F0                 9719 	movx	@dptr,a
                           9720 ;	main.c:1305: break;
   2834 02s28rD4           9721 	ljmp	00215$
                           9722 ;	main.c:1306: case 'c':
   2837                    9723 00177$:
                           9724 ;	main.c:1307: if(i==0)
                           9725 ;	genIfx
   2837 EA                 9726 	mov	a,r2
   2838 4B                 9727 	orl	a,r3
                           9728 ;	genIfxJump
                           9729 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2839 70 0F              9730 	jnz	00181$
                           9731 ;	Peephole 300	removed redundant label 00337$
                           9732 ;	main.c:1308: finalval += (12*16);
                           9733 ;	genAssign
   283B 90s00r34           9734 	mov	dptr,#_fetch_data_finalval_1_1
   283E E0                 9735 	movx	a,@dptr
   283F FC                 9736 	mov	r4,a
                           9737 ;	genPlus
   2840 90s00r34           9738 	mov	dptr,#_fetch_data_finalval_1_1
                           9739 ;     genPlusIncr
   2843 74 C0              9740 	mov	a,#0xC0
                           9741 ;	Peephole 236.a	used r4 instead of ar4
   2845 2C                 9742 	add	a,r4
   2846 F0                 9743 	movx	@dptr,a
   2847 02s28rD4           9744 	ljmp	00215$
   284A                    9745 00181$:
                           9746 ;	main.c:1309: else if(i==1)
                           9747 ;	genCmpEq
                           9748 ;	gencjneshort
   284A BA 01 05           9749 	cjne	r2,#0x01,00338$
   284D BB 00 02           9750 	cjne	r3,#0x00,00338$
   2850 80 03              9751 	sjmp	00339$
   2852                    9752 00338$:
   2852 02s28rD4           9753 	ljmp	00215$
   2855                    9754 00339$:
                           9755 ;	main.c:1310: finalval += 12;
                           9756 ;	genAssign
   2855 90s00r34           9757 	mov	dptr,#_fetch_data_finalval_1_1
   2858 E0                 9758 	movx	a,@dptr
   2859 FC                 9759 	mov	r4,a
                           9760 ;	genPlus
   285A 90s00r34           9761 	mov	dptr,#_fetch_data_finalval_1_1
                           9762 ;     genPlusIncr
   285D 74 0C              9763 	mov	a,#0x0C
                           9764 ;	Peephole 236.a	used r4 instead of ar4
   285F 2C                 9765 	add	a,r4
   2860 F0                 9766 	movx	@dptr,a
                           9767 ;	main.c:1311: break;
   2861 02s28rD4           9768 	ljmp	00215$
                           9769 ;	main.c:1312: case 'd':
   2864                    9770 00183$:
                           9771 ;	main.c:1313: if(i==0)
                           9772 ;	genIfx
   2864 EA                 9773 	mov	a,r2
   2865 4B                 9774 	orl	a,r3
                           9775 ;	genIfxJump
                           9776 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2866 70 0E              9777 	jnz	00187$
                           9778 ;	Peephole 300	removed redundant label 00340$
                           9779 ;	main.c:1314: finalval += (13*16);
                           9780 ;	genAssign
   2868 90s00r34           9781 	mov	dptr,#_fetch_data_finalval_1_1
   286B E0                 9782 	movx	a,@dptr
   286C FC                 9783 	mov	r4,a
                           9784 ;	genPlus
   286D 90s00r34           9785 	mov	dptr,#_fetch_data_finalval_1_1
                           9786 ;     genPlusIncr
   2870 74 D0              9787 	mov	a,#0xD0
                           9788 ;	Peephole 236.a	used r4 instead of ar4
   2872 2C                 9789 	add	a,r4
   2873 F0                 9790 	movx	@dptr,a
                           9791 ;	Peephole 112.b	changed ljmp to sjmp
   2874 80 5E              9792 	sjmp	00215$
   2876                    9793 00187$:
                           9794 ;	main.c:1315: else if(i==1)
                           9795 ;	genCmpEq
                           9796 ;	gencjneshort
                           9797 ;	Peephole 112.b	changed ljmp to sjmp
                           9798 ;	Peephole 198.a	optimized misc jump sequence
   2876 BA 01 5B           9799 	cjne	r2,#0x01,00215$
   2879 BB 00 58           9800 	cjne	r3,#0x00,00215$
                           9801 ;	Peephole 200.b	removed redundant sjmp
                           9802 ;	Peephole 300	removed redundant label 00341$
                           9803 ;	Peephole 300	removed redundant label 00342$
                           9804 ;	main.c:1316: finalval += 13;
                           9805 ;	genAssign
   287C 90s00r34           9806 	mov	dptr,#_fetch_data_finalval_1_1
   287F E0                 9807 	movx	a,@dptr
   2880 FC                 9808 	mov	r4,a
                           9809 ;	genPlus
   2881 90s00r34           9810 	mov	dptr,#_fetch_data_finalval_1_1
                           9811 ;     genPlusIncr
   2884 74 0D              9812 	mov	a,#0x0D
                           9813 ;	Peephole 236.a	used r4 instead of ar4
   2886 2C                 9814 	add	a,r4
   2887 F0                 9815 	movx	@dptr,a
                           9816 ;	main.c:1317: break;
                           9817 ;	main.c:1318: case 'e':
                           9818 ;	Peephole 112.b	changed ljmp to sjmp
   2888 80 4A              9819 	sjmp	00215$
   288A                    9820 00189$:
                           9821 ;	main.c:1319: if(i==0)
                           9822 ;	genIfx
   288A EA                 9823 	mov	a,r2
   288B 4B                 9824 	orl	a,r3
                           9825 ;	genIfxJump
                           9826 ;	Peephole 108.b	removed ljmp by inverse jump logic
   288C 70 0E              9827 	jnz	00193$
                           9828 ;	Peephole 300	removed redundant label 00343$
                           9829 ;	main.c:1320: finalval += (14*16);
                           9830 ;	genAssign
   288E 90s00r34           9831 	mov	dptr,#_fetch_data_finalval_1_1
   2891 E0                 9832 	movx	a,@dptr
   2892 FC                 9833 	mov	r4,a
                           9834 ;	genPlus
   2893 90s00r34           9835 	mov	dptr,#_fetch_data_finalval_1_1
                           9836 ;     genPlusIncr
   2896 74 E0              9837 	mov	a,#0xE0
                           9838 ;	Peephole 236.a	used r4 instead of ar4
   2898 2C                 9839 	add	a,r4
   2899 F0                 9840 	movx	@dptr,a
                           9841 ;	Peephole 112.b	changed ljmp to sjmp
   289A 80 38              9842 	sjmp	00215$
   289C                    9843 00193$:
                           9844 ;	main.c:1321: else if(i==1)
                           9845 ;	genCmpEq
                           9846 ;	gencjneshort
                           9847 ;	Peephole 112.b	changed ljmp to sjmp
                           9848 ;	Peephole 198.a	optimized misc jump sequence
   289C BA 01 35           9849 	cjne	r2,#0x01,00215$
   289F BB 00 32           9850 	cjne	r3,#0x00,00215$
                           9851 ;	Peephole 200.b	removed redundant sjmp
                           9852 ;	Peephole 300	removed redundant label 00344$
                           9853 ;	Peephole 300	removed redundant label 00345$
                           9854 ;	main.c:1322: finalval += 14;
                           9855 ;	genAssign
   28A2 90s00r34           9856 	mov	dptr,#_fetch_data_finalval_1_1
   28A5 E0                 9857 	movx	a,@dptr
   28A6 FC                 9858 	mov	r4,a
                           9859 ;	genPlus
   28A7 90s00r34           9860 	mov	dptr,#_fetch_data_finalval_1_1
                           9861 ;     genPlusIncr
   28AA 74 0E              9862 	mov	a,#0x0E
                           9863 ;	Peephole 236.a	used r4 instead of ar4
   28AC 2C                 9864 	add	a,r4
   28AD F0                 9865 	movx	@dptr,a
                           9866 ;	main.c:1323: break;
                           9867 ;	main.c:1324: case 'f':
                           9868 ;	Peephole 112.b	changed ljmp to sjmp
   28AE 80 24              9869 	sjmp	00215$
   28B0                    9870 00195$:
                           9871 ;	main.c:1325: if(i==0)
                           9872 ;	genIfx
   28B0 EA                 9873 	mov	a,r2
   28B1 4B                 9874 	orl	a,r3
                           9875 ;	genIfxJump
                           9876 ;	Peephole 108.b	removed ljmp by inverse jump logic
   28B2 70 0E              9877 	jnz	00199$
                           9878 ;	Peephole 300	removed redundant label 00346$
                           9879 ;	main.c:1326: finalval += (15*16);
                           9880 ;	genAssign
   28B4 90s00r34           9881 	mov	dptr,#_fetch_data_finalval_1_1
   28B7 E0                 9882 	movx	a,@dptr
   28B8 FC                 9883 	mov	r4,a
                           9884 ;	genPlus
   28B9 90s00r34           9885 	mov	dptr,#_fetch_data_finalval_1_1
                           9886 ;     genPlusIncr
   28BC 74 F0              9887 	mov	a,#0xF0
                           9888 ;	Peephole 236.a	used r4 instead of ar4
   28BE 2C                 9889 	add	a,r4
   28BF F0                 9890 	movx	@dptr,a
                           9891 ;	Peephole 112.b	changed ljmp to sjmp
   28C0 80 12              9892 	sjmp	00215$
   28C2                    9893 00199$:
                           9894 ;	main.c:1327: else if(i==1)
                           9895 ;	genCmpEq
                           9896 ;	gencjneshort
                           9897 ;	Peephole 112.b	changed ljmp to sjmp
                           9898 ;	Peephole 198.a	optimized misc jump sequence
   28C2 BA 01 0F           9899 	cjne	r2,#0x01,00215$
   28C5 BB 00 0C           9900 	cjne	r3,#0x00,00215$
                           9901 ;	Peephole 200.b	removed redundant sjmp
                           9902 ;	Peephole 300	removed redundant label 00347$
                           9903 ;	Peephole 300	removed redundant label 00348$
                           9904 ;	main.c:1328: finalval += 15;
                           9905 ;	genAssign
   28C8 90s00r34           9906 	mov	dptr,#_fetch_data_finalval_1_1
   28CB E0                 9907 	movx	a,@dptr
   28CC FC                 9908 	mov	r4,a
                           9909 ;	genPlus
   28CD 90s00r34           9910 	mov	dptr,#_fetch_data_finalval_1_1
                           9911 ;     genPlusIncr
   28D0 74 0F              9912 	mov	a,#0x0F
                           9913 ;	Peephole 236.a	used r4 instead of ar4
   28D2 2C                 9914 	add	a,r4
   28D3 F0                 9915 	movx	@dptr,a
                           9916 ;	main.c:1330: }
   28D4                    9917 00215$:
                           9918 ;	main.c:1229: for(i=0;i<2;i++)
                           9919 ;	genPlus
                           9920 ;     genPlusIncr
   28D4 0A                 9921 	inc	r2
   28D5 BA 00 01           9922 	cjne	r2,#0x00,00349$
   28D8 0B                 9923 	inc	r3
   28D9                    9924 00349$:
   28D9 02s25rD6           9925 	ljmp	00213$
   28DC                    9926 00216$:
                           9927 ;	main.c:1335: return finalval;
                           9928 ;	genAssign
   28DC 90s00r34           9929 	mov	dptr,#_fetch_data_finalval_1_1
   28DF E0                 9930 	movx	a,@dptr
                           9931 ;	genRet
                           9932 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   28E0 F5 82              9933 	mov	dpl,a
                           9934 ;	Peephole 300	removed redundant label 00217$
   28E2 22                 9935 	ret
                           9936 ;------------------------------------------------------------
                           9937 ;Allocation info for local variables in function 'ConfIOExp'
                           9938 ;------------------------------------------------------------
                           9939 ;ioind                     Allocated with name '_ConfIOExp_PARM_2'
                           9940 ;block                     Allocated with name '_ConfIOExp_block_1_1'
                           9941 ;i                         Allocated with name '_ConfIOExp_i_1_1'
                           9942 ;temp                      Allocated with name '_ConfIOExp_temp_1_1'
                           9943 ;------------------------------------------------------------
                           9944 ;	main.c:1339: void ConfIOExp(char block,char ioind)
                           9945 ;	-----------------------------------------
                           9946 ;	 function ConfIOExp
                           9947 ;	-----------------------------------------
   28E3                    9948 _ConfIOExp:
                           9949 ;	genReceive
   28E3 E5 82              9950 	mov	a,dpl
   28E5 90s00r38           9951 	mov	dptr,#_ConfIOExp_block_1_1
   28E8 F0                 9952 	movx	@dptr,a
                           9953 ;	main.c:1343: printf_tiny("\n\rblock: %x\n\r",block);
                           9954 ;	genAssign
   28E9 90s00r38           9955 	mov	dptr,#_ConfIOExp_block_1_1
   28EC E0                 9956 	movx	a,@dptr
                           9957 ;	genCast
   28ED FA                 9958 	mov	r2,a
   28EE 8A 03              9959 	mov	ar3,r2
                           9960 ;	Peephole 166	removed redundant mov
   28F0 33                 9961 	rlc	a
   28F1 95 E0              9962 	subb	a,acc
   28F3 FC                 9963 	mov	r4,a
                           9964 ;	genIpush
   28F4 C0 02              9965 	push	ar2
   28F6 C0 03              9966 	push	ar3
   28F8 C0 04              9967 	push	ar4
                           9968 ;	genIpush
   28FA 74r3B              9969 	mov	a,#__str_95
   28FC C0 E0              9970 	push	acc
   28FE 74s0A              9971 	mov	a,#(__str_95 >> 8)
   2900 C0 E0              9972 	push	acc
                           9973 ;	genCall
   2902 12s00r00           9974 	lcall	_printf_tiny
   2905 E5 81              9975 	mov	a,sp
   2907 24 FC              9976 	add	a,#0xfc
   2909 F5 81              9977 	mov	sp,a
   290B D0 02              9978 	pop	ar2
                           9979 ;	main.c:1344: printf_tiny("\n\ioind: %x\n\r",ioind);
                           9980 ;	genAssign
   290D 90s00r37           9981 	mov	dptr,#_ConfIOExp_PARM_2
   2910 E0                 9982 	movx	a,@dptr
                           9983 ;	genCast
   2911 FB                 9984 	mov	r3,a
   2912 8B 04              9985 	mov	ar4,r3
                           9986 ;	Peephole 166	removed redundant mov
   2914 33                 9987 	rlc	a
   2915 95 E0              9988 	subb	a,acc
   2917 FD                 9989 	mov	r5,a
                           9990 ;	genIpush
   2918 C0 02              9991 	push	ar2
   291A C0 03              9992 	push	ar3
   291C C0 04              9993 	push	ar4
   291E C0 05              9994 	push	ar5
                           9995 ;	genIpush
   2920 74r49              9996 	mov	a,#__str_96
   2922 C0 E0              9997 	push	acc
   2924 74s0A              9998 	mov	a,#(__str_96 >> 8)
   2926 C0 E0              9999 	push	acc
                          10000 ;	genCall
   2928 12s00r00          10001 	lcall	_printf_tiny
   292B E5 81             10002 	mov	a,sp
   292D 24 FC             10003 	add	a,#0xfc
   292F F5 81             10004 	mov	sp,a
   2931 D0 03             10005 	pop	ar3
   2933 D0 02             10006 	pop	ar2
                          10007 ;	main.c:1345: printf_tiny("\n\rConfIOExp\n\r");
                          10008 ;	genIpush
   2935 C0 02             10009 	push	ar2
   2937 C0 03             10010 	push	ar3
   2939 74r56             10011 	mov	a,#__str_97
   293B C0 E0             10012 	push	acc
   293D 74s0A             10013 	mov	a,#(__str_97 >> 8)
   293F C0 E0             10014 	push	acc
                          10015 ;	genCall
   2941 12s00r00          10016 	lcall	_printf_tiny
   2944 15 81             10017 	dec	sp
   2946 15 81             10018 	dec	sp
   2948 D0 03             10019 	pop	ar3
   294A D0 02             10020 	pop	ar2
                          10021 ;	main.c:1346: I2CStart();
                          10022 ;	genCall
   294C C0 02             10023 	push	ar2
   294E C0 03             10024 	push	ar3
   2950 12s19rC7          10025 	lcall	_I2CStart
   2953 D0 03             10026 	pop	ar3
   2955 D0 02             10027 	pop	ar2
                          10028 ;	main.c:1349: block <<= 1;
                          10029 ;	genLeftShift
                          10030 ;	genLeftShiftLiteral
                          10031 ;	genlshOne
   2957 EA                10032 	mov	a,r2
                          10033 ;	Peephole 254	optimized left shift
   2958 2A                10034 	add	a,r2
                          10035 ;	genAssign
   2959 FA                10036 	mov	r2,a
   295A 90s00r38          10037 	mov	dptr,#_ConfIOExp_block_1_1
                          10038 ;	Peephole 100	removed redundant mov
   295D F0                10039 	movx	@dptr,a
                          10040 ;	main.c:1350: temp |= (block & 0xFF);
                          10041 ;	genAssign
   295E 90s00r38          10042 	mov	dptr,#_ConfIOExp_block_1_1
   2961 E0                10043 	movx	a,@dptr
   2962 FA                10044 	mov	r2,a
                          10045 ;	genOr
   2963 90s00r39          10046 	mov	dptr,#_ConfIOExp_temp_1_1
   2966 74 40             10047 	mov	a,#0x40
   2968 4A                10048 	orl	a,r2
   2969 F0                10049 	movx	@dptr,a
                          10050 ;	main.c:1353: for(i=0;i<8;i++)
                          10051 ;	genAssign
   296A 7A 00             10052 	mov	r2,#0x00
   296C 7C 00             10053 	mov	r4,#0x00
   296E                   10054 00101$:
                          10055 ;	genCmpLt
                          10056 ;	genCmp
   296E C3                10057 	clr	c
   296F EA                10058 	mov	a,r2
   2970 94 08             10059 	subb	a,#0x08
   2972 EC                10060 	mov	a,r4
   2973 64 80             10061 	xrl	a,#0x80
   2975 94 80             10062 	subb	a,#0x80
                          10063 ;	genIfxJump
                          10064 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2977 50 42             10065 	jnc	00104$
                          10066 ;	Peephole 300	removed redundant label 00117$
                          10067 ;	main.c:1355: SDA = temp & 0x80;
                          10068 ;	genAssign
   2979 90s00r39          10069 	mov	dptr,#_ConfIOExp_temp_1_1
   297C E0                10070 	movx	a,@dptr
                          10071 ;	genGetHbit
   297D FD                10072 	mov	r5,a
                          10073 ;	Peephole 105	removed redundant mov
   297E 33                10074 	rlc	a
   297F 92 92             10075 	mov	_P1_2,c
                          10076 ;	main.c:1356: delay(1);
                          10077 ;	genCall
                          10078 ;	Peephole 182.b	used 16 bit load of dptr
   2981 90 00 01          10079 	mov	dptr,#0x0001
   2984 C0 02             10080 	push	ar2
   2986 C0 03             10081 	push	ar3
   2988 C0 04             10082 	push	ar4
   298A C0 05             10083 	push	ar5
   298C 12s00r00          10084 	lcall	_delay
   298F D0 05             10085 	pop	ar5
   2991 D0 04             10086 	pop	ar4
   2993 D0 03             10087 	pop	ar3
   2995 D0 02             10088 	pop	ar2
                          10089 ;	main.c:1357: SCL = 1;
                          10090 ;	genAssign
   2997 D2 91             10091 	setb	_P1_1
                          10092 ;	main.c:1358: temp = temp << 1;
                          10093 ;	genLeftShift
                          10094 ;	genLeftShiftLiteral
                          10095 ;	genlshOne
   2999 ED                10096 	mov	a,r5
                          10097 ;	Peephole 254	optimized left shift
   299A 2D                10098 	add	a,r5
                          10099 ;	genAssign
   299B FD                10100 	mov	r5,a
   299C 90s00r39          10101 	mov	dptr,#_ConfIOExp_temp_1_1
                          10102 ;	Peephole 100	removed redundant mov
   299F F0                10103 	movx	@dptr,a
                          10104 ;	main.c:1359: delay(1);
                          10105 ;	genCall
                          10106 ;	Peephole 182.b	used 16 bit load of dptr
   29A0 90 00 01          10107 	mov	dptr,#0x0001
   29A3 C0 02             10108 	push	ar2
   29A5 C0 03             10109 	push	ar3
   29A7 C0 04             10110 	push	ar4
   29A9 12s00r00          10111 	lcall	_delay
   29AC D0 04             10112 	pop	ar4
   29AE D0 03             10113 	pop	ar3
   29B0 D0 02             10114 	pop	ar2
                          10115 ;	main.c:1360: SCL = 0;
                          10116 ;	genAssign
   29B2 C2 91             10117 	clr	_P1_1
                          10118 ;	main.c:1353: for(i=0;i<8;i++)
                          10119 ;	genPlus
                          10120 ;     genPlusIncr
   29B4 0A                10121 	inc	r2
                          10122 ;	Peephole 112.b	changed ljmp to sjmp
                          10123 ;	Peephole 243	avoided branch to sjmp
   29B5 BA 00 B6          10124 	cjne	r2,#0x00,00101$
   29B8 0C                10125 	inc	r4
                          10126 ;	Peephole 300	removed redundant label 00118$
   29B9 80 B3             10127 	sjmp	00101$
   29BB                   10128 00104$:
                          10129 ;	main.c:1365: ack();
                          10130 ;	genCall
   29BB C0 03             10131 	push	ar3
   29BD 12s1DrD5          10132 	lcall	_ack
   29C0 D0 03             10133 	pop	ar3
                          10134 ;	main.c:1366: block >>= 1;
                          10135 ;	genAssign
   29C2 90s00r38          10136 	mov	dptr,#_ConfIOExp_block_1_1
   29C5 E0                10137 	movx	a,@dptr
                          10138 ;	genRightShift
                          10139 ;	genSignedRightShift
                          10140 ;	genRightShiftLiteral
                          10141 ;	genrshOne
   29C6 FA                10142 	mov	r2,a
                          10143 ;	Peephole 105	removed redundant mov
   29C7 A2 E7             10144 	mov	c,acc.7
   29C9 13                10145 	rrc	a
                          10146 ;	genAssign
   29CA FA                10147 	mov	r2,a
   29CB 90s00r38          10148 	mov	dptr,#_ConfIOExp_block_1_1
                          10149 ;	Peephole 100	removed redundant mov
   29CE F0                10150 	movx	@dptr,a
                          10151 ;	main.c:1367: ioind <<= block;
                          10152 ;	genAssign
   29CF 90s00r38          10153 	mov	dptr,#_ConfIOExp_block_1_1
   29D2 E0                10154 	movx	a,@dptr
   29D3 FA                10155 	mov	r2,a
                          10156 ;	genLeftShift
   29D4 8A F0             10157 	mov	b,r2
   29D6 05 F0             10158 	inc	b
   29D8 EB                10159 	mov	a,r3
   29D9 80 02             10160 	sjmp	00121$
   29DB                   10161 00119$:
   29DB 25 E0             10162 	add	a,acc
   29DD                   10163 00121$:
   29DD D5 F0 FB          10164 	djnz	b,00119$
                          10165 ;	genAssign
   29E0 90s00r37          10166 	mov	dptr,#_ConfIOExp_PARM_2
   29E3 F0                10167 	movx	@dptr,a
                          10168 ;	main.c:1370: for(i=0;i<8;i++)
                          10169 ;	genAssign
   29E4 7A 00             10170 	mov	r2,#0x00
   29E6 7B 00             10171 	mov	r3,#0x00
   29E8                   10172 00105$:
                          10173 ;	genCmpLt
                          10174 ;	genCmp
   29E8 C3                10175 	clr	c
   29E9 EA                10176 	mov	a,r2
   29EA 94 08             10177 	subb	a,#0x08
   29EC EB                10178 	mov	a,r3
   29ED 64 80             10179 	xrl	a,#0x80
   29EF 94 80             10180 	subb	a,#0x80
                          10181 ;	genIfxJump
                          10182 ;	Peephole 108.a	removed ljmp by inverse jump logic
   29F1 50 48             10183 	jnc	00108$
                          10184 ;	Peephole 300	removed redundant label 00122$
                          10185 ;	main.c:1372: SDA = ioind & 0x80;
                          10186 ;	genAssign
   29F3 90s00r37          10187 	mov	dptr,#_ConfIOExp_PARM_2
   29F6 E0                10188 	movx	a,@dptr
                          10189 ;	genGetHbit
   29F7 FC                10190 	mov	r4,a
                          10191 ;	Peephole 105	removed redundant mov
   29F8 33                10192 	rlc	a
   29F9 92 92             10193 	mov	_P1_2,c
                          10194 ;	main.c:1373: delay(1);
                          10195 ;	genCall
                          10196 ;	Peephole 182.b	used 16 bit load of dptr
   29FB 90 00 01          10197 	mov	dptr,#0x0001
   29FE C0 02             10198 	push	ar2
   2A00 C0 03             10199 	push	ar3
   2A02 C0 04             10200 	push	ar4
   2A04 12s00r00          10201 	lcall	_delay
   2A07 D0 04             10202 	pop	ar4
   2A09 D0 03             10203 	pop	ar3
   2A0B D0 02             10204 	pop	ar2
                          10205 ;	main.c:1374: SCL = 1;
                          10206 ;	genAssign
   2A0D D2 91             10207 	setb	_P1_1
                          10208 ;	main.c:1375: ioind <<= 1;
                          10209 ;	genLeftShift
                          10210 ;	genLeftShiftLiteral
                          10211 ;	genlshOne
   2A0F EC                10212 	mov	a,r4
                          10213 ;	Peephole 254	optimized left shift
   2A10 2C                10214 	add	a,r4
                          10215 ;	genAssign
   2A11 FC                10216 	mov	r4,a
   2A12 90s00r37          10217 	mov	dptr,#_ConfIOExp_PARM_2
                          10218 ;	Peephole 100	removed redundant mov
   2A15 F0                10219 	movx	@dptr,a
                          10220 ;	main.c:1376: delay(1);
                          10221 ;	genCall
                          10222 ;	Peephole 182.b	used 16 bit load of dptr
   2A16 90 00 01          10223 	mov	dptr,#0x0001
   2A19 C0 02             10224 	push	ar2
   2A1B C0 03             10225 	push	ar3
   2A1D 12s00r00          10226 	lcall	_delay
   2A20 D0 03             10227 	pop	ar3
   2A22 D0 02             10228 	pop	ar2
                          10229 ;	main.c:1377: SCL = 0;
                          10230 ;	genAssign
   2A24 C2 91             10231 	clr	_P1_1
                          10232 ;	main.c:1378: delay(1);
                          10233 ;	genCall
                          10234 ;	Peephole 182.b	used 16 bit load of dptr
   2A26 90 00 01          10235 	mov	dptr,#0x0001
   2A29 C0 02             10236 	push	ar2
   2A2B C0 03             10237 	push	ar3
   2A2D 12s00r00          10238 	lcall	_delay
   2A30 D0 03             10239 	pop	ar3
   2A32 D0 02             10240 	pop	ar2
                          10241 ;	main.c:1370: for(i=0;i<8;i++)
                          10242 ;	genPlus
                          10243 ;     genPlusIncr
   2A34 0A                10244 	inc	r2
                          10245 ;	Peephole 112.b	changed ljmp to sjmp
                          10246 ;	Peephole 243	avoided branch to sjmp
   2A35 BA 00 B0          10247 	cjne	r2,#0x00,00105$
   2A38 0B                10248 	inc	r3
                          10249 ;	Peephole 300	removed redundant label 00123$
   2A39 80 AD             10250 	sjmp	00105$
   2A3B                   10251 00108$:
                          10252 ;	main.c:1382: ack();
                          10253 ;	genCall
   2A3B 12s1DrD5          10254 	lcall	_ack
                          10255 ;	main.c:1384: SCL=1;
                          10256 ;	genAssign
   2A3E D2 91             10257 	setb	_P1_1
                          10258 ;	main.c:1385: delay(1);
                          10259 ;	genCall
                          10260 ;	Peephole 182.b	used 16 bit load of dptr
   2A40 90 00 01          10261 	mov	dptr,#0x0001
   2A43 12s00r00          10262 	lcall	_delay
                          10263 ;	main.c:1386: SCL=0;
                          10264 ;	genAssign
   2A46 C2 91             10265 	clr	_P1_1
                          10266 ;	main.c:1388: I2CStop();
                          10267 ;	genCall
                          10268 ;	Peephole 253.b	replaced lcall/ret with ljmp
   2A48 02s19rE7          10269 	ljmp	_I2CStop
                          10270 ;
                          10271 ;------------------------------------------------------------
                          10272 ;Allocation info for local variables in function 'IOByteRead'
                          10273 ;------------------------------------------------------------
                          10274 ;temp                      Allocated with name '_IOByteRead_temp_1_1'
                          10275 ;databyte                  Allocated with name '_IOByteRead_databyte_1_1'
                          10276 ;i                         Allocated with name '_IOByteRead_i_1_1'
                          10277 ;------------------------------------------------------------
                          10278 ;	main.c:1392: char IOByteRead()
                          10279 ;	-----------------------------------------
                          10280 ;	 function IOByteRead
                          10281 ;	-----------------------------------------
   2A4B                   10282 _IOByteRead:
                          10283 ;	main.c:1394: char temp,databyte=0x00;
                          10284 ;	genAssign
   2A4B 90s00r3B          10285 	mov	dptr,#_IOByteRead_databyte_1_1
                          10286 ;	Peephole 181	changed mov to clr
   2A4E E4                10287 	clr	a
   2A4F F0                10288 	movx	@dptr,a
                          10289 ;	main.c:1396: I2CStart();
                          10290 ;	genCall
   2A50 12s19rC7          10291 	lcall	_I2CStart
                          10292 ;	main.c:1398: temp = 0x41;
                          10293 ;	genAssign
   2A53 90s00r3A          10294 	mov	dptr,#_IOByteRead_temp_1_1
   2A56 74 41             10295 	mov	a,#0x41
   2A58 F0                10296 	movx	@dptr,a
                          10297 ;	main.c:1401: for(i=0;i<8;i++)
                          10298 ;	genAssign
   2A59 7A 00             10299 	mov	r2,#0x00
   2A5B 7B 00             10300 	mov	r3,#0x00
   2A5D                   10301 00101$:
                          10302 ;	genCmpLt
                          10303 ;	genCmp
   2A5D C3                10304 	clr	c
   2A5E EA                10305 	mov	a,r2
   2A5F 94 08             10306 	subb	a,#0x08
   2A61 EB                10307 	mov	a,r3
   2A62 64 80             10308 	xrl	a,#0x80
   2A64 94 80             10309 	subb	a,#0x80
                          10310 ;	genIfxJump
                          10311 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2A66 50 3A             10312 	jnc	00104$
                          10313 ;	Peephole 300	removed redundant label 00117$
                          10314 ;	main.c:1403: SDA = temp & 0x80;
                          10315 ;	genAssign
   2A68 90s00r3A          10316 	mov	dptr,#_IOByteRead_temp_1_1
   2A6B E0                10317 	movx	a,@dptr
                          10318 ;	genGetHbit
   2A6C FC                10319 	mov	r4,a
                          10320 ;	Peephole 105	removed redundant mov
   2A6D 33                10321 	rlc	a
   2A6E 92 92             10322 	mov	_P1_2,c
                          10323 ;	main.c:1404: delay(1);
                          10324 ;	genCall
                          10325 ;	Peephole 182.b	used 16 bit load of dptr
   2A70 90 00 01          10326 	mov	dptr,#0x0001
   2A73 C0 02             10327 	push	ar2
   2A75 C0 03             10328 	push	ar3
   2A77 C0 04             10329 	push	ar4
   2A79 12s00r00          10330 	lcall	_delay
   2A7C D0 04             10331 	pop	ar4
   2A7E D0 03             10332 	pop	ar3
   2A80 D0 02             10333 	pop	ar2
                          10334 ;	main.c:1405: SCL = 1;
                          10335 ;	genAssign
   2A82 D2 91             10336 	setb	_P1_1
                          10337 ;	main.c:1406: temp = temp << 1;
                          10338 ;	genLeftShift
                          10339 ;	genLeftShiftLiteral
                          10340 ;	genlshOne
   2A84 EC                10341 	mov	a,r4
                          10342 ;	Peephole 254	optimized left shift
   2A85 2C                10343 	add	a,r4
                          10344 ;	genAssign
   2A86 FC                10345 	mov	r4,a
   2A87 90s00r3A          10346 	mov	dptr,#_IOByteRead_temp_1_1
                          10347 ;	Peephole 100	removed redundant mov
   2A8A F0                10348 	movx	@dptr,a
                          10349 ;	main.c:1407: delay(1);
                          10350 ;	genCall
                          10351 ;	Peephole 182.b	used 16 bit load of dptr
   2A8B 90 00 01          10352 	mov	dptr,#0x0001
   2A8E C0 02             10353 	push	ar2
   2A90 C0 03             10354 	push	ar3
   2A92 12s00r00          10355 	lcall	_delay
   2A95 D0 03             10356 	pop	ar3
   2A97 D0 02             10357 	pop	ar2
                          10358 ;	main.c:1408: SCL = 0;
                          10359 ;	genAssign
   2A99 C2 91             10360 	clr	_P1_1
                          10361 ;	main.c:1401: for(i=0;i<8;i++)
                          10362 ;	genPlus
                          10363 ;     genPlusIncr
   2A9B 0A                10364 	inc	r2
                          10365 ;	Peephole 112.b	changed ljmp to sjmp
                          10366 ;	Peephole 243	avoided branch to sjmp
   2A9C BA 00 BE          10367 	cjne	r2,#0x00,00101$
   2A9F 0B                10368 	inc	r3
                          10369 ;	Peephole 300	removed redundant label 00118$
   2AA0 80 BB             10370 	sjmp	00101$
   2AA2                   10371 00104$:
                          10372 ;	main.c:1412: ack();
                          10373 ;	genCall
   2AA2 12s1DrD5          10374 	lcall	_ack
                          10375 ;	main.c:1414: delay(1);
                          10376 ;	genCall
                          10377 ;	Peephole 182.b	used 16 bit load of dptr
   2AA5 90 00 01          10378 	mov	dptr,#0x0001
   2AA8 12s00r00          10379 	lcall	_delay
                          10380 ;	main.c:1415: SDA = 1;
                          10381 ;	genAssign
   2AAB D2 92             10382 	setb	_P1_2
                          10383 ;	main.c:1418: for(i=7;i>=0;i--)
                          10384 ;	genAssign
   2AAD 7A 07             10385 	mov	r2,#0x07
   2AAF 7B 00             10386 	mov	r3,#0x00
   2AB1                   10387 00105$:
                          10388 ;	genCmpLt
                          10389 ;	genCmp
   2AB1 EB                10390 	mov	a,r3
                          10391 ;	genIfxJump
                          10392 ;	Peephole 108.e	removed ljmp by inverse jump logic
   2AB2 20 E7 52          10393 	jb	acc.7,00108$
                          10394 ;	Peephole 300	removed redundant label 00119$
                          10395 ;	main.c:1420: SCL = 1;
                          10396 ;	genAssign
   2AB5 D2 91             10397 	setb	_P1_1
                          10398 ;	main.c:1421: delay(1);
                          10399 ;	genCall
                          10400 ;	Peephole 182.b	used 16 bit load of dptr
   2AB7 90 00 01          10401 	mov	dptr,#0x0001
   2ABA C0 02             10402 	push	ar2
   2ABC C0 03             10403 	push	ar3
   2ABE 12s00r00          10404 	lcall	_delay
   2AC1 D0 03             10405 	pop	ar3
   2AC3 D0 02             10406 	pop	ar2
                          10407 ;	main.c:1422: databyte |= (SDA << i);
                          10408 ;	genAssign
   2AC5 E4                10409 	clr	a
   2AC6 A2 92             10410 	mov	c,_P1_2
   2AC8 33                10411 	rlc	a
   2AC9 FC                10412 	mov	r4,a
                          10413 ;	genLeftShift
   2ACA 8A F0             10414 	mov	b,r2
   2ACC 05 F0             10415 	inc	b
   2ACE 7D 00             10416 	mov	r5,#0x00
   2AD0 80 06             10417 	sjmp	00121$
   2AD2                   10418 00120$:
   2AD2 EC                10419 	mov	a,r4
                          10420 ;	Peephole 254	optimized left shift
   2AD3 2C                10421 	add	a,r4
   2AD4 FC                10422 	mov	r4,a
   2AD5 ED                10423 	mov	a,r5
   2AD6 33                10424 	rlc	a
   2AD7 FD                10425 	mov	r5,a
   2AD8                   10426 00121$:
   2AD8 D5 F0 F7          10427 	djnz	b,00120$
                          10428 ;	genAssign
                          10429 ;	genCast
                          10430 ;	genOr
   2ADB 90s00r3B          10431 	mov	dptr,#_IOByteRead_databyte_1_1
   2ADE E0                10432 	movx	a,@dptr
   2ADF FE                10433 	mov	r6,a
                          10434 ;	Peephole 248.a	optimized or to xdata
   2AE0 4C                10435 	orl	a,r4
   2AE1 F0                10436 	movx	@dptr,a
                          10437 ;	main.c:1423: delay(1);
                          10438 ;	genCall
                          10439 ;	Peephole 182.b	used 16 bit load of dptr
   2AE2 90 00 01          10440 	mov	dptr,#0x0001
   2AE5 C0 02             10441 	push	ar2
   2AE7 C0 03             10442 	push	ar3
   2AE9 12s00r00          10443 	lcall	_delay
   2AEC D0 03             10444 	pop	ar3
   2AEE D0 02             10445 	pop	ar2
                          10446 ;	main.c:1424: SCL = 0;
                          10447 ;	genAssign
   2AF0 C2 91             10448 	clr	_P1_1
                          10449 ;	main.c:1425: delay(1);
                          10450 ;	genCall
                          10451 ;	Peephole 182.b	used 16 bit load of dptr
   2AF2 90 00 01          10452 	mov	dptr,#0x0001
   2AF5 C0 02             10453 	push	ar2
   2AF7 C0 03             10454 	push	ar3
   2AF9 12s00r00          10455 	lcall	_delay
   2AFC D0 03             10456 	pop	ar3
   2AFE D0 02             10457 	pop	ar2
                          10458 ;	main.c:1418: for(i=7;i>=0;i--)
                          10459 ;	genMinus
                          10460 ;	genMinusDec
   2B00 1A                10461 	dec	r2
   2B01 BA FF 01          10462 	cjne	r2,#0xff,00122$
   2B04 1B                10463 	dec	r3
   2B05                   10464 00122$:
                          10465 ;	Peephole 112.b	changed ljmp to sjmp
   2B05 80 AA             10466 	sjmp	00105$
   2B07                   10467 00108$:
                          10468 ;	main.c:1428: SCL=1;
                          10469 ;	genAssign
   2B07 D2 91             10470 	setb	_P1_1
                          10471 ;	main.c:1429: delay(1);
                          10472 ;	genCall
                          10473 ;	Peephole 182.b	used 16 bit load of dptr
   2B09 90 00 01          10474 	mov	dptr,#0x0001
   2B0C 12s00r00          10475 	lcall	_delay
                          10476 ;	main.c:1430: SCL=0;
                          10477 ;	genAssign
   2B0F C2 91             10478 	clr	_P1_1
                          10479 ;	main.c:1432: I2CStop();
                          10480 ;	genCall
   2B11 12s19rE7          10481 	lcall	_I2CStop
                          10482 ;	main.c:1434: return databyte;
                          10483 ;	genAssign
   2B14 90s00r3B          10484 	mov	dptr,#_IOByteRead_databyte_1_1
   2B17 E0                10485 	movx	a,@dptr
                          10486 ;	genRet
                          10487 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   2B18 F5 82             10488 	mov	dpl,a
                          10489 ;	Peephole 300	removed redundant label 00109$
   2B1A 22                10490 	ret
                          10491 ;------------------------------------------------------------
                          10492 ;Allocation info for local variables in function 'checkIOByteRead'
                          10493 ;------------------------------------------------------------
                          10494 ;port                      Allocated with name '_checkIOByteRead_port_1_1'
                          10495 ;i                         Allocated with name '_checkIOByteRead_i_1_1'
                          10496 ;temp                      Allocated with name '_checkIOByteRead_temp_1_1'
                          10497 ;------------------------------------------------------------
                          10498 ;	main.c:1438: void checkIOByteRead(char port)
                          10499 ;	-----------------------------------------
                          10500 ;	 function checkIOByteRead
                          10501 ;	-----------------------------------------
   2B1B                   10502 _checkIOByteRead:
                          10503 ;	genReceive
   2B1B E5 82             10504 	mov	a,dpl
   2B1D 90s00r3C          10505 	mov	dptr,#_checkIOByteRead_port_1_1
   2B20 F0                10506 	movx	@dptr,a
                          10507 ;	main.c:1442: temp = port;
                          10508 ;	genAssign
   2B21 90s00r3C          10509 	mov	dptr,#_checkIOByteRead_port_1_1
   2B24 E0                10510 	movx	a,@dptr
                          10511 ;	genCast
   2B25 FA                10512 	mov	r2,a
   2B26 90s00r3D          10513 	mov	dptr,#_checkIOByteRead_temp_1_1
                          10514 ;	Peephole 100	removed redundant mov
   2B29 F0                10515 	movx	@dptr,a
   2B2A EA                10516 	mov	a,r2
   2B2B 33                10517 	rlc	a
   2B2C 95 E0             10518 	subb	a,acc
   2B2E A3                10519 	inc	dptr
   2B2F F0                10520 	movx	@dptr,a
                          10521 ;	main.c:1444: for(i=0;i<8;i++)
                          10522 ;	genAssign
   2B30 7A 00             10523 	mov	r2,#0x00
   2B32 7B 00             10524 	mov	r3,#0x00
   2B34                   10525 00105$:
                          10526 ;	genCmpLt
                          10527 ;	genCmp
   2B34 C3                10528 	clr	c
   2B35 EA                10529 	mov	a,r2
   2B36 94 08             10530 	subb	a,#0x08
   2B38 EB                10531 	mov	a,r3
   2B39 64 80             10532 	xrl	a,#0x80
   2B3B 94 80             10533 	subb	a,#0x80
                          10534 ;	genIfxJump
                          10535 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2B3D 50 4E             10536 	jnc	00108$
                          10537 ;	Peephole 300	removed redundant label 00116$
                          10538 ;	main.c:1446: if((temp & 0x01)==1)
                          10539 ;	genAssign
   2B3F 90s00r3D          10540 	mov	dptr,#_checkIOByteRead_temp_1_1
   2B42 E0                10541 	movx	a,@dptr
   2B43 FC                10542 	mov	r4,a
   2B44 A3                10543 	inc	dptr
   2B45 E0                10544 	movx	a,@dptr
   2B46 FD                10545 	mov	r5,a
                          10546 ;	genAnd
   2B47 53 04 01          10547 	anl	ar4,#0x01
   2B4A 7D 00             10548 	mov	r5,#0x00
                          10549 ;	genCmpEq
                          10550 ;	gencjneshort
                          10551 ;	Peephole 112.b	changed ljmp to sjmp
                          10552 ;	Peephole 198.a	optimized misc jump sequence
   2B4C BC 01 20          10553 	cjne	r4,#0x01,00102$
   2B4F BD 00 1D          10554 	cjne	r5,#0x00,00102$
                          10555 ;	Peephole 200.b	removed redundant sjmp
                          10556 ;	Peephole 300	removed redundant label 00117$
                          10557 ;	Peephole 300	removed redundant label 00118$
                          10558 ;	main.c:1447: printf_tiny("\n\rInterrupt on Port %x\n\r",i);
                          10559 ;	genIpush
   2B52 C0 02             10560 	push	ar2
   2B54 C0 03             10561 	push	ar3
   2B56 C0 02             10562 	push	ar2
   2B58 C0 03             10563 	push	ar3
                          10564 ;	genIpush
   2B5A 74r64             10565 	mov	a,#__str_98
   2B5C C0 E0             10566 	push	acc
   2B5E 74s0A             10567 	mov	a,#(__str_98 >> 8)
   2B60 C0 E0             10568 	push	acc
                          10569 ;	genCall
   2B62 12s00r00          10570 	lcall	_printf_tiny
   2B65 E5 81             10571 	mov	a,sp
   2B67 24 FC             10572 	add	a,#0xfc
   2B69 F5 81             10573 	mov	sp,a
   2B6B D0 03             10574 	pop	ar3
   2B6D D0 02             10575 	pop	ar2
   2B6F                   10576 00102$:
                          10577 ;	main.c:1448: temp >>= 1;
                          10578 ;	genAssign
   2B6F 90s00r3D          10579 	mov	dptr,#_checkIOByteRead_temp_1_1
   2B72 E0                10580 	movx	a,@dptr
   2B73 FC                10581 	mov	r4,a
   2B74 A3                10582 	inc	dptr
   2B75 E0                10583 	movx	a,@dptr
                          10584 ;	genRightShift
                          10585 ;	genSignedRightShift
                          10586 ;	genRightShiftLiteral
                          10587 ;	genrshTwo
   2B76 FD                10588 	mov	r5,a
                          10589 ;	Peephole 105	removed redundant mov
   2B77 A2 E7             10590 	mov	c,acc.7
   2B79 13                10591 	rrc	a
   2B7A CC                10592 	xch	a,r4
   2B7B 13                10593 	rrc	a
   2B7C CC                10594 	xch	a,r4
   2B7D FD                10595 	mov	r5,a
                          10596 ;	genAssign
   2B7E 90s00r3D          10597 	mov	dptr,#_checkIOByteRead_temp_1_1
   2B81 EC                10598 	mov	a,r4
   2B82 F0                10599 	movx	@dptr,a
   2B83 A3                10600 	inc	dptr
   2B84 ED                10601 	mov	a,r5
   2B85 F0                10602 	movx	@dptr,a
                          10603 ;	main.c:1444: for(i=0;i<8;i++)
                          10604 ;	genPlus
                          10605 ;     genPlusIncr
   2B86 0A                10606 	inc	r2
                          10607 ;	Peephole 112.b	changed ljmp to sjmp
                          10608 ;	Peephole 243	avoided branch to sjmp
   2B87 BA 00 AA          10609 	cjne	r2,#0x00,00105$
   2B8A 0B                10610 	inc	r3
                          10611 ;	Peephole 300	removed redundant label 00119$
   2B8B 80 A7             10612 	sjmp	00105$
   2B8D                   10613 00108$:
                          10614 ;	main.c:1450: if(stopcount>1)
                          10615 ;	genAssign
   2B8D 90s00r00          10616 	mov	dptr,#_stopcount
   2B90 E0                10617 	movx	a,@dptr
   2B91 FA                10618 	mov	r2,a
   2B92 A3                10619 	inc	dptr
   2B93 E0                10620 	movx	a,@dptr
   2B94 FB                10621 	mov	r3,a
                          10622 ;	genCmpGt
                          10623 ;	genCmp
   2B95 C3                10624 	clr	c
   2B96 74 01             10625 	mov	a,#0x01
   2B98 9A                10626 	subb	a,r2
                          10627 ;	Peephole 159	avoided xrl during execution
   2B99 74 80             10628 	mov	a,#(0x00 ^ 0x80)
   2B9B 8B F0             10629 	mov	b,r3
   2B9D 63 F0 80          10630 	xrl	b,#0x80
   2BA0 95 F0             10631 	subb	a,b
                          10632 ;	genIfxJump
                          10633 ;	Peephole 108.a	removed ljmp by inverse jump logic
   2BA2 50 0C             10634 	jnc	00109$
                          10635 ;	Peephole 300	removed redundant label 00120$
                          10636 ;	main.c:1451: stoptimerlapdisplay((stopcount-2),0);
                          10637 ;	genCast
                          10638 ;	genMinus
                          10639 ;	genMinusDec
   2BA4 1A                10640 	dec	r2
   2BA5 1A                10641 	dec	r2
                          10642 ;	genAssign
   2BA6 90s00r00          10643 	mov	dptr,#_stoptimerlapdisplay_PARM_2
                          10644 ;	Peephole 181	changed mov to clr
   2BA9 E4                10645 	clr	a
   2BAA F0                10646 	movx	@dptr,a
                          10647 ;	genCall
   2BAB 8A 82             10648 	mov	dpl,r2
                          10649 ;	Peephole 253.c	replaced lcall with ljmp
   2BAD 02s00r00          10650 	ljmp	_stoptimerlapdisplay
   2BB0                   10651 00109$:
   2BB0 22                10652 	ret
                          10653 	.area CSEG    (CODE)
                          10654 	.area CONST   (CODE)
   0000                   10655 __str_0:
   0000 0A                10656 	.db 0x0A
   0001 0D                10657 	.db 0x0D
   0002 2D 2D 2D 2D 2D 2D 10658 	.ascii "-----------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   0037 0A                10659 	.db 0x0A
   0038 0D                10660 	.db 0x0D
   0039 00                10661 	.db 0x00
   003A                   10662 __str_1:
   003A 55 73 65 72 20 4D 10663 	.ascii "User Menu for I2C and LCD Display"
        65 6E 75 20 66 6F
        72 20 49 32 43 20
        61 6E 64 20 4C 43
        44 20 44 69 73 70
        6C 61 79
   005B 0A                10664 	.db 0x0A
   005C 0D                10665 	.db 0x0D
   005D 00                10666 	.db 0x00
   005E                   10667 __str_2:
   005E 0A                10668 	.db 0x0A
   005F 0D                10669 	.db 0x0D
   0060 53 65 6C 65 63 74 10670 	.ascii "Select an option from the below menu:"
        20 61 6E 20 6F 70
        74 69 6F 6E 20 66
        72 6F 6D 20 74 68
        65 20 62 65 6C 6F
        77 20 6D 65 6E 75
        3A
   0085 0A                10671 	.db 0x0A
   0086 0D                10672 	.db 0x0D
   0087 00                10673 	.db 0x00
   0088                   10674 __str_3:
   0088 0A                10675 	.db 0x0A
   0089 0D                10676 	.db 0x0D
   008A 31 3A 20 57 72 69 10677 	.ascii "1: Write byte"
        74 65 20 62 79 74
        65
   0097 0A                10678 	.db 0x0A
   0098 0D                10679 	.db 0x0D
   0099 00                10680 	.db 0x00
   009A                   10681 __str_4:
   009A 0A                10682 	.db 0x0A
   009B 0D                10683 	.db 0x0D
   009C 32 3A 20 52 65 61 10684 	.ascii "2: Read memory byte"
        64 20 6D 65 6D 6F
        72 79 20 62 79 74
        65
   00AF 0A                10685 	.db 0x0A
   00B0 0D                10686 	.db 0x0D
   00B1 00                10687 	.db 0x00
   00B2                   10688 __str_5:
   00B2 0A                10689 	.db 0x0A
   00B3 0D                10690 	.db 0x0D
   00B4 33 3A 20 4C 43 44 10691 	.ascii "3: LCD Display"
        20 44 69 73 70 6C
        61 79
   00C2 0A                10692 	.db 0x0A
   00C3 0D                10693 	.db 0x0D
   00C4 00                10694 	.db 0x00
   00C5                   10695 __str_6:
   00C5 0A                10696 	.db 0x0A
   00C6 0D                10697 	.db 0x0D
   00C7 34 3A 20 48 65 78 10698 	.ascii "4: Hex memory dump"
        20 6D 65 6D 6F 72
        79 20 64 75 6D 70
   00D9 0A                10699 	.db 0x0A
   00DA 0D                10700 	.db 0x0D
   00DB 00                10701 	.db 0x00
   00DC                   10702 __str_7:
   00DC 0A                10703 	.db 0x0A
   00DD 0D                10704 	.db 0x0D
   00DE 35 3A 20 4C 43 44 10705 	.ascii "5: LCD test"
        20 74 65 73 74
   00E9 0A                10706 	.db 0x0A
   00EA 0D                10707 	.db 0x0D
   00EB 00                10708 	.db 0x00
   00EC                   10709 __str_8:
   00EC 0A                10710 	.db 0x0A
   00ED 0D                10711 	.db 0x0D
   00EE 36 3A 20 43 6F 70 10712 	.ascii "6: Copy data bytes"
        79 20 64 61 74 61
        20 62 79 74 65 73
   0100 0A                10713 	.db 0x0A
   0101 0D                10714 	.db 0x0D
   0102 00                10715 	.db 0x00
   0103                   10716 __str_9:
   0103 0A                10717 	.db 0x0A
   0104 0D                10718 	.db 0x0D
   0105 37 3A 20 43 72 65 10719 	.ascii "7: Create custom character"
        61 74 65 20 63 75
        73 74 6F 6D 20 63
        68 61 72 61 63 74
        65 72
   011F 0A                10720 	.db 0x0A
   0120 0D                10721 	.db 0x0D
   0121 00                10722 	.db 0x00
   0122                   10723 __str_10:
   0122 0A                10724 	.db 0x0A
   0123 0D                10725 	.db 0x0D
   0124 38 3A 20 57 61 74 10726 	.ascii "8: Watchdog Timer Reset"
        63 68 64 6F 67 20
        54 69 6D 65 72 20
        52 65 73 65 74
   013B 0A                10727 	.db 0x0A
   013C 0D                10728 	.db 0x0D
   013D 00                10729 	.db 0x00
   013E                   10730 __str_11:
   013E 0A                10731 	.db 0x0A
   013F 0D                10732 	.db 0x0D
   0140 39 3A 20 49 2F 4F 10733 	.ascii "9: I/O Expander"
        20 45 78 70 61 6E
        64 65 72
   014F 0A                10734 	.db 0x0A
   0150 0D                10735 	.db 0x0D
   0151 00                10736 	.db 0x00
   0152                   10737 __str_12:
   0152 0A                10738 	.db 0x0A
   0153 0D                10739 	.db 0x0D
   0154 41 3A 20 54 69 6D 10740 	.ascii "A: Timed Block Fill"
        65 64 20 42 6C 6F
        63 6B 20 46 69 6C
        6C
   0167 0A                10741 	.db 0x0A
   0168 0D                10742 	.db 0x0D
   0169 00                10743 	.db 0x00
   016A                   10744 __str_13:
   016A 0A                10745 	.db 0x0A
   016B 0D                10746 	.db 0x0D
   016C 42 3A 20 4D 65 61 10747 	.ascii "B: Measure EEPROM write times"
        73 75 72 65 20 45
        45 50 52 4F 4D 20
        77 72 69 74 65 20
        74 69 6D 65 73
   0189 0A                10748 	.db 0x0A
   018A 0D                10749 	.db 0x0D
   018B 00                10750 	.db 0x00
   018C                   10751 __str_14:
   018C 0A                10752 	.db 0x0A
   018D 0D                10753 	.db 0x0D
   018E 43 3A 20 43 6C 6F 10754 	.ascii "C: Clock options"
        63 6B 20 6F 70 74
        69 6F 6E 73
   019E 0A                10755 	.db 0x0A
   019F 0D                10756 	.db 0x0D
   01A0 00                10757 	.db 0x00
   01A1                   10758 __str_15:
   01A1 49 6E 63 6F 72 72 10759 	.ascii "Incorrect option. Please enter one of the above options 1-9"
        65 63 74 20 6F 70
        74 69 6F 6E 2E 20
        50 6C 65 61 73 65
        20 65 6E 74 65 72
        20 6F 6E 65 20 6F
        66 20 74 68 65 20
        61 62 6F 76 65 20
        6F 70 74 69 6F 6E
        73 20 31 2D 39
   01DC 0A                10760 	.db 0x0A
   01DD 0D                10761 	.db 0x0D
   01DE 00                10762 	.db 0x00
   01DF                   10763 __str_16:
   01DF 0A                10764 	.db 0x0A
   01E0 0D                10765 	.db 0x0D
   01E1 2D 2D 2D 2D 2D 2D 10766 	.ascii "----------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   0215 0A                10767 	.db 0x0A
   0216 0D                10768 	.db 0x0D
   0217 00                10769 	.db 0x00
   0218                   10770 __str_17:
   0218 0A                10771 	.db 0x0A
   0219 0D                10772 	.db 0x0D
   021A 42 79 74 65 20 57 10773 	.ascii "Byte Write and Read"
        72 69 74 65 20 61
        6E 64 20 52 65 61
        64
   022D 0A                10774 	.db 0x0A
   022E 0D                10775 	.db 0x0D
   022F 00                10776 	.db 0x00
   0230                   10777 __str_18:
   0230 0A                10778 	.db 0x0A
   0231 0D                10779 	.db 0x0D
   0232 50 61 67 65 62 6C 10780 	.ascii "Pageblock selected is: %x"
        6F 63 6B 20 73 65
        6C 65 63 74 65 64
        20 69 73 3A 20 25
        78
   024B 0A                10781 	.db 0x0A
   024C 0D                10782 	.db 0x0D
   024D 00                10783 	.db 0x00
   024E                   10784 __str_19:
   024E 41 64 64 72 65 73 10785 	.ascii "Address to be written to is: %02x"
        73 20 74 6F 20 62
        65 20 77 72 69 74
        74 65 6E 20 74 6F
        20 69 73 3A 20 25
        30 32 78
   026F 0A                10786 	.db 0x0A
   0270 0D                10787 	.db 0x0D
   0271 00                10788 	.db 0x00
   0272                   10789 __str_20:
   0272 44 61 74 61 20 62 10790 	.ascii "Data byte to be written is: %02x"
        79 74 65 20 74 6F
        20 62 65 20 77 72
        69 74 74 65 6E 20
        69 73 3A 20 25 30
        32 78
   0292 0A                10791 	.db 0x0A
   0293 0D                10792 	.db 0x0D
   0294 00                10793 	.db 0x00
   0295                   10794 __str_21:
   0295 44 61 74 61 20 57 10795 	.ascii "Data Write successful"
        72 69 74 65 20 73
        75 63 63 65 73 73
        66 75 6C
   02AA 0A                10796 	.db 0x0A
   02AB 0D                10797 	.db 0x0D
   02AC 00                10798 	.db 0x00
   02AD                   10799 __str_22:
   02AD 44 61 74 61 20 52 10800 	.ascii "Data Read successful"
        65 61 64 20 73 75
        63 63 65 73 73 66
        75 6C
   02C1 0A                10801 	.db 0x0A
   02C2 0D                10802 	.db 0x0D
   02C3 00                10803 	.db 0x00
   02C4                   10804 __str_23:
   02C4 44 61 74 61 20 72 10805 	.ascii "Data retrieved: %02x"
        65 74 72 69 65 76
        65 64 3A 20 25 30
        32 78
   02D8 00                10806 	.db 0x00
   02D9                   10807 __str_24:
   02D9 50 72 65 73 73 20 10808 	.ascii "Press any key to continue"
        61 6E 79 20 6B 65
        79 20 74 6F 20 63
        6F 6E 74 69 6E 75
        65
   02F2 0A                10809 	.db 0x0A
   02F3 0D                10810 	.db 0x0D
   02F4 00                10811 	.db 0x00
   02F5                   10812 __str_25:
   02F5 50 72 65 73 73 20 10813 	.ascii "Press 'q' to quit"
        27 71 27 20 74 6F
        20 71 75 69 74
   0306 0A                10814 	.db 0x0A
   0307 0D                10815 	.db 0x0D
   0308 00                10816 	.db 0x00
   0309                   10817 __str_26:
   0309 0A                10818 	.db 0x0A
   030A 0D                10819 	.db 0x0D
   030B 42 79 74 65 20 52 10820 	.ascii "Byte Read"
        65 61 64
   0314 0A                10821 	.db 0x0A
   0315 0D                10822 	.db 0x0D
   0316 00                10823 	.db 0x00
   0317                   10824 __str_27:
   0317 41 64 64 72 65 73 10825 	.ascii "Address to be read from is: %02x"
        73 20 74 6F 20 62
        65 20 72 65 61 64
        20 66 72 6F 6D 20
        69 73 3A 20 25 30
        32 78
   0337 0A                10826 	.db 0x0A
   0338 0D                10827 	.db 0x0D
   0339 00                10828 	.db 0x00
   033A                   10829 __str_28:
   033A 0A                10830 	.db 0x0A
   033B 0D                10831 	.db 0x0D
   033C 4C 43 44 20 44 69 10832 	.ascii "LCD Display"
        73 70 6C 61 79
   0347 0A                10833 	.db 0x0A
   0348 0D                10834 	.db 0x0D
   0349 00                10835 	.db 0x00
   034A                   10836 __str_29:
   034A 50 61 67 65 62 6C 10837 	.ascii "Pageblock selected is: %x"
        6F 63 6B 20 73 65
        6C 65 63 74 65 64
        20 69 73 3A 20 25
        78
   0363 0A                10838 	.db 0x0A
   0364 0D                10839 	.db 0x0D
   0365 00                10840 	.db 0x00
   0366                   10841 __str_30:
   0366 41 64 64 72 65 73 10842 	.ascii "Address to be read is: %02x"
        73 20 74 6F 20 62
        65 20 72 65 61 64
        20 69 73 3A 20 25
        30 32 78
   0381 0A                10843 	.db 0x0A
   0382 0D                10844 	.db 0x0D
   0383 00                10845 	.db 0x00
   0384                   10846 __str_31:
   0384 45 45 50 52 4F 4D 10847 	.ascii "EEPROM HEX DUMP DISPLAY"
        20 48 45 58 20 44
        55 4D 50 20 44 49
        53 50 4C 41 59
   039B 0A                10848 	.db 0x0A
   039C 0D                10849 	.db 0x0D
   039D 00                10850 	.db 0x00
   039E                   10851 __str_32:
   039E 45 6E 74 65 72 20 10852 	.ascii "Enter start address for hex dump display"
        73 74 61 72 74 20
        61 64 64 72 65 73
        73 20 66 6F 72 20
        68 65 78 20 64 75
        6D 70 20 64 69 73
        70 6C 61 79
   03C6 0A                10853 	.db 0x0A
   03C7 0D                10854 	.db 0x0D
   03C8 00                10855 	.db 0x00
   03C9                   10856 __str_33:
   03C9 53 74 61 72 74 20 10857 	.ascii "Start address: %x"
        61 64 64 72 65 73
        73 3A 20 25 78
   03DA 0A                10858 	.db 0x0A
   03DB 0D                10859 	.db 0x0D
   03DC 00                10860 	.db 0x00
   03DD                   10861 __str_34:
   03DD 45 6E 74 65 72 20 10862 	.ascii "Enter end address for hex dump display"
        65 6E 64 20 61 64
        64 72 65 73 73 20
        66 6F 72 20 68 65
        78 20 64 75 6D 70
        20 64 69 73 70 6C
        61 79
   0403 0A                10863 	.db 0x0A
   0404 0D                10864 	.db 0x0D
   0405 00                10865 	.db 0x00
   0406                   10866 __str_35:
   0406 45 6E 64 20 61 64 10867 	.ascii "End address: %x"
        64 72 65 73 73 3A
        20 25 78
   0415 0A                10868 	.db 0x0A
   0416 0D                10869 	.db 0x0D
   0417 00                10870 	.db 0x00
   0418                   10871 __str_36:
   0418 52 61 6E 67 65 3A 10872 	.ascii "Range: %x"
        20 25 78
   0421 0A                10873 	.db 0x0A
   0422 0D                10874 	.db 0x0D
   0423 00                10875 	.db 0x00
   0424                   10876 __str_37:
   0424 0A                10877 	.db 0x0A
   0425 0D                10878 	.db 0x0D
   0426 30 25 78 25 30 32 10879 	.ascii "0%x%02x: "
        78 3A 20
   042F 00                10880 	.db 0x00
   0430                   10881 __str_38:
   0430 30 78 25 30 32 78 10882 	.ascii "0x%02x  "
        20 20
   0438 00                10883 	.db 0x00
   0439                   10884 __str_39:
   0439 0A                10885 	.db 0x0A
   043A 0D                10886 	.db 0x0D
   043B 0A                10887 	.db 0x0A
   043C 0D                10888 	.db 0x0D
   043D 50 72 65 73 73 20 10889 	.ascii "Press any key to continue"
        61 6E 79 20 6B 65
        79 20 74 6F 20 63
        6F 6E 74 69 6E 75
        65
   0456 0A                10890 	.db 0x0A
   0457 0D                10891 	.db 0x0D
   0458 00                10892 	.db 0x00
   0459                   10893 __str_40:
   0459 41 6E 69 6B 65 74 10894 	.ascii "Aniket"
   045F 00                10895 	.db 0x00
   0460                   10896 __str_41:
   0460 4B 75 6D 61 72 20 10897 	.ascii "Kumar OLSSS"
        4F 4C 53 53 53
   046B 00                10898 	.db 0x00
   046C                   10899 __str_42:
   046C 0A                10900 	.db 0x0A
   046D 0D                10901 	.db 0x0D
   046E 43 6F 70 79 20 64 10902 	.ascii "Copy data bytes"
        61 74 61 20 62 79
        74 65 73
   047D 0A                10903 	.db 0x0A
   047E 0D                10904 	.db 0x0D
   047F 00                10905 	.db 0x00
   0480                   10906 __str_43:
   0480 0A                10907 	.db 0x0A
   0481 0D                10908 	.db 0x0D
   0482 45 6E 74 65 72 20 10909 	.ascii "Enter Source address"
        53 6F 75 72 63 65
        20 61 64 64 72 65
        73 73
   0496 0A                10910 	.db 0x0A
   0497 0D                10911 	.db 0x0D
   0498 00                10912 	.db 0x00
   0499                   10913 __str_44:
   0499 53 6F 75 72 63 65 10914 	.ascii "Source address: %02x"
        20 61 64 64 72 65
        73 73 3A 20 25 30
        32 78
   04AD 0A                10915 	.db 0x0A
   04AE 0D                10916 	.db 0x0D
   04AF 00                10917 	.db 0x00
   04B0                   10918 __str_45:
   04B0 0A                10919 	.db 0x0A
   04B1 0D                10920 	.db 0x0D
   04B2 45 6E 74 65 72 20 10921 	.ascii "Enter Destination address"
        44 65 73 74 69 6E
        61 74 69 6F 6E 20
        61 64 64 72 65 73
        73
   04CB 0A                10922 	.db 0x0A
   04CC 0D                10923 	.db 0x0D
   04CD 00                10924 	.db 0x00
   04CE                   10925 __str_46:
   04CE 44 65 73 74 69 6E 10926 	.ascii "Destination address: %02x"
        61 74 69 6F 6E 20
        61 64 64 72 65 73
        73 3A 20 25 30 32
        78
   04E7 0A                10927 	.db 0x0A
   04E8 0D                10928 	.db 0x0D
   04E9 00                10929 	.db 0x00
   04EA                   10930 __str_47:
   04EA 0A                10931 	.db 0x0A
   04EB 0D                10932 	.db 0x0D
   04EC 45 6E 74 65 72 20 10933 	.ascii "Enter number of bytes to be copied"
        6E 75 6D 62 65 72
        20 6F 66 20 62 79
        74 65 73 20 74 6F
        20 62 65 20 63 6F
        70 69 65 64
   050E 0A                10934 	.db 0x0A
   050F 0D                10935 	.db 0x0D
   0510 00                10936 	.db 0x00
   0511                   10937 __str_48:
   0511 6E 75 6D 20 3D 20 10938 	.ascii "num = %x"
        25 78
   0519 0A                10939 	.db 0x0A
   051A 0D                10940 	.db 0x0D
   051B 00                10941 	.db 0x00
   051C                   10942 __str_49:
   051C 53 6F 75 72 63 65 10943 	.ascii "Source Data: %02x"
        20 44 61 74 61 3A
        20 25 30 32 78
   052D 0A                10944 	.db 0x0A
   052E 0D                10945 	.db 0x0D
   052F 00                10946 	.db 0x00
   0530                   10947 __str_50:
   0530 0A                10948 	.db 0x0A
   0531 0D                10949 	.db 0x0D
   0532 43 72 65 61 74 65 10950 	.ascii "Create custom character"
        20 63 75 73 74 6F
        6D 20 63 68 61 72
        61 63 74 65 72
   0549 0A                10951 	.db 0x0A
   054A 0D                10952 	.db 0x0D
   054B 00                10953 	.db 0x00
   054C                   10954 __str_51:
   054C 0A                10955 	.db 0x0A
   054D 0D                10956 	.db 0x0D
   054E 45 6E 74 65 72 20 10957 	.ascii "Enter character code from 00-07"
        63 68 61 72 61 63
        74 65 72 20 63 6F
        64 65 20 66 72 6F
        6D 20 30 30 2D 30
        37
   056D 0A                10958 	.db 0x0A
   056E 0D                10959 	.db 0x0D
   056F 00                10960 	.db 0x00
   0570                   10961 __str_52:
   0570 0A                10962 	.db 0x0A
   0571 0D                10963 	.db 0x0D
   0572 45 6E 74 65 72 20 10964 	.ascii "Enter row values for the custom character"
        72 6F 77 20 76 61
        6C 75 65 73 20 66
        6F 72 20 74 68 65
        20 63 75 73 74 6F
        6D 20 63 68 61 72
        61 63 74 65 72
   059B 0A                10965 	.db 0x0A
   059C 0D                10966 	.db 0x0D
   059D 00                10967 	.db 0x00
   059E                   10968 __str_53:
   059E 0A                10969 	.db 0x0A
   059F 0D                10970 	.db 0x0D
   05A0 45 6E 74 65 72 20 10971 	.ascii "Enter 5 pixel values for row %d "
        35 20 70 69 78 65
        6C 20 76 61 6C 75
        65 73 20 66 6F 72
        20 72 6F 77 20 25
        64 20
   05C0 0A                10972 	.db 0x0A
   05C1 0D                10973 	.db 0x0D
   05C2 00                10974 	.db 0x00
   05C3                   10975 __str_54:
   05C3 0A                10976 	.db 0x0A
   05C4 0D                10977 	.db 0x0D
   05C5 49 6E 76 61 6C 69 10978 	.ascii "Invalid input. Please enter binary input."
        64 20 69 6E 70 75
        74 2E 20 50 6C 65
        61 73 65 20 65 6E
        74 65 72 20 62 69
        6E 61 72 79 20 69
        6E 70 75 74 2E
   05EE 0A                10979 	.db 0x0A
   05EF 0D                10980 	.db 0x0D
   05F0 00                10981 	.db 0x00
   05F1                   10982 __str_55:
   05F1 0A                10983 	.db 0x0A
   05F2 0D                10984 	.db 0x0D
   05F3 00                10985 	.db 0x00
   05F4                   10986 __str_56:
   05F4 25 64 20          10987 	.ascii "%d "
   05F7 00                10988 	.db 0x00
   05F8                   10989 __str_57:
   05F8 0A                10990 	.db 0x0A
   05F9 0D                10991 	.db 0x0D
   05FA 49 2F 4F 20 45 78 10992 	.ascii "I/O Expander"
        70 61 6E 64 65 72
   0606 0A                10993 	.db 0x0A
   0607 0D                10994 	.db 0x0D
   0608 00                10995 	.db 0x00
   0609                   10996 __str_58:
   0609 45 6E 74 65 72 20 10997 	.ascii "Enter one of the following options:"
        6F 6E 65 20 6F 66
        20 74 68 65 20 66
        6F 6C 6C 6F 77 69
        6E 67 20 6F 70 74
        69 6F 6E 73 3A
   062C 0A                10998 	.db 0x0A
   062D 0D                10999 	.db 0x0D
   062E 00                11000 	.db 0x00
   062F                   11001 __str_59:
   062F 31 2D 57 72 69 74 11002 	.ascii "1-Write to port pins"
        65 20 74 6F 20 70
        6F 72 74 20 70 69
        6E 73
   0643 0A                11003 	.db 0x0A
   0644 0D                11004 	.db 0x0D
   0645 00                11005 	.db 0x00
   0646                   11006 __str_60:
   0646 32 2D 52 65 61 64 11007 	.ascii "2-Read from Port Pins"
        20 66 72 6F 6D 20
        50 6F 72 74 20 50
        69 6E 73
   065B 0A                11008 	.db 0x0A
   065C 0D                11009 	.db 0x0D
   065D 00                11010 	.db 0x00
   065E                   11011 __str_61:
   065E 0A                11012 	.db 0x0A
   065F 0D                11013 	.db 0x0D
   0660 49 4F 42 79 74 65 11014 	.ascii "IOByteRead: %x"
        52 65 61 64 3A 20
        25 78
   066E 00                11015 	.db 0x00
   066F                   11016 __str_62:
   066F 0A                11017 	.db 0x0A
   0670 0D                11018 	.db 0x0D
   0671 45 6E 74 65 72 20 11019 	.ascii "Enter data to be written to IO port:"
        64 61 74 61 20 74
        6F 20 62 65 20 77
        72 69 74 74 65 6E
        20 74 6F 20 49 4F
        20 70 6F 72 74 3A
   0695 0A                11020 	.db 0x0A
   0696 0D                11021 	.db 0x0D
   0697 00                11022 	.db 0x00
   0698                   11023 __str_63:
   0698 0A                11024 	.db 0x0A
   0699 0D                11025 	.db 0x0D
   069A 54 69 6D 65 64 20 11026 	.ascii "Timed Block Fill"
        42 6C 6F 63 6B 20
        46 69 6C 6C
   06AA 0A                11027 	.db 0x0A
   06AB 0D                11028 	.db 0x0D
   06AC 00                11029 	.db 0x00
   06AD                   11030 __str_64:
   06AD 0A                11031 	.db 0x0A
   06AE 0D                11032 	.db 0x0D
   06AF 45 6E 74 65 72 20 11033 	.ascii "Enter Start address for block fill"
        53 74 61 72 74 20
        61 64 64 72 65 73
        73 20 66 6F 72 20
        62 6C 6F 63 6B 20
        66 69 6C 6C
   06D1 0A                11034 	.db 0x0A
   06D2 0D                11035 	.db 0x0D
   06D3 00                11036 	.db 0x00
   06D4                   11037 __str_65:
   06D4 53 74 61 72 74 20 11038 	.ascii "Start address: %02x"
        61 64 64 72 65 73
        73 3A 20 25 30 32
        78
   06E7 0A                11039 	.db 0x0A
   06E8 0D                11040 	.db 0x0D
   06E9 00                11041 	.db 0x00
   06EA                   11042 __str_66:
   06EA 0A                11043 	.db 0x0A
   06EB 0D                11044 	.db 0x0D
   06EC 45 6E 74 65 72 20 11045 	.ascii "Enter End address for block fill"
        45 6E 64 20 61 64
        64 72 65 73 73 20
        66 6F 72 20 62 6C
        6F 63 6B 20 66 69
        6C 6C
   070C 0A                11046 	.db 0x0A
   070D 0D                11047 	.db 0x0D
   070E 00                11048 	.db 0x00
   070F                   11049 __str_67:
   070F 45 6E 64 20 61 64 11050 	.ascii "End address: %02x"
        64 72 65 73 73 3A
        20 25 30 32 78
   0720 0A                11051 	.db 0x0A
   0721 0D                11052 	.db 0x0D
   0722 00                11053 	.db 0x00
   0723                   11054 __str_68:
   0723 0A                11055 	.db 0x0A
   0724 0D                11056 	.db 0x0D
   0725 45 6E 74 65 72 20 11057 	.ascii "Enter the value for block fill"
        74 68 65 20 76 61
        6C 75 65 20 66 6F
        72 20 62 6C 6F 63
        6B 20 66 69 6C 6C
   0743 0A                11058 	.db 0x0A
   0744 0D                11059 	.db 0x0D
   0745 00                11060 	.db 0x00
   0746                   11061 __str_69:
   0746 0A                11062 	.db 0x0A
   0747 0D                11063 	.db 0x0D
   0748 4D 65 61 73 75 72 11064 	.ascii "Measure EEPROM write times"
        65 20 45 45 50 52
        4F 4D 20 77 72 69
        74 65 20 74 69 6D
        65 73
   0762 0A                11065 	.db 0x0A
   0763 0D                11066 	.db 0x0D
   0764 00                11067 	.db 0x00
   0765                   11068 __str_70:
   0765 0A                11069 	.db 0x0A
   0766 0D                11070 	.db 0x0D
   0767 42 79 74 65 20 77 11071 	.ascii "Byte write mode"
        72 69 74 65 20 6D
        6F 64 65
   0776 0A                11072 	.db 0x0A
   0777 0D                11073 	.db 0x0D
   0778 00                11074 	.db 0x00
   0779                   11075 __str_71:
   0779 0A                11076 	.db 0x0A
   077A 0D                11077 	.db 0x0D
   077B 45 6E 74 65 72 20 11078 	.ascii "Enter Start address for byte write:"
        53 74 61 72 74 20
        61 64 64 72 65 73
        73 20 66 6F 72 20
        62 79 74 65 20 77
        72 69 74 65 3A
   079E 0A                11079 	.db 0x0A
   079F 0D                11080 	.db 0x0D
   07A0 00                11081 	.db 0x00
   07A1                   11082 __str_72:
   07A1 0A                11083 	.db 0x0A
   07A2 0D                11084 	.db 0x0D
   07A3 45 6E 74 65 72 20 11085 	.ascii "Enter number of bytes to be written:"
        6E 75 6D 62 65 72
        20 6F 66 20 62 79
        74 65 73 20 74 6F
        20 62 65 20 77 72
        69 74 74 65 6E 3A
   07C7 0A                11086 	.db 0x0A
   07C8 0D                11087 	.db 0x0D
   07C9 00                11088 	.db 0x00
   07CA                   11089 __str_73:
   07CA 0A                11090 	.db 0x0A
   07CB 0D                11091 	.db 0x0D
   07CC 45 6E 74 65 72 20 11092 	.ascii "Enter the data for byte write"
        74 68 65 20 64 61
        74 61 20 66 6F 72
        20 62 79 74 65 20
        77 72 69 74 65
   07E9 0A                11093 	.db 0x0A
   07EA 0D                11094 	.db 0x0D
   07EB 00                11095 	.db 0x00
   07EC                   11096 __str_74:
   07EC 6E 75 6D 3A 20 25 11097 	.ascii "num: %x"
        78
   07F3 0A                11098 	.db 0x0A
   07F4 0D                11099 	.db 0x0D
   07F5 00                11100 	.db 0x00
   07F6                   11101 __str_75:
   07F6 0A                11102 	.db 0x0A
   07F7 0D                11103 	.db 0x0D
   07F8 50 61 67 65 20 77 11104 	.ascii "Page write mode"
        72 69 74 65 20 6D
        6F 64 65
   0807 0A                11105 	.db 0x0A
   0808 0D                11106 	.db 0x0D
   0809 00                11107 	.db 0x00
   080A                   11108 __str_76:
   080A 0A                11109 	.db 0x0A
   080B 0D                11110 	.db 0x0D
   080C 45 6E 74 65 72 20 11111 	.ascii "Enter Start address for page write of 1024 bytes"
        53 74 61 72 74 20
        61 64 64 72 65 73
        73 20 66 6F 72 20
        70 61 67 65 20 77
        72 69 74 65 20 6F
        66 20 31 30 32 34
        20 62 79 74 65 73
   083C 0A                11112 	.db 0x0A
   083D 0D                11113 	.db 0x0D
   083E 00                11114 	.db 0x00
   083F                   11115 __str_77:
   083F 0A                11116 	.db 0x0A
   0840 0D                11117 	.db 0x0D
   0841 45 6E 74 65 72 20 11118 	.ascii "Enter number of pages to be written:"
        6E 75 6D 62 65 72
        20 6F 66 20 70 61
        67 65 73 20 74 6F
        20 62 65 20 77 72
        69 74 74 65 6E 3A
   0865 0A                11119 	.db 0x0A
   0866 0D                11120 	.db 0x0D
   0867 00                11121 	.db 0x00
   0868                   11122 __str_78:
   0868 0A                11123 	.db 0x0A
   0869 0D                11124 	.db 0x0D
   086A 45 6E 74 65 72 20 11125 	.ascii "Enter the data for page write"
        74 68 65 20 64 61
        74 61 20 66 6F 72
        20 70 61 67 65 20
        77 72 69 74 65
   0887 0A                11126 	.db 0x0A
   0888 0D                11127 	.db 0x0D
   0889 00                11128 	.db 0x00
   088A                   11129 __str_79:
   088A 0A                11130 	.db 0x0A
   088B 0D                11131 	.db 0x0D
   088C 6E 75 6D 3A 20 25 11132 	.ascii "num: %x"
        78
   0893 0A                11133 	.db 0x0A
   0894 0D                11134 	.db 0x0D
   0895 00                11135 	.db 0x00
   0896                   11136 __str_80:
   0896 0A                11137 	.db 0x0A
   0897 0D                11138 	.db 0x0D
   0898 43 6C 6F 63 6B 20 11139 	.ascii "Clock Menu options"
        4D 65 6E 75 20 6F
        70 74 69 6F 6E 73
   08AA 0A                11140 	.db 0x0A
   08AB 0D                11141 	.db 0x0D
   08AC 00                11142 	.db 0x00
   08AD                   11143 __str_81:
   08AD 0A                11144 	.db 0x0A
   08AE 0D                11145 	.db 0x0D
   08AF 43 68 6F 6F 73 65 11146 	.ascii "Choose one of the below options"
        20 6F 6E 65 20 6F
        66 20 74 68 65 20
        62 65 6C 6F 77 20
        6F 70 74 69 6F 6E
        73
   08CE 0A                11147 	.db 0x0A
   08CF 0D                11148 	.db 0x0D
   08D0 00                11149 	.db 0x00
   08D1                   11150 __str_82:
   08D1 31 20 2D 20 53 74 11151 	.ascii "1 - Stop clock"
        6F 70 20 63 6C 6F
        63 6B
   08DF 0A                11152 	.db 0x0A
   08E0 0D                11153 	.db 0x0D
   08E1 00                11154 	.db 0x00
   08E2                   11155 __str_83:
   08E2 32 20 2D 20 52 65 11156 	.ascii "2 - Restart clock"
        73 74 61 72 74 20
        63 6C 6F 63 6B
   08F3 0A                11157 	.db 0x0A
   08F4 0D                11158 	.db 0x0D
   08F5 00                11159 	.db 0x00
   08F6                   11160 __str_84:
   08F6 33 20 2D 20 52 65 11161 	.ascii "3 - Reset clock"
        73 65 74 20 63 6C
        6F 63 6B
   0905 0A                11162 	.db 0x0A
   0906 0D                11163 	.db 0x0D
   0907 00                11164 	.db 0x00
   0908                   11165 __str_85:
   0908 0A                11166 	.db 0x0A
   0909 43 6C 6F 63 6B 20 11167 	.ascii "Clock stopped"
        73 74 6F 70 70 65
        64
   0916 0D                11168 	.db 0x0D
   0917 00                11169 	.db 0x00
   0918                   11170 __str_86:
   0918 43 6C 6F 63 6B 20 11171 	.ascii "Clock restarted"
        72 65 73 74 61 72
        74 65 64
   0927 0A                11172 	.db 0x0A
   0928 0D                11173 	.db 0x0D
   0929 00                11174 	.db 0x00
   092A                   11175 __str_87:
   092A 0A                11176 	.db 0x0A
   092B 43 6C 6F 63 6B 20 11177 	.ascii "Clock resetted"
        72 65 73 65 74 74
        65 64
   0939 0A                11178 	.db 0x0A
   093A 0D                11179 	.db 0x0D
   093B 00                11180 	.db 0x00
   093C                   11181 __str_88:
   093C 72 6F 77 76 61 6C 11182 	.ascii "rowval:%x"
        3A 25 78
   0945 0A                11183 	.db 0x0A
   0946 0D                11184 	.db 0x0D
   0947 00                11185 	.db 0x00
   0948                   11186 __str_89:
   0948 3A 20             11187 	.ascii ": "
   094A 00                11188 	.db 0x00
   094B                   11189 __str_90:
   094B 0A                11190 	.db 0x0A
   094C 45 6E 74 65 72 20 11191 	.ascii "Enter EEPROM address:"
        45 45 50 52 4F 4D
        20 61 64 64 72 65
        73 73 3A
   0961 0A                11192 	.db 0x0A
   0962 0D                11193 	.db 0x0D
   0963 00                11194 	.db 0x00
   0964                   11195 __str_91:
   0964 0A                11196 	.db 0x0A
   0965 41 64 64 72 65 73 11197 	.ascii "Address Range: 000h - 7FFh"
        73 20 52 61 6E 67
        65 3A 20 30 30 30
        68 20 2D 20 37 46
        46 68
   097F 0A                11198 	.db 0x0A
   0980 0D                11199 	.db 0x0D
   0981 00                11200 	.db 0x00
   0982                   11201 __str_92:
   0982 0A                11202 	.db 0x0A
   0983 0D                11203 	.db 0x0D
   0984 50 6C 65 61 73 65 11204 	.ascii "Please enter hexadecimal input. Special characters are not"
        20 65 6E 74 65 72
        20 68 65 78 61 64
        65 63 69 6D 61 6C
        20 69 6E 70 75 74
        2E 20 53 70 65 63
        69 61 6C 20 63 68
        61 72 61 63 74 65
        72 73 20 61 72 65
        20 6E 6F 74
   09BE 20 61 6C 6C 6F 77 11205 	.ascii " allowed."
        65 64 2E
   09C7 0A                11206 	.db 0x0A
   09C8 0D                11207 	.db 0x0D
   09C9 00                11208 	.db 0x00
   09CA                   11209 __str_93:
   09CA 0A                11210 	.db 0x0A
   09CB 0D                11211 	.db 0x0D
   09CC 41 64 64 72 65 73 11212 	.ascii "Address out of range. Enter address in the range of 000h-7"
        73 20 6F 75 74 20
        6F 66 20 72 61 6E
        67 65 2E 20 45 6E
        74 65 72 20 61 64
        64 72 65 73 73 20
        69 6E 20 74 68 65
        20 72 61 6E 67 65
        20 6F 66 20 30 30
        30 68 2D 37
   0A06 46 46 68 2E       11213 	.ascii "FFh."
   0A0A 0A                11214 	.db 0x0A
   0A0B 0D                11215 	.db 0x0D
   0A0C 00                11216 	.db 0x00
   0A0D                   11217 __str_94:
   0A0D 0A                11218 	.db 0x0A
   0A0E 45 6E 74 65 72 20 11219 	.ascii "Enter data to be written to EEPROM in hex:"
        64 61 74 61 20 74
        6F 20 62 65 20 77
        72 69 74 74 65 6E
        20 74 6F 20 45 45
        50 52 4F 4D 20 69
        6E 20 68 65 78 3A
   0A38 0A                11220 	.db 0x0A
   0A39 0D                11221 	.db 0x0D
   0A3A 00                11222 	.db 0x00
   0A3B                   11223 __str_95:
   0A3B 0A                11224 	.db 0x0A
   0A3C 0D                11225 	.db 0x0D
   0A3D 62 6C 6F 63 6B 3A 11226 	.ascii "block: %x"
        20 25 78
   0A46 0A                11227 	.db 0x0A
   0A47 0D                11228 	.db 0x0D
   0A48 00                11229 	.db 0x00
   0A49                   11230 __str_96:
   0A49 0A                11231 	.db 0x0A
   0A4A 69 6F 69 6E 64 3A 11232 	.ascii "ioind: %x"
        20 25 78
   0A53 0A                11233 	.db 0x0A
   0A54 0D                11234 	.db 0x0D
   0A55 00                11235 	.db 0x00
   0A56                   11236 __str_97:
   0A56 0A                11237 	.db 0x0A
   0A57 0D                11238 	.db 0x0D
   0A58 43 6F 6E 66 49 4F 11239 	.ascii "ConfIOExp"
        45 78 70
   0A61 0A                11240 	.db 0x0A
   0A62 0D                11241 	.db 0x0D
   0A63 00                11242 	.db 0x00
   0A64                   11243 __str_98:
   0A64 0A                11244 	.db 0x0A
   0A65 0D                11245 	.db 0x0D
   0A66 49 6E 74 65 72 72 11246 	.ascii "Interrupt on Port %x"
        75 70 74 20 6F 6E
        20 50 6F 72 74 20
        25 78
   0A7A 0A                11247 	.db 0x0A
   0A7B 0D                11248 	.db 0x0D
   0A7C 00                11249 	.db 0x00
                          11250 	.area XINIT   (CODE)
   0000                   11251 __xinit__stopcount:
   0000 00 00             11252 	.byte #0x00,#0x00
   0002                   11253 __xinit__bytecnt:
   0002 00 00             11254 	.byte #0x00,#0x00
