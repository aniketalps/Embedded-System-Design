                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat Dec 13 01:12:45 2014
                              5 ;--------------------------------------------------------
                              6 	.module sdcdriver
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _CY
                             13 	.globl _AC
                             14 	.globl _F0
                             15 	.globl _RS1
                             16 	.globl _RS0
                             17 	.globl _OV
                             18 	.globl _F1
                             19 	.globl _P
                             20 	.globl _PS
                             21 	.globl _PT1
                             22 	.globl _PX1
                             23 	.globl _PT0
                             24 	.globl _PX0
                             25 	.globl _RD
                             26 	.globl _WR
                             27 	.globl _T1
                             28 	.globl _T0
                             29 	.globl _INT1
                             30 	.globl _INT0
                             31 	.globl _TXD
                             32 	.globl _RXD
                             33 	.globl _P3_7
                             34 	.globl _P3_6
                             35 	.globl _P3_5
                             36 	.globl _P3_4
                             37 	.globl _P3_3
                             38 	.globl _P3_2
                             39 	.globl _P3_1
                             40 	.globl _P3_0
                             41 	.globl _EA
                             42 	.globl _ES
                             43 	.globl _ET1
                             44 	.globl _EX1
                             45 	.globl _ET0
                             46 	.globl _EX0
                             47 	.globl _P2_7
                             48 	.globl _P2_6
                             49 	.globl _P2_5
                             50 	.globl _P2_4
                             51 	.globl _P2_3
                             52 	.globl _P2_2
                             53 	.globl _P2_1
                             54 	.globl _P2_0
                             55 	.globl _SM0
                             56 	.globl _SM1
                             57 	.globl _SM2
                             58 	.globl _REN
                             59 	.globl _TB8
                             60 	.globl _RB8
                             61 	.globl _TI
                             62 	.globl _RI
                             63 	.globl _P1_7
                             64 	.globl _P1_6
                             65 	.globl _P1_5
                             66 	.globl _P1_4
                             67 	.globl _P1_3
                             68 	.globl _P1_2
                             69 	.globl _P1_1
                             70 	.globl _P1_0
                             71 	.globl _TF1
                             72 	.globl _TR1
                             73 	.globl _TF0
                             74 	.globl _TR0
                             75 	.globl _IE1
                             76 	.globl _IT1
                             77 	.globl _IE0
                             78 	.globl _IT0
                             79 	.globl _P0_7
                             80 	.globl _P0_6
                             81 	.globl _P0_5
                             82 	.globl _P0_4
                             83 	.globl _P0_3
                             84 	.globl _P0_2
                             85 	.globl _P0_1
                             86 	.globl _P0_0
                             87 	.globl _TF2
                             88 	.globl _EXF2
                             89 	.globl _RCLK
                             90 	.globl _TCLK
                             91 	.globl _EXEN2
                             92 	.globl _TR2
                             93 	.globl _C_T2
                             94 	.globl _CP_RL2
                             95 	.globl _T2CON_7
                             96 	.globl _T2CON_6
                             97 	.globl _T2CON_5
                             98 	.globl _T2CON_4
                             99 	.globl _T2CON_3
                            100 	.globl _T2CON_2
                            101 	.globl _T2CON_1
                            102 	.globl _T2CON_0
                            103 	.globl _PT2
                            104 	.globl _ET2
                            105 	.globl _P5_7
                            106 	.globl _P5_6
                            107 	.globl _P5_5
                            108 	.globl _P5_4
                            109 	.globl _P5_3
                            110 	.globl _P5_2
                            111 	.globl _P5_1
                            112 	.globl _P5_0
                            113 	.globl _P4_7
                            114 	.globl _P4_6
                            115 	.globl _P4_5
                            116 	.globl _P4_4
                            117 	.globl _P4_3
                            118 	.globl _P4_2
                            119 	.globl _P4_1
                            120 	.globl _P4_0
                            121 	.globl _PX0L
                            122 	.globl _PT0L
                            123 	.globl _PX1L
                            124 	.globl _PT1L
                            125 	.globl _PLS
                            126 	.globl _PT2L
                            127 	.globl _PPCL
                            128 	.globl _EC
                            129 	.globl _CCF0
                            130 	.globl _CCF1
                            131 	.globl _CCF2
                            132 	.globl _CCF3
                            133 	.globl _CCF4
                            134 	.globl _CR
                            135 	.globl _CF
                            136 	.globl _B
                            137 	.globl _ACC
                            138 	.globl _PSW
                            139 	.globl _IP
                            140 	.globl _P3
                            141 	.globl _IE
                            142 	.globl _P2
                            143 	.globl _SBUF
                            144 	.globl _SCON
                            145 	.globl _P1
                            146 	.globl _TH1
                            147 	.globl _TH0
                            148 	.globl _TL1
                            149 	.globl _TL0
                            150 	.globl _TMOD
                            151 	.globl _TCON
                            152 	.globl _PCON
                            153 	.globl _DPH
                            154 	.globl _DPL
                            155 	.globl _SP
                            156 	.globl _P0
                            157 	.globl _TH2
                            158 	.globl _TL2
                            159 	.globl _RCAP2H
                            160 	.globl _RCAP2L
                            161 	.globl _T2CON
                            162 	.globl _EECON
                            163 	.globl _KBF
                            164 	.globl _KBE
                            165 	.globl _KBLS
                            166 	.globl _BRL
                            167 	.globl _BDRCON
                            168 	.globl _T2MOD
                            169 	.globl _SPDAT
                            170 	.globl _SPSTA
                            171 	.globl _SPCON
                            172 	.globl _SADEN
                            173 	.globl _SADDR
                            174 	.globl _WDTPRG
                            175 	.globl _WDTRST
                            176 	.globl _P5
                            177 	.globl _P4
                            178 	.globl _IPH1
                            179 	.globl _IPL1
                            180 	.globl _IPH0
                            181 	.globl _IPL0
                            182 	.globl _IEN1
                            183 	.globl _IEN0
                            184 	.globl _CMOD
                            185 	.globl _CL
                            186 	.globl _CH
                            187 	.globl _CCON
                            188 	.globl _CCAPM4
                            189 	.globl _CCAPM3
                            190 	.globl _CCAPM2
                            191 	.globl _CCAPM1
                            192 	.globl _CCAPM0
                            193 	.globl _CCAP4L
                            194 	.globl _CCAP3L
                            195 	.globl _CCAP2L
                            196 	.globl _CCAP1L
                            197 	.globl _CCAP0L
                            198 	.globl _CCAP4H
                            199 	.globl _CCAP3H
                            200 	.globl _CCAP2H
                            201 	.globl _CCAP1H
                            202 	.globl _CCAP0H
                            203 	.globl _CKCKON1
                            204 	.globl _CKCKON0
                            205 	.globl _CKRL
                            206 	.globl _AUXR1
                            207 	.globl _AUXR
                            208 	.globl _sd_multiple_read_PARM_2
                            209 	.globl _sd_single_write_PARM_2
                            210 	.globl _sd_copy_PARM_2
                            211 	.globl _fsz
                            212 	.globl _tempbuf
                            213 	.globl _buff
                            214 	.globl _filesiz
                            215 	.globl _filenm
                            216 	.globl _data_save
                            217 	.globl _serial_data
                            218 	.globl _transmit_completed
                            219 	.globl _fileopen
                            220 	.globl _fileread
                            221 	.globl _getfilename
                            222 	.globl _sd_copy
                            223 	.globl _sd_init
                            224 	.globl _sd_single_read_glcd
                            225 	.globl _sd_single_read
                            226 	.globl _sd_single_write
                            227 	.globl _sd_block_write
                            228 	.globl _sd_multiple_read
                            229 	.globl _sd_stop_transmission
                            230 	.globl _wait_tx_end
                            231 	.globl _delay
                            232 ;--------------------------------------------------------
                            233 ; special function registers
                            234 ;--------------------------------------------------------
                            235 	.area RSEG    (DATA)
                    008E    236 _AUXR	=	0x008e
                    00A2    237 _AUXR1	=	0x00a2
                    0097    238 _CKRL	=	0x0097
                    008F    239 _CKCKON0	=	0x008f
                    008F    240 _CKCKON1	=	0x008f
                    00FA    241 _CCAP0H	=	0x00fa
                    00FB    242 _CCAP1H	=	0x00fb
                    00FC    243 _CCAP2H	=	0x00fc
                    00FD    244 _CCAP3H	=	0x00fd
                    00FE    245 _CCAP4H	=	0x00fe
                    00EA    246 _CCAP0L	=	0x00ea
                    00EB    247 _CCAP1L	=	0x00eb
                    00EC    248 _CCAP2L	=	0x00ec
                    00ED    249 _CCAP3L	=	0x00ed
                    00EE    250 _CCAP4L	=	0x00ee
                    00DA    251 _CCAPM0	=	0x00da
                    00DB    252 _CCAPM1	=	0x00db
                    00DC    253 _CCAPM2	=	0x00dc
                    00DD    254 _CCAPM3	=	0x00dd
                    00DE    255 _CCAPM4	=	0x00de
                    00D8    256 _CCON	=	0x00d8
                    00F9    257 _CH	=	0x00f9
                    00E9    258 _CL	=	0x00e9
                    00D9    259 _CMOD	=	0x00d9
                    00A8    260 _IEN0	=	0x00a8
                    00B1    261 _IEN1	=	0x00b1
                    00B8    262 _IPL0	=	0x00b8
                    00B7    263 _IPH0	=	0x00b7
                    00B2    264 _IPL1	=	0x00b2
                    00B3    265 _IPH1	=	0x00b3
                    00C0    266 _P4	=	0x00c0
                    00D8    267 _P5	=	0x00d8
                    00A6    268 _WDTRST	=	0x00a6
                    00A7    269 _WDTPRG	=	0x00a7
                    00A9    270 _SADDR	=	0x00a9
                    00B9    271 _SADEN	=	0x00b9
                    00C3    272 _SPCON	=	0x00c3
                    00C4    273 _SPSTA	=	0x00c4
                    00C5    274 _SPDAT	=	0x00c5
                    00C9    275 _T2MOD	=	0x00c9
                    009B    276 _BDRCON	=	0x009b
                    009A    277 _BRL	=	0x009a
                    009C    278 _KBLS	=	0x009c
                    009D    279 _KBE	=	0x009d
                    009E    280 _KBF	=	0x009e
                    00D2    281 _EECON	=	0x00d2
                    00C8    282 _T2CON	=	0x00c8
                    00CA    283 _RCAP2L	=	0x00ca
                    00CB    284 _RCAP2H	=	0x00cb
                    00CC    285 _TL2	=	0x00cc
                    00CD    286 _TH2	=	0x00cd
                    0080    287 _P0	=	0x0080
                    0081    288 _SP	=	0x0081
                    0082    289 _DPL	=	0x0082
                    0083    290 _DPH	=	0x0083
                    0087    291 _PCON	=	0x0087
                    0088    292 _TCON	=	0x0088
                    0089    293 _TMOD	=	0x0089
                    008A    294 _TL0	=	0x008a
                    008B    295 _TL1	=	0x008b
                    008C    296 _TH0	=	0x008c
                    008D    297 _TH1	=	0x008d
                    0090    298 _P1	=	0x0090
                    0098    299 _SCON	=	0x0098
                    0099    300 _SBUF	=	0x0099
                    00A0    301 _P2	=	0x00a0
                    00A8    302 _IE	=	0x00a8
                    00B0    303 _P3	=	0x00b0
                    00B8    304 _IP	=	0x00b8
                    00D0    305 _PSW	=	0x00d0
                    00E0    306 _ACC	=	0x00e0
                    00F0    307 _B	=	0x00f0
                            308 ;--------------------------------------------------------
                            309 ; special function bits
                            310 ;--------------------------------------------------------
                            311 	.area RSEG    (DATA)
                    00DF    312 _CF	=	0x00df
                    00DE    313 _CR	=	0x00de
                    00DC    314 _CCF4	=	0x00dc
                    00DB    315 _CCF3	=	0x00db
                    00DA    316 _CCF2	=	0x00da
                    00D9    317 _CCF1	=	0x00d9
                    00D8    318 _CCF0	=	0x00d8
                    00AE    319 _EC	=	0x00ae
                    00BE    320 _PPCL	=	0x00be
                    00BD    321 _PT2L	=	0x00bd
                    00BC    322 _PLS	=	0x00bc
                    00BB    323 _PT1L	=	0x00bb
                    00BA    324 _PX1L	=	0x00ba
                    00B9    325 _PT0L	=	0x00b9
                    00B8    326 _PX0L	=	0x00b8
                    00C0    327 _P4_0	=	0x00c0
                    00C1    328 _P4_1	=	0x00c1
                    00C2    329 _P4_2	=	0x00c2
                    00C3    330 _P4_3	=	0x00c3
                    00C4    331 _P4_4	=	0x00c4
                    00C5    332 _P4_5	=	0x00c5
                    00C6    333 _P4_6	=	0x00c6
                    00C7    334 _P4_7	=	0x00c7
                    00D8    335 _P5_0	=	0x00d8
                    00D9    336 _P5_1	=	0x00d9
                    00DA    337 _P5_2	=	0x00da
                    00DB    338 _P5_3	=	0x00db
                    00DC    339 _P5_4	=	0x00dc
                    00DD    340 _P5_5	=	0x00dd
                    00DE    341 _P5_6	=	0x00de
                    00DF    342 _P5_7	=	0x00df
                    00AD    343 _ET2	=	0x00ad
                    00BD    344 _PT2	=	0x00bd
                    00C8    345 _T2CON_0	=	0x00c8
                    00C9    346 _T2CON_1	=	0x00c9
                    00CA    347 _T2CON_2	=	0x00ca
                    00CB    348 _T2CON_3	=	0x00cb
                    00CC    349 _T2CON_4	=	0x00cc
                    00CD    350 _T2CON_5	=	0x00cd
                    00CE    351 _T2CON_6	=	0x00ce
                    00CF    352 _T2CON_7	=	0x00cf
                    00C8    353 _CP_RL2	=	0x00c8
                    00C9    354 _C_T2	=	0x00c9
                    00CA    355 _TR2	=	0x00ca
                    00CB    356 _EXEN2	=	0x00cb
                    00CC    357 _TCLK	=	0x00cc
                    00CD    358 _RCLK	=	0x00cd
                    00CE    359 _EXF2	=	0x00ce
                    00CF    360 _TF2	=	0x00cf
                    0080    361 _P0_0	=	0x0080
                    0081    362 _P0_1	=	0x0081
                    0082    363 _P0_2	=	0x0082
                    0083    364 _P0_3	=	0x0083
                    0084    365 _P0_4	=	0x0084
                    0085    366 _P0_5	=	0x0085
                    0086    367 _P0_6	=	0x0086
                    0087    368 _P0_7	=	0x0087
                    0088    369 _IT0	=	0x0088
                    0089    370 _IE0	=	0x0089
                    008A    371 _IT1	=	0x008a
                    008B    372 _IE1	=	0x008b
                    008C    373 _TR0	=	0x008c
                    008D    374 _TF0	=	0x008d
                    008E    375 _TR1	=	0x008e
                    008F    376 _TF1	=	0x008f
                    0090    377 _P1_0	=	0x0090
                    0091    378 _P1_1	=	0x0091
                    0092    379 _P1_2	=	0x0092
                    0093    380 _P1_3	=	0x0093
                    0094    381 _P1_4	=	0x0094
                    0095    382 _P1_5	=	0x0095
                    0096    383 _P1_6	=	0x0096
                    0097    384 _P1_7	=	0x0097
                    0098    385 _RI	=	0x0098
                    0099    386 _TI	=	0x0099
                    009A    387 _RB8	=	0x009a
                    009B    388 _TB8	=	0x009b
                    009C    389 _REN	=	0x009c
                    009D    390 _SM2	=	0x009d
                    009E    391 _SM1	=	0x009e
                    009F    392 _SM0	=	0x009f
                    00A0    393 _P2_0	=	0x00a0
                    00A1    394 _P2_1	=	0x00a1
                    00A2    395 _P2_2	=	0x00a2
                    00A3    396 _P2_3	=	0x00a3
                    00A4    397 _P2_4	=	0x00a4
                    00A5    398 _P2_5	=	0x00a5
                    00A6    399 _P2_6	=	0x00a6
                    00A7    400 _P2_7	=	0x00a7
                    00A8    401 _EX0	=	0x00a8
                    00A9    402 _ET0	=	0x00a9
                    00AA    403 _EX1	=	0x00aa
                    00AB    404 _ET1	=	0x00ab
                    00AC    405 _ES	=	0x00ac
                    00AF    406 _EA	=	0x00af
                    00B0    407 _P3_0	=	0x00b0
                    00B1    408 _P3_1	=	0x00b1
                    00B2    409 _P3_2	=	0x00b2
                    00B3    410 _P3_3	=	0x00b3
                    00B4    411 _P3_4	=	0x00b4
                    00B5    412 _P3_5	=	0x00b5
                    00B6    413 _P3_6	=	0x00b6
                    00B7    414 _P3_7	=	0x00b7
                    00B0    415 _RXD	=	0x00b0
                    00B1    416 _TXD	=	0x00b1
                    00B2    417 _INT0	=	0x00b2
                    00B3    418 _INT1	=	0x00b3
                    00B4    419 _T0	=	0x00b4
                    00B5    420 _T1	=	0x00b5
                    00B6    421 _WR	=	0x00b6
                    00B7    422 _RD	=	0x00b7
                    00B8    423 _PX0	=	0x00b8
                    00B9    424 _PT0	=	0x00b9
                    00BA    425 _PX1	=	0x00ba
                    00BB    426 _PT1	=	0x00bb
                    00BC    427 _PS	=	0x00bc
                    00D0    428 _P	=	0x00d0
                    00D1    429 _F1	=	0x00d1
                    00D2    430 _OV	=	0x00d2
                    00D3    431 _RS0	=	0x00d3
                    00D4    432 _RS1	=	0x00d4
                    00D5    433 _F0	=	0x00d5
                    00D6    434 _AC	=	0x00d6
                    00D7    435 _CY	=	0x00d7
                            436 ;--------------------------------------------------------
                            437 ; overlayable register banks
                            438 ;--------------------------------------------------------
                            439 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     440 	.ds 8
                            441 ;--------------------------------------------------------
                            442 ; internal ram data
                            443 ;--------------------------------------------------------
                            444 	.area DSEG    (DATA)
   0000                     445 _getfilename_sloc0_1_0:
   0000                     446 	.ds 2
   0002                     447 _sd_multiple_read_sloc0_1_0:
   0002                     448 	.ds 4
                            449 ;--------------------------------------------------------
                            450 ; overlayable items in internal ram 
                            451 ;--------------------------------------------------------
                            452 	.area OSEG    (OVR,DATA)
                            453 ;--------------------------------------------------------
                            454 ; indirectly addressable internal ram data
                            455 ;--------------------------------------------------------
                            456 	.area ISEG    (DATA)
                            457 ;--------------------------------------------------------
                            458 ; bit data
                            459 ;--------------------------------------------------------
                            460 	.area BSEG    (BIT)
   0000                     461 _transmit_completed::
   0000                     462 	.ds 1
                            463 ;--------------------------------------------------------
                            464 ; paged external ram data
                            465 ;--------------------------------------------------------
                            466 	.area PSEG    (PAG,XDATA)
                            467 ;--------------------------------------------------------
                            468 ; external ram data
                            469 ;--------------------------------------------------------
                            470 	.area XSEG    (XDATA)
   0000                     471 _serial_data::
   0000                     472 	.ds 1
   0001                     473 _data_save::
   0001                     474 	.ds 1
   0002                     475 _filenm::
   0002                     476 	.ds 3
   0005                     477 _filesiz::
   0005                     478 	.ds 3
   0008                     479 _buff::
   0008                     480 	.ds 2
   000A                     481 _tempbuf::
   000A                     482 	.ds 2
   000C                     483 _fsz::
   000C                     484 	.ds 4
   0010                     485 _fileopen_fnum_1_1:
   0010                     486 	.ds 2
   0012                     487 _fileread_fl_1_1:
   0012                     488 	.ds 2
   0014                     489 _getfilename_ctr1_1_1:
   0014                     490 	.ds 2
   0016                     491 _sd_copy_PARM_2:
   0016                     492 	.ds 4
   001A                     493 _sd_copy_srcsect_1_1:
   001A                     494 	.ds 4
   001E                     495 _sd_single_read_glcd_sectnum_1_1:
   001E                     496 	.ds 4
   0022                     497 _sd_single_read_glcd_temp2_1_1:
   0022                     498 	.ds 4
   0026                     499 _sd_single_read_sector_1_1:
   0026                     500 	.ds 4
   002A                     501 _sd_single_read_ctr0_1_1:
   002A                     502 	.ds 2
   002C                     503 _sd_single_read_ctr1_1_1:
   002C                     504 	.ds 2
   002E                     505 _sd_single_read_temp1_1_1:
   002E                     506 	.ds 4
   0032                     507 _sd_single_write_PARM_2:
   0032                     508 	.ds 4
   0036                     509 _sd_single_write_databyte_1_1:
   0036                     510 	.ds 1
   0037                     511 _sd_single_write_tempw_1_1:
   0037                     512 	.ds 4
   003B                     513 _sd_block_write_sector_1_1:
   003B                     514 	.ds 4
   003F                     515 _sd_block_write_tempw1_1_1:
   003F                     516 	.ds 4
   0043                     517 _sd_multiple_read_PARM_2:
   0043                     518 	.ds 4
   0047                     519 _sd_multiple_read_start_sector_1_1:
   0047                     520 	.ds 4
   004B                     521 _sd_multiple_read_counter_1_1:
   004B                     522 	.ds 2
   004D                     523 _sd_multiple_read_temp_start_1_1:
   004D                     524 	.ds 4
   0051                     525 _sd_multiple_read_temp_end_1_1:
   0051                     526 	.ds 4
   0055                     527 _delay_number_1_1:
   0055                     528 	.ds 2
                            529 ;--------------------------------------------------------
                            530 ; external initialized ram data
                            531 ;--------------------------------------------------------
                            532 	.area XISEG   (XDATA)
                            533 	.area HOME    (CODE)
                            534 	.area GSINIT0 (CODE)
                            535 	.area GSINIT1 (CODE)
                            536 	.area GSINIT2 (CODE)
                            537 	.area GSINIT3 (CODE)
                            538 	.area GSINIT4 (CODE)
                            539 	.area GSINIT5 (CODE)
                            540 	.area GSINIT  (CODE)
                            541 	.area GSFINAL (CODE)
                            542 	.area CSEG    (CODE)
                            543 ;--------------------------------------------------------
                            544 ; global & static initialisations
                            545 ;--------------------------------------------------------
                            546 	.area HOME    (CODE)
                            547 	.area GSINIT  (CODE)
                            548 	.area GSFINAL (CODE)
                            549 	.area GSINIT  (CODE)
                            550 ;--------------------------------------------------------
                            551 ; Home
                            552 ;--------------------------------------------------------
                            553 	.area HOME    (CODE)
                            554 	.area CSEG    (CODE)
                            555 ;--------------------------------------------------------
                            556 ; code
                            557 ;--------------------------------------------------------
                            558 	.area CSEG    (CODE)
                            559 ;------------------------------------------------------------
                            560 ;Allocation info for local variables in function 'fileopen'
                            561 ;------------------------------------------------------------
                            562 ;fnum                      Allocated with name '_fileopen_fnum_1_1'
                            563 ;i1                        Allocated with name '_fileopen_i1_1_1'
                            564 ;i2                        Allocated with name '_fileopen_i2_1_1'
                            565 ;------------------------------------------------------------
                            566 ;	sdcdriver.c:37: void fileopen(int fnum)
                            567 ;	-----------------------------------------
                            568 ;	 function fileopen
                            569 ;	-----------------------------------------
   0000                     570 _fileopen:
                    0002    571 	ar2 = 0x02
                    0003    572 	ar3 = 0x03
                    0004    573 	ar4 = 0x04
                    0005    574 	ar5 = 0x05
                    0006    575 	ar6 = 0x06
                    0007    576 	ar7 = 0x07
                    0000    577 	ar0 = 0x00
                    0001    578 	ar1 = 0x01
                            579 ;	genReceive
   0000 AA 83               580 	mov	r2,dph
   0002 E5 82               581 	mov	a,dpl
   0004 90s00r10            582 	mov	dptr,#_fileopen_fnum_1_1
   0007 F0                  583 	movx	@dptr,a
   0008 A3                  584 	inc	dptr
   0009 EA                  585 	mov	a,r2
   000A F0                  586 	movx	@dptr,a
                            587 ;	sdcdriver.c:41: getfilename(fnum);                  // Retrieve file name and file size
                            588 ;	genAssign
   000B 90s00r10            589 	mov	dptr,#_fileopen_fnum_1_1
   000E E0                  590 	movx	a,@dptr
   000F FA                  591 	mov	r2,a
   0010 A3                  592 	inc	dptr
   0011 E0                  593 	movx	a,@dptr
   0012 FB                  594 	mov	r3,a
                            595 ;	genCall
   0013 8A 82               596 	mov	dpl,r2
   0015 8B 83               597 	mov	dph,r3
   0017 12s01r91            598 	lcall	_getfilename
                            599 ;	sdcdriver.c:43: printf_tiny("\n\rFile Name: ");
                            600 ;	genIpush
   001A 74r00               601 	mov	a,#__str_0
   001C C0 E0               602 	push	acc
   001E 74s00               603 	mov	a,#(__str_0 >> 8)
   0020 C0 E0               604 	push	acc
                            605 ;	genCall
   0022 12s00r00            606 	lcall	_printf_tiny
   0025 15 81               607 	dec	sp
   0027 15 81               608 	dec	sp
                            609 ;	sdcdriver.c:45: for(i1=0;i1<11;i1++)
                            610 ;	genAssign
   0029 7A 00               611 	mov	r2,#0x00
   002B 7B 00               612 	mov	r3,#0x00
   002D                     613 00101$:
                            614 ;	genCmpLt
                            615 ;	genCmp
   002D C3                  616 	clr	c
   002E EA                  617 	mov	a,r2
   002F 94 0B               618 	subb	a,#0x0B
   0031 EB                  619 	mov	a,r3
   0032 64 80               620 	xrl	a,#0x80
   0034 94 80               621 	subb	a,#0x80
                            622 ;	genIfxJump
                            623 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0036 50 45               624 	jnc	00104$
                            625 ;	Peephole 300	removed redundant label 00117$
                            626 ;	sdcdriver.c:47: printf("%c",filenm[i1]);            // Print file name
                            627 ;	genAssign
   0038 90s00r02            628 	mov	dptr,#_filenm
   003B E0                  629 	movx	a,@dptr
   003C FC                  630 	mov	r4,a
   003D A3                  631 	inc	dptr
   003E E0                  632 	movx	a,@dptr
   003F FD                  633 	mov	r5,a
   0040 A3                  634 	inc	dptr
   0041 E0                  635 	movx	a,@dptr
   0042 FE                  636 	mov	r6,a
                            637 ;	genPlus
                            638 ;	Peephole 236.g	used r2 instead of ar2
   0043 EA                  639 	mov	a,r2
                            640 ;	Peephole 236.a	used r4 instead of ar4
   0044 2C                  641 	add	a,r4
   0045 FC                  642 	mov	r4,a
                            643 ;	Peephole 236.g	used r3 instead of ar3
   0046 EB                  644 	mov	a,r3
                            645 ;	Peephole 236.b	used r5 instead of ar5
   0047 3D                  646 	addc	a,r5
   0048 FD                  647 	mov	r5,a
                            648 ;	genPointerGet
                            649 ;	genGenPointerGet
   0049 8C 82               650 	mov	dpl,r4
   004B 8D 83               651 	mov	dph,r5
   004D 8E F0               652 	mov	b,r6
   004F 12s00r00            653 	lcall	__gptrget
   0052 FC                  654 	mov	r4,a
                            655 ;	genCast
   0053 7D 00               656 	mov	r5,#0x00
                            657 ;	genIpush
   0055 C0 02               658 	push	ar2
   0057 C0 03               659 	push	ar3
   0059 C0 04               660 	push	ar4
   005B C0 05               661 	push	ar5
                            662 ;	genIpush
   005D 74r0E               663 	mov	a,#__str_1
   005F C0 E0               664 	push	acc
   0061 74s00               665 	mov	a,#(__str_1 >> 8)
   0063 C0 E0               666 	push	acc
   0065 74 80               667 	mov	a,#0x80
   0067 C0 E0               668 	push	acc
                            669 ;	genCall
   0069 12s00r00            670 	lcall	_printf
   006C E5 81               671 	mov	a,sp
   006E 24 FB               672 	add	a,#0xfb
   0070 F5 81               673 	mov	sp,a
   0072 D0 03               674 	pop	ar3
   0074 D0 02               675 	pop	ar2
                            676 ;	sdcdriver.c:45: for(i1=0;i1<11;i1++)
                            677 ;	genPlus
                            678 ;     genPlusIncr
   0076 0A                  679 	inc	r2
                            680 ;	Peephole 112.b	changed ljmp to sjmp
                            681 ;	Peephole 243	avoided branch to sjmp
   0077 BA 00 B3            682 	cjne	r2,#0x00,00101$
   007A 0B                  683 	inc	r3
                            684 ;	Peephole 300	removed redundant label 00118$
   007B 80 B0               685 	sjmp	00101$
   007D                     686 00104$:
                            687 ;	sdcdriver.c:50: printf_tiny("\n\r");
                            688 ;	genIpush
   007D 74r11               689 	mov	a,#__str_2
   007F C0 E0               690 	push	acc
   0081 74s00               691 	mov	a,#(__str_2 >> 8)
   0083 C0 E0               692 	push	acc
                            693 ;	genCall
   0085 12s00r00            694 	lcall	_printf_tiny
   0088 15 81               695 	dec	sp
   008A 15 81               696 	dec	sp
                            697 ;	sdcdriver.c:51: printf("\n\rFile Size:");
                            698 ;	genIpush
   008C 74r14               699 	mov	a,#__str_3
   008E C0 E0               700 	push	acc
   0090 74s00               701 	mov	a,#(__str_3 >> 8)
   0092 C0 E0               702 	push	acc
   0094 74 80               703 	mov	a,#0x80
   0096 C0 E0               704 	push	acc
                            705 ;	genCall
   0098 12s00r00            706 	lcall	_printf
   009B 15 81               707 	dec	sp
   009D 15 81               708 	dec	sp
   009F 15 81               709 	dec	sp
                            710 ;	sdcdriver.c:52: for(i2=0;i2<4;i2++)
                            711 ;	genAssign
   00A1 7A 00               712 	mov	r2,#0x00
   00A3 7B 00               713 	mov	r3,#0x00
   00A5                     714 00105$:
                            715 ;	genCmpLt
                            716 ;	genCmp
   00A5 C3                  717 	clr	c
   00A6 EA                  718 	mov	a,r2
   00A7 94 04               719 	subb	a,#0x04
   00A9 EB                  720 	mov	a,r3
   00AA 64 80               721 	xrl	a,#0x80
   00AC 94 80               722 	subb	a,#0x80
                            723 ;	genIfxJump
                            724 ;	Peephole 108.a	removed ljmp by inverse jump logic
   00AE 50 41               725 	jnc	00108$
                            726 ;	Peephole 300	removed redundant label 00119$
                            727 ;	sdcdriver.c:54: printf_tiny("%x",(filesiz[i2] & 0xff));         // Print file size
                            728 ;	genAssign
   00B0 90s00r05            729 	mov	dptr,#_filesiz
   00B3 E0                  730 	movx	a,@dptr
   00B4 FC                  731 	mov	r4,a
   00B5 A3                  732 	inc	dptr
   00B6 E0                  733 	movx	a,@dptr
   00B7 FD                  734 	mov	r5,a
   00B8 A3                  735 	inc	dptr
   00B9 E0                  736 	movx	a,@dptr
   00BA FE                  737 	mov	r6,a
                            738 ;	genPlus
                            739 ;	Peephole 236.g	used r2 instead of ar2
   00BB EA                  740 	mov	a,r2
                            741 ;	Peephole 236.a	used r4 instead of ar4
   00BC 2C                  742 	add	a,r4
   00BD FC                  743 	mov	r4,a
                            744 ;	Peephole 236.g	used r3 instead of ar3
   00BE EB                  745 	mov	a,r3
                            746 ;	Peephole 236.b	used r5 instead of ar5
   00BF 3D                  747 	addc	a,r5
   00C0 FD                  748 	mov	r5,a
                            749 ;	genPointerGet
                            750 ;	genGenPointerGet
   00C1 8C 82               751 	mov	dpl,r4
   00C3 8D 83               752 	mov	dph,r5
   00C5 8E F0               753 	mov	b,r6
   00C7 12s00r00            754 	lcall	__gptrget
   00CA FC                  755 	mov	r4,a
                            756 ;	genCast
   00CB 7D 00               757 	mov	r5,#0x00
                            758 ;	genIpush
   00CD C0 02               759 	push	ar2
   00CF C0 03               760 	push	ar3
   00D1 C0 04               761 	push	ar4
   00D3 C0 05               762 	push	ar5
                            763 ;	genIpush
   00D5 74r21               764 	mov	a,#__str_4
   00D7 C0 E0               765 	push	acc
   00D9 74s00               766 	mov	a,#(__str_4 >> 8)
   00DB C0 E0               767 	push	acc
                            768 ;	genCall
   00DD 12s00r00            769 	lcall	_printf_tiny
   00E0 E5 81               770 	mov	a,sp
   00E2 24 FC               771 	add	a,#0xfc
   00E4 F5 81               772 	mov	sp,a
   00E6 D0 03               773 	pop	ar3
   00E8 D0 02               774 	pop	ar2
                            775 ;	sdcdriver.c:52: for(i2=0;i2<4;i2++)
                            776 ;	genPlus
                            777 ;     genPlusIncr
   00EA 0A                  778 	inc	r2
                            779 ;	Peephole 112.b	changed ljmp to sjmp
                            780 ;	Peephole 243	avoided branch to sjmp
   00EB BA 00 B7            781 	cjne	r2,#0x00,00105$
   00EE 0B                  782 	inc	r3
                            783 ;	Peephole 300	removed redundant label 00120$
   00EF 80 B4               784 	sjmp	00105$
   00F1                     785 00108$:
                            786 ;	sdcdriver.c:57: printf_tiny("\n\r");
                            787 ;	genIpush
   00F1 74r11               788 	mov	a,#__str_2
   00F3 C0 E0               789 	push	acc
   00F5 74s00               790 	mov	a,#(__str_2 >> 8)
   00F7 C0 E0               791 	push	acc
                            792 ;	genCall
   00F9 12s00r00            793 	lcall	_printf_tiny
   00FC 15 81               794 	dec	sp
   00FE 15 81               795 	dec	sp
                            796 ;	Peephole 300	removed redundant label 00109$
   0100 22                  797 	ret
                            798 ;------------------------------------------------------------
                            799 ;Allocation info for local variables in function 'fileread'
                            800 ;------------------------------------------------------------
                            801 ;fl                        Allocated with name '_fileread_fl_1_1'
                            802 ;i                         Allocated with name '_fileread_i_1_1'
                            803 ;filesector                Allocated with name '_fileread_filesector_1_1'
                            804 ;filesector_start          Allocated with name '_fileread_filesector_start_1_1'
                            805 ;------------------------------------------------------------
                            806 ;	sdcdriver.c:62: void fileread(int fl)
                            807 ;	-----------------------------------------
                            808 ;	 function fileread
                            809 ;	-----------------------------------------
   0101                     810 _fileread:
                            811 ;	genReceive
   0101 AA 83               812 	mov	r2,dph
   0103 E5 82               813 	mov	a,dpl
   0105 90s00r12            814 	mov	dptr,#_fileread_fl_1_1
   0108 F0                  815 	movx	@dptr,a
   0109 A3                  816 	inc	dptr
   010A EA                  817 	mov	a,r2
   010B F0                  818 	movx	@dptr,a
                            819 ;	sdcdriver.c:69: filesector = filesector_start + (fl*0x400);
                            820 ;	genAssign
   010C 90s00r12            821 	mov	dptr,#_fileread_fl_1_1
   010F E0                  822 	movx	a,@dptr
   0110 FA                  823 	mov	r2,a
   0111 A3                  824 	inc	dptr
   0112 E0                  825 	movx	a,@dptr
   0113 FB                  826 	mov	r3,a
                            827 ;	genLeftShift
                            828 ;	genLeftShiftLiteral
                            829 ;	genlshTwo
   0114 EA                  830 	mov	a,r2
                            831 ;	Peephole 254	optimized left shift
   0115 2A                  832 	add	a,r2
   0116 25 E0               833 	add	a,acc
                            834 ;	genCast
   0118 FB                  835 	mov	r3,a
   0119 7A 00               836 	mov	r2,#0x00
                            837 ;	Peephole 177.d	removed redundant move
   011B 33                  838 	rlc	a
   011C 95 E0               839 	subb	a,acc
   011E FC                  840 	mov	r4,a
   011F FD                  841 	mov	r5,a
                            842 ;	genPlus
                            843 ;     genPlusIncr
                            844 ;     genPlus shortcut
   0120 74 04               845 	mov	a,#0x04
                            846 ;	Peephole 236.a	used r4 instead of ar4
   0122 2C                  847 	add	a,r4
   0123 FC                  848 	mov	r4,a
                            849 ;	Peephole 181	changed mov to clr
   0124 E4                  850 	clr	a
                            851 ;	Peephole 236.b	used r5 instead of ar5
   0125 3D                  852 	addc	a,r5
                            853 ;	sdcdriver.c:71: sd_single_read(filesector);                 // Call single sector read dependig upon file number
                            854 ;	genCall
   0126 FD                  855 	mov	r5,a
   0127 8A 82               856 	mov	dpl,r2
   0129 8B 83               857 	mov	dph,r3
   012B 8C F0               858 	mov	b,r4
                            859 ;	Peephole 191	removed redundant mov
   012D 12s05r64            860 	lcall	_sd_single_read
                            861 ;	sdcdriver.c:73: printf("\n\rData received: \n\r");
                            862 ;	genIpush
   0130 74r24               863 	mov	a,#__str_5
   0132 C0 E0               864 	push	acc
   0134 74s00               865 	mov	a,#(__str_5 >> 8)
   0136 C0 E0               866 	push	acc
   0138 74 80               867 	mov	a,#0x80
   013A C0 E0               868 	push	acc
                            869 ;	genCall
   013C 12s00r00            870 	lcall	_printf
   013F 15 81               871 	dec	sp
   0141 15 81               872 	dec	sp
   0143 15 81               873 	dec	sp
                            874 ;	sdcdriver.c:75: for(i=0;i<320;i++)
                            875 ;	genAssign
   0145 7A 00               876 	mov	r2,#0x00
   0147 7B 00               877 	mov	r3,#0x00
   0149                     878 00101$:
                            879 ;	genCmpLt
                            880 ;	genCmp
   0149 C3                  881 	clr	c
   014A EA                  882 	mov	a,r2
   014B 94 40               883 	subb	a,#0x40
   014D EB                  884 	mov	a,r3
   014E 64 80               885 	xrl	a,#0x80
   0150 94 81               886 	subb	a,#0x81
                            887 ;	genIfxJump
                            888 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0152 50 3C               889 	jnc	00105$
                            890 ;	Peephole 300	removed redundant label 00110$
                            891 ;	sdcdriver.c:76: printf("%c",buff[i]);
                            892 ;	genAssign
   0154 90s00r08            893 	mov	dptr,#_buff
   0157 E0                  894 	movx	a,@dptr
   0158 FC                  895 	mov	r4,a
   0159 A3                  896 	inc	dptr
   015A E0                  897 	movx	a,@dptr
   015B FD                  898 	mov	r5,a
                            899 ;	genPlus
                            900 ;	Peephole 236.g	used r2 instead of ar2
   015C EA                  901 	mov	a,r2
                            902 ;	Peephole 236.a	used r4 instead of ar4
   015D 2C                  903 	add	a,r4
   015E F5 82               904 	mov	dpl,a
                            905 ;	Peephole 236.g	used r3 instead of ar3
   0160 EB                  906 	mov	a,r3
                            907 ;	Peephole 236.b	used r5 instead of ar5
   0161 3D                  908 	addc	a,r5
   0162 F5 83               909 	mov	dph,a
                            910 ;	genPointerGet
                            911 ;	genFarPointerGet
   0164 E0                  912 	movx	a,@dptr
   0165 FC                  913 	mov	r4,a
                            914 ;	genCast
   0166 7D 00               915 	mov	r5,#0x00
                            916 ;	genIpush
   0168 C0 02               917 	push	ar2
   016A C0 03               918 	push	ar3
   016C C0 04               919 	push	ar4
   016E C0 05               920 	push	ar5
                            921 ;	genIpush
   0170 74r0E               922 	mov	a,#__str_1
   0172 C0 E0               923 	push	acc
   0174 74s00               924 	mov	a,#(__str_1 >> 8)
   0176 C0 E0               925 	push	acc
   0178 74 80               926 	mov	a,#0x80
   017A C0 E0               927 	push	acc
                            928 ;	genCall
   017C 12s00r00            929 	lcall	_printf
   017F E5 81               930 	mov	a,sp
   0181 24 FB               931 	add	a,#0xfb
   0183 F5 81               932 	mov	sp,a
   0185 D0 03               933 	pop	ar3
   0187 D0 02               934 	pop	ar2
                            935 ;	sdcdriver.c:75: for(i=0;i<320;i++)
                            936 ;	genPlus
                            937 ;     genPlusIncr
   0189 0A                  938 	inc	r2
                            939 ;	Peephole 112.b	changed ljmp to sjmp
                            940 ;	Peephole 243	avoided branch to sjmp
   018A BA 00 BC            941 	cjne	r2,#0x00,00101$
   018D 0B                  942 	inc	r3
                            943 ;	Peephole 300	removed redundant label 00111$
   018E 80 B9               944 	sjmp	00101$
   0190                     945 00105$:
   0190 22                  946 	ret
                            947 ;------------------------------------------------------------
                            948 ;Allocation info for local variables in function 'getfilename'
                            949 ;------------------------------------------------------------
                            950 ;sloc0                     Allocated with name '_getfilename_sloc0_1_0'
                            951 ;ctr1                      Allocated with name '_getfilename_ctr1_1_1'
                            952 ;i                         Allocated with name '_getfilename_i_1_1'
                            953 ;file_sector_start         Allocated with name '_getfilename_file_sector_start_1_1'
                            954 ;file_sector_end           Allocated with name '_getfilename_file_sector_end_1_1'
                            955 ;------------------------------------------------------------
                            956 ;	sdcdriver.c:80: void getfilename(int ctr1)
                            957 ;	-----------------------------------------
                            958 ;	 function getfilename
                            959 ;	-----------------------------------------
   0191                     960 _getfilename:
                            961 ;	genReceive
   0191 AA 83               962 	mov	r2,dph
   0193 E5 82               963 	mov	a,dpl
   0195 90s00r14            964 	mov	dptr,#_getfilename_ctr1_1_1
   0198 F0                  965 	movx	@dptr,a
   0199 A3                  966 	inc	dptr
   019A EA                  967 	mov	a,r2
   019B F0                  968 	movx	@dptr,a
                            969 ;	sdcdriver.c:85: switch(ctr1)
                            970 ;	genAssign
   019C 90s00r14            971 	mov	dptr,#_getfilename_ctr1_1_1
   019F E0                  972 	movx	a,@dptr
   01A0 FA                  973 	mov	r2,a
   01A1 A3                  974 	inc	dptr
   01A2 E0                  975 	movx	a,@dptr
   01A3 FB                  976 	mov	r3,a
                            977 ;	genCmpEq
                            978 ;	gencjneshort
   01A4 BA 01 05            979 	cjne	r2,#0x01,00124$
   01A7 BB 00 02            980 	cjne	r3,#0x00,00124$
                            981 ;	Peephole 112.b	changed ljmp to sjmp
   01AA 80 10               982 	sjmp	00101$
   01AC                     983 00124$:
                            984 ;	genCmpEq
                            985 ;	gencjneshort
   01AC BA 02 05            986 	cjne	r2,#0x02,00125$
   01AF BB 00 02            987 	cjne	r3,#0x00,00125$
                            988 ;	Peephole 112.b	changed ljmp to sjmp
   01B2 80 25               989 	sjmp	00102$
   01B4                     990 00125$:
                            991 ;	genCmpEq
                            992 ;	gencjneshort
                            993 ;	Peephole 112.b	changed ljmp to sjmp
                            994 ;	sdcdriver.c:87: case 1:                                 // File name 1
                            995 ;	Peephole 112.b	changed ljmp to sjmp
                            996 ;	Peephole 198.a	optimized misc jump sequence
   01B4 BA 03 5A            997 	cjne	r2,#0x03,00119$
   01B7 BB 00 57            998 	cjne	r3,#0x00,00119$
   01BA 80 3A               999 	sjmp	00103$
                           1000 ;	Peephole 300	removed redundant label 00126$
   01BC                    1001 00101$:
                           1002 ;	sdcdriver.c:90: sd_multiple_read(file_sector_start,file_sector_end);
                           1003 ;	genAssign
   01BC 90s00r43           1004 	mov	dptr,#_sd_multiple_read_PARM_2
   01BF 74 5F              1005 	mov	a,#0x5F
   01C1 F0                 1006 	movx	@dptr,a
   01C2 A3                 1007 	inc	dptr
   01C3 74 C0              1008 	mov	a,#0xC0
   01C5 F0                 1009 	movx	@dptr,a
   01C6 A3                 1010 	inc	dptr
   01C7 74 03              1011 	mov	a,#0x03
   01C9 F0                 1012 	movx	@dptr,a
   01CA A3                 1013 	inc	dptr
                           1014 ;	Peephole 181	changed mov to clr
   01CB E4                 1015 	clr	a
   01CC F0                 1016 	movx	@dptr,a
                           1017 ;	genCall
                           1018 ;	Peephole 182.b	used 16 bit load of dptr
   01CD 90 C0 40           1019 	mov	dptr,#0xC040
   01D0 75 F0 03           1020 	mov	b,#0x03
                           1021 ;	Peephole 181	changed mov to clr
   01D3 E4                 1022 	clr	a
   01D4 12s09r3B           1023 	lcall	_sd_multiple_read
                           1024 ;	sdcdriver.c:91: break;
                           1025 ;	sdcdriver.c:92: case 2:                                 // File name 2
                           1026 ;	Peephole 112.b	changed ljmp to sjmp
   01D7 80 38              1027 	sjmp	00119$
   01D9                    1028 00102$:
                           1029 ;	sdcdriver.c:95: sd_multiple_read(file_sector_start,file_sector_end);
                           1030 ;	genAssign
   01D9 90s00r43           1031 	mov	dptr,#_sd_multiple_read_PARM_2
   01DC 74 FF              1032 	mov	a,#0xFF
   01DE F0                 1033 	movx	@dptr,a
   01DF A3                 1034 	inc	dptr
   01E0 74 C0              1035 	mov	a,#0xC0
   01E2 F0                 1036 	movx	@dptr,a
   01E3 A3                 1037 	inc	dptr
   01E4 74 03              1038 	mov	a,#0x03
   01E6 F0                 1039 	movx	@dptr,a
   01E7 A3                 1040 	inc	dptr
                           1041 ;	Peephole 181	changed mov to clr
   01E8 E4                 1042 	clr	a
   01E9 F0                 1043 	movx	@dptr,a
                           1044 ;	genCall
                           1045 ;	Peephole 182.b	used 16 bit load of dptr
   01EA 90 C0 E0           1046 	mov	dptr,#0xC0E0
   01ED 75 F0 03           1047 	mov	b,#0x03
                           1048 ;	Peephole 181	changed mov to clr
   01F0 E4                 1049 	clr	a
   01F1 12s09r3B           1050 	lcall	_sd_multiple_read
                           1051 ;	sdcdriver.c:96: break;
                           1052 ;	sdcdriver.c:97: case 3:                                 // File name 3
                           1053 ;	Peephole 112.b	changed ljmp to sjmp
   01F4 80 1B              1054 	sjmp	00119$
   01F6                    1055 00103$:
                           1056 ;	sdcdriver.c:100: sd_multiple_read(file_sector_start,file_sector_end);
                           1057 ;	genAssign
   01F6 90s00r43           1058 	mov	dptr,#_sd_multiple_read_PARM_2
   01F9 74 7F              1059 	mov	a,#0x7F
   01FB F0                 1060 	movx	@dptr,a
   01FC A3                 1061 	inc	dptr
   01FD 74 C1              1062 	mov	a,#0xC1
   01FF F0                 1063 	movx	@dptr,a
   0200 A3                 1064 	inc	dptr
   0201 74 03              1065 	mov	a,#0x03
   0203 F0                 1066 	movx	@dptr,a
   0204 A3                 1067 	inc	dptr
                           1068 ;	Peephole 181	changed mov to clr
   0205 E4                 1069 	clr	a
   0206 F0                 1070 	movx	@dptr,a
                           1071 ;	genCall
                           1072 ;	Peephole 182.b	used 16 bit load of dptr
   0207 90 C1 60           1073 	mov	dptr,#0xC160
   020A 75 F0 03           1074 	mov	b,#0x03
                           1075 ;	Peephole 181	changed mov to clr
   020D E4                 1076 	clr	a
   020E 12s09r3B           1077 	lcall	_sd_multiple_read
                           1078 ;	sdcdriver.c:105: for(i=0;i<11;i++)
   0211                    1079 00119$:
                           1080 ;	genAssign
   0211 7A 00              1081 	mov	r2,#0x00
   0213 7B 00              1082 	mov	r3,#0x00
   0215                    1083 00105$:
                           1084 ;	genCmpLt
                           1085 ;	genCmp
   0215 C3                 1086 	clr	c
   0216 EA                 1087 	mov	a,r2
   0217 94 0B              1088 	subb	a,#0x0B
   0219 EB                 1089 	mov	a,r3
   021A 64 80              1090 	xrl	a,#0x80
   021C 94 80              1091 	subb	a,#0x80
                           1092 ;	genIfxJump
                           1093 ;	Peephole 108.a	removed ljmp by inverse jump logic
   021E 50 33              1094 	jnc	00108$
                           1095 ;	Peephole 300	removed redundant label 00127$
                           1096 ;	sdcdriver.c:107: filenm[i] = buff[i];
                           1097 ;	genAssign
   0220 90s00r02           1098 	mov	dptr,#_filenm
   0223 E0                 1099 	movx	a,@dptr
   0224 FC                 1100 	mov	r4,a
   0225 A3                 1101 	inc	dptr
   0226 E0                 1102 	movx	a,@dptr
   0227 FD                 1103 	mov	r5,a
   0228 A3                 1104 	inc	dptr
   0229 E0                 1105 	movx	a,@dptr
   022A FE                 1106 	mov	r6,a
                           1107 ;	genPlus
                           1108 ;	Peephole 236.g	used r2 instead of ar2
   022B EA                 1109 	mov	a,r2
                           1110 ;	Peephole 236.a	used r4 instead of ar4
   022C 2C                 1111 	add	a,r4
   022D FC                 1112 	mov	r4,a
                           1113 ;	Peephole 236.g	used r3 instead of ar3
   022E EB                 1114 	mov	a,r3
                           1115 ;	Peephole 236.b	used r5 instead of ar5
   022F 3D                 1116 	addc	a,r5
   0230 FD                 1117 	mov	r5,a
                           1118 ;	genAssign
   0231 90s00r08           1119 	mov	dptr,#_buff
   0234 E0                 1120 	movx	a,@dptr
   0235 FF                 1121 	mov	r7,a
   0236 A3                 1122 	inc	dptr
   0237 E0                 1123 	movx	a,@dptr
   0238 F8                 1124 	mov	r0,a
                           1125 ;	genPlus
                           1126 ;	Peephole 236.g	used r2 instead of ar2
   0239 EA                 1127 	mov	a,r2
                           1128 ;	Peephole 236.a	used r7 instead of ar7
   023A 2F                 1129 	add	a,r7
   023B F5 82              1130 	mov	dpl,a
                           1131 ;	Peephole 236.g	used r3 instead of ar3
   023D EB                 1132 	mov	a,r3
                           1133 ;	Peephole 236.b	used r0 instead of ar0
   023E 38                 1134 	addc	a,r0
   023F F5 83              1135 	mov	dph,a
                           1136 ;	genPointerGet
                           1137 ;	genFarPointerGet
   0241 E0                 1138 	movx	a,@dptr
                           1139 ;	genPointerSet
                           1140 ;	genGenPointerSet
   0242 FF                 1141 	mov	r7,a
   0243 8C 82              1142 	mov	dpl,r4
   0245 8D 83              1143 	mov	dph,r5
   0247 8E F0              1144 	mov	b,r6
                           1145 ;	Peephole 191	removed redundant mov
   0249 12s00r00           1146 	lcall	__gptrput
                           1147 ;	sdcdriver.c:105: for(i=0;i<11;i++)
                           1148 ;	genPlus
                           1149 ;     genPlusIncr
                           1150 ;	tail increment optimized (range 9)
   024C 0A                 1151 	inc	r2
   024D BA 00 C5           1152 	cjne	r2,#0x00,00105$
   0250 0B                 1153 	inc	r3
                           1154 ;	Peephole 112.b	changed ljmp to sjmp
   0251 80 C2              1155 	sjmp	00105$
   0253                    1156 00108$:
                           1157 ;	sdcdriver.c:110: for(i=0;i<4;i++)
                           1158 ;	genAssign
   0253 7A 00              1159 	mov	r2,#0x00
   0255 7B 00              1160 	mov	r3,#0x00
   0257                    1161 00109$:
                           1162 ;	genCmpLt
                           1163 ;	genCmp
   0257 C3                 1164 	clr	c
   0258 EA                 1165 	mov	a,r2
   0259 94 04              1166 	subb	a,#0x04
   025B EB                 1167 	mov	a,r3
   025C 64 80              1168 	xrl	a,#0x80
   025E 94 80              1169 	subb	a,#0x80
                           1170 ;	genIfxJump
                           1171 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0260 50 3E              1172 	jnc	00113$
                           1173 ;	Peephole 300	removed redundant label 00128$
                           1174 ;	sdcdriver.c:112: filesiz[i] = buff[i+28];
                           1175 ;	genAssign
   0262 90s00r05           1176 	mov	dptr,#_filesiz
   0265 E0                 1177 	movx	a,@dptr
   0266 FC                 1178 	mov	r4,a
   0267 A3                 1179 	inc	dptr
   0268 E0                 1180 	movx	a,@dptr
   0269 FD                 1181 	mov	r5,a
   026A A3                 1182 	inc	dptr
   026B E0                 1183 	movx	a,@dptr
   026C FE                 1184 	mov	r6,a
                           1185 ;	genPlus
                           1186 ;	Peephole 236.g	used r2 instead of ar2
   026D EA                 1187 	mov	a,r2
                           1188 ;	Peephole 236.a	used r4 instead of ar4
   026E 2C                 1189 	add	a,r4
   026F FC                 1190 	mov	r4,a
                           1191 ;	Peephole 236.g	used r3 instead of ar3
   0270 EB                 1192 	mov	a,r3
                           1193 ;	Peephole 236.b	used r5 instead of ar5
   0271 3D                 1194 	addc	a,r5
   0272 FD                 1195 	mov	r5,a
                           1196 ;	genPlus
                           1197 ;     genPlusIncr
   0273 74 1C              1198 	mov	a,#0x1C
                           1199 ;	Peephole 236.a	used r2 instead of ar2
   0275 2A                 1200 	add	a,r2
   0276 F5*00              1201 	mov	_getfilename_sloc0_1_0,a
                           1202 ;	Peephole 181	changed mov to clr
   0278 E4                 1203 	clr	a
                           1204 ;	Peephole 236.b	used r3 instead of ar3
   0279 3B                 1205 	addc	a,r3
   027A F5*01              1206 	mov	(_getfilename_sloc0_1_0 + 1),a
                           1207 ;	genAssign
   027C 90s00r08           1208 	mov	dptr,#_buff
   027F E0                 1209 	movx	a,@dptr
   0280 F9                 1210 	mov	r1,a
   0281 A3                 1211 	inc	dptr
   0282 E0                 1212 	movx	a,@dptr
   0283 FF                 1213 	mov	r7,a
                           1214 ;	genPlus
   0284 E5*00              1215 	mov	a,_getfilename_sloc0_1_0
                           1216 ;	Peephole 236.a	used r1 instead of ar1
   0286 29                 1217 	add	a,r1
   0287 F5 82              1218 	mov	dpl,a
   0289 E5*01              1219 	mov	a,(_getfilename_sloc0_1_0 + 1)
                           1220 ;	Peephole 236.b	used r7 instead of ar7
   028B 3F                 1221 	addc	a,r7
   028C F5 83              1222 	mov	dph,a
                           1223 ;	genPointerGet
                           1224 ;	genFarPointerGet
   028E E0                 1225 	movx	a,@dptr
                           1226 ;	genPointerSet
                           1227 ;	genGenPointerSet
   028F FF                 1228 	mov	r7,a
   0290 8C 82              1229 	mov	dpl,r4
   0292 8D 83              1230 	mov	dph,r5
   0294 8E F0              1231 	mov	b,r6
                           1232 ;	Peephole 191	removed redundant mov
   0296 12s00r00           1233 	lcall	__gptrput
                           1234 ;	sdcdriver.c:110: for(i=0;i<4;i++)
                           1235 ;	genPlus
                           1236 ;     genPlusIncr
                           1237 ;	tail increment optimized (range 10)
   0299 0A                 1238 	inc	r2
   029A BA 00 BA           1239 	cjne	r2,#0x00,00109$
   029D 0B                 1240 	inc	r3
                           1241 ;	Peephole 112.b	changed ljmp to sjmp
   029E 80 B7              1242 	sjmp	00109$
   02A0                    1243 00113$:
   02A0 22                 1244 	ret
                           1245 ;------------------------------------------------------------
                           1246 ;Allocation info for local variables in function 'sd_copy'
                           1247 ;------------------------------------------------------------
                           1248 ;destsect                  Allocated with name '_sd_copy_PARM_2'
                           1249 ;srcsect                   Allocated with name '_sd_copy_srcsect_1_1'
                           1250 ;------------------------------------------------------------
                           1251 ;	sdcdriver.c:117: void sd_copy(ULONG srcsect,ULONG destsect)
                           1252 ;	-----------------------------------------
                           1253 ;	 function sd_copy
                           1254 ;	-----------------------------------------
   02A1                    1255 _sd_copy:
                           1256 ;	genReceive
   02A1 AA 82              1257 	mov	r2,dpl
   02A3 AB 83              1258 	mov	r3,dph
   02A5 AC F0              1259 	mov	r4,b
   02A7 FD                 1260 	mov	r5,a
   02A8 90s00r1A           1261 	mov	dptr,#_sd_copy_srcsect_1_1
   02AB EA                 1262 	mov	a,r2
   02AC F0                 1263 	movx	@dptr,a
   02AD A3                 1264 	inc	dptr
   02AE EB                 1265 	mov	a,r3
   02AF F0                 1266 	movx	@dptr,a
   02B0 A3                 1267 	inc	dptr
   02B1 EC                 1268 	mov	a,r4
   02B2 F0                 1269 	movx	@dptr,a
   02B3 A3                 1270 	inc	dptr
   02B4 ED                 1271 	mov	a,r5
   02B5 F0                 1272 	movx	@dptr,a
                           1273 ;	sdcdriver.c:120: sd_single_read(srcsect);            // read single sector
                           1274 ;	genAssign
   02B6 90s00r1A           1275 	mov	dptr,#_sd_copy_srcsect_1_1
   02B9 E0                 1276 	movx	a,@dptr
   02BA FA                 1277 	mov	r2,a
   02BB A3                 1278 	inc	dptr
   02BC E0                 1279 	movx	a,@dptr
   02BD FB                 1280 	mov	r3,a
   02BE A3                 1281 	inc	dptr
   02BF E0                 1282 	movx	a,@dptr
   02C0 FC                 1283 	mov	r4,a
   02C1 A3                 1284 	inc	dptr
   02C2 E0                 1285 	movx	a,@dptr
                           1286 ;	genCall
   02C3 FD                 1287 	mov	r5,a
   02C4 8A 82              1288 	mov	dpl,r2
   02C6 8B 83              1289 	mov	dph,r3
   02C8 8C F0              1290 	mov	b,r4
                           1291 ;	Peephole 191	removed redundant mov
   02CA 12s05r64           1292 	lcall	_sd_single_read
                           1293 ;	sdcdriver.c:121: memcpy(tempbuf,buff,512);           // Copy data to temporary buffer
                           1294 ;	genAssign
   02CD 90s00r0A           1295 	mov	dptr,#_tempbuf
   02D0 E0                 1296 	movx	a,@dptr
   02D1 FA                 1297 	mov	r2,a
   02D2 A3                 1298 	inc	dptr
   02D3 E0                 1299 	movx	a,@dptr
   02D4 FB                 1300 	mov	r3,a
                           1301 ;	genCast
   02D5 7C 00              1302 	mov	r4,#0x0
                           1303 ;	genAssign
   02D7 90s00r08           1304 	mov	dptr,#_buff
   02DA E0                 1305 	movx	a,@dptr
   02DB FD                 1306 	mov	r5,a
   02DC A3                 1307 	inc	dptr
   02DD E0                 1308 	movx	a,@dptr
   02DE FE                 1309 	mov	r6,a
                           1310 ;	genCast
   02DF 90s00r00           1311 	mov	dptr,#_memcpy_PARM_2
   02E2 ED                 1312 	mov	a,r5
   02E3 F0                 1313 	movx	@dptr,a
   02E4 A3                 1314 	inc	dptr
   02E5 EE                 1315 	mov	a,r6
   02E6 F0                 1316 	movx	@dptr,a
   02E7 A3                 1317 	inc	dptr
   02E8 74 00              1318 	mov	a,#0x0
   02EA F0                 1319 	movx	@dptr,a
                           1320 ;	genAssign
   02EB 90s00r00           1321 	mov	dptr,#_memcpy_PARM_3
                           1322 ;	Peephole 181	changed mov to clr
   02EE E4                 1323 	clr	a
   02EF F0                 1324 	movx	@dptr,a
   02F0 A3                 1325 	inc	dptr
   02F1 74 02              1326 	mov	a,#0x02
   02F3 F0                 1327 	movx	@dptr,a
                           1328 ;	genCall
   02F4 8A 82              1329 	mov	dpl,r2
   02F6 8B 83              1330 	mov	dph,r3
   02F8 8C F0              1331 	mov	b,r4
   02FA 12s00r00           1332 	lcall	_memcpy
                           1333 ;	sdcdriver.c:122: sd_block_write(destsect);           // Write data to destination sector
                           1334 ;	genAssign
   02FD 90s00r16           1335 	mov	dptr,#_sd_copy_PARM_2
   0300 E0                 1336 	movx	a,@dptr
   0301 FA                 1337 	mov	r2,a
   0302 A3                 1338 	inc	dptr
   0303 E0                 1339 	movx	a,@dptr
   0304 FB                 1340 	mov	r3,a
   0305 A3                 1341 	inc	dptr
   0306 E0                 1342 	movx	a,@dptr
   0307 FC                 1343 	mov	r4,a
   0308 A3                 1344 	inc	dptr
   0309 E0                 1345 	movx	a,@dptr
                           1346 ;	genCall
   030A FD                 1347 	mov	r5,a
   030B 8A 82              1348 	mov	dpl,r2
   030D 8B 83              1349 	mov	dph,r3
   030F 8C F0              1350 	mov	b,r4
                           1351 ;	Peephole 191	removed redundant mov
                           1352 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0311 02s08r5F           1353 	ljmp	_sd_block_write
                           1354 ;
                           1355 ;------------------------------------------------------------
                           1356 ;Allocation info for local variables in function 'sd_init'
                           1357 ;------------------------------------------------------------
                           1358 ;i                         Allocated with name '_sd_init_i_1_1'
                           1359 ;counter                   Allocated with name '_sd_init_counter_1_1'
                           1360 ;------------------------------------------------------------
                           1361 ;	sdcdriver.c:127: int sd_init()
                           1362 ;	-----------------------------------------
                           1363 ;	 function sd_init
                           1364 ;	-----------------------------------------
   0314                    1365 _sd_init:
                           1366 ;	sdcdriver.c:130: SPCON |= 0x40;                /* Run SPI */
                           1367 ;	genOr
   0314 43 C3 40           1368 	orl	_SPCON,#0x40
                           1369 ;	sdcdriver.c:132: for(i=0;i<8;i++)
                           1370 ;	genAssign
   0317 7A 08              1371 	mov	r2,#0x08
   0319 7B 00              1372 	mov	r3,#0x00
   031B                    1373 00145$:
                           1374 ;	sdcdriver.c:134: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1375 ;	genCall
   031B C0 02              1376 	push	ar2
   031D C0 03              1377 	push	ar3
   031F 12s0BrEE           1378 	lcall	_wait_tx_end
   0322 D0 03              1379 	pop	ar3
   0324 D0 02              1380 	pop	ar2
                           1381 ;	genMinus
                           1382 ;	genMinusDec
   0326 1A                 1383 	dec	r2
   0327 BA FF 01           1384 	cjne	r2,#0xff,00207$
   032A 1B                 1385 	dec	r3
   032B                    1386 00207$:
                           1387 ;	sdcdriver.c:132: for(i=0;i<8;i++)
                           1388 ;	genIfx
   032B EA                 1389 	mov	a,r2
   032C 4B                 1390 	orl	a,r3
                           1391 ;	genIfxJump
                           1392 ;	Peephole 108.b	removed ljmp by inverse jump logic
   032D 70 EC              1393 	jnz	00145$
                           1394 ;	Peephole 300	removed redundant label 00208$
                           1395 ;	sdcdriver.c:137: P1_4=0;                          // Make slave select SS low
                           1396 ;	genAssign
   032F C2 94              1397 	clr	_P1_4
                           1398 ;	sdcdriver.c:139: for(i=0;i<2;i++)
                           1399 ;	genAssign
   0331 7A 02              1400 	mov	r2,#0x02
   0333 7B 00              1401 	mov	r3,#0x00
   0335                    1402 00148$:
                           1403 ;	sdcdriver.c:141: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1404 ;	genCall
   0335 C0 02              1405 	push	ar2
   0337 C0 03              1406 	push	ar3
   0339 12s0BrEE           1407 	lcall	_wait_tx_end
   033C D0 03              1408 	pop	ar3
   033E D0 02              1409 	pop	ar2
                           1410 ;	genMinus
                           1411 ;	genMinusDec
   0340 1A                 1412 	dec	r2
   0341 BA FF 01           1413 	cjne	r2,#0xff,00209$
   0344 1B                 1414 	dec	r3
   0345                    1415 00209$:
                           1416 ;	sdcdriver.c:139: for(i=0;i<2;i++)
                           1417 ;	genIfx
   0345 EA                 1418 	mov	a,r2
   0346 4B                 1419 	orl	a,r3
                           1420 ;	genIfxJump
                           1421 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0347 70 EC              1422 	jnz	00148$
                           1423 ;	Peephole 300	removed redundant label 00210$
                           1424 ;	sdcdriver.c:144: wait_tx_end();              // Send Dummy byte & Wait for end of transmission
                           1425 ;	genCall
   0349 12s0BrEE           1426 	lcall	_wait_tx_end
                           1427 ;	sdcdriver.c:145: P1_4=0;
                           1428 ;	genAssign
   034C C2 94              1429 	clr	_P1_4
                           1430 ;	sdcdriver.c:146: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1431 ;	genCall
   034E 12s0BrEE           1432 	lcall	_wait_tx_end
                           1433 ;	sdcdriver.c:149: SPDAT = 0x40;
                           1434 ;	genAssign
   0351 75 C5 40           1435 	mov	_SPDAT,#0x40
                           1436 ;	sdcdriver.c:150: while(!transmit_completed);/* wait for end of transmition */
   0354                    1437 00101$:
                           1438 ;	genIfx
                           1439 ;	genIfxJump
                           1440 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1441 ;	sdcdriver.c:151: transmit_completed = 0;    /* clear software transfer flag */
                           1442 ;	genAssign
                           1443 ;	Peephole 250.a	using atomic test and clear
   0354 10*00 02           1444 	jbc	_transmit_completed,00211$
   0357 80 FB              1445 	sjmp	00101$
   0359                    1446 00211$:
                           1447 ;	sdcdriver.c:155: while(counter <= 3)
                           1448 ;	genAssign
   0359 7A 00              1449 	mov	r2,#0x00
   035B 7B 00              1450 	mov	r3,#0x00
   035D                    1451 00107$:
                           1452 ;	genCmpGt
                           1453 ;	genCmp
   035D C3                 1454 	clr	c
   035E 74 03              1455 	mov	a,#0x03
   0360 9A                 1456 	subb	a,r2
                           1457 ;	Peephole 159	avoided xrl during execution
   0361 74 80              1458 	mov	a,#(0x00 ^ 0x80)
   0363 8B F0              1459 	mov	b,r3
   0365 63 F0 80           1460 	xrl	b,#0x80
   0368 95 F0              1461 	subb	a,b
                           1462 ;	genIfxJump
                           1463 ;	Peephole 112.b	changed ljmp to sjmp
                           1464 ;	Peephole 160.a	removed sjmp by inverse jump logic
   036A 40 0F              1465 	jc	00109$
                           1466 ;	Peephole 300	removed redundant label 00212$
                           1467 ;	sdcdriver.c:157: SPDAT = 0x00;
                           1468 ;	genAssign
   036C 75 C5 00           1469 	mov	_SPDAT,#0x00
                           1470 ;	sdcdriver.c:158: counter++;
                           1471 ;	genPlus
                           1472 ;     genPlusIncr
   036F 0A                 1473 	inc	r2
   0370 BA 00 01           1474 	cjne	r2,#0x00,00213$
   0373 0B                 1475 	inc	r3
   0374                    1476 00213$:
                           1477 ;	sdcdriver.c:159: while(!transmit_completed);/* wait for end of transmition */
   0374                    1478 00104$:
                           1479 ;	genIfx
                           1480 ;	genIfxJump
                           1481 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1482 ;	sdcdriver.c:160: transmit_completed = 0;    /* clear software transfer flag */
                           1483 ;	genAssign
                           1484 ;	Peephole 250.a	using atomic test and clear
   0374 10*00 02           1485 	jbc	_transmit_completed,00214$
   0377 80 FB              1486 	sjmp	00104$
   0379                    1487 00214$:
                           1488 ;	Peephole 112.b	changed ljmp to sjmp
   0379 80 E2              1489 	sjmp	00107$
   037B                    1490 00109$:
                           1491 ;	sdcdriver.c:163: SPDAT = 0x95;
                           1492 ;	genAssign
   037B 75 C5 95           1493 	mov	_SPDAT,#0x95
                           1494 ;	sdcdriver.c:164: while(!transmit_completed);/* wait for end of transmition */
   037E                    1495 00110$:
                           1496 ;	genIfx
                           1497 ;	genIfxJump
                           1498 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1499 ;	sdcdriver.c:165: transmit_completed = 0;    /* clear software transfer flag */
                           1500 ;	genAssign
                           1501 ;	Peephole 250.a	using atomic test and clear
   037E 10*00 02           1502 	jbc	_transmit_completed,00215$
   0381 80 FB              1503 	sjmp	00110$
   0383                    1504 00215$:
                           1505 ;	sdcdriver.c:168: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1506 ;	genCall
   0383 12s0BrEE           1507 	lcall	_wait_tx_end
                           1508 ;	sdcdriver.c:170: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1509 ;	genCall
   0386 12s0BrEE           1510 	lcall	_wait_tx_end
                           1511 ;	sdcdriver.c:173: while(data_save != 0x00)
   0389                    1512 00122$:
                           1513 ;	genAssign
   0389 90s00r01           1514 	mov	dptr,#_data_save
   038C E0                 1515 	movx	a,@dptr
                           1516 ;	genCmpEq
                           1517 ;	gencjneshort
                           1518 ;	Peephole 112.b	changed ljmp to sjmp
   038D FA                 1519 	mov	r2,a
                           1520 ;	Peephole 115.b	jump optimization
   038E 60 4A              1521 	jz	00124$
                           1522 ;	Peephole 300	removed redundant label 00216$
                           1523 ;	sdcdriver.c:175: SPDAT = 0x41;               // Start byte
                           1524 ;	genAssign
   0390 75 C5 41           1525 	mov	_SPDAT,#0x41
                           1526 ;	sdcdriver.c:176: while(!transmit_completed);/* wait for end of transmition */
   0393                    1527 00113$:
                           1528 ;	genIfx
                           1529 ;	genIfxJump
                           1530 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1531 ;	sdcdriver.c:177: transmit_completed = 0;    /* clear software transfer flag */
                           1532 ;	genAssign
                           1533 ;	Peephole 250.a	using atomic test and clear
   0393 10*00 02           1534 	jbc	_transmit_completed,00217$
   0396 80 FB              1535 	sjmp	00113$
   0398                    1536 00217$:
                           1537 ;	sdcdriver.c:181: while(counter <= 3)
                           1538 ;	genAssign
   0398 7A 00              1539 	mov	r2,#0x00
   039A 7B 00              1540 	mov	r3,#0x00
   039C                    1541 00119$:
                           1542 ;	genCmpGt
                           1543 ;	genCmp
   039C C3                 1544 	clr	c
   039D 74 03              1545 	mov	a,#0x03
   039F 9A                 1546 	subb	a,r2
                           1547 ;	Peephole 159	avoided xrl during execution
   03A0 74 80              1548 	mov	a,#(0x00 ^ 0x80)
   03A2 8B F0              1549 	mov	b,r3
   03A4 63 F0 80           1550 	xrl	b,#0x80
   03A7 95 F0              1551 	subb	a,b
                           1552 ;	genIfxJump
                           1553 ;	Peephole 112.b	changed ljmp to sjmp
                           1554 ;	Peephole 160.a	removed sjmp by inverse jump logic
   03A9 40 0F              1555 	jc	00121$
                           1556 ;	Peephole 300	removed redundant label 00218$
                           1557 ;	sdcdriver.c:183: SPDAT = 0x00;
                           1558 ;	genAssign
   03AB 75 C5 00           1559 	mov	_SPDAT,#0x00
                           1560 ;	sdcdriver.c:184: counter++;
                           1561 ;	genPlus
                           1562 ;     genPlusIncr
   03AE 0A                 1563 	inc	r2
   03AF BA 00 01           1564 	cjne	r2,#0x00,00219$
   03B2 0B                 1565 	inc	r3
   03B3                    1566 00219$:
                           1567 ;	sdcdriver.c:185: while(!transmit_completed);/* wait for end of transmition */
   03B3                    1568 00116$:
                           1569 ;	genIfx
                           1570 ;	genIfxJump
                           1571 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1572 ;	sdcdriver.c:186: transmit_completed = 0;    /* clear software transfer flag */
                           1573 ;	genAssign
                           1574 ;	Peephole 250.a	using atomic test and clear
   03B3 10*00 02           1575 	jbc	_transmit_completed,00220$
   03B6 80 FB              1576 	sjmp	00116$
   03B8                    1577 00220$:
                           1578 ;	Peephole 112.b	changed ljmp to sjmp
   03B8 80 E2              1579 	sjmp	00119$
   03BA                    1580 00121$:
                           1581 ;	sdcdriver.c:188: for(i=0;i<3;i++)
                           1582 ;	genAssign
   03BA 7A 03              1583 	mov	r2,#0x03
   03BC 7B 00              1584 	mov	r3,#0x00
   03BE                    1585 00151$:
                           1586 ;	sdcdriver.c:189: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1587 ;	genCall
   03BE C0 02              1588 	push	ar2
   03C0 C0 03              1589 	push	ar3
   03C2 12s0BrEE           1590 	lcall	_wait_tx_end
   03C5 D0 03              1591 	pop	ar3
   03C7 D0 02              1592 	pop	ar2
                           1593 ;	genMinus
                           1594 ;	genMinusDec
   03C9 1A                 1595 	dec	r2
   03CA BA FF 01           1596 	cjne	r2,#0xff,00221$
   03CD 1B                 1597 	dec	r3
   03CE                    1598 00221$:
                           1599 ;	sdcdriver.c:188: for(i=0;i<3;i++)
                           1600 ;	genIfx
   03CE EA                 1601 	mov	a,r2
   03CF 4B                 1602 	orl	a,r3
                           1603 ;	genIfxJump
                           1604 ;	Peephole 108.b	removed ljmp by inverse jump logic
   03D0 70 EC              1605 	jnz	00151$
                           1606 ;	Peephole 300	removed redundant label 00222$
                           1607 ;	sdcdriver.c:191: delay(5);
                           1608 ;	genCall
                           1609 ;	Peephole 182.b	used 16 bit load of dptr
   03D2 90 00 05           1610 	mov	dptr,#0x0005
   03D5 12s0BrF7           1611 	lcall	_delay
                           1612 ;	Peephole 112.b	changed ljmp to sjmp
   03D8 80 AF              1613 	sjmp	00122$
   03DA                    1614 00124$:
                           1615 ;	sdcdriver.c:196: SPDAT = 0x7A;               // Start byte
                           1616 ;	genAssign
   03DA 75 C5 7A           1617 	mov	_SPDAT,#0x7A
                           1618 ;	sdcdriver.c:197: while(!transmit_completed);/* wait for end of transmition */
   03DD                    1619 00125$:
                           1620 ;	genIfx
                           1621 ;	genIfxJump
                           1622 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1623 ;	sdcdriver.c:198: transmit_completed = 0;    /* clear software transfer flag */
                           1624 ;	genAssign
                           1625 ;	Peephole 250.a	using atomic test and clear
   03DD 10*00 02           1626 	jbc	_transmit_completed,00223$
   03E0 80 FB              1627 	sjmp	00125$
   03E2                    1628 00223$:
                           1629 ;	sdcdriver.c:202: while(counter <= 3)
                           1630 ;	genAssign
   03E2 7A 00              1631 	mov	r2,#0x00
   03E4 7B 00              1632 	mov	r3,#0x00
   03E6                    1633 00131$:
                           1634 ;	genCmpGt
                           1635 ;	genCmp
   03E6 C3                 1636 	clr	c
   03E7 74 03              1637 	mov	a,#0x03
   03E9 9A                 1638 	subb	a,r2
                           1639 ;	Peephole 159	avoided xrl during execution
   03EA 74 80              1640 	mov	a,#(0x00 ^ 0x80)
   03EC 8B F0              1641 	mov	b,r3
   03EE 63 F0 80           1642 	xrl	b,#0x80
   03F1 95 F0              1643 	subb	a,b
                           1644 ;	genIfxJump
                           1645 ;	Peephole 112.b	changed ljmp to sjmp
                           1646 ;	Peephole 160.a	removed sjmp by inverse jump logic
   03F3 40 0F              1647 	jc	00133$
                           1648 ;	Peephole 300	removed redundant label 00224$
                           1649 ;	sdcdriver.c:204: SPDAT = 0x00;
                           1650 ;	genAssign
   03F5 75 C5 00           1651 	mov	_SPDAT,#0x00
                           1652 ;	sdcdriver.c:205: counter++;
                           1653 ;	genPlus
                           1654 ;     genPlusIncr
   03F8 0A                 1655 	inc	r2
   03F9 BA 00 01           1656 	cjne	r2,#0x00,00225$
   03FC 0B                 1657 	inc	r3
   03FD                    1658 00225$:
                           1659 ;	sdcdriver.c:206: while(!transmit_completed);/* wait for end of transmition */
   03FD                    1660 00128$:
                           1661 ;	genIfx
                           1662 ;	genIfxJump
                           1663 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1664 ;	sdcdriver.c:207: transmit_completed = 0;    /* clear software transfer flag */
                           1665 ;	genAssign
                           1666 ;	Peephole 250.a	using atomic test and clear
   03FD 10*00 02           1667 	jbc	_transmit_completed,00226$
   0400 80 FB              1668 	sjmp	00128$
   0402                    1669 00226$:
                           1670 ;	Peephole 112.b	changed ljmp to sjmp
   0402 80 E2              1671 	sjmp	00131$
   0404                    1672 00133$:
                           1673 ;	sdcdriver.c:210: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1674 ;	genCall
   0404 12s0BrEE           1675 	lcall	_wait_tx_end
                           1676 ;	sdcdriver.c:212: for(i=0;i<6;i++)
                           1677 ;	genAssign
   0407 7A 06              1678 	mov	r2,#0x06
   0409 7B 00              1679 	mov	r3,#0x00
   040B                    1680 00154$:
                           1681 ;	sdcdriver.c:214: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1682 ;	genCall
   040B C0 02              1683 	push	ar2
   040D C0 03              1684 	push	ar3
   040F 12s0BrEE           1685 	lcall	_wait_tx_end
   0412 D0 03              1686 	pop	ar3
   0414 D0 02              1687 	pop	ar2
                           1688 ;	sdcdriver.c:215: data_save = serial_data;
                           1689 ;	genAssign
   0416 90s00r00           1690 	mov	dptr,#_serial_data
   0419 E0                 1691 	movx	a,@dptr
                           1692 ;	genAssign
   041A FC                 1693 	mov	r4,a
   041B 90s00r01           1694 	mov	dptr,#_data_save
                           1695 ;	Peephole 100	removed redundant mov
   041E F0                 1696 	movx	@dptr,a
                           1697 ;	genMinus
                           1698 ;	genMinusDec
   041F 1A                 1699 	dec	r2
   0420 BA FF 01           1700 	cjne	r2,#0xff,00227$
   0423 1B                 1701 	dec	r3
   0424                    1702 00227$:
                           1703 ;	sdcdriver.c:212: for(i=0;i<6;i++)
                           1704 ;	genIfx
   0424 EA                 1705 	mov	a,r2
   0425 4B                 1706 	orl	a,r3
                           1707 ;	genIfxJump
                           1708 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0426 70 E3              1709 	jnz	00154$
                           1710 ;	Peephole 300	removed redundant label 00228$
                           1711 ;	sdcdriver.c:220: SPDAT = 0x4D;               // Start byte
                           1712 ;	genAssign
   0428 75 C5 4D           1713 	mov	_SPDAT,#0x4D
                           1714 ;	sdcdriver.c:221: while(!transmit_completed);/* wait for end of transmition */
   042B                    1715 00134$:
                           1716 ;	genIfx
                           1717 ;	genIfxJump
                           1718 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1719 ;	sdcdriver.c:222: transmit_completed = 0;    /* clear software transfer flag */
                           1720 ;	genAssign
                           1721 ;	Peephole 250.a	using atomic test and clear
   042B 10*00 02           1722 	jbc	_transmit_completed,00229$
   042E 80 FB              1723 	sjmp	00134$
   0430                    1724 00229$:
                           1725 ;	sdcdriver.c:226: while(counter <= 3)
                           1726 ;	genAssign
   0430 7A 00              1727 	mov	r2,#0x00
   0432 7B 00              1728 	mov	r3,#0x00
   0434                    1729 00140$:
                           1730 ;	genCmpGt
                           1731 ;	genCmp
   0434 C3                 1732 	clr	c
   0435 74 03              1733 	mov	a,#0x03
   0437 9A                 1734 	subb	a,r2
                           1735 ;	Peephole 159	avoided xrl during execution
   0438 74 80              1736 	mov	a,#(0x00 ^ 0x80)
   043A 8B F0              1737 	mov	b,r3
   043C 63 F0 80           1738 	xrl	b,#0x80
   043F 95 F0              1739 	subb	a,b
                           1740 ;	genIfxJump
                           1741 ;	Peephole 112.b	changed ljmp to sjmp
                           1742 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0441 40 0F              1743 	jc	00142$
                           1744 ;	Peephole 300	removed redundant label 00230$
                           1745 ;	sdcdriver.c:228: SPDAT = 0x00;
                           1746 ;	genAssign
   0443 75 C5 00           1747 	mov	_SPDAT,#0x00
                           1748 ;	sdcdriver.c:229: counter++;
                           1749 ;	genPlus
                           1750 ;     genPlusIncr
   0446 0A                 1751 	inc	r2
   0447 BA 00 01           1752 	cjne	r2,#0x00,00231$
   044A 0B                 1753 	inc	r3
   044B                    1754 00231$:
                           1755 ;	sdcdriver.c:230: while(!transmit_completed);/* wait for end of transmition */
   044B                    1756 00137$:
                           1757 ;	genIfx
                           1758 ;	genIfxJump
                           1759 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1760 ;	sdcdriver.c:231: transmit_completed = 0;    /* clear software transfer flag */
                           1761 ;	genAssign
                           1762 ;	Peephole 250.a	using atomic test and clear
   044B 10*00 02           1763 	jbc	_transmit_completed,00232$
   044E 80 FB              1764 	sjmp	00137$
   0450                    1765 00232$:
                           1766 ;	Peephole 112.b	changed ljmp to sjmp
   0450 80 E2              1767 	sjmp	00140$
   0452                    1768 00142$:
                           1769 ;	sdcdriver.c:234: for(i=0;i<4;i++)
                           1770 ;	genAssign
   0452 7A 04              1771 	mov	r2,#0x04
   0454 7B 00              1772 	mov	r3,#0x00
   0456                    1773 00157$:
                           1774 ;	sdcdriver.c:235: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1775 ;	genCall
   0456 C0 02              1776 	push	ar2
   0458 C0 03              1777 	push	ar3
   045A 12s0BrEE           1778 	lcall	_wait_tx_end
   045D D0 03              1779 	pop	ar3
   045F D0 02              1780 	pop	ar2
                           1781 ;	genMinus
                           1782 ;	genMinusDec
   0461 1A                 1783 	dec	r2
   0462 BA FF 01           1784 	cjne	r2,#0xff,00233$
   0465 1B                 1785 	dec	r3
   0466                    1786 00233$:
                           1787 ;	sdcdriver.c:234: for(i=0;i<4;i++)
                           1788 ;	genIfx
   0466 EA                 1789 	mov	a,r2
   0467 4B                 1790 	orl	a,r3
                           1791 ;	genIfxJump
                           1792 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0468 70 EC              1793 	jnz	00157$
                           1794 ;	Peephole 300	removed redundant label 00234$
                           1795 ;	sdcdriver.c:236: data_save = serial_data;
                           1796 ;	genAssign
   046A 90s00r00           1797 	mov	dptr,#_serial_data
   046D E0                 1798 	movx	a,@dptr
                           1799 ;	genAssign
   046E FA                 1800 	mov	r2,a
   046F 90s00r01           1801 	mov	dptr,#_data_save
                           1802 ;	Peephole 100	removed redundant mov
   0472 F0                 1803 	movx	@dptr,a
                           1804 ;	sdcdriver.c:238: return 0;
                           1805 ;	genRet
                           1806 ;	Peephole 182.b	used 16 bit load of dptr
   0473 90 00 00           1807 	mov	dptr,#0x0000
                           1808 ;	Peephole 300	removed redundant label 00158$
   0476 22                 1809 	ret
                           1810 ;------------------------------------------------------------
                           1811 ;Allocation info for local variables in function 'sd_single_read_glcd'
                           1812 ;------------------------------------------------------------
                           1813 ;sectnum                   Allocated with name '_sd_single_read_glcd_sectnum_1_1'
                           1814 ;countera                  Allocated with name '_sd_single_read_glcd_countera_1_1'
                           1815 ;ii                        Allocated with name '_sd_single_read_glcd_ii_1_1'
                           1816 ;save_data1                Allocated with name '_sd_single_read_glcd_save_data1_1_1'
                           1817 ;cli                       Allocated with name '_sd_single_read_glcd_cli_1_1'
                           1818 ;temp2                     Allocated with name '_sd_single_read_glcd_temp2_1_1'
                           1819 ;------------------------------------------------------------
                           1820 ;	sdcdriver.c:242: BYTE sd_single_read_glcd(ULONG sectnum)
                           1821 ;	-----------------------------------------
                           1822 ;	 function sd_single_read_glcd
                           1823 ;	-----------------------------------------
   0477                    1824 _sd_single_read_glcd:
                           1825 ;	genReceive
   0477 AA 82              1826 	mov	r2,dpl
   0479 AB 83              1827 	mov	r3,dph
   047B AC F0              1828 	mov	r4,b
   047D FD                 1829 	mov	r5,a
   047E 90s00r1E           1830 	mov	dptr,#_sd_single_read_glcd_sectnum_1_1
   0481 EA                 1831 	mov	a,r2
   0482 F0                 1832 	movx	@dptr,a
   0483 A3                 1833 	inc	dptr
   0484 EB                 1834 	mov	a,r3
   0485 F0                 1835 	movx	@dptr,a
   0486 A3                 1836 	inc	dptr
   0487 EC                 1837 	mov	a,r4
   0488 F0                 1838 	movx	@dptr,a
   0489 A3                 1839 	inc	dptr
   048A ED                 1840 	mov	a,r5
   048B F0                 1841 	movx	@dptr,a
                           1842 ;	sdcdriver.c:248: temp2.ul = sectnum;
                           1843 ;	genAssign
   048C 90s00r1E           1844 	mov	dptr,#_sd_single_read_glcd_sectnum_1_1
   048F E0                 1845 	movx	a,@dptr
   0490 FA                 1846 	mov	r2,a
   0491 A3                 1847 	inc	dptr
   0492 E0                 1848 	movx	a,@dptr
   0493 FB                 1849 	mov	r3,a
   0494 A3                 1850 	inc	dptr
   0495 E0                 1851 	movx	a,@dptr
   0496 FC                 1852 	mov	r4,a
   0497 A3                 1853 	inc	dptr
   0498 E0                 1854 	movx	a,@dptr
   0499 FD                 1855 	mov	r5,a
                           1856 ;	genPointerSet
                           1857 ;     genFarPointerSet
   049A 90s00r22           1858 	mov	dptr,#_sd_single_read_glcd_temp2_1_1
   049D EA                 1859 	mov	a,r2
   049E F0                 1860 	movx	@dptr,a
   049F A3                 1861 	inc	dptr
   04A0 EB                 1862 	mov	a,r3
   04A1 F0                 1863 	movx	@dptr,a
   04A2 A3                 1864 	inc	dptr
   04A3 EC                 1865 	mov	a,r4
   04A4 F0                 1866 	movx	@dptr,a
   04A5 A3                 1867 	inc	dptr
   04A6 ED                 1868 	mov	a,r5
   04A7 F0                 1869 	movx	@dptr,a
                           1870 ;	sdcdriver.c:252: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1871 ;	genCall
   04A8 12s0BrEE           1872 	lcall	_wait_tx_end
                           1873 ;	sdcdriver.c:254: SPDAT = 0x51;               // Start byte
                           1874 ;	genAssign
   04AB 75 C5 51           1875 	mov	_SPDAT,#0x51
                           1876 ;	sdcdriver.c:255: while(!transmit_completed);/* wait for end of transmition */
   04AE                    1877 00101$:
                           1878 ;	genIfx
                           1879 ;	genIfxJump
                           1880 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1881 ;	sdcdriver.c:256: transmit_completed = 0;    /* clear software transfer flag */
                           1882 ;	genAssign
                           1883 ;	Peephole 250.a	using atomic test and clear
   04AE 10*00 02           1884 	jbc	_transmit_completed,00137$
   04B1 80 FB              1885 	sjmp	00101$
   04B3                    1886 00137$:
                           1887 ;	sdcdriver.c:259: while(countera >=0)
                           1888 ;	genAssign
   04B3 7A 03              1889 	mov	r2,#0x03
   04B5 7B 00              1890 	mov	r3,#0x00
   04B7                    1891 00107$:
                           1892 ;	genCmpLt
                           1893 ;	genCmp
   04B7 EB                 1894 	mov	a,r3
                           1895 ;	genIfxJump
                           1896 ;	Peephole 108.e	removed ljmp by inverse jump logic
   04B8 20 E7 19           1897 	jb	acc.7,00109$
                           1898 ;	Peephole 300	removed redundant label 00138$
                           1899 ;	sdcdriver.c:261: SPDAT = temp2.b[countera];
                           1900 ;	genPlus
                           1901 ;	Peephole 236.g	used r2 instead of ar2
   04BB EA                 1902 	mov	a,r2
   04BC 24r22              1903 	add	a,#_sd_single_read_glcd_temp2_1_1
   04BE F5 82              1904 	mov	dpl,a
                           1905 ;	Peephole 236.g	used r3 instead of ar3
   04C0 EB                 1906 	mov	a,r3
   04C1 34s00              1907 	addc	a,#(_sd_single_read_glcd_temp2_1_1 >> 8)
   04C3 F5 83              1908 	mov	dph,a
                           1909 ;	genPointerGet
                           1910 ;	genFarPointerGet
   04C5 E0                 1911 	movx	a,@dptr
   04C6 F5 C5              1912 	mov	_SPDAT,a
                           1913 ;	sdcdriver.c:262: countera--;
                           1914 ;	genMinus
                           1915 ;	genMinusDec
   04C8 1A                 1916 	dec	r2
   04C9 BA FF 01           1917 	cjne	r2,#0xff,00139$
   04CC 1B                 1918 	dec	r3
   04CD                    1919 00139$:
                           1920 ;	sdcdriver.c:263: while(!transmit_completed);
   04CD                    1921 00104$:
                           1922 ;	genIfx
                           1923 ;	genIfxJump
                           1924 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1925 ;	sdcdriver.c:264: transmit_completed = 0;
                           1926 ;	genAssign
                           1927 ;	Peephole 250.a	using atomic test and clear
   04CD 10*00 02           1928 	jbc	_transmit_completed,00140$
   04D0 80 FB              1929 	sjmp	00104$
   04D2                    1930 00140$:
                           1931 ;	Peephole 112.b	changed ljmp to sjmp
   04D2 80 E3              1932 	sjmp	00107$
   04D4                    1933 00109$:
                           1934 ;	sdcdriver.c:268: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1935 ;	genCall
   04D4 12s0BrEE           1936 	lcall	_wait_tx_end
                           1937 ;	sdcdriver.c:269: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1938 ;	genCall
   04D7 12s0BrEE           1939 	lcall	_wait_tx_end
                           1940 ;	sdcdriver.c:272: for(ii=0;ii<4;ii++)
                           1941 ;	genAssign
   04DA 7A 04              1942 	mov	r2,#0x04
   04DC 7B 00              1943 	mov	r3,#0x00
   04DE                    1944 00112$:
                           1945 ;	sdcdriver.c:274: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1946 ;	genCall
   04DE C0 02              1947 	push	ar2
   04E0 C0 03              1948 	push	ar3
   04E2 12s0BrEE           1949 	lcall	_wait_tx_end
   04E5 D0 03              1950 	pop	ar3
   04E7 D0 02              1951 	pop	ar2
                           1952 ;	sdcdriver.c:275: save_data1 = serial_data;
                           1953 ;	genMinus
                           1954 ;	genMinusDec
   04E9 1A                 1955 	dec	r2
   04EA BA FF 01           1956 	cjne	r2,#0xff,00141$
   04ED 1B                 1957 	dec	r3
   04EE                    1958 00141$:
                           1959 ;	sdcdriver.c:272: for(ii=0;ii<4;ii++)
                           1960 ;	genIfx
   04EE EA                 1961 	mov	a,r2
   04EF 4B                 1962 	orl	a,r3
                           1963 ;	genIfxJump
                           1964 ;	Peephole 108.b	removed ljmp by inverse jump logic
   04F0 70 EC              1965 	jnz	00112$
                           1966 ;	Peephole 300	removed redundant label 00142$
                           1967 ;	sdcdriver.c:279: for(ii=0;ii<320;ii++)
                           1968 ;	genAssign
   04F2 7A 40              1969 	mov	r2,#0x40
   04F4 7B 01              1970 	mov	r3,#0x01
   04F6                    1971 00115$:
                           1972 ;	sdcdriver.c:281: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           1973 ;	genCall
   04F6 C0 02              1974 	push	ar2
   04F8 C0 03              1975 	push	ar3
   04FA 12s0BrEE           1976 	lcall	_wait_tx_end
   04FD D0 03              1977 	pop	ar3
   04FF D0 02              1978 	pop	ar2
                           1979 ;	sdcdriver.c:282: save_data1 = SPDAT;
                           1980 ;	genAssign
   0501 AC C5              1981 	mov	r4,_SPDAT
                           1982 ;	sdcdriver.c:283: printf_tiny("Data: %x\n\r",(save_data1 & 0xFF));
                           1983 ;	genCast
   0503 7D 00              1984 	mov	r5,#0x00
                           1985 ;	genIpush
   0505 C0 02              1986 	push	ar2
   0507 C0 03              1987 	push	ar3
   0509 C0 04              1988 	push	ar4
   050B C0 05              1989 	push	ar5
                           1990 ;	genIpush
   050D 74r38              1991 	mov	a,#__str_6
   050F C0 E0              1992 	push	acc
   0511 74s00              1993 	mov	a,#(__str_6 >> 8)
   0513 C0 E0              1994 	push	acc
                           1995 ;	genCall
   0515 12s00r00           1996 	lcall	_printf_tiny
   0518 E5 81              1997 	mov	a,sp
   051A 24 FC              1998 	add	a,#0xfc
   051C F5 81              1999 	mov	sp,a
   051E D0 03              2000 	pop	ar3
   0520 D0 02              2001 	pop	ar2
                           2002 ;	sdcdriver.c:284: cli = glcd_format(SPDAT);
                           2003 ;	genAssign
   0522 AC C5              2004 	mov	r4,_SPDAT
                           2005 ;	genCall
   0524 8C 82              2006 	mov	dpl,r4
   0526 C0 02              2007 	push	ar2
   0528 C0 03              2008 	push	ar3
   052A 12s00r00           2009 	lcall	_glcd_format
   052D AC 82              2010 	mov	r4,dpl
   052F D0 03              2011 	pop	ar3
   0531 D0 02              2012 	pop	ar2
                           2013 ;	sdcdriver.c:285: glcd_putch(cli);
                           2014 ;	genCall
   0533 8C 82              2015 	mov	dpl,r4
   0535 C0 02              2016 	push	ar2
   0537 C0 03              2017 	push	ar3
   0539 12s00r00           2018 	lcall	_glcd_putch
   053C D0 03              2019 	pop	ar3
   053E D0 02              2020 	pop	ar2
                           2021 ;	genMinus
                           2022 ;	genMinusDec
   0540 1A                 2023 	dec	r2
   0541 BA FF 01           2024 	cjne	r2,#0xff,00143$
   0544 1B                 2025 	dec	r3
   0545                    2026 00143$:
                           2027 ;	sdcdriver.c:279: for(ii=0;ii<320;ii++)
                           2028 ;	genIfx
   0545 EA                 2029 	mov	a,r2
   0546 4B                 2030 	orl	a,r3
                           2031 ;	genIfxJump
                           2032 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2033 ;	sdcdriver.c:288: for(ii=0;ii<4;ii++)
                           2034 ;	genAssign
   0547 70 AD              2035 	jnz	00115$
                           2036 ;	Peephole 300	removed redundant label 00144$
   0549 7A 04              2037 	mov	r2,#0x04
                           2038 ;	Peephole 256.d	loading r3 with zero from a
   054B FB                 2039 	mov	r3,a
   054C                    2040 00118$:
                           2041 ;	sdcdriver.c:290: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2042 ;	genCall
   054C C0 02              2043 	push	ar2
   054E C0 03              2044 	push	ar3
   0550 12s0BrEE           2045 	lcall	_wait_tx_end
   0553 D0 03              2046 	pop	ar3
   0555 D0 02              2047 	pop	ar2
                           2048 ;	sdcdriver.c:291: save_data1 = serial_data;
                           2049 ;	genMinus
                           2050 ;	genMinusDec
   0557 1A                 2051 	dec	r2
   0558 BA FF 01           2052 	cjne	r2,#0xff,00145$
   055B 1B                 2053 	dec	r3
   055C                    2054 00145$:
                           2055 ;	sdcdriver.c:288: for(ii=0;ii<4;ii++)
                           2056 ;	genIfx
   055C EA                 2057 	mov	a,r2
   055D 4B                 2058 	orl	a,r3
                           2059 ;	genIfxJump
                           2060 ;	Peephole 108.b	removed ljmp by inverse jump logic
   055E 70 EC              2061 	jnz	00118$
                           2062 ;	Peephole 300	removed redundant label 00146$
                           2063 ;	sdcdriver.c:293: return 1;
                           2064 ;	genRet
   0560 75 82 01           2065 	mov	dpl,#0x01
                           2066 ;	Peephole 300	removed redundant label 00119$
   0563 22                 2067 	ret
                           2068 ;------------------------------------------------------------
                           2069 ;Allocation info for local variables in function 'sd_single_read'
                           2070 ;------------------------------------------------------------
                           2071 ;sector                    Allocated with name '_sd_single_read_sector_1_1'
                           2072 ;counter                   Allocated with name '_sd_single_read_counter_1_1'
                           2073 ;i                         Allocated with name '_sd_single_read_i_1_1'
                           2074 ;ctr0                      Allocated with name '_sd_single_read_ctr0_1_1'
                           2075 ;ctr1                      Allocated with name '_sd_single_read_ctr1_1_1'
                           2076 ;ctr2                      Allocated with name '_sd_single_read_ctr2_1_1'
                           2077 ;ctr3                      Allocated with name '_sd_single_read_ctr3_1_1'
                           2078 ;save_data                 Allocated with name '_sd_single_read_save_data_1_1'
                           2079 ;temp1                     Allocated with name '_sd_single_read_temp1_1_1'
                           2080 ;------------------------------------------------------------
                           2081 ;	sdcdriver.c:297: BYTE sd_single_read(ULONG sector)
                           2082 ;	-----------------------------------------
                           2083 ;	 function sd_single_read
                           2084 ;	-----------------------------------------
   0564                    2085 _sd_single_read:
                           2086 ;	genReceive
   0564 AA 82              2087 	mov	r2,dpl
   0566 AB 83              2088 	mov	r3,dph
   0568 AC F0              2089 	mov	r4,b
   056A FD                 2090 	mov	r5,a
   056B 90s00r26           2091 	mov	dptr,#_sd_single_read_sector_1_1
   056E EA                 2092 	mov	a,r2
   056F F0                 2093 	movx	@dptr,a
   0570 A3                 2094 	inc	dptr
   0571 EB                 2095 	mov	a,r3
   0572 F0                 2096 	movx	@dptr,a
   0573 A3                 2097 	inc	dptr
   0574 EC                 2098 	mov	a,r4
   0575 F0                 2099 	movx	@dptr,a
   0576 A3                 2100 	inc	dptr
   0577 ED                 2101 	mov	a,r5
   0578 F0                 2102 	movx	@dptr,a
                           2103 ;	sdcdriver.c:304: temp1.ul = sector;
                           2104 ;	genAssign
   0579 90s00r26           2105 	mov	dptr,#_sd_single_read_sector_1_1
   057C E0                 2106 	movx	a,@dptr
   057D FA                 2107 	mov	r2,a
   057E A3                 2108 	inc	dptr
   057F E0                 2109 	movx	a,@dptr
   0580 FB                 2110 	mov	r3,a
   0581 A3                 2111 	inc	dptr
   0582 E0                 2112 	movx	a,@dptr
   0583 FC                 2113 	mov	r4,a
   0584 A3                 2114 	inc	dptr
   0585 E0                 2115 	movx	a,@dptr
   0586 FD                 2116 	mov	r5,a
                           2117 ;	genPointerSet
                           2118 ;     genFarPointerSet
   0587 90s00r2E           2119 	mov	dptr,#_sd_single_read_temp1_1_1
   058A EA                 2120 	mov	a,r2
   058B F0                 2121 	movx	@dptr,a
   058C A3                 2122 	inc	dptr
   058D EB                 2123 	mov	a,r3
   058E F0                 2124 	movx	@dptr,a
   058F A3                 2125 	inc	dptr
   0590 EC                 2126 	mov	a,r4
   0591 F0                 2127 	movx	@dptr,a
   0592 A3                 2128 	inc	dptr
   0593 ED                 2129 	mov	a,r5
   0594 F0                 2130 	movx	@dptr,a
                           2131 ;	sdcdriver.c:308: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2132 ;	genCall
   0595 12s0BrEE           2133 	lcall	_wait_tx_end
                           2134 ;	sdcdriver.c:309: SPDAT = 0x51;               // Start byte
                           2135 ;	genAssign
   0598 75 C5 51           2136 	mov	_SPDAT,#0x51
                           2137 ;	sdcdriver.c:310: while(!transmit_completed);/* wait for end of transmition */
   059B                    2138 00101$:
                           2139 ;	genIfx
                           2140 ;	genIfxJump
                           2141 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2142 ;	sdcdriver.c:311: transmit_completed = 0;    /* clear software transfer flag */
                           2143 ;	genAssign
                           2144 ;	Peephole 250.a	using atomic test and clear
   059B 10*00 02           2145 	jbc	_transmit_completed,00147$
   059E 80 FB              2146 	sjmp	00101$
   05A0                    2147 00147$:
                           2148 ;	sdcdriver.c:314: while(counter >=0)
                           2149 ;	genAssign
   05A0 7A 03              2150 	mov	r2,#0x03
   05A2 7B 00              2151 	mov	r3,#0x00
   05A4                    2152 00107$:
                           2153 ;	genCmpLt
                           2154 ;	genCmp
   05A4 EB                 2155 	mov	a,r3
                           2156 ;	genIfxJump
                           2157 ;	Peephole 108.e	removed ljmp by inverse jump logic
   05A5 20 E7 19           2158 	jb	acc.7,00109$
                           2159 ;	Peephole 300	removed redundant label 00148$
                           2160 ;	sdcdriver.c:316: SPDAT = temp1.b[counter];
                           2161 ;	genPlus
                           2162 ;	Peephole 236.g	used r2 instead of ar2
   05A8 EA                 2163 	mov	a,r2
   05A9 24r2E              2164 	add	a,#_sd_single_read_temp1_1_1
   05AB F5 82              2165 	mov	dpl,a
                           2166 ;	Peephole 236.g	used r3 instead of ar3
   05AD EB                 2167 	mov	a,r3
   05AE 34s00              2168 	addc	a,#(_sd_single_read_temp1_1_1 >> 8)
   05B0 F5 83              2169 	mov	dph,a
                           2170 ;	genPointerGet
                           2171 ;	genFarPointerGet
   05B2 E0                 2172 	movx	a,@dptr
   05B3 F5 C5              2173 	mov	_SPDAT,a
                           2174 ;	sdcdriver.c:317: counter--;
                           2175 ;	genMinus
                           2176 ;	genMinusDec
   05B5 1A                 2177 	dec	r2
   05B6 BA FF 01           2178 	cjne	r2,#0xff,00149$
   05B9 1B                 2179 	dec	r3
   05BA                    2180 00149$:
                           2181 ;	sdcdriver.c:318: while(!transmit_completed);
   05BA                    2182 00104$:
                           2183 ;	genIfx
                           2184 ;	genIfxJump
                           2185 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2186 ;	sdcdriver.c:319: transmit_completed = 0;
                           2187 ;	genAssign
                           2188 ;	Peephole 250.a	using atomic test and clear
   05BA 10*00 02           2189 	jbc	_transmit_completed,00150$
   05BD 80 FB              2190 	sjmp	00104$
   05BF                    2191 00150$:
                           2192 ;	Peephole 112.b	changed ljmp to sjmp
   05BF 80 E3              2193 	sjmp	00107$
   05C1                    2194 00109$:
                           2195 ;	sdcdriver.c:322: for(i=0;i<6;i++)
                           2196 ;	genAssign
   05C1 7A 06              2197 	mov	r2,#0x06
   05C3 7B 00              2198 	mov	r3,#0x00
   05C5                    2199 00118$:
                           2200 ;	sdcdriver.c:324: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2201 ;	genCall
   05C5 C0 02              2202 	push	ar2
   05C7 C0 03              2203 	push	ar3
   05C9 12s0BrEE           2204 	lcall	_wait_tx_end
   05CC D0 03              2205 	pop	ar3
   05CE D0 02              2206 	pop	ar2
                           2207 ;	sdcdriver.c:325: save_data = serial_data;
                           2208 ;	genMinus
                           2209 ;	genMinusDec
   05D0 1A                 2210 	dec	r2
   05D1 BA FF 01           2211 	cjne	r2,#0xff,00151$
   05D4 1B                 2212 	dec	r3
   05D5                    2213 00151$:
                           2214 ;	sdcdriver.c:322: for(i=0;i<6;i++)
                           2215 ;	genIfx
   05D5 EA                 2216 	mov	a,r2
   05D6 4B                 2217 	orl	a,r3
                           2218 ;	genIfxJump
                           2219 ;	Peephole 108.b	removed ljmp by inverse jump logic
   05D7 70 EC              2220 	jnz	00118$
                           2221 ;	Peephole 300	removed redundant label 00152$
                           2222 ;	sdcdriver.c:328: ctr0=(temp1.b[1] & 0xff)-1;
                           2223 ;	genPointerGet
                           2224 ;	genFarPointerGet
   05D9 90s00r2F           2225 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0001)
   05DC E0                 2226 	movx	a,@dptr
   05DD FA                 2227 	mov	r2,a
                           2228 ;	genCast
   05DE 7B 00              2229 	mov	r3,#0x00
                           2230 ;	genMinus
                           2231 ;	genMinusDec
   05E0 1A                 2232 	dec	r2
   05E1 BA FF 01           2233 	cjne	r2,#0xff,00153$
   05E4 1B                 2234 	dec	r3
   05E5                    2235 00153$:
                           2236 ;	genAssign
   05E5 90s00r2A           2237 	mov	dptr,#_sd_single_read_ctr0_1_1
   05E8 EA                 2238 	mov	a,r2
   05E9 F0                 2239 	movx	@dptr,a
   05EA A3                 2240 	inc	dptr
   05EB EB                 2241 	mov	a,r3
   05EC F0                 2242 	movx	@dptr,a
                           2243 ;	sdcdriver.c:329: ctr1= (temp1.b[1] & 0xff);
                           2244 ;	genPointerGet
                           2245 ;	genFarPointerGet
   05ED 90s00r2F           2246 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0001)
   05F0 E0                 2247 	movx	a,@dptr
                           2248 ;	genCast
   05F1 FA                 2249 	mov	r2,a
   05F2 90s00r2C           2250 	mov	dptr,#_sd_single_read_ctr1_1_1
                           2251 ;	Peephole 100	removed redundant mov
   05F5 F0                 2252 	movx	@dptr,a
   05F6 A3                 2253 	inc	dptr
                           2254 ;	Peephole 181	changed mov to clr
   05F7 E4                 2255 	clr	a
   05F8 F0                 2256 	movx	@dptr,a
                           2257 ;	sdcdriver.c:330: ctr2= (temp1.b[2] & 0xff);
                           2258 ;	genPointerGet
                           2259 ;	genFarPointerGet
   05F9 90s00r30           2260 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0002)
   05FC E0                 2261 	movx	a,@dptr
                           2262 ;	sdcdriver.c:331: ctr3= (temp1.b[3] & 0xff);
                           2263 ;	genPointerGet
                           2264 ;	genFarPointerGet
   05FD 90s00r31           2265 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0003)
   0600 E0                 2266 	movx	a,@dptr
                           2267 ;	sdcdriver.c:334: printf("\n\r%02x%02x%02x%02x: \n\r",(temp1.b[3] & 0xff),(temp1.b[2] & 0xff),(temp1.b[1] & 0xff),(temp1.b[0] & 0xff));
                           2268 ;	genPointerGet
                           2269 ;	genFarPointerGet
   0601 90s00r2E           2270 	mov	dptr,#_sd_single_read_temp1_1_1
   0604 E0                 2271 	movx	a,@dptr
   0605 FA                 2272 	mov	r2,a
                           2273 ;	genCast
   0606 7B 00              2274 	mov	r3,#0x00
                           2275 ;	genPointerGet
                           2276 ;	genFarPointerGet
   0608 90s00r2F           2277 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0001)
   060B E0                 2278 	movx	a,@dptr
   060C FC                 2279 	mov	r4,a
                           2280 ;	genCast
   060D 7D 00              2281 	mov	r5,#0x00
                           2282 ;	genPointerGet
                           2283 ;	genFarPointerGet
   060F 90s00r30           2284 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0002)
   0612 E0                 2285 	movx	a,@dptr
   0613 FE                 2286 	mov	r6,a
                           2287 ;	genCast
   0614 7F 00              2288 	mov	r7,#0x00
                           2289 ;	genPointerGet
                           2290 ;	genFarPointerGet
   0616 90s00r31           2291 	mov	dptr,#(_sd_single_read_temp1_1_1 + 0x0003)
   0619 E0                 2292 	movx	a,@dptr
   061A F8                 2293 	mov	r0,a
                           2294 ;	genCast
   061B 79 00              2295 	mov	r1,#0x00
                           2296 ;	genIpush
   061D C0 02              2297 	push	ar2
   061F C0 03              2298 	push	ar3
                           2299 ;	genIpush
   0621 C0 04              2300 	push	ar4
   0623 C0 05              2301 	push	ar5
                           2302 ;	genIpush
   0625 C0 06              2303 	push	ar6
   0627 C0 07              2304 	push	ar7
                           2305 ;	genIpush
   0629 C0 00              2306 	push	ar0
   062B C0 01              2307 	push	ar1
                           2308 ;	genIpush
   062D 74r43              2309 	mov	a,#__str_7
   062F C0 E0              2310 	push	acc
   0631 74s00              2311 	mov	a,#(__str_7 >> 8)
   0633 C0 E0              2312 	push	acc
   0635 74 80              2313 	mov	a,#0x80
   0637 C0 E0              2314 	push	acc
                           2315 ;	genCall
   0639 12s00r00           2316 	lcall	_printf
   063C E5 81              2317 	mov	a,sp
   063E 24 F5              2318 	add	a,#0xf5
   0640 F5 81              2319 	mov	sp,a
                           2320 ;	sdcdriver.c:336: for(i=0;i<512;i++)
                           2321 ;	genAssign
   0642 90s00r2C           2322 	mov	dptr,#_sd_single_read_ctr1_1_1
   0645 E0                 2323 	movx	a,@dptr
   0646 FA                 2324 	mov	r2,a
   0647 A3                 2325 	inc	dptr
   0648 E0                 2326 	movx	a,@dptr
   0649 FB                 2327 	mov	r3,a
                           2328 ;	genAssign
   064A 7C 00              2329 	mov	r4,#0x00
   064C 7D 00              2330 	mov	r5,#0x00
   064E                    2331 00119$:
                           2332 ;	genCmpLt
                           2333 ;	genCmp
   064E C3                 2334 	clr	c
   064F ED                 2335 	mov	a,r5
   0650 64 80              2336 	xrl	a,#0x80
   0652 94 82              2337 	subb	a,#0x82
                           2338 ;	genIfxJump
   0654 40 03              2339 	jc	00154$
   0656 02s07r80           2340 	ljmp	00122$
   0659                    2341 00154$:
                           2342 ;	sdcdriver.c:338: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2343 ;	genCall
   0659 C0 02              2344 	push	ar2
   065B C0 03              2345 	push	ar3
   065D C0 04              2346 	push	ar4
   065F C0 05              2347 	push	ar5
   0661 12s0BrEE           2348 	lcall	_wait_tx_end
   0664 D0 05              2349 	pop	ar5
   0666 D0 04              2350 	pop	ar4
   0668 D0 03              2351 	pop	ar3
   066A D0 02              2352 	pop	ar2
                           2353 ;	sdcdriver.c:339: save_data = SPDAT;
                           2354 ;	genAssign
   066C AE C5              2355 	mov	r6,_SPDAT
                           2356 ;	sdcdriver.c:341: delay(5);
                           2357 ;	genCall
                           2358 ;	Peephole 182.b	used 16 bit load of dptr
   066E 90 00 05           2359 	mov	dptr,#0x0005
   0671 C0 02              2360 	push	ar2
   0673 C0 03              2361 	push	ar3
   0675 C0 04              2362 	push	ar4
   0677 C0 05              2363 	push	ar5
   0679 C0 06              2364 	push	ar6
   067B 12s0BrF7           2365 	lcall	_delay
   067E D0 06              2366 	pop	ar6
   0680 D0 05              2367 	pop	ar5
   0682 D0 04              2368 	pop	ar4
   0684 D0 03              2369 	pop	ar3
   0686 D0 02              2370 	pop	ar2
                           2371 ;	sdcdriver.c:343: buff[i] = save_data;
                           2372 ;	genAssign
   0688 90s00r08           2373 	mov	dptr,#_buff
   068B E0                 2374 	movx	a,@dptr
   068C FF                 2375 	mov	r7,a
   068D A3                 2376 	inc	dptr
   068E E0                 2377 	movx	a,@dptr
   068F F8                 2378 	mov	r0,a
                           2379 ;	genPlus
                           2380 ;	Peephole 236.g	used r4 instead of ar4
   0690 EC                 2381 	mov	a,r4
                           2382 ;	Peephole 236.a	used r7 instead of ar7
   0691 2F                 2383 	add	a,r7
   0692 F5 82              2384 	mov	dpl,a
                           2385 ;	Peephole 236.g	used r5 instead of ar5
   0694 ED                 2386 	mov	a,r5
                           2387 ;	Peephole 236.b	used r0 instead of ar0
   0695 38                 2388 	addc	a,r0
   0696 F5 83              2389 	mov	dph,a
                           2390 ;	genPointerSet
                           2391 ;     genFarPointerSet
   0698 EE                 2392 	mov	a,r6
   0699 F0                 2393 	movx	@dptr,a
                           2394 ;	sdcdriver.c:345: ctr0++;
                           2395 ;	genAssign
   069A 90s00r2A           2396 	mov	dptr,#_sd_single_read_ctr0_1_1
   069D E0                 2397 	movx	a,@dptr
   069E FE                 2398 	mov	r6,a
   069F A3                 2399 	inc	dptr
   06A0 E0                 2400 	movx	a,@dptr
   06A1 FF                 2401 	mov	r7,a
                           2402 ;	genPlus
   06A2 90s00r2A           2403 	mov	dptr,#_sd_single_read_ctr0_1_1
                           2404 ;     genPlusIncr
   06A5 74 01              2405 	mov	a,#0x01
                           2406 ;	Peephole 236.a	used r6 instead of ar6
   06A7 2E                 2407 	add	a,r6
   06A8 F0                 2408 	movx	@dptr,a
                           2409 ;	Peephole 181	changed mov to clr
   06A9 E4                 2410 	clr	a
                           2411 ;	Peephole 236.b	used r7 instead of ar7
   06AA 3F                 2412 	addc	a,r7
   06AB A3                 2413 	inc	dptr
   06AC F0                 2414 	movx	@dptr,a
                           2415 ;	sdcdriver.c:346: if(i == 256)
                           2416 ;	genCmpEq
                           2417 ;	gencjneshort
                           2418 ;	Peephole 112.b	changed ljmp to sjmp
                           2419 ;	Peephole 198.a	optimized misc jump sequence
   06AD BC 00 0F           2420 	cjne	r4,#0x00,00111$
   06B0 BD 01 0C           2421 	cjne	r5,#0x01,00111$
                           2422 ;	Peephole 200.b	removed redundant sjmp
                           2423 ;	Peephole 300	removed redundant label 00155$
                           2424 ;	Peephole 300	removed redundant label 00156$
                           2425 ;	sdcdriver.c:348: ctr1++;
                           2426 ;	genPlus
                           2427 ;     genPlusIncr
   06B3 0A                 2428 	inc	r2
   06B4 BA 00 01           2429 	cjne	r2,#0x00,00157$
   06B7 0B                 2430 	inc	r3
   06B8                    2431 00157$:
                           2432 ;	sdcdriver.c:349: ctr0=0;
                           2433 ;	genAssign
   06B8 90s00r2A           2434 	mov	dptr,#_sd_single_read_ctr0_1_1
   06BB E4                 2435 	clr	a
   06BC F0                 2436 	movx	@dptr,a
   06BD A3                 2437 	inc	dptr
   06BE F0                 2438 	movx	@dptr,a
   06BF                    2439 00111$:
                           2440 ;	sdcdriver.c:351: if(((i%16)==0) && (i!=0))
                           2441 ;	genAssign
   06BF 90s00r00           2442 	mov	dptr,#__modsint_PARM_2
   06C2 74 10              2443 	mov	a,#0x10
   06C4 F0                 2444 	movx	@dptr,a
   06C5 E4                 2445 	clr	a
   06C6 A3                 2446 	inc	dptr
   06C7 F0                 2447 	movx	@dptr,a
                           2448 ;	genCall
   06C8 8C 82              2449 	mov	dpl,r4
   06CA 8D 83              2450 	mov	dph,r5
   06CC C0 02              2451 	push	ar2
   06CE C0 03              2452 	push	ar3
   06D0 C0 04              2453 	push	ar4
   06D2 C0 05              2454 	push	ar5
   06D4 12s00r00           2455 	lcall	__modsint
   06D7 E5 82              2456 	mov	a,dpl
   06D9 85 83 F0           2457 	mov	b,dph
   06DC D0 05              2458 	pop	ar5
   06DE D0 04              2459 	pop	ar4
   06E0 D0 03              2460 	pop	ar3
   06E2 D0 02              2461 	pop	ar2
                           2462 ;	genIfx
   06E4 45 F0              2463 	orl	a,b
                           2464 ;	genIfxJump
                           2465 ;	Peephole 108.b	removed ljmp by inverse jump logic
   06E6 70 63              2466 	jnz	00113$
                           2467 ;	Peephole 300	removed redundant label 00158$
                           2468 ;	genCmpEq
                           2469 ;	gencjneshort
   06E8 BC 00 05           2470 	cjne	r4,#0x00,00159$
   06EB BD 00 02           2471 	cjne	r5,#0x00,00159$
                           2472 ;	Peephole 112.b	changed ljmp to sjmp
   06EE 80 5B              2473 	sjmp	00113$
   06F0                    2474 00159$:
                           2475 ;	sdcdriver.c:353: putchar('\n');
                           2476 ;	genCall
   06F0 75 82 0A           2477 	mov	dpl,#0x0A
   06F3 C0 02              2478 	push	ar2
   06F5 C0 03              2479 	push	ar3
   06F7 C0 04              2480 	push	ar4
   06F9 C0 05              2481 	push	ar5
   06FB 12s00r00           2482 	lcall	_putchar
   06FE D0 05              2483 	pop	ar5
   0700 D0 04              2484 	pop	ar4
   0702 D0 03              2485 	pop	ar3
   0704 D0 02              2486 	pop	ar2
                           2487 ;	sdcdriver.c:354: putchar('\r');
                           2488 ;	genCall
   0706 75 82 0D           2489 	mov	dpl,#0x0D
   0709 C0 02              2490 	push	ar2
   070B C0 03              2491 	push	ar3
   070D C0 04              2492 	push	ar4
   070F C0 05              2493 	push	ar5
   0711 12s00r00           2494 	lcall	_putchar
   0714 D0 05              2495 	pop	ar5
   0716 D0 04              2496 	pop	ar4
   0718 D0 03              2497 	pop	ar3
   071A D0 02              2498 	pop	ar2
                           2499 ;	sdcdriver.c:356: printf("0x%02x  ",SPDAT);
                           2500 ;	genCast
   071C AE C5              2501 	mov	r6,_SPDAT
   071E 7F 00              2502 	mov	r7,#0x00
                           2503 ;	genIpush
   0720 C0 02              2504 	push	ar2
   0722 C0 03              2505 	push	ar3
   0724 C0 04              2506 	push	ar4
   0726 C0 05              2507 	push	ar5
   0728 C0 06              2508 	push	ar6
   072A C0 07              2509 	push	ar7
                           2510 ;	genIpush
   072C 74r5A              2511 	mov	a,#__str_8
   072E C0 E0              2512 	push	acc
   0730 74s00              2513 	mov	a,#(__str_8 >> 8)
   0732 C0 E0              2514 	push	acc
   0734 74 80              2515 	mov	a,#0x80
   0736 C0 E0              2516 	push	acc
                           2517 ;	genCall
   0738 12s00r00           2518 	lcall	_printf
   073B E5 81              2519 	mov	a,sp
   073D 24 FB              2520 	add	a,#0xfb
   073F F5 81              2521 	mov	sp,a
   0741 D0 05              2522 	pop	ar5
   0743 D0 04              2523 	pop	ar4
   0745 D0 03              2524 	pop	ar3
   0747 D0 02              2525 	pop	ar2
                           2526 ;	Peephole 112.b	changed ljmp to sjmp
   0749 80 2D              2527 	sjmp	00121$
   074B                    2528 00113$:
                           2529 ;	sdcdriver.c:360: printf("0x%02x  ",SPDAT);
                           2530 ;	genCast
   074B AE C5              2531 	mov	r6,_SPDAT
   074D 7F 00              2532 	mov	r7,#0x00
                           2533 ;	genIpush
   074F C0 02              2534 	push	ar2
   0751 C0 03              2535 	push	ar3
   0753 C0 04              2536 	push	ar4
   0755 C0 05              2537 	push	ar5
   0757 C0 06              2538 	push	ar6
   0759 C0 07              2539 	push	ar7
                           2540 ;	genIpush
   075B 74r5A              2541 	mov	a,#__str_8
   075D C0 E0              2542 	push	acc
   075F 74s00              2543 	mov	a,#(__str_8 >> 8)
   0761 C0 E0              2544 	push	acc
   0763 74 80              2545 	mov	a,#0x80
   0765 C0 E0              2546 	push	acc
                           2547 ;	genCall
   0767 12s00r00           2548 	lcall	_printf
   076A E5 81              2549 	mov	a,sp
   076C 24 FB              2550 	add	a,#0xfb
   076E F5 81              2551 	mov	sp,a
   0770 D0 05              2552 	pop	ar5
   0772 D0 04              2553 	pop	ar4
   0774 D0 03              2554 	pop	ar3
   0776 D0 02              2555 	pop	ar2
   0778                    2556 00121$:
                           2557 ;	sdcdriver.c:336: for(i=0;i<512;i++)
                           2558 ;	genPlus
                           2559 ;     genPlusIncr
   0778 0C                 2560 	inc	r4
   0779 BC 00 01           2561 	cjne	r4,#0x00,00160$
   077C 0D                 2562 	inc	r5
   077D                    2563 00160$:
   077D 02s06r4E           2564 	ljmp	00119$
   0780                    2565 00122$:
                           2566 ;	sdcdriver.c:365: for(i=0;i<4;i++)
                           2567 ;	genAssign
   0780 7A 04              2568 	mov	r2,#0x04
   0782 7B 00              2569 	mov	r3,#0x00
   0784                    2570 00125$:
                           2571 ;	sdcdriver.c:367: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2572 ;	genCall
   0784 C0 02              2573 	push	ar2
   0786 C0 03              2574 	push	ar3
   0788 12s0BrEE           2575 	lcall	_wait_tx_end
   078B D0 03              2576 	pop	ar3
   078D D0 02              2577 	pop	ar2
                           2578 ;	sdcdriver.c:368: save_data = serial_data;
                           2579 ;	genMinus
                           2580 ;	genMinusDec
   078F 1A                 2581 	dec	r2
   0790 BA FF 01           2582 	cjne	r2,#0xff,00161$
   0793 1B                 2583 	dec	r3
   0794                    2584 00161$:
                           2585 ;	sdcdriver.c:365: for(i=0;i<4;i++)
                           2586 ;	genIfx
   0794 EA                 2587 	mov	a,r2
   0795 4B                 2588 	orl	a,r3
                           2589 ;	genIfxJump
                           2590 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0796 70 EC              2591 	jnz	00125$
                           2592 ;	Peephole 300	removed redundant label 00162$
                           2593 ;	sdcdriver.c:370: return 1;
                           2594 ;	genRet
   0798 75 82 01           2595 	mov	dpl,#0x01
                           2596 ;	Peephole 300	removed redundant label 00126$
   079B 22                 2597 	ret
                           2598 ;------------------------------------------------------------
                           2599 ;Allocation info for local variables in function 'sd_single_write'
                           2600 ;------------------------------------------------------------
                           2601 ;sector                    Allocated with name '_sd_single_write_PARM_2'
                           2602 ;databyte                  Allocated with name '_sd_single_write_databyte_1_1'
                           2603 ;i2                        Allocated with name '_sd_single_write_i2_1_1'
                           2604 ;counterw                  Allocated with name '_sd_single_write_counterw_1_1'
                           2605 ;tempw                     Allocated with name '_sd_single_write_tempw_1_1'
                           2606 ;data2                     Allocated with name '_sd_single_write_data2_1_1'
                           2607 ;------------------------------------------------------------
                           2608 ;	sdcdriver.c:374: BYTE sd_single_write(BYTE databyte,ULONG sector)
                           2609 ;	-----------------------------------------
                           2610 ;	 function sd_single_write
                           2611 ;	-----------------------------------------
   079C                    2612 _sd_single_write:
                           2613 ;	genReceive
   079C E5 82              2614 	mov	a,dpl
   079E 90s00r36           2615 	mov	dptr,#_sd_single_write_databyte_1_1
   07A1 F0                 2616 	movx	@dptr,a
                           2617 ;	sdcdriver.c:380: tempw.ul = sector;
                           2618 ;	genAssign
   07A2 90s00r32           2619 	mov	dptr,#_sd_single_write_PARM_2
   07A5 E0                 2620 	movx	a,@dptr
   07A6 FA                 2621 	mov	r2,a
   07A7 A3                 2622 	inc	dptr
   07A8 E0                 2623 	movx	a,@dptr
   07A9 FB                 2624 	mov	r3,a
   07AA A3                 2625 	inc	dptr
   07AB E0                 2626 	movx	a,@dptr
   07AC FC                 2627 	mov	r4,a
   07AD A3                 2628 	inc	dptr
   07AE E0                 2629 	movx	a,@dptr
   07AF FD                 2630 	mov	r5,a
                           2631 ;	genPointerSet
                           2632 ;     genFarPointerSet
   07B0 90s00r37           2633 	mov	dptr,#_sd_single_write_tempw_1_1
   07B3 EA                 2634 	mov	a,r2
   07B4 F0                 2635 	movx	@dptr,a
   07B5 A3                 2636 	inc	dptr
   07B6 EB                 2637 	mov	a,r3
   07B7 F0                 2638 	movx	@dptr,a
   07B8 A3                 2639 	inc	dptr
   07B9 EC                 2640 	mov	a,r4
   07BA F0                 2641 	movx	@dptr,a
   07BB A3                 2642 	inc	dptr
   07BC ED                 2643 	mov	a,r5
   07BD F0                 2644 	movx	@dptr,a
                           2645 ;	sdcdriver.c:383: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2646 ;	genCall
   07BE 12s0BrEE           2647 	lcall	_wait_tx_end
                           2648 ;	sdcdriver.c:385: SPDAT = 0x58;               // Start byte
                           2649 ;	genAssign
   07C1 75 C5 58           2650 	mov	_SPDAT,#0x58
                           2651 ;	sdcdriver.c:386: while(!transmit_completed);/* wait for end of transmition */
   07C4                    2652 00101$:
                           2653 ;	genIfx
                           2654 ;	genIfxJump
                           2655 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2656 ;	sdcdriver.c:387: transmit_completed = 0;    /* clear software transfer flag */
                           2657 ;	genAssign
                           2658 ;	Peephole 250.a	using atomic test and clear
   07C4 10*00 02           2659 	jbc	_transmit_completed,00145$
   07C7 80 FB              2660 	sjmp	00101$
   07C9                    2661 00145$:
                           2662 ;	sdcdriver.c:390: while(counterw >= 0)
                           2663 ;	genAssign
   07C9 7A 03              2664 	mov	r2,#0x03
   07CB 7B 00              2665 	mov	r3,#0x00
   07CD                    2666 00107$:
                           2667 ;	genCmpLt
                           2668 ;	genCmp
   07CD EB                 2669 	mov	a,r3
                           2670 ;	genIfxJump
                           2671 ;	Peephole 108.e	removed ljmp by inverse jump logic
   07CE 20 E7 19           2672 	jb	acc.7,00109$
                           2673 ;	Peephole 300	removed redundant label 00146$
                           2674 ;	sdcdriver.c:392: SPDAT = tempw.b[counterw];               // CRC
                           2675 ;	genPlus
                           2676 ;	Peephole 236.g	used r2 instead of ar2
   07D1 EA                 2677 	mov	a,r2
   07D2 24r37              2678 	add	a,#_sd_single_write_tempw_1_1
   07D4 F5 82              2679 	mov	dpl,a
                           2680 ;	Peephole 236.g	used r3 instead of ar3
   07D6 EB                 2681 	mov	a,r3
   07D7 34s00              2682 	addc	a,#(_sd_single_write_tempw_1_1 >> 8)
   07D9 F5 83              2683 	mov	dph,a
                           2684 ;	genPointerGet
                           2685 ;	genFarPointerGet
   07DB E0                 2686 	movx	a,@dptr
   07DC F5 C5              2687 	mov	_SPDAT,a
                           2688 ;	sdcdriver.c:393: counterw--;
                           2689 ;	genMinus
                           2690 ;	genMinusDec
   07DE 1A                 2691 	dec	r2
   07DF BA FF 01           2692 	cjne	r2,#0xff,00147$
   07E2 1B                 2693 	dec	r3
   07E3                    2694 00147$:
                           2695 ;	sdcdriver.c:394: while(!transmit_completed);/* wait for end of transmition */
   07E3                    2696 00104$:
                           2697 ;	genIfx
                           2698 ;	genIfxJump
                           2699 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2700 ;	sdcdriver.c:395: transmit_completed = 0;    /* clear software transfer flag */
                           2701 ;	genAssign
                           2702 ;	Peephole 250.a	using atomic test and clear
   07E3 10*00 02           2703 	jbc	_transmit_completed,00148$
   07E6 80 FB              2704 	sjmp	00104$
   07E8                    2705 00148$:
                           2706 ;	Peephole 112.b	changed ljmp to sjmp
   07E8 80 E3              2707 	sjmp	00107$
   07EA                    2708 00109$:
                           2709 ;	sdcdriver.c:398: for(i2=0;i2<4;i2++)
                           2710 ;	genAssign
   07EA 7A 04              2711 	mov	r2,#0x04
   07EC 7B 00              2712 	mov	r3,#0x00
   07EE                    2713 00124$:
                           2714 ;	sdcdriver.c:400: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2715 ;	genCall
   07EE C0 02              2716 	push	ar2
   07F0 C0 03              2717 	push	ar3
   07F2 12s0BrEE           2718 	lcall	_wait_tx_end
   07F5 D0 03              2719 	pop	ar3
   07F7 D0 02              2720 	pop	ar2
                           2721 ;	sdcdriver.c:401: data2 = serial_data;
                           2722 ;	genMinus
                           2723 ;	genMinusDec
   07F9 1A                 2724 	dec	r2
   07FA BA FF 01           2725 	cjne	r2,#0xff,00149$
   07FD 1B                 2726 	dec	r3
   07FE                    2727 00149$:
                           2728 ;	sdcdriver.c:398: for(i2=0;i2<4;i2++)
                           2729 ;	genIfx
   07FE EA                 2730 	mov	a,r2
   07FF 4B                 2731 	orl	a,r3
                           2732 ;	genIfxJump
                           2733 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0800 70 EC              2734 	jnz	00124$
                           2735 ;	Peephole 300	removed redundant label 00150$
                           2736 ;	sdcdriver.c:408: while(counterw < 512)
                           2737 ;	genAssign
   0802 90s00r36           2738 	mov	dptr,#_sd_single_write_databyte_1_1
   0805 E0                 2739 	movx	a,@dptr
   0806 FA                 2740 	mov	r2,a
                           2741 ;	genAssign
   0807 7B 00              2742 	mov	r3,#0x00
   0809 7C 00              2743 	mov	r4,#0x00
   080B                    2744 00113$:
                           2745 ;	genCmpLt
                           2746 ;	genCmp
   080B C3                 2747 	clr	c
   080C EC                 2748 	mov	a,r4
   080D 64 80              2749 	xrl	a,#0x80
   080F 94 82              2750 	subb	a,#0x82
                           2751 ;	genIfxJump
                           2752 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0811 50 0E              2753 	jnc	00115$
                           2754 ;	Peephole 300	removed redundant label 00151$
                           2755 ;	sdcdriver.c:410: SPDAT = databyte;        // Write data byte out through SPI;
                           2756 ;	genAssign
   0813 8A C5              2757 	mov	_SPDAT,r2
                           2758 ;	sdcdriver.c:411: while(!transmit_completed);/* wait for end of transmition */
   0815                    2759 00110$:
                           2760 ;	genIfx
                           2761 ;	genIfxJump
                           2762 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2763 ;	sdcdriver.c:412: transmit_completed = 0;    /* clear software transfer flag */
                           2764 ;	genAssign
                           2765 ;	Peephole 250.a	using atomic test and clear
   0815 10*00 02           2766 	jbc	_transmit_completed,00152$
   0818 80 FB              2767 	sjmp	00110$
   081A                    2768 00152$:
                           2769 ;	sdcdriver.c:413: counterw++;                 // Increment byte counter;
                           2770 ;	genPlus
                           2771 ;     genPlusIncr
                           2772 ;	tail increment optimized (range 7)
   081A 0B                 2773 	inc	r3
   081B BB 00 ED           2774 	cjne	r3,#0x00,00113$
   081E 0C                 2775 	inc	r4
                           2776 ;	Peephole 112.b	changed ljmp to sjmp
   081F 80 EA              2777 	sjmp	00113$
   0821                    2778 00115$:
                           2779 ;	sdcdriver.c:417: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2780 ;	genCall
   0821 12s0BrEE           2781 	lcall	_wait_tx_end
                           2782 ;	sdcdriver.c:419: do                                  // Read Data Response from card;
   0824                    2783 00116$:
                           2784 ;	sdcdriver.c:421: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2785 ;	genCall
   0824 12s0BrEE           2786 	lcall	_wait_tx_end
                           2787 ;	sdcdriver.c:422: data2 = SPDAT;
                           2788 ;	genAssign
   0827 AA C5              2789 	mov	r2,_SPDAT
                           2790 ;	sdcdriver.c:423: printf_tiny("0xFF0\n\r");
                           2791 ;	genIpush
   0829 C0 02              2792 	push	ar2
   082B 74r63              2793 	mov	a,#__str_9
   082D C0 E0              2794 	push	acc
   082F 74s00              2795 	mov	a,#(__str_9 >> 8)
   0831 C0 E0              2796 	push	acc
                           2797 ;	genCall
   0833 12s00r00           2798 	lcall	_printf_tiny
   0836 15 81              2799 	dec	sp
   0838 15 81              2800 	dec	sp
   083A D0 02              2801 	pop	ar2
                           2802 ;	sdcdriver.c:427: while((data2 & 0x01) != 1);
                           2803 ;	genAnd
   083C 53 02 01           2804 	anl	ar2,#0x01
                           2805 ;	genCmpEq
                           2806 ;	gencjneshort
                           2807 ;	Peephole 112.b	changed ljmp to sjmp
                           2808 ;	Peephole 198.b	optimized misc jump sequence
   083F BA 01 E2           2809 	cjne	r2,#0x01,00116$
                           2810 ;	Peephole 200.b	removed redundant sjmp
                           2811 ;	Peephole 300	removed redundant label 00153$
                           2812 ;	Peephole 300	removed redundant label 00154$
                           2813 ;	sdcdriver.c:429: do                            // Wait for end of busy signal;
   0842                    2814 00119$:
                           2815 ;	sdcdriver.c:431: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2816 ;	genCall
   0842 12s0BrEE           2817 	lcall	_wait_tx_end
                           2818 ;	sdcdriver.c:432: printf_tiny("0xFF1\n\r");
                           2819 ;	genIpush
   0845 74r6B              2820 	mov	a,#__str_10
   0847 C0 E0              2821 	push	acc
   0849 74s00              2822 	mov	a,#(__str_10 >> 8)
   084B C0 E0              2823 	push	acc
                           2824 ;	genCall
   084D 12s00r00           2825 	lcall	_printf_tiny
   0850 15 81              2826 	dec	sp
   0852 15 81              2827 	dec	sp
                           2828 ;	sdcdriver.c:434: while(SPDAT == 0x00);       // When a non-zero token is returned,
                           2829 ;	genIfx
   0854 E5 C5              2830 	mov	a,_SPDAT
                           2831 ;	genIfxJump
                           2832 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0856 60 EA              2833 	jz	00119$
                           2834 ;	Peephole 300	removed redundant label 00155$
                           2835 ;	sdcdriver.c:437: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2836 ;	genCall
   0858 12s0BrEE           2837 	lcall	_wait_tx_end
                           2838 ;	sdcdriver.c:439: return 1;
                           2839 ;	genRet
   085B 75 82 01           2840 	mov	dpl,#0x01
                           2841 ;	Peephole 300	removed redundant label 00125$
   085E 22                 2842 	ret
                           2843 ;------------------------------------------------------------
                           2844 ;Allocation info for local variables in function 'sd_block_write'
                           2845 ;------------------------------------------------------------
                           2846 ;sector                    Allocated with name '_sd_block_write_sector_1_1'
                           2847 ;i                         Allocated with name '_sd_block_write_i_1_1'
                           2848 ;counter1                  Allocated with name '_sd_block_write_counter1_1_1'
                           2849 ;tempw1                    Allocated with name '_sd_block_write_tempw1_1_1'
                           2850 ;data3                     Allocated with name '_sd_block_write_data3_1_1'
                           2851 ;------------------------------------------------------------
                           2852 ;	sdcdriver.c:443: BYTE sd_block_write(ULONG sector)
                           2853 ;	-----------------------------------------
                           2854 ;	 function sd_block_write
                           2855 ;	-----------------------------------------
   085F                    2856 _sd_block_write:
                           2857 ;	genReceive
   085F AA 82              2858 	mov	r2,dpl
   0861 AB 83              2859 	mov	r3,dph
   0863 AC F0              2860 	mov	r4,b
   0865 FD                 2861 	mov	r5,a
   0866 90s00r3B           2862 	mov	dptr,#_sd_block_write_sector_1_1
   0869 EA                 2863 	mov	a,r2
   086A F0                 2864 	movx	@dptr,a
   086B A3                 2865 	inc	dptr
   086C EB                 2866 	mov	a,r3
   086D F0                 2867 	movx	@dptr,a
   086E A3                 2868 	inc	dptr
   086F EC                 2869 	mov	a,r4
   0870 F0                 2870 	movx	@dptr,a
   0871 A3                 2871 	inc	dptr
   0872 ED                 2872 	mov	a,r5
   0873 F0                 2873 	movx	@dptr,a
                           2874 ;	sdcdriver.c:449: tempw1.ul = sector;
                           2875 ;	genAssign
   0874 90s00r3B           2876 	mov	dptr,#_sd_block_write_sector_1_1
   0877 E0                 2877 	movx	a,@dptr
   0878 FA                 2878 	mov	r2,a
   0879 A3                 2879 	inc	dptr
   087A E0                 2880 	movx	a,@dptr
   087B FB                 2881 	mov	r3,a
   087C A3                 2882 	inc	dptr
   087D E0                 2883 	movx	a,@dptr
   087E FC                 2884 	mov	r4,a
   087F A3                 2885 	inc	dptr
   0880 E0                 2886 	movx	a,@dptr
   0881 FD                 2887 	mov	r5,a
                           2888 ;	genPointerSet
                           2889 ;     genFarPointerSet
   0882 90s00r3F           2890 	mov	dptr,#_sd_block_write_tempw1_1_1
   0885 EA                 2891 	mov	a,r2
   0886 F0                 2892 	movx	@dptr,a
   0887 A3                 2893 	inc	dptr
   0888 EB                 2894 	mov	a,r3
   0889 F0                 2895 	movx	@dptr,a
   088A A3                 2896 	inc	dptr
   088B EC                 2897 	mov	a,r4
   088C F0                 2898 	movx	@dptr,a
   088D A3                 2899 	inc	dptr
   088E ED                 2900 	mov	a,r5
   088F F0                 2901 	movx	@dptr,a
                           2902 ;	sdcdriver.c:452: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2903 ;	genCall
   0890 12s0BrEE           2904 	lcall	_wait_tx_end
                           2905 ;	sdcdriver.c:454: SPDAT = 0x58;               // Start byte
                           2906 ;	genAssign
   0893 75 C5 58           2907 	mov	_SPDAT,#0x58
                           2908 ;	sdcdriver.c:455: while(!transmit_completed);/* wait for end of transmition */
   0896                    2909 00101$:
                           2910 ;	genIfx
                           2911 ;	genIfxJump
                           2912 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2913 ;	sdcdriver.c:456: transmit_completed = 0;    /* clear software transfer flag */
                           2914 ;	genAssign
                           2915 ;	Peephole 250.a	using atomic test and clear
   0896 10*00 02           2916 	jbc	_transmit_completed,00145$
   0899 80 FB              2917 	sjmp	00101$
   089B                    2918 00145$:
                           2919 ;	sdcdriver.c:459: while(counter1 >= 0)
                           2920 ;	genAssign
   089B 7A 03              2921 	mov	r2,#0x03
   089D 7B 00              2922 	mov	r3,#0x00
   089F                    2923 00107$:
                           2924 ;	genCmpLt
                           2925 ;	genCmp
   089F EB                 2926 	mov	a,r3
                           2927 ;	genIfxJump
                           2928 ;	Peephole 108.e	removed ljmp by inverse jump logic
   08A0 20 E7 19           2929 	jb	acc.7,00109$
                           2930 ;	Peephole 300	removed redundant label 00146$
                           2931 ;	sdcdriver.c:461: SPDAT = tempw1.b[counter1];               // CRC
                           2932 ;	genPlus
                           2933 ;	Peephole 236.g	used r2 instead of ar2
   08A3 EA                 2934 	mov	a,r2
   08A4 24r3F              2935 	add	a,#_sd_block_write_tempw1_1_1
   08A6 F5 82              2936 	mov	dpl,a
                           2937 ;	Peephole 236.g	used r3 instead of ar3
   08A8 EB                 2938 	mov	a,r3
   08A9 34s00              2939 	addc	a,#(_sd_block_write_tempw1_1_1 >> 8)
   08AB F5 83              2940 	mov	dph,a
                           2941 ;	genPointerGet
                           2942 ;	genFarPointerGet
   08AD E0                 2943 	movx	a,@dptr
   08AE F5 C5              2944 	mov	_SPDAT,a
                           2945 ;	sdcdriver.c:462: counter1--;
                           2946 ;	genMinus
                           2947 ;	genMinusDec
   08B0 1A                 2948 	dec	r2
   08B1 BA FF 01           2949 	cjne	r2,#0xff,00147$
   08B4 1B                 2950 	dec	r3
   08B5                    2951 00147$:
                           2952 ;	sdcdriver.c:463: while(!transmit_completed);/* wait for end of transmition */
   08B5                    2953 00104$:
                           2954 ;	genIfx
                           2955 ;	genIfxJump
                           2956 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           2957 ;	sdcdriver.c:464: transmit_completed = 0;    /* clear software transfer flag */
                           2958 ;	genAssign
                           2959 ;	Peephole 250.a	using atomic test and clear
   08B5 10*00 02           2960 	jbc	_transmit_completed,00148$
   08B8 80 FB              2961 	sjmp	00104$
   08BA                    2962 00148$:
                           2963 ;	Peephole 112.b	changed ljmp to sjmp
   08BA 80 E3              2964 	sjmp	00107$
   08BC                    2965 00109$:
                           2966 ;	sdcdriver.c:468: for(i=0;i<4;i++)
                           2967 ;	genAssign
   08BC 7A 04              2968 	mov	r2,#0x04
   08BE 7B 00              2969 	mov	r3,#0x00
   08C0                    2970 00124$:
                           2971 ;	sdcdriver.c:470: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           2972 ;	genCall
   08C0 C0 02              2973 	push	ar2
   08C2 C0 03              2974 	push	ar3
   08C4 12s0BrEE           2975 	lcall	_wait_tx_end
   08C7 D0 03              2976 	pop	ar3
   08C9 D0 02              2977 	pop	ar2
                           2978 ;	sdcdriver.c:471: data3 = serial_data;
                           2979 ;	genMinus
                           2980 ;	genMinusDec
   08CB 1A                 2981 	dec	r2
   08CC BA FF 01           2982 	cjne	r2,#0xff,00149$
   08CF 1B                 2983 	dec	r3
   08D0                    2984 00149$:
                           2985 ;	sdcdriver.c:468: for(i=0;i<4;i++)
                           2986 ;	genIfx
   08D0 EA                 2987 	mov	a,r2
   08D1 4B                 2988 	orl	a,r3
                           2989 ;	genIfxJump
                           2990 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2991 ;	sdcdriver.c:478: while(counter1 < 512)
                           2992 ;	genAssign
                           2993 ;	Peephole 256.c	loading r2 with zero from a
   08D2 70 EC              2994 	jnz	00124$
                           2995 ;	Peephole 300	removed redundant label 00150$
   08D4 FA                 2996 	mov	r2,a
                           2997 ;	Peephole 256.d	loading r3 with zero from a
   08D5 FB                 2998 	mov	r3,a
   08D6                    2999 00113$:
                           3000 ;	genCmpLt
                           3001 ;	genCmp
   08D6 C3                 3002 	clr	c
   08D7 EB                 3003 	mov	a,r3
   08D8 64 80              3004 	xrl	a,#0x80
   08DA 94 82              3005 	subb	a,#0x82
                           3006 ;	genIfxJump
                           3007 ;	Peephole 108.a	removed ljmp by inverse jump logic
   08DC 50 1F              3008 	jnc	00115$
                           3009 ;	Peephole 300	removed redundant label 00151$
                           3010 ;	sdcdriver.c:480: SPDAT = tempbuf[counter1];        // Write data byte out through SPI;
                           3011 ;	genAssign
   08DE 90s00r0A           3012 	mov	dptr,#_tempbuf
   08E1 E0                 3013 	movx	a,@dptr
   08E2 FC                 3014 	mov	r4,a
   08E3 A3                 3015 	inc	dptr
   08E4 E0                 3016 	movx	a,@dptr
   08E5 FD                 3017 	mov	r5,a
                           3018 ;	genPlus
                           3019 ;	Peephole 236.g	used r2 instead of ar2
   08E6 EA                 3020 	mov	a,r2
                           3021 ;	Peephole 236.a	used r4 instead of ar4
   08E7 2C                 3022 	add	a,r4
   08E8 F5 82              3023 	mov	dpl,a
                           3024 ;	Peephole 236.g	used r3 instead of ar3
   08EA EB                 3025 	mov	a,r3
                           3026 ;	Peephole 236.b	used r5 instead of ar5
   08EB 3D                 3027 	addc	a,r5
   08EC F5 83              3028 	mov	dph,a
                           3029 ;	genPointerGet
                           3030 ;	genFarPointerGet
   08EE E0                 3031 	movx	a,@dptr
   08EF F5 C5              3032 	mov	_SPDAT,a
                           3033 ;	sdcdriver.c:481: while(!transmit_completed);/* wait for end of transmition */
   08F1                    3034 00110$:
                           3035 ;	genIfx
                           3036 ;	genIfxJump
                           3037 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3038 ;	sdcdriver.c:482: transmit_completed = 0;    /* clear software transfer flag */
                           3039 ;	genAssign
                           3040 ;	Peephole 250.a	using atomic test and clear
   08F1 10*00 02           3041 	jbc	_transmit_completed,00152$
   08F4 80 FB              3042 	sjmp	00110$
   08F6                    3043 00152$:
                           3044 ;	sdcdriver.c:483: counter1++;                 // Increment byte counter;
                           3045 ;	genPlus
                           3046 ;     genPlusIncr
                           3047 ;	tail increment optimized (range 9)
   08F6 0A                 3048 	inc	r2
   08F7 BA 00 DC           3049 	cjne	r2,#0x00,00113$
   08FA 0B                 3050 	inc	r3
                           3051 ;	Peephole 112.b	changed ljmp to sjmp
   08FB 80 D9              3052 	sjmp	00113$
   08FD                    3053 00115$:
                           3054 ;	sdcdriver.c:487: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3055 ;	genCall
   08FD 12s0BrEE           3056 	lcall	_wait_tx_end
                           3057 ;	sdcdriver.c:490: do                                  // Read Data Response from card;
   0900                    3058 00116$:
                           3059 ;	sdcdriver.c:492: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3060 ;	genCall
   0900 12s0BrEE           3061 	lcall	_wait_tx_end
                           3062 ;	sdcdriver.c:493: data3 = SPDAT;
                           3063 ;	genAssign
   0903 AA C5              3064 	mov	r2,_SPDAT
                           3065 ;	sdcdriver.c:494: printf_tiny("0xFF0\n\r");
                           3066 ;	genIpush
   0905 C0 02              3067 	push	ar2
   0907 74r63              3068 	mov	a,#__str_9
   0909 C0 E0              3069 	push	acc
   090B 74s00              3070 	mov	a,#(__str_9 >> 8)
   090D C0 E0              3071 	push	acc
                           3072 ;	genCall
   090F 12s00r00           3073 	lcall	_printf_tiny
   0912 15 81              3074 	dec	sp
   0914 15 81              3075 	dec	sp
   0916 D0 02              3076 	pop	ar2
                           3077 ;	sdcdriver.c:498: while((data3 & 0x01) != 1);
                           3078 ;	genAnd
   0918 53 02 01           3079 	anl	ar2,#0x01
                           3080 ;	genCmpEq
                           3081 ;	gencjneshort
                           3082 ;	Peephole 112.b	changed ljmp to sjmp
                           3083 ;	Peephole 198.b	optimized misc jump sequence
   091B BA 01 E2           3084 	cjne	r2,#0x01,00116$
                           3085 ;	Peephole 200.b	removed redundant sjmp
                           3086 ;	Peephole 300	removed redundant label 00153$
                           3087 ;	Peephole 300	removed redundant label 00154$
                           3088 ;	sdcdriver.c:500: do                            // Wait for end of busy signal;
   091E                    3089 00119$:
                           3090 ;	sdcdriver.c:502: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3091 ;	genCall
   091E 12s0BrEE           3092 	lcall	_wait_tx_end
                           3093 ;	sdcdriver.c:503: printf_tiny("0xFF1\n\r");
                           3094 ;	genIpush
   0921 74r6B              3095 	mov	a,#__str_10
   0923 C0 E0              3096 	push	acc
   0925 74s00              3097 	mov	a,#(__str_10 >> 8)
   0927 C0 E0              3098 	push	acc
                           3099 ;	genCall
   0929 12s00r00           3100 	lcall	_printf_tiny
   092C 15 81              3101 	dec	sp
   092E 15 81              3102 	dec	sp
                           3103 ;	sdcdriver.c:505: while(SPDAT == 0x00);       // When a non-zero token is returned,
                           3104 ;	genIfx
   0930 E5 C5              3105 	mov	a,_SPDAT
                           3106 ;	genIfxJump
                           3107 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0932 60 EA              3108 	jz	00119$
                           3109 ;	Peephole 300	removed redundant label 00155$
                           3110 ;	sdcdriver.c:508: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3111 ;	genCall
   0934 12s0BrEE           3112 	lcall	_wait_tx_end
                           3113 ;	sdcdriver.c:510: return 1;
                           3114 ;	genRet
   0937 75 82 01           3115 	mov	dpl,#0x01
                           3116 ;	Peephole 300	removed redundant label 00125$
   093A 22                 3117 	ret
                           3118 ;------------------------------------------------------------
                           3119 ;Allocation info for local variables in function 'sd_multiple_read'
                           3120 ;------------------------------------------------------------
                           3121 ;sloc0                     Allocated with name '_sd_multiple_read_sloc0_1_0'
                           3122 ;end_sector                Allocated with name '_sd_multiple_read_PARM_2'
                           3123 ;start_sector              Allocated with name '_sd_multiple_read_start_sector_1_1'
                           3124 ;i                         Allocated with name '_sd_multiple_read_i_1_1'
                           3125 ;counter                   Allocated with name '_sd_multiple_read_counter_1_1'
                           3126 ;ctr2                      Allocated with name '_sd_multiple_read_ctr2_1_1'
                           3127 ;ctr3                      Allocated with name '_sd_multiple_read_ctr3_1_1'
                           3128 ;data1                     Allocated with name '_sd_multiple_read_data1_1_1'
                           3129 ;temp_start                Allocated with name '_sd_multiple_read_temp_start_1_1'
                           3130 ;temp_end                  Allocated with name '_sd_multiple_read_temp_end_1_1'
                           3131 ;bytetot                   Allocated with name '_sd_multiple_read_bytetot_1_1'
                           3132 ;------------------------------------------------------------
                           3133 ;	sdcdriver.c:514: BYTE sd_multiple_read(ULONG start_sector,ULONG end_sector)
                           3134 ;	-----------------------------------------
                           3135 ;	 function sd_multiple_read
                           3136 ;	-----------------------------------------
   093B                    3137 _sd_multiple_read:
                           3138 ;	genReceive
   093B AA 82              3139 	mov	r2,dpl
   093D AB 83              3140 	mov	r3,dph
   093F AC F0              3141 	mov	r4,b
   0941 FD                 3142 	mov	r5,a
   0942 90s00r47           3143 	mov	dptr,#_sd_multiple_read_start_sector_1_1
   0945 EA                 3144 	mov	a,r2
   0946 F0                 3145 	movx	@dptr,a
   0947 A3                 3146 	inc	dptr
   0948 EB                 3147 	mov	a,r3
   0949 F0                 3148 	movx	@dptr,a
   094A A3                 3149 	inc	dptr
   094B EC                 3150 	mov	a,r4
   094C F0                 3151 	movx	@dptr,a
   094D A3                 3152 	inc	dptr
   094E ED                 3153 	mov	a,r5
   094F F0                 3154 	movx	@dptr,a
                           3155 ;	sdcdriver.c:522: temp_start.ul = start_sector;
                           3156 ;	genAssign
   0950 90s00r47           3157 	mov	dptr,#_sd_multiple_read_start_sector_1_1
   0953 E0                 3158 	movx	a,@dptr
   0954 FA                 3159 	mov	r2,a
   0955 A3                 3160 	inc	dptr
   0956 E0                 3161 	movx	a,@dptr
   0957 FB                 3162 	mov	r3,a
   0958 A3                 3163 	inc	dptr
   0959 E0                 3164 	movx	a,@dptr
   095A FC                 3165 	mov	r4,a
   095B A3                 3166 	inc	dptr
   095C E0                 3167 	movx	a,@dptr
   095D FD                 3168 	mov	r5,a
                           3169 ;	genPointerSet
                           3170 ;     genFarPointerSet
   095E 90s00r4D           3171 	mov	dptr,#_sd_multiple_read_temp_start_1_1
   0961 EA                 3172 	mov	a,r2
   0962 F0                 3173 	movx	@dptr,a
   0963 A3                 3174 	inc	dptr
   0964 EB                 3175 	mov	a,r3
   0965 F0                 3176 	movx	@dptr,a
   0966 A3                 3177 	inc	dptr
   0967 EC                 3178 	mov	a,r4
   0968 F0                 3179 	movx	@dptr,a
   0969 A3                 3180 	inc	dptr
   096A ED                 3181 	mov	a,r5
   096B F0                 3182 	movx	@dptr,a
                           3183 ;	sdcdriver.c:523: temp_end.ul = end_sector;
                           3184 ;	genAssign
   096C 90s00r43           3185 	mov	dptr,#_sd_multiple_read_PARM_2
   096F E0                 3186 	movx	a,@dptr
   0970 FE                 3187 	mov	r6,a
   0971 A3                 3188 	inc	dptr
   0972 E0                 3189 	movx	a,@dptr
   0973 FF                 3190 	mov	r7,a
   0974 A3                 3191 	inc	dptr
   0975 E0                 3192 	movx	a,@dptr
   0976 F8                 3193 	mov	r0,a
   0977 A3                 3194 	inc	dptr
   0978 E0                 3195 	movx	a,@dptr
   0979 F9                 3196 	mov	r1,a
                           3197 ;	genPointerSet
                           3198 ;     genFarPointerSet
   097A 90s00r51           3199 	mov	dptr,#_sd_multiple_read_temp_end_1_1
   097D EE                 3200 	mov	a,r6
   097E F0                 3201 	movx	@dptr,a
   097F A3                 3202 	inc	dptr
   0980 EF                 3203 	mov	a,r7
   0981 F0                 3204 	movx	@dptr,a
   0982 A3                 3205 	inc	dptr
   0983 E8                 3206 	mov	a,r0
   0984 F0                 3207 	movx	@dptr,a
   0985 A3                 3208 	inc	dptr
   0986 E9                 3209 	mov	a,r1
   0987 F0                 3210 	movx	@dptr,a
                           3211 ;	sdcdriver.c:524: bytetot = end_sector-start_sector;
                           3212 ;	genMinus
   0988 EE                 3213 	mov	a,r6
   0989 C3                 3214 	clr	c
                           3215 ;	Peephole 236.l	used r2 instead of ar2
   098A 9A                 3216 	subb	a,r2
   098B F5*02              3217 	mov	_sd_multiple_read_sloc0_1_0,a
   098D EF                 3218 	mov	a,r7
                           3219 ;	Peephole 236.l	used r3 instead of ar3
   098E 9B                 3220 	subb	a,r3
   098F F5*03              3221 	mov	(_sd_multiple_read_sloc0_1_0 + 1),a
   0991 E8                 3222 	mov	a,r0
                           3223 ;	Peephole 236.l	used r4 instead of ar4
   0992 9C                 3224 	subb	a,r4
   0993 F5*04              3225 	mov	(_sd_multiple_read_sloc0_1_0 + 2),a
   0995 E9                 3226 	mov	a,r1
                           3227 ;	Peephole 236.l	used r5 instead of ar5
   0996 9D                 3228 	subb	a,r5
   0997 F5*05              3229 	mov	(_sd_multiple_read_sloc0_1_0 + 3),a
                           3230 ;	sdcdriver.c:527: SPDAT = 0x50;               // Start byte
                           3231 ;	genAssign
   0999 75 C5 50           3232 	mov	_SPDAT,#0x50
                           3233 ;	sdcdriver.c:528: while(!transmit_completed);/* wait for end of transmition */
   099C                    3234 00101$:
                           3235 ;	genIfx
                           3236 ;	genIfxJump
                           3237 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3238 ;	sdcdriver.c:529: transmit_completed = 0;    /* clear software transfer flag */
                           3239 ;	genAssign
                           3240 ;	Peephole 250.a	using atomic test and clear
   099C 10*00 02           3241 	jbc	_transmit_completed,00174$
   099F 80 FB              3242 	sjmp	00101$
   09A1                    3243 00174$:
                           3244 ;	sdcdriver.c:531: counter = 0;                 // Argument 4 bytes
                           3245 ;	genAssign
   09A1 90s00r4B           3246 	mov	dptr,#_sd_multiple_read_counter_1_1
   09A4 E4                 3247 	clr	a
   09A5 F0                 3248 	movx	@dptr,a
   09A6 A3                 3249 	inc	dptr
   09A7 F0                 3250 	movx	@dptr,a
                           3251 ;	sdcdriver.c:533: while(counter <= 3)
   09A8                    3252 00113$:
                           3253 ;	genAssign
   09A8 90s00r4B           3254 	mov	dptr,#_sd_multiple_read_counter_1_1
   09AB E0                 3255 	movx	a,@dptr
   09AC FE                 3256 	mov	r6,a
   09AD A3                 3257 	inc	dptr
   09AE E0                 3258 	movx	a,@dptr
   09AF FF                 3259 	mov	r7,a
                           3260 ;	genCmpGt
                           3261 ;	genCmp
   09B0 C3                 3262 	clr	c
   09B1 74 03              3263 	mov	a,#0x03
   09B3 9E                 3264 	subb	a,r6
                           3265 ;	Peephole 159	avoided xrl during execution
   09B4 74 80              3266 	mov	a,#(0x00 ^ 0x80)
   09B6 8F F0              3267 	mov	b,r7
   09B8 63 F0 80           3268 	xrl	b,#0x80
   09BB 95 F0              3269 	subb	a,b
                           3270 ;	genIfxJump
                           3271 ;	Peephole 112.b	changed ljmp to sjmp
                           3272 ;	Peephole 160.a	removed sjmp by inverse jump logic
   09BD 40 30              3273 	jc	00153$
                           3274 ;	Peephole 300	removed redundant label 00175$
                           3275 ;	sdcdriver.c:535: if(counter == 2)
                           3276 ;	genCmpEq
                           3277 ;	gencjneshort
                           3278 ;	Peephole 112.b	changed ljmp to sjmp
                           3279 ;	Peephole 198.a	optimized misc jump sequence
   09BF BE 02 18           3280 	cjne	r6,#0x02,00111$
   09C2 BF 00 15           3281 	cjne	r7,#0x00,00111$
                           3282 ;	Peephole 200.b	removed redundant sjmp
                           3283 ;	Peephole 300	removed redundant label 00176$
                           3284 ;	Peephole 300	removed redundant label 00177$
                           3285 ;	sdcdriver.c:537: SPDAT = 0x02;
                           3286 ;	genAssign
   09C5 75 C5 02           3287 	mov	_SPDAT,#0x02
                           3288 ;	sdcdriver.c:538: counter++;
                           3289 ;	genPlus
   09C8 90s00r4B           3290 	mov	dptr,#_sd_multiple_read_counter_1_1
                           3291 ;     genPlusIncr
   09CB 74 01              3292 	mov	a,#0x01
                           3293 ;	Peephole 236.a	used r6 instead of ar6
   09CD 2E                 3294 	add	a,r6
   09CE F0                 3295 	movx	@dptr,a
                           3296 ;	Peephole 181	changed mov to clr
   09CF E4                 3297 	clr	a
                           3298 ;	Peephole 236.b	used r7 instead of ar7
   09D0 3F                 3299 	addc	a,r7
   09D1 A3                 3300 	inc	dptr
   09D2 F0                 3301 	movx	@dptr,a
                           3302 ;	sdcdriver.c:539: while(!transmit_completed);/* wait for end of transmition */
   09D3                    3303 00104$:
                           3304 ;	genIfx
                           3305 ;	genIfxJump
                           3306 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3307 ;	sdcdriver.c:540: transmit_completed = 0;    /* clear software transfer flag */
                           3308 ;	genAssign
                           3309 ;	Peephole 250.a	using atomic test and clear
   09D3 10*00 02           3310 	jbc	_transmit_completed,00178$
   09D6 80 FB              3311 	sjmp	00104$
   09D8                    3312 00178$:
                           3313 ;	Peephole 112.b	changed ljmp to sjmp
   09D8 80 CE              3314 	sjmp	00113$
   09DA                    3315 00111$:
                           3316 ;	sdcdriver.c:544: SPDAT = 0x00;
                           3317 ;	genAssign
   09DA 75 C5 00           3318 	mov	_SPDAT,#0x00
                           3319 ;	sdcdriver.c:545: counter++;
                           3320 ;	genPlus
   09DD 90s00r4B           3321 	mov	dptr,#_sd_multiple_read_counter_1_1
                           3322 ;     genPlusIncr
   09E0 74 01              3323 	mov	a,#0x01
                           3324 ;	Peephole 236.a	used r6 instead of ar6
   09E2 2E                 3325 	add	a,r6
   09E3 F0                 3326 	movx	@dptr,a
                           3327 ;	Peephole 181	changed mov to clr
   09E4 E4                 3328 	clr	a
                           3329 ;	Peephole 236.b	used r7 instead of ar7
   09E5 3F                 3330 	addc	a,r7
   09E6 A3                 3331 	inc	dptr
   09E7 F0                 3332 	movx	@dptr,a
                           3333 ;	sdcdriver.c:546: while(!transmit_completed);/* wait for end of transmition */
   09E8                    3334 00107$:
                           3335 ;	genIfx
                           3336 ;	genIfxJump
                           3337 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3338 ;	sdcdriver.c:547: transmit_completed = 0;    /* clear software transfer flag */
                           3339 ;	genAssign
                           3340 ;	Peephole 250.a	using atomic test and clear
   09E8 10*00 02           3341 	jbc	_transmit_completed,00179$
   09EB 80 FB              3342 	sjmp	00107$
   09ED                    3343 00179$:
                           3344 ;	sdcdriver.c:551: for(i=0;i<3;i++)
                           3345 ;	Peephole 112.b	changed ljmp to sjmp
   09ED 80 B9              3346 	sjmp	00113$
   09EF                    3347 00153$:
                           3348 ;	genAssign
   09EF 7E 03              3349 	mov	r6,#0x03
   09F1 7F 00              3350 	mov	r7,#0x00
   09F3                    3351 00131$:
                           3352 ;	sdcdriver.c:552: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3353 ;	genCall
   09F3 C0 06              3354 	push	ar6
   09F5 C0 07              3355 	push	ar7
   09F7 12s0BrEE           3356 	lcall	_wait_tx_end
   09FA D0 07              3357 	pop	ar7
   09FC D0 06              3358 	pop	ar6
                           3359 ;	genMinus
                           3360 ;	genMinusDec
   09FE 1E                 3361 	dec	r6
   09FF BE FF 01           3362 	cjne	r6,#0xff,00180$
   0A02 1F                 3363 	dec	r7
   0A03                    3364 00180$:
                           3365 ;	sdcdriver.c:551: for(i=0;i<3;i++)
                           3366 ;	genIfx
   0A03 EE                 3367 	mov	a,r6
   0A04 4F                 3368 	orl	a,r7
                           3369 ;	genIfxJump
                           3370 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A05 70 EC              3371 	jnz	00131$
                           3372 ;	Peephole 300	removed redundant label 00181$
                           3373 ;	sdcdriver.c:558: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3374 ;	genCall
   0A07 12s0BrEE           3375 	lcall	_wait_tx_end
                           3376 ;	sdcdriver.c:559: SPDAT = 0x52;               // Start byte
                           3377 ;	genAssign
   0A0A 75 C5 52           3378 	mov	_SPDAT,#0x52
                           3379 ;	sdcdriver.c:560: while(!transmit_completed);/* wait for end of transmition */
   0A0D                    3380 00116$:
                           3381 ;	genIfx
                           3382 ;	genIfxJump
                           3383 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3384 ;	sdcdriver.c:561: transmit_completed = 0;    /* clear software transfer flag */
                           3385 ;	genAssign
                           3386 ;	Peephole 250.a	using atomic test and clear
   0A0D 10*00 02           3387 	jbc	_transmit_completed,00182$
   0A10 80 FB              3388 	sjmp	00116$
   0A12                    3389 00182$:
                           3390 ;	sdcdriver.c:564: while(counter >= 0)
                           3391 ;	genAssign
   0A12 7E 03              3392 	mov	r6,#0x03
   0A14 7F 00              3393 	mov	r7,#0x00
   0A16                    3394 00122$:
                           3395 ;	genCmpLt
                           3396 ;	genCmp
   0A16 EF                 3397 	mov	a,r7
                           3398 ;	genIfxJump
                           3399 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0A17 20 E7 19           3400 	jb	acc.7,00124$
                           3401 ;	Peephole 300	removed redundant label 00183$
                           3402 ;	sdcdriver.c:566: SPDAT = temp_start.b[counter];               // CRC
                           3403 ;	genPlus
                           3404 ;	Peephole 236.g	used r6 instead of ar6
   0A1A EE                 3405 	mov	a,r6
   0A1B 24r4D              3406 	add	a,#_sd_multiple_read_temp_start_1_1
   0A1D F5 82              3407 	mov	dpl,a
                           3408 ;	Peephole 236.g	used r7 instead of ar7
   0A1F EF                 3409 	mov	a,r7
   0A20 34s00              3410 	addc	a,#(_sd_multiple_read_temp_start_1_1 >> 8)
   0A22 F5 83              3411 	mov	dph,a
                           3412 ;	genPointerGet
                           3413 ;	genFarPointerGet
   0A24 E0                 3414 	movx	a,@dptr
   0A25 F5 C5              3415 	mov	_SPDAT,a
                           3416 ;	sdcdriver.c:567: counter--;
                           3417 ;	genMinus
                           3418 ;	genMinusDec
   0A27 1E                 3419 	dec	r6
   0A28 BE FF 01           3420 	cjne	r6,#0xff,00184$
   0A2B 1F                 3421 	dec	r7
   0A2C                    3422 00184$:
                           3423 ;	sdcdriver.c:568: while(!transmit_completed);/* wait for end of transmition */
   0A2C                    3424 00119$:
                           3425 ;	genIfx
                           3426 ;	genIfxJump
                           3427 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3428 ;	sdcdriver.c:569: transmit_completed = 0;    /* clear software transfer flag */
                           3429 ;	genAssign
                           3430 ;	Peephole 250.a	using atomic test and clear
   0A2C 10*00 02           3431 	jbc	_transmit_completed,00185$
   0A2F 80 FB              3432 	sjmp	00119$
   0A31                    3433 00185$:
                           3434 ;	Peephole 112.b	changed ljmp to sjmp
   0A31 80 E3              3435 	sjmp	00122$
   0A33                    3436 00124$:
                           3437 ;	sdcdriver.c:571: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3438 ;	genCall
   0A33 12s0BrEE           3439 	lcall	_wait_tx_end
                           3440 ;	sdcdriver.c:572: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3441 ;	genCall
   0A36 12s0BrEE           3442 	lcall	_wait_tx_end
                           3443 ;	sdcdriver.c:575: for(i=0;i<4;i++)
                           3444 ;	genAssign
   0A39 7E 04              3445 	mov	r6,#0x04
   0A3B 7F 00              3446 	mov	r7,#0x00
   0A3D                    3447 00134$:
                           3448 ;	sdcdriver.c:577: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3449 ;	genCall
   0A3D C0 06              3450 	push	ar6
   0A3F C0 07              3451 	push	ar7
   0A41 12s0BrEE           3452 	lcall	_wait_tx_end
   0A44 D0 07              3453 	pop	ar7
   0A46 D0 06              3454 	pop	ar6
                           3455 ;	sdcdriver.c:578: data1 = serial_data;
                           3456 ;	genMinus
                           3457 ;	genMinusDec
   0A48 1E                 3458 	dec	r6
   0A49 BE FF 01           3459 	cjne	r6,#0xff,00186$
   0A4C 1F                 3460 	dec	r7
   0A4D                    3461 00186$:
                           3462 ;	sdcdriver.c:575: for(i=0;i<4;i++)
                           3463 ;	genIfx
   0A4D EE                 3464 	mov	a,r6
   0A4E 4F                 3465 	orl	a,r7
                           3466 ;	genIfxJump
                           3467 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0A4F 70 EC              3468 	jnz	00134$
                           3469 ;	Peephole 300	removed redundant label 00187$
                           3470 ;	sdcdriver.c:581: ctr2= (temp_start.b[2] & 0xff);
                           3471 ;	genIpush
                           3472 ;	genPointerGet
                           3473 ;	genFarPointerGet
   0A51 90s00r4F           3474 	mov	dptr,#(_sd_multiple_read_temp_start_1_1 + 0x0002)
   0A54 E0                 3475 	movx	a,@dptr
                           3476 ;	sdcdriver.c:582: ctr3= (temp_start.b[3] & 0xff);
                           3477 ;	genPointerGet
                           3478 ;	genFarPointerGet
   0A55 90s00r50           3479 	mov	dptr,#(_sd_multiple_read_temp_start_1_1 + 0x0003)
   0A58 E0                 3480 	movx	a,@dptr
                           3481 ;	sdcdriver.c:584: printf("\n\r%02x%02x%02x%02x: \n\r",(temp_start.b[3] & 0xff),(temp_start.b[2] & 0xff),(temp_start.b[1] & 0xff),(temp_start.b[0] & 0xff));
                           3482 ;	genPointerGet
                           3483 ;	genFarPointerGet
   0A59 90s00r4D           3484 	mov	dptr,#_sd_multiple_read_temp_start_1_1
   0A5C E0                 3485 	movx	a,@dptr
   0A5D FE                 3486 	mov	r6,a
                           3487 ;	genCast
   0A5E 7F 00              3488 	mov	r7,#0x00
                           3489 ;	genPointerGet
                           3490 ;	genFarPointerGet
   0A60 90s00r4E           3491 	mov	dptr,#(_sd_multiple_read_temp_start_1_1 + 0x0001)
   0A63 E0                 3492 	movx	a,@dptr
   0A64 F8                 3493 	mov	r0,a
                           3494 ;	genCast
   0A65 79 00              3495 	mov	r1,#0x00
                           3496 ;	genPointerGet
                           3497 ;	genFarPointerGet
   0A67 90s00r4F           3498 	mov	dptr,#(_sd_multiple_read_temp_start_1_1 + 0x0002)
   0A6A E0                 3499 	movx	a,@dptr
   0A6B FA                 3500 	mov	r2,a
                           3501 ;	genCast
   0A6C 7B 00              3502 	mov	r3,#0x00
                           3503 ;	genPointerGet
                           3504 ;	genFarPointerGet
   0A6E 90s00r50           3505 	mov	dptr,#(_sd_multiple_read_temp_start_1_1 + 0x0003)
   0A71 E0                 3506 	movx	a,@dptr
   0A72 FC                 3507 	mov	r4,a
                           3508 ;	genCast
   0A73 7D 00              3509 	mov	r5,#0x00
                           3510 ;	genIpush
   0A75 C0 06              3511 	push	ar6
   0A77 C0 07              3512 	push	ar7
                           3513 ;	genIpush
   0A79 C0 00              3514 	push	ar0
   0A7B C0 01              3515 	push	ar1
                           3516 ;	genIpush
   0A7D C0 02              3517 	push	ar2
   0A7F C0 03              3518 	push	ar3
                           3519 ;	genIpush
   0A81 C0 04              3520 	push	ar4
   0A83 C0 05              3521 	push	ar5
                           3522 ;	genIpush
   0A85 74r43              3523 	mov	a,#__str_7
   0A87 C0 E0              3524 	push	acc
   0A89 74s00              3525 	mov	a,#(__str_7 >> 8)
   0A8B C0 E0              3526 	push	acc
   0A8D 74 80              3527 	mov	a,#0x80
   0A8F C0 E0              3528 	push	acc
                           3529 ;	genCall
   0A91 12s00r00           3530 	lcall	_printf
   0A94 E5 81              3531 	mov	a,sp
   0A96 24 F5              3532 	add	a,#0xf5
   0A98 F5 81              3533 	mov	sp,a
                           3534 ;	sdcdriver.c:617: return 1;
                           3535 ;	genIpop
                           3536 ;	sdcdriver.c:586: for(i=0;i<bytetot;i++)
                           3537 ;	genAssign
   0A9A 7E 00              3538 	mov	r6,#0x00
   0A9C 7F 00              3539 	mov	r7,#0x00
   0A9E                    3540 00135$:
                           3541 ;	genCast
   0A9E 8E 00              3542 	mov	ar0,r6
                           3543 ;	peephole 177.h	optimized mov sequence
   0AA0 EF                 3544 	mov	a,r7
                           3545 ;	Peephole 236.i	used r1 instead of ar1
   0AA1 F9                 3546 	mov	r1,a
   0AA2 33                 3547 	rlc	a
   0AA3 95 E0              3548 	subb	a,acc
   0AA5 FA                 3549 	mov	r2,a
   0AA6 FB                 3550 	mov	r3,a
                           3551 ;	genCmpLt
                           3552 ;	genCmp
   0AA7 C3                 3553 	clr	c
   0AA8 E8                 3554 	mov	a,r0
   0AA9 95*02              3555 	subb	a,_sd_multiple_read_sloc0_1_0
   0AAB E9                 3556 	mov	a,r1
   0AAC 95*03              3557 	subb	a,(_sd_multiple_read_sloc0_1_0 + 1)
   0AAE EA                 3558 	mov	a,r2
   0AAF 95*04              3559 	subb	a,(_sd_multiple_read_sloc0_1_0 + 2)
   0AB1 EB                 3560 	mov	a,r3
   0AB2 95*05              3561 	subb	a,(_sd_multiple_read_sloc0_1_0 + 3)
                           3562 ;	genIfxJump
   0AB4 40 03              3563 	jc	00188$
   0AB6 02s0Br83           3564 	ljmp	00138$
   0AB9                    3565 00188$:
                           3566 ;	sdcdriver.c:588: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3567 ;	genCall
   0AB9 C0 06              3568 	push	ar6
   0ABB C0 07              3569 	push	ar7
   0ABD 12s0BrEE           3570 	lcall	_wait_tx_end
   0AC0 D0 07              3571 	pop	ar7
   0AC2 D0 06              3572 	pop	ar6
                           3573 ;	sdcdriver.c:589: data1 = SPDAT;
                           3574 ;	genAssign
   0AC4 AA C5              3575 	mov	r2,_SPDAT
                           3576 ;	sdcdriver.c:591: delay(5);
                           3577 ;	genCall
                           3578 ;	Peephole 182.b	used 16 bit load of dptr
   0AC6 90 00 05           3579 	mov	dptr,#0x0005
   0AC9 C0 02              3580 	push	ar2
   0ACB C0 06              3581 	push	ar6
   0ACD C0 07              3582 	push	ar7
   0ACF 12s0BrF7           3583 	lcall	_delay
   0AD2 D0 07              3584 	pop	ar7
   0AD4 D0 06              3585 	pop	ar6
   0AD6 D0 02              3586 	pop	ar2
                           3587 ;	sdcdriver.c:592: buff[i] = data1;
                           3588 ;	genAssign
   0AD8 90s00r08           3589 	mov	dptr,#_buff
   0ADB E0                 3590 	movx	a,@dptr
   0ADC FB                 3591 	mov	r3,a
   0ADD A3                 3592 	inc	dptr
   0ADE E0                 3593 	movx	a,@dptr
   0ADF FC                 3594 	mov	r4,a
                           3595 ;	genPlus
                           3596 ;	Peephole 236.g	used r6 instead of ar6
   0AE0 EE                 3597 	mov	a,r6
                           3598 ;	Peephole 236.a	used r3 instead of ar3
   0AE1 2B                 3599 	add	a,r3
   0AE2 F5 82              3600 	mov	dpl,a
                           3601 ;	Peephole 236.g	used r7 instead of ar7
   0AE4 EF                 3602 	mov	a,r7
                           3603 ;	Peephole 236.b	used r4 instead of ar4
   0AE5 3C                 3604 	addc	a,r4
   0AE6 F5 83              3605 	mov	dph,a
                           3606 ;	genPointerSet
                           3607 ;     genFarPointerSet
   0AE8 EA                 3608 	mov	a,r2
   0AE9 F0                 3609 	movx	@dptr,a
                           3610 ;	sdcdriver.c:594: if(((i%16)==0) && (i!=0))
                           3611 ;	genAssign
   0AEA 90s00r00           3612 	mov	dptr,#__modsint_PARM_2
   0AED 74 10              3613 	mov	a,#0x10
   0AEF F0                 3614 	movx	@dptr,a
   0AF0 E4                 3615 	clr	a
   0AF1 A3                 3616 	inc	dptr
   0AF2 F0                 3617 	movx	@dptr,a
                           3618 ;	genCall
   0AF3 8E 82              3619 	mov	dpl,r6
   0AF5 8F 83              3620 	mov	dph,r7
   0AF7 C0 06              3621 	push	ar6
   0AF9 C0 07              3622 	push	ar7
   0AFB 12s00r00           3623 	lcall	__modsint
   0AFE E5 82              3624 	mov	a,dpl
   0B00 85 83 F0           3625 	mov	b,dph
   0B03 D0 07              3626 	pop	ar7
   0B05 D0 06              3627 	pop	ar6
                           3628 ;	genIfx
   0B07 45 F0              3629 	orl	a,b
                           3630 ;	genIfxJump
                           3631 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0B09 70 4B              3632 	jnz	00126$
                           3633 ;	Peephole 300	removed redundant label 00189$
                           3634 ;	genCmpEq
                           3635 ;	gencjneshort
   0B0B BE 00 05           3636 	cjne	r6,#0x00,00190$
   0B0E BF 00 02           3637 	cjne	r7,#0x00,00190$
                           3638 ;	Peephole 112.b	changed ljmp to sjmp
   0B11 80 43              3639 	sjmp	00126$
   0B13                    3640 00190$:
                           3641 ;	sdcdriver.c:596: putchar('\n');
                           3642 ;	genCall
   0B13 75 82 0A           3643 	mov	dpl,#0x0A
   0B16 C0 06              3644 	push	ar6
   0B18 C0 07              3645 	push	ar7
   0B1A 12s00r00           3646 	lcall	_putchar
   0B1D D0 07              3647 	pop	ar7
   0B1F D0 06              3648 	pop	ar6
                           3649 ;	sdcdriver.c:597: putchar('\r');
                           3650 ;	genCall
   0B21 75 82 0D           3651 	mov	dpl,#0x0D
   0B24 C0 06              3652 	push	ar6
   0B26 C0 07              3653 	push	ar7
   0B28 12s00r00           3654 	lcall	_putchar
   0B2B D0 07              3655 	pop	ar7
   0B2D D0 06              3656 	pop	ar6
                           3657 ;	sdcdriver.c:599: printf("0x%02x  ",SPDAT);
                           3658 ;	genCast
   0B2F AA C5              3659 	mov	r2,_SPDAT
   0B31 7B 00              3660 	mov	r3,#0x00
                           3661 ;	genIpush
   0B33 C0 06              3662 	push	ar6
   0B35 C0 07              3663 	push	ar7
   0B37 C0 02              3664 	push	ar2
   0B39 C0 03              3665 	push	ar3
                           3666 ;	genIpush
   0B3B 74r5A              3667 	mov	a,#__str_8
   0B3D C0 E0              3668 	push	acc
   0B3F 74s00              3669 	mov	a,#(__str_8 >> 8)
   0B41 C0 E0              3670 	push	acc
   0B43 74 80              3671 	mov	a,#0x80
   0B45 C0 E0              3672 	push	acc
                           3673 ;	genCall
   0B47 12s00r00           3674 	lcall	_printf
   0B4A E5 81              3675 	mov	a,sp
   0B4C 24 FB              3676 	add	a,#0xfb
   0B4E F5 81              3677 	mov	sp,a
   0B50 D0 07              3678 	pop	ar7
   0B52 D0 06              3679 	pop	ar6
                           3680 ;	Peephole 112.b	changed ljmp to sjmp
   0B54 80 25              3681 	sjmp	00137$
   0B56                    3682 00126$:
                           3683 ;	sdcdriver.c:603: printf("0x%02x  ",SPDAT);
                           3684 ;	genCast
   0B56 AA C5              3685 	mov	r2,_SPDAT
   0B58 7B 00              3686 	mov	r3,#0x00
                           3687 ;	genIpush
   0B5A C0 06              3688 	push	ar6
   0B5C C0 07              3689 	push	ar7
   0B5E C0 02              3690 	push	ar2
   0B60 C0 03              3691 	push	ar3
                           3692 ;	genIpush
   0B62 74r5A              3693 	mov	a,#__str_8
   0B64 C0 E0              3694 	push	acc
   0B66 74s00              3695 	mov	a,#(__str_8 >> 8)
   0B68 C0 E0              3696 	push	acc
   0B6A 74 80              3697 	mov	a,#0x80
   0B6C C0 E0              3698 	push	acc
                           3699 ;	genCall
   0B6E 12s00r00           3700 	lcall	_printf
   0B71 E5 81              3701 	mov	a,sp
   0B73 24 FB              3702 	add	a,#0xfb
   0B75 F5 81              3703 	mov	sp,a
   0B77 D0 07              3704 	pop	ar7
   0B79 D0 06              3705 	pop	ar6
   0B7B                    3706 00137$:
                           3707 ;	sdcdriver.c:586: for(i=0;i<bytetot;i++)
                           3708 ;	genPlus
                           3709 ;     genPlusIncr
   0B7B 0E                 3710 	inc	r6
   0B7C BE 00 01           3711 	cjne	r6,#0x00,00191$
   0B7F 0F                 3712 	inc	r7
   0B80                    3713 00191$:
   0B80 02s0Ar9E           3714 	ljmp	00135$
   0B83                    3715 00138$:
                           3716 ;	sdcdriver.c:609: sd_stop_transmission();             // Send stop trnsmission command
                           3717 ;	genCall
   0B83 12s0BrA2           3718 	lcall	_sd_stop_transmission
                           3719 ;	sdcdriver.c:611: for(i=0;i<4;i++)
                           3720 ;	genAssign
   0B86 7A 04              3721 	mov	r2,#0x04
   0B88 7B 00              3722 	mov	r3,#0x00
   0B8A                    3723 00141$:
                           3724 ;	sdcdriver.c:613: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3725 ;	genCall
   0B8A C0 02              3726 	push	ar2
   0B8C C0 03              3727 	push	ar3
   0B8E 12s0BrEE           3728 	lcall	_wait_tx_end
   0B91 D0 03              3729 	pop	ar3
   0B93 D0 02              3730 	pop	ar2
                           3731 ;	sdcdriver.c:614: data1 = serial_data;
                           3732 ;	genMinus
                           3733 ;	genMinusDec
   0B95 1A                 3734 	dec	r2
   0B96 BA FF 01           3735 	cjne	r2,#0xff,00192$
   0B99 1B                 3736 	dec	r3
   0B9A                    3737 00192$:
                           3738 ;	sdcdriver.c:611: for(i=0;i<4;i++)
                           3739 ;	genIfx
   0B9A EA                 3740 	mov	a,r2
   0B9B 4B                 3741 	orl	a,r3
                           3742 ;	genIfxJump
                           3743 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0B9C 70 EC              3744 	jnz	00141$
                           3745 ;	Peephole 300	removed redundant label 00193$
                           3746 ;	sdcdriver.c:617: return 1;
                           3747 ;	genRet
   0B9E 75 82 01           3748 	mov	dpl,#0x01
                           3749 ;	Peephole 300	removed redundant label 00142$
   0BA1 22                 3750 	ret
                           3751 ;------------------------------------------------------------
                           3752 ;Allocation info for local variables in function 'sd_stop_transmission'
                           3753 ;------------------------------------------------------------
                           3754 ;i                         Allocated with name '_sd_stop_transmission_i_1_1'
                           3755 ;counter                   Allocated with name '_sd_stop_transmission_counter_1_1'
                           3756 ;------------------------------------------------------------
                           3757 ;	sdcdriver.c:621: void sd_stop_transmission()
                           3758 ;	-----------------------------------------
                           3759 ;	 function sd_stop_transmission
                           3760 ;	-----------------------------------------
   0BA2                    3761 _sd_stop_transmission:
                           3762 ;	sdcdriver.c:625: SPDAT = 0x4C;               // Start byte
                           3763 ;	genAssign
   0BA2 75 C5 4C           3764 	mov	_SPDAT,#0x4C
                           3765 ;	sdcdriver.c:626: while(!transmit_completed);/* wait for end of transmition */
   0BA5                    3766 00101$:
                           3767 ;	genIfx
                           3768 ;	genIfxJump
                           3769 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3770 ;	sdcdriver.c:627: transmit_completed = 0;    /* clear software transfer flag */
                           3771 ;	genAssign
                           3772 ;	Peephole 250.a	using atomic test and clear
   0BA5 10*00 02           3773 	jbc	_transmit_completed,00125$
   0BA8 80 FB              3774 	sjmp	00101$
   0BAA                    3775 00125$:
                           3776 ;	sdcdriver.c:631: while(counter <= 3)
                           3777 ;	genAssign
   0BAA 7A 00              3778 	mov	r2,#0x00
   0BAC 7B 00              3779 	mov	r3,#0x00
   0BAE                    3780 00107$:
                           3781 ;	genCmpGt
                           3782 ;	genCmp
   0BAE C3                 3783 	clr	c
   0BAF 74 03              3784 	mov	a,#0x03
   0BB1 9A                 3785 	subb	a,r2
                           3786 ;	Peephole 159	avoided xrl during execution
   0BB2 74 80              3787 	mov	a,#(0x00 ^ 0x80)
   0BB4 8B F0              3788 	mov	b,r3
   0BB6 63 F0 80           3789 	xrl	b,#0x80
   0BB9 95 F0              3790 	subb	a,b
                           3791 ;	genIfxJump
                           3792 ;	Peephole 112.b	changed ljmp to sjmp
                           3793 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0BBB 40 0F              3794 	jc	00109$
                           3795 ;	Peephole 300	removed redundant label 00126$
                           3796 ;	sdcdriver.c:633: SPDAT = 0x00;
                           3797 ;	genAssign
   0BBD 75 C5 00           3798 	mov	_SPDAT,#0x00
                           3799 ;	sdcdriver.c:634: counter++;
                           3800 ;	genPlus
                           3801 ;     genPlusIncr
   0BC0 0A                 3802 	inc	r2
   0BC1 BA 00 01           3803 	cjne	r2,#0x00,00127$
   0BC4 0B                 3804 	inc	r3
   0BC5                    3805 00127$:
                           3806 ;	sdcdriver.c:635: while(!transmit_completed);/* wait for end of transmition */
   0BC5                    3807 00104$:
                           3808 ;	genIfx
                           3809 ;	genIfxJump
                           3810 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3811 ;	sdcdriver.c:636: transmit_completed = 0;    /* clear software transfer flag */
                           3812 ;	genAssign
                           3813 ;	Peephole 250.a	using atomic test and clear
   0BC5 10*00 02           3814 	jbc	_transmit_completed,00128$
   0BC8 80 FB              3815 	sjmp	00104$
   0BCA                    3816 00128$:
                           3817 ;	Peephole 112.b	changed ljmp to sjmp
   0BCA 80 E2              3818 	sjmp	00107$
   0BCC                    3819 00109$:
                           3820 ;	sdcdriver.c:639: for(i=0;i<3;i++)
                           3821 ;	genAssign
   0BCC 7A 03              3822 	mov	r2,#0x03
   0BCE 7B 00              3823 	mov	r3,#0x00
   0BD0                    3824 00112$:
                           3825 ;	sdcdriver.c:640: wait_tx_end();              // Dummy byte & Wait for end of transmission
                           3826 ;	genCall
   0BD0 C0 02              3827 	push	ar2
   0BD2 C0 03              3828 	push	ar3
   0BD4 12s0BrEE           3829 	lcall	_wait_tx_end
   0BD7 D0 03              3830 	pop	ar3
   0BD9 D0 02              3831 	pop	ar2
                           3832 ;	genMinus
                           3833 ;	genMinusDec
   0BDB 1A                 3834 	dec	r2
   0BDC BA FF 01           3835 	cjne	r2,#0xff,00129$
   0BDF 1B                 3836 	dec	r3
   0BE0                    3837 00129$:
                           3838 ;	sdcdriver.c:639: for(i=0;i<3;i++)
                           3839 ;	genIfx
   0BE0 EA                 3840 	mov	a,r2
   0BE1 4B                 3841 	orl	a,r3
                           3842 ;	genIfxJump
                           3843 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0BE2 70 EC              3844 	jnz	00112$
                           3845 ;	Peephole 300	removed redundant label 00130$
                           3846 ;	sdcdriver.c:641: data_save = serial_data;
                           3847 ;	genAssign
   0BE4 90s00r00           3848 	mov	dptr,#_serial_data
   0BE7 E0                 3849 	movx	a,@dptr
                           3850 ;	genAssign
   0BE8 FA                 3851 	mov	r2,a
   0BE9 90s00r01           3852 	mov	dptr,#_data_save
                           3853 ;	Peephole 100	removed redundant mov
   0BEC F0                 3854 	movx	@dptr,a
                           3855 ;	Peephole 300	removed redundant label 00113$
   0BED 22                 3856 	ret
                           3857 ;------------------------------------------------------------
                           3858 ;Allocation info for local variables in function 'wait_tx_end'
                           3859 ;------------------------------------------------------------
                           3860 ;------------------------------------------------------------
                           3861 ;	sdcdriver.c:646: void wait_tx_end()
                           3862 ;	-----------------------------------------
                           3863 ;	 function wait_tx_end
                           3864 ;	-----------------------------------------
   0BEE                    3865 _wait_tx_end:
                           3866 ;	sdcdriver.c:648: SPDAT = 0xFF;               // Wait for response
                           3867 ;	genAssign
   0BEE 75 C5 FF           3868 	mov	_SPDAT,#0xFF
                           3869 ;	sdcdriver.c:649: while(!transmit_completed);/* wait for end of transmition */
   0BF1                    3870 00101$:
                           3871 ;	genIfx
                           3872 ;	genIfxJump
                           3873 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           3874 ;	sdcdriver.c:650: transmit_completed = 0;    /* clear software transfer flag */
                           3875 ;	genAssign
                           3876 ;	Peephole 250.a	using atomic test and clear
   0BF1 10*00 02           3877 	jbc	_transmit_completed,00108$
   0BF4 80 FB              3878 	sjmp	00101$
   0BF6                    3879 00108$:
                           3880 ;	Peephole 300	removed redundant label 00104$
   0BF6 22                 3881 	ret
                           3882 ;------------------------------------------------------------
                           3883 ;Allocation info for local variables in function 'delay'
                           3884 ;------------------------------------------------------------
                           3885 ;number                    Allocated with name '_delay_number_1_1'
                           3886 ;i                         Allocated with name '_delay_i_1_1'
                           3887 ;j                         Allocated with name '_delay_j_1_1'
                           3888 ;------------------------------------------------------------
                           3889 ;	sdcdriver.c:654: void delay(unsigned int number)
                           3890 ;	-----------------------------------------
                           3891 ;	 function delay
                           3892 ;	-----------------------------------------
   0BF7                    3893 _delay:
                           3894 ;	genReceive
   0BF7 AA 83              3895 	mov	r2,dph
   0BF9 E5 82              3896 	mov	a,dpl
   0BFB 90s00r55           3897 	mov	dptr,#_delay_number_1_1
   0BFE F0                 3898 	movx	@dptr,a
   0BFF A3                 3899 	inc	dptr
   0C00 EA                 3900 	mov	a,r2
   0C01 F0                 3901 	movx	@dptr,a
                           3902 ;	sdcdriver.c:657: for(i=0;i<number;i++)
                           3903 ;	genAssign
   0C02 90s00r55           3904 	mov	dptr,#_delay_number_1_1
   0C05 E0                 3905 	movx	a,@dptr
   0C06 FA                 3906 	mov	r2,a
   0C07 A3                 3907 	inc	dptr
   0C08 E0                 3908 	movx	a,@dptr
   0C09 FB                 3909 	mov	r3,a
                           3910 ;	genAssign
   0C0A 7C 00              3911 	mov	r4,#0x00
   0C0C 7D 00              3912 	mov	r5,#0x00
   0C0E                    3913 00104$:
                           3914 ;	genCmpLt
                           3915 ;	genCmp
   0C0E C3                 3916 	clr	c
   0C0F EC                 3917 	mov	a,r4
   0C10 9A                 3918 	subb	a,r2
   0C11 ED                 3919 	mov	a,r5
   0C12 9B                 3920 	subb	a,r3
                           3921 ;	genIfxJump
                           3922 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0C13 50 14              3923 	jnc	00107$
                           3924 ;	Peephole 300	removed redundant label 00116$
                           3925 ;	sdcdriver.c:659: for(j=0;j<100;j++)
                           3926 ;	genAssign
   0C15 7E 64              3927 	mov	r6,#0x64
   0C17 7F 00              3928 	mov	r7,#0x00
   0C19                    3929 00103$:
                           3930 ;	genMinus
                           3931 ;	genMinusDec
   0C19 1E                 3932 	dec	r6
   0C1A BE FF 01           3933 	cjne	r6,#0xff,00117$
   0C1D 1F                 3934 	dec	r7
   0C1E                    3935 00117$:
                           3936 ;	genIfx
   0C1E EE                 3937 	mov	a,r6
   0C1F 4F                 3938 	orl	a,r7
                           3939 ;	genIfxJump
                           3940 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0C20 70 F7              3941 	jnz	00103$
                           3942 ;	Peephole 300	removed redundant label 00118$
                           3943 ;	sdcdriver.c:657: for(i=0;i<number;i++)
                           3944 ;	genPlus
                           3945 ;     genPlusIncr
                           3946 ;	tail increment optimized (range 7)
   0C22 0C                 3947 	inc	r4
   0C23 BC 00 E8           3948 	cjne	r4,#0x00,00104$
   0C26 0D                 3949 	inc	r5
                           3950 ;	Peephole 112.b	changed ljmp to sjmp
   0C27 80 E5              3951 	sjmp	00104$
   0C29                    3952 00107$:
                           3953 ;	sdcdriver.c:663: return;
                           3954 ;	genRet
                           3955 ;	Peephole 300	removed redundant label 00108$
   0C29 22                 3956 	ret
                           3957 	.area CSEG    (CODE)
                           3958 	.area CONST   (CODE)
   0000                    3959 __str_0:
   0000 0A                 3960 	.db 0x0A
   0001 0D                 3961 	.db 0x0D
   0002 46 69 6C 65 20 4E  3962 	.ascii "File Name: "
        61 6D 65 3A 20
   000D 00                 3963 	.db 0x00
   000E                    3964 __str_1:
   000E 25 63              3965 	.ascii "%c"
   0010 00                 3966 	.db 0x00
   0011                    3967 __str_2:
   0011 0A                 3968 	.db 0x0A
   0012 0D                 3969 	.db 0x0D
   0013 00                 3970 	.db 0x00
   0014                    3971 __str_3:
   0014 0A                 3972 	.db 0x0A
   0015 0D                 3973 	.db 0x0D
   0016 46 69 6C 65 20 53  3974 	.ascii "File Size:"
        69 7A 65 3A
   0020 00                 3975 	.db 0x00
   0021                    3976 __str_4:
   0021 25 78              3977 	.ascii "%x"
   0023 00                 3978 	.db 0x00
   0024                    3979 __str_5:
   0024 0A                 3980 	.db 0x0A
   0025 0D                 3981 	.db 0x0D
   0026 44 61 74 61 20 72  3982 	.ascii "Data received: "
        65 63 65 69 76 65
        64 3A 20
   0035 0A                 3983 	.db 0x0A
   0036 0D                 3984 	.db 0x0D
   0037 00                 3985 	.db 0x00
   0038                    3986 __str_6:
   0038 44 61 74 61 3A 20  3987 	.ascii "Data: %x"
        25 78
   0040 0A                 3988 	.db 0x0A
   0041 0D                 3989 	.db 0x0D
   0042 00                 3990 	.db 0x00
   0043                    3991 __str_7:
   0043 0A                 3992 	.db 0x0A
   0044 0D                 3993 	.db 0x0D
   0045 25 30 32 78 25 30  3994 	.ascii "%02x%02x%02x%02x: "
        32 78 25 30 32 78
        25 30 32 78 3A 20
   0057 0A                 3995 	.db 0x0A
   0058 0D                 3996 	.db 0x0D
   0059 00                 3997 	.db 0x00
   005A                    3998 __str_8:
   005A 30 78 25 30 32 78  3999 	.ascii "0x%02x  "
        20 20
   0062 00                 4000 	.db 0x00
   0063                    4001 __str_9:
   0063 30 78 46 46 30     4002 	.ascii "0xFF0"
   0068 0A                 4003 	.db 0x0A
   0069 0D                 4004 	.db 0x0D
   006A 00                 4005 	.db 0x00
   006B                    4006 __str_10:
   006B 30 78 46 46 31     4007 	.ascii "0xFF1"
   0070 0A                 4008 	.db 0x0A
   0071 0D                 4009 	.db 0x0D
   0072 00                 4010 	.db 0x00
                           4011 	.area XINIT   (CODE)
