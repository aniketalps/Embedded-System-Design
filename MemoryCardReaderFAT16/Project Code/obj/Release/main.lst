                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat Dec 13 01:12:44 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl __sdcc_external_startup
                             14 	.globl _CY
                             15 	.globl _AC
                             16 	.globl _F0
                             17 	.globl _RS1
                             18 	.globl _RS0
                             19 	.globl _OV
                             20 	.globl _F1
                             21 	.globl _P
                             22 	.globl _PS
                             23 	.globl _PT1
                             24 	.globl _PX1
                             25 	.globl _PT0
                             26 	.globl _PX0
                             27 	.globl _RD
                             28 	.globl _WR
                             29 	.globl _T1
                             30 	.globl _T0
                             31 	.globl _INT1
                             32 	.globl _INT0
                             33 	.globl _TXD
                             34 	.globl _RXD
                             35 	.globl _P3_7
                             36 	.globl _P3_6
                             37 	.globl _P3_5
                             38 	.globl _P3_4
                             39 	.globl _P3_3
                             40 	.globl _P3_2
                             41 	.globl _P3_1
                             42 	.globl _P3_0
                             43 	.globl _EA
                             44 	.globl _ES
                             45 	.globl _ET1
                             46 	.globl _EX1
                             47 	.globl _ET0
                             48 	.globl _EX0
                             49 	.globl _P2_7
                             50 	.globl _P2_6
                             51 	.globl _P2_5
                             52 	.globl _P2_4
                             53 	.globl _P2_3
                             54 	.globl _P2_2
                             55 	.globl _P2_1
                             56 	.globl _P2_0
                             57 	.globl _SM0
                             58 	.globl _SM1
                             59 	.globl _SM2
                             60 	.globl _REN
                             61 	.globl _TB8
                             62 	.globl _RB8
                             63 	.globl _TI
                             64 	.globl _RI
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TF1
                             74 	.globl _TR1
                             75 	.globl _TF0
                             76 	.globl _TR0
                             77 	.globl _IE1
                             78 	.globl _IT1
                             79 	.globl _IE0
                             80 	.globl _IT0
                             81 	.globl _P0_7
                             82 	.globl _P0_6
                             83 	.globl _P0_5
                             84 	.globl _P0_4
                             85 	.globl _P0_3
                             86 	.globl _P0_2
                             87 	.globl _P0_1
                             88 	.globl _P0_0
                             89 	.globl _TF2
                             90 	.globl _EXF2
                             91 	.globl _RCLK
                             92 	.globl _TCLK
                             93 	.globl _EXEN2
                             94 	.globl _TR2
                             95 	.globl _C_T2
                             96 	.globl _CP_RL2
                             97 	.globl _T2CON_7
                             98 	.globl _T2CON_6
                             99 	.globl _T2CON_5
                            100 	.globl _T2CON_4
                            101 	.globl _T2CON_3
                            102 	.globl _T2CON_2
                            103 	.globl _T2CON_1
                            104 	.globl _T2CON_0
                            105 	.globl _PT2
                            106 	.globl _ET2
                            107 	.globl _P5_7
                            108 	.globl _P5_6
                            109 	.globl _P5_5
                            110 	.globl _P5_4
                            111 	.globl _P5_3
                            112 	.globl _P5_2
                            113 	.globl _P5_1
                            114 	.globl _P5_0
                            115 	.globl _P4_7
                            116 	.globl _P4_6
                            117 	.globl _P4_5
                            118 	.globl _P4_4
                            119 	.globl _P4_3
                            120 	.globl _P4_2
                            121 	.globl _P4_1
                            122 	.globl _P4_0
                            123 	.globl _PX0L
                            124 	.globl _PT0L
                            125 	.globl _PX1L
                            126 	.globl _PT1L
                            127 	.globl _PLS
                            128 	.globl _PT2L
                            129 	.globl _PPCL
                            130 	.globl _EC
                            131 	.globl _CCF0
                            132 	.globl _CCF1
                            133 	.globl _CCF2
                            134 	.globl _CCF3
                            135 	.globl _CCF4
                            136 	.globl _CR
                            137 	.globl _CF
                            138 	.globl _SPDAT
                            139 	.globl _SPSTA
                            140 	.globl _SPCON
                            141 	.globl _B
                            142 	.globl _ACC
                            143 	.globl _PSW
                            144 	.globl _IP
                            145 	.globl _P3
                            146 	.globl _IE
                            147 	.globl _P2
                            148 	.globl _SBUF
                            149 	.globl _SCON
                            150 	.globl _P1
                            151 	.globl _TH1
                            152 	.globl _TH0
                            153 	.globl _TL1
                            154 	.globl _TL0
                            155 	.globl _TMOD
                            156 	.globl _TCON
                            157 	.globl _PCON
                            158 	.globl _DPH
                            159 	.globl _DPL
                            160 	.globl _SP
                            161 	.globl _P0
                            162 	.globl _TH2
                            163 	.globl _TL2
                            164 	.globl _RCAP2H
                            165 	.globl _RCAP2L
                            166 	.globl _T2CON
                            167 	.globl _EECON
                            168 	.globl _KBF
                            169 	.globl _KBE
                            170 	.globl _KBLS
                            171 	.globl _BRL
                            172 	.globl _BDRCON
                            173 	.globl _T2MOD
                            174 	.globl _SADEN
                            175 	.globl _SADDR
                            176 	.globl _WDTPRG
                            177 	.globl _WDTRST
                            178 	.globl _P5
                            179 	.globl _P4
                            180 	.globl _IPH1
                            181 	.globl _IPL1
                            182 	.globl _IPH0
                            183 	.globl _IPL0
                            184 	.globl _IEN1
                            185 	.globl _IEN0
                            186 	.globl _CMOD
                            187 	.globl _CL
                            188 	.globl _CH
                            189 	.globl _CCON
                            190 	.globl _CCAPM4
                            191 	.globl _CCAPM3
                            192 	.globl _CCAPM2
                            193 	.globl _CCAPM1
                            194 	.globl _CCAPM0
                            195 	.globl _CCAP4L
                            196 	.globl _CCAP3L
                            197 	.globl _CCAP2L
                            198 	.globl _CCAP1L
                            199 	.globl _CCAP0L
                            200 	.globl _CCAP4H
                            201 	.globl _CCAP3H
                            202 	.globl _CCAP2H
                            203 	.globl _CCAP1H
                            204 	.globl _CCAP0H
                            205 	.globl _CKCKON1
                            206 	.globl _CKCKON0
                            207 	.globl _CKRL
                            208 	.globl _AUXR1
                            209 	.globl _AUXR
                            210 	.globl _int_SPI
                            211 	.globl _spi_init
                            212 	.globl _fetch_data
                            213 ;--------------------------------------------------------
                            214 ; special function registers
                            215 ;--------------------------------------------------------
                            216 	.area RSEG    (DATA)
                    008E    217 _AUXR	=	0x008e
                    00A2    218 _AUXR1	=	0x00a2
                    0097    219 _CKRL	=	0x0097
                    008F    220 _CKCKON0	=	0x008f
                    008F    221 _CKCKON1	=	0x008f
                    00FA    222 _CCAP0H	=	0x00fa
                    00FB    223 _CCAP1H	=	0x00fb
                    00FC    224 _CCAP2H	=	0x00fc
                    00FD    225 _CCAP3H	=	0x00fd
                    00FE    226 _CCAP4H	=	0x00fe
                    00EA    227 _CCAP0L	=	0x00ea
                    00EB    228 _CCAP1L	=	0x00eb
                    00EC    229 _CCAP2L	=	0x00ec
                    00ED    230 _CCAP3L	=	0x00ed
                    00EE    231 _CCAP4L	=	0x00ee
                    00DA    232 _CCAPM0	=	0x00da
                    00DB    233 _CCAPM1	=	0x00db
                    00DC    234 _CCAPM2	=	0x00dc
                    00DD    235 _CCAPM3	=	0x00dd
                    00DE    236 _CCAPM4	=	0x00de
                    00D8    237 _CCON	=	0x00d8
                    00F9    238 _CH	=	0x00f9
                    00E9    239 _CL	=	0x00e9
                    00D9    240 _CMOD	=	0x00d9
                    00A8    241 _IEN0	=	0x00a8
                    00B1    242 _IEN1	=	0x00b1
                    00B8    243 _IPL0	=	0x00b8
                    00B7    244 _IPH0	=	0x00b7
                    00B2    245 _IPL1	=	0x00b2
                    00B3    246 _IPH1	=	0x00b3
                    00C0    247 _P4	=	0x00c0
                    00D8    248 _P5	=	0x00d8
                    00A6    249 _WDTRST	=	0x00a6
                    00A7    250 _WDTPRG	=	0x00a7
                    00A9    251 _SADDR	=	0x00a9
                    00B9    252 _SADEN	=	0x00b9
                    00C9    253 _T2MOD	=	0x00c9
                    009B    254 _BDRCON	=	0x009b
                    009A    255 _BRL	=	0x009a
                    009C    256 _KBLS	=	0x009c
                    009D    257 _KBE	=	0x009d
                    009E    258 _KBF	=	0x009e
                    00D2    259 _EECON	=	0x00d2
                    00C8    260 _T2CON	=	0x00c8
                    00CA    261 _RCAP2L	=	0x00ca
                    00CB    262 _RCAP2H	=	0x00cb
                    00CC    263 _TL2	=	0x00cc
                    00CD    264 _TH2	=	0x00cd
                    0080    265 _P0	=	0x0080
                    0081    266 _SP	=	0x0081
                    0082    267 _DPL	=	0x0082
                    0083    268 _DPH	=	0x0083
                    0087    269 _PCON	=	0x0087
                    0088    270 _TCON	=	0x0088
                    0089    271 _TMOD	=	0x0089
                    008A    272 _TL0	=	0x008a
                    008B    273 _TL1	=	0x008b
                    008C    274 _TH0	=	0x008c
                    008D    275 _TH1	=	0x008d
                    0090    276 _P1	=	0x0090
                    0098    277 _SCON	=	0x0098
                    0099    278 _SBUF	=	0x0099
                    00A0    279 _P2	=	0x00a0
                    00A8    280 _IE	=	0x00a8
                    00B0    281 _P3	=	0x00b0
                    00B8    282 _IP	=	0x00b8
                    00D0    283 _PSW	=	0x00d0
                    00E0    284 _ACC	=	0x00e0
                    00F0    285 _B	=	0x00f0
                    00C3    286 _SPCON	=	0x00c3
                    00C4    287 _SPSTA	=	0x00c4
                    00C5    288 _SPDAT	=	0x00c5
                            289 ;--------------------------------------------------------
                            290 ; special function bits
                            291 ;--------------------------------------------------------
                            292 	.area RSEG    (DATA)
                    00DF    293 _CF	=	0x00df
                    00DE    294 _CR	=	0x00de
                    00DC    295 _CCF4	=	0x00dc
                    00DB    296 _CCF3	=	0x00db
                    00DA    297 _CCF2	=	0x00da
                    00D9    298 _CCF1	=	0x00d9
                    00D8    299 _CCF0	=	0x00d8
                    00AE    300 _EC	=	0x00ae
                    00BE    301 _PPCL	=	0x00be
                    00BD    302 _PT2L	=	0x00bd
                    00BC    303 _PLS	=	0x00bc
                    00BB    304 _PT1L	=	0x00bb
                    00BA    305 _PX1L	=	0x00ba
                    00B9    306 _PT0L	=	0x00b9
                    00B8    307 _PX0L	=	0x00b8
                    00C0    308 _P4_0	=	0x00c0
                    00C1    309 _P4_1	=	0x00c1
                    00C2    310 _P4_2	=	0x00c2
                    00C3    311 _P4_3	=	0x00c3
                    00C4    312 _P4_4	=	0x00c4
                    00C5    313 _P4_5	=	0x00c5
                    00C6    314 _P4_6	=	0x00c6
                    00C7    315 _P4_7	=	0x00c7
                    00D8    316 _P5_0	=	0x00d8
                    00D9    317 _P5_1	=	0x00d9
                    00DA    318 _P5_2	=	0x00da
                    00DB    319 _P5_3	=	0x00db
                    00DC    320 _P5_4	=	0x00dc
                    00DD    321 _P5_5	=	0x00dd
                    00DE    322 _P5_6	=	0x00de
                    00DF    323 _P5_7	=	0x00df
                    00AD    324 _ET2	=	0x00ad
                    00BD    325 _PT2	=	0x00bd
                    00C8    326 _T2CON_0	=	0x00c8
                    00C9    327 _T2CON_1	=	0x00c9
                    00CA    328 _T2CON_2	=	0x00ca
                    00CB    329 _T2CON_3	=	0x00cb
                    00CC    330 _T2CON_4	=	0x00cc
                    00CD    331 _T2CON_5	=	0x00cd
                    00CE    332 _T2CON_6	=	0x00ce
                    00CF    333 _T2CON_7	=	0x00cf
                    00C8    334 _CP_RL2	=	0x00c8
                    00C9    335 _C_T2	=	0x00c9
                    00CA    336 _TR2	=	0x00ca
                    00CB    337 _EXEN2	=	0x00cb
                    00CC    338 _TCLK	=	0x00cc
                    00CD    339 _RCLK	=	0x00cd
                    00CE    340 _EXF2	=	0x00ce
                    00CF    341 _TF2	=	0x00cf
                    0080    342 _P0_0	=	0x0080
                    0081    343 _P0_1	=	0x0081
                    0082    344 _P0_2	=	0x0082
                    0083    345 _P0_3	=	0x0083
                    0084    346 _P0_4	=	0x0084
                    0085    347 _P0_5	=	0x0085
                    0086    348 _P0_6	=	0x0086
                    0087    349 _P0_7	=	0x0087
                    0088    350 _IT0	=	0x0088
                    0089    351 _IE0	=	0x0089
                    008A    352 _IT1	=	0x008a
                    008B    353 _IE1	=	0x008b
                    008C    354 _TR0	=	0x008c
                    008D    355 _TF0	=	0x008d
                    008E    356 _TR1	=	0x008e
                    008F    357 _TF1	=	0x008f
                    0090    358 _P1_0	=	0x0090
                    0091    359 _P1_1	=	0x0091
                    0092    360 _P1_2	=	0x0092
                    0093    361 _P1_3	=	0x0093
                    0094    362 _P1_4	=	0x0094
                    0095    363 _P1_5	=	0x0095
                    0096    364 _P1_6	=	0x0096
                    0097    365 _P1_7	=	0x0097
                    0098    366 _RI	=	0x0098
                    0099    367 _TI	=	0x0099
                    009A    368 _RB8	=	0x009a
                    009B    369 _TB8	=	0x009b
                    009C    370 _REN	=	0x009c
                    009D    371 _SM2	=	0x009d
                    009E    372 _SM1	=	0x009e
                    009F    373 _SM0	=	0x009f
                    00A0    374 _P2_0	=	0x00a0
                    00A1    375 _P2_1	=	0x00a1
                    00A2    376 _P2_2	=	0x00a2
                    00A3    377 _P2_3	=	0x00a3
                    00A4    378 _P2_4	=	0x00a4
                    00A5    379 _P2_5	=	0x00a5
                    00A6    380 _P2_6	=	0x00a6
                    00A7    381 _P2_7	=	0x00a7
                    00A8    382 _EX0	=	0x00a8
                    00A9    383 _ET0	=	0x00a9
                    00AA    384 _EX1	=	0x00aa
                    00AB    385 _ET1	=	0x00ab
                    00AC    386 _ES	=	0x00ac
                    00AF    387 _EA	=	0x00af
                    00B0    388 _P3_0	=	0x00b0
                    00B1    389 _P3_1	=	0x00b1
                    00B2    390 _P3_2	=	0x00b2
                    00B3    391 _P3_3	=	0x00b3
                    00B4    392 _P3_4	=	0x00b4
                    00B5    393 _P3_5	=	0x00b5
                    00B6    394 _P3_6	=	0x00b6
                    00B7    395 _P3_7	=	0x00b7
                    00B0    396 _RXD	=	0x00b0
                    00B1    397 _TXD	=	0x00b1
                    00B2    398 _INT0	=	0x00b2
                    00B3    399 _INT1	=	0x00b3
                    00B4    400 _T0	=	0x00b4
                    00B5    401 _T1	=	0x00b5
                    00B6    402 _WR	=	0x00b6
                    00B7    403 _RD	=	0x00b7
                    00B8    404 _PX0	=	0x00b8
                    00B9    405 _PT0	=	0x00b9
                    00BA    406 _PX1	=	0x00ba
                    00BB    407 _PT1	=	0x00bb
                    00BC    408 _PS	=	0x00bc
                    00D0    409 _P	=	0x00d0
                    00D1    410 _F1	=	0x00d1
                    00D2    411 _OV	=	0x00d2
                    00D3    412 _RS0	=	0x00d3
                    00D4    413 _RS1	=	0x00d4
                    00D5    414 _F0	=	0x00d5
                    00D6    415 _AC	=	0x00d6
                    00D7    416 _CY	=	0x00d7
                            417 ;--------------------------------------------------------
                            418 ; overlayable register banks
                            419 ;--------------------------------------------------------
                            420 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     421 	.ds 8
                            422 ;--------------------------------------------------------
                            423 ; internal ram data
                            424 ;--------------------------------------------------------
                            425 	.area DSEG    (DATA)
                            426 ;--------------------------------------------------------
                            427 ; overlayable items in internal ram 
                            428 ;--------------------------------------------------------
                            429 	.area OSEG    (OVR,DATA)
                            430 ;--------------------------------------------------------
                            431 ; Stack segment in internal ram 
                            432 ;--------------------------------------------------------
                            433 	.area	SSEG	(DATA)
   0000                     434 __start__stack:
   0000                     435 	.ds	1
                            436 
                            437 ;--------------------------------------------------------
                            438 ; indirectly addressable internal ram data
                            439 ;--------------------------------------------------------
                            440 	.area ISEG    (DATA)
                            441 ;--------------------------------------------------------
                            442 ; bit data
                            443 ;--------------------------------------------------------
                            444 	.area BSEG    (BIT)
                            445 ;--------------------------------------------------------
                            446 ; paged external ram data
                            447 ;--------------------------------------------------------
                            448 	.area PSEG    (PAG,XDATA)
                            449 ;--------------------------------------------------------
                            450 ; external ram data
                            451 ;--------------------------------------------------------
                            452 	.area XSEG    (XDATA)
   0000                     453 _main_k_1_1:
   0000                     454 	.ds 2
   0002                     455 _main_ch_1_1:
   0002                     456 	.ds 4
   0006                     457 _main_ch1_1_1:
   0006                     458 	.ds 4
   000A                     459 _main_ch2_1_1:
   000A                     460 	.ds 4
   000E                     461 _main_ch3_1_1:
   000E                     462 	.ds 4
   0012                     463 _main_ch4_1_1:
   0012                     464 	.ds 4
   0016                     465 _main_ch5_1_1:
   0016                     466 	.ds 4
   001A                     467 _fetch_data_i1_1_1:
   001A                     468 	.ds 2
   001C                     469 _fetch_data_finalval_1_1:
   001C                     470 	.ds 1
   001D                     471 _fetch_data_bufsiz1_1_1:
   001D                     472 	.ds 2
                            473 ;--------------------------------------------------------
                            474 ; external initialized ram data
                            475 ;--------------------------------------------------------
                            476 	.area XISEG   (XDATA)
                            477 	.area HOME    (CODE)
                            478 	.area GSINIT0 (CODE)
                            479 	.area GSINIT1 (CODE)
                            480 	.area GSINIT2 (CODE)
                            481 	.area GSINIT3 (CODE)
                            482 	.area GSINIT4 (CODE)
                            483 	.area GSINIT5 (CODE)
                            484 	.area GSINIT  (CODE)
                            485 	.area GSFINAL (CODE)
                            486 	.area CSEG    (CODE)
                            487 ;--------------------------------------------------------
                            488 ; interrupt vector 
                            489 ;--------------------------------------------------------
                            490 	.area HOME    (CODE)
   0000                     491 __interrupt_vect:
   0000 02s00r00            492 	ljmp	__sdcc_gsinit_startup
   0003 32                  493 	reti
   0004                     494 	.ds	7
   000B 32                  495 	reti
   000C                     496 	.ds	7
   0013 32                  497 	reti
   0014                     498 	.ds	7
   001B 32                  499 	reti
   001C                     500 	.ds	7
   0023 32                  501 	reti
   0024                     502 	.ds	7
   002B 32                  503 	reti
   002C                     504 	.ds	7
   0033 32                  505 	reti
   0034                     506 	.ds	7
   003B 32                  507 	reti
   003C                     508 	.ds	7
   0043 32                  509 	reti
   0044                     510 	.ds	7
   004B 02s05r37            511 	ljmp	_int_SPI
                            512 ;--------------------------------------------------------
                            513 ; global & static initialisations
                            514 ;--------------------------------------------------------
                            515 	.area HOME    (CODE)
                            516 	.area GSINIT  (CODE)
                            517 	.area GSFINAL (CODE)
                            518 	.area GSINIT  (CODE)
                            519 	.globl __sdcc_gsinit_startup
                            520 	.globl __sdcc_program_startup
                            521 	.globl __start__stack
                            522 	.globl __mcs51_genXINIT
                            523 	.globl __mcs51_genXRAMCLEAR
                            524 	.globl __mcs51_genRAMCLEAR
                            525 	.area GSFINAL (CODE)
   0000 02s00r00            526 	ljmp	__sdcc_program_startup
                            527 ;--------------------------------------------------------
                            528 ; Home
                            529 ;--------------------------------------------------------
                            530 	.area HOME    (CODE)
                            531 	.area CSEG    (CODE)
   0000                     532 __sdcc_program_startup:
   0000 12s00r0F            533 	lcall	_main
                            534 ;	return from main will lock up
   0003 80 FE               535 	sjmp .
                            536 ;--------------------------------------------------------
                            537 ; code
                            538 ;--------------------------------------------------------
                            539 	.area CSEG    (CODE)
                            540 ;------------------------------------------------------------
                            541 ;Allocation info for local variables in function '_sdcc_external_startup'
                            542 ;------------------------------------------------------------
                            543 ;------------------------------------------------------------
                            544 ;	main.c:34: _sdcc_external_startup()
                            545 ;	-----------------------------------------
                            546 ;	 function _sdcc_external_startup
                            547 ;	-----------------------------------------
   0005                     548 __sdcc_external_startup:
                    0002    549 	ar2 = 0x02
                    0003    550 	ar3 = 0x03
                    0004    551 	ar4 = 0x04
                    0005    552 	ar5 = 0x05
                    0006    553 	ar6 = 0x06
                    0007    554 	ar7 = 0x07
                    0000    555 	ar0 = 0x00
                    0001    556 	ar1 = 0x01
                            557 ;	main.c:36: AUXR &= 0xFD;
                            558 ;	genAnd
   0005 53 8E FD            559 	anl	_AUXR,#0xFD
                            560 ;	main.c:37: AUXR |= 0xC0;
                            561 ;	genOr
   0008 43 8E C0            562 	orl	_AUXR,#0xC0
                            563 ;	main.c:38: return 1;
                            564 ;	genRet
                            565 ;	Peephole 182.b	used 16 bit load of dptr
   000B 90 00 01            566 	mov	dptr,#0x0001
                            567 ;	Peephole 300	removed redundant label 00101$
   000E 22                  568 	ret
                            569 ;------------------------------------------------------------
                            570 ;Allocation info for local variables in function 'main'
                            571 ;------------------------------------------------------------
                            572 ;pg                        Allocated with name '_main_pg_1_1'
                            573 ;k                         Allocated with name '_main_k_1_1'
                            574 ;op                        Allocated with name '_main_op_1_1'
                            575 ;databyte                  Allocated with name '_main_databyte_1_1'
                            576 ;gch                       Allocated with name '_main_gch_1_1'
                            577 ;ch                        Allocated with name '_main_ch_1_1'
                            578 ;ch1                       Allocated with name '_main_ch1_1_1'
                            579 ;ch2                       Allocated with name '_main_ch2_1_1'
                            580 ;ch3                       Allocated with name '_main_ch3_1_1'
                            581 ;ch4                       Allocated with name '_main_ch4_1_1'
                            582 ;ch5                       Allocated with name '_main_ch5_1_1'
                            583 ;sec_no1                   Allocated with name '_main_sec_no1_1_1'
                            584 ;sec_no2                   Allocated with name '_main_sec_no2_1_1'
                            585 ;sec_no3                   Allocated with name '_main_sec_no3_1_1'
                            586 ;------------------------------------------------------------
                            587 ;	main.c:55: void main()
                            588 ;	-----------------------------------------
                            589 ;	 function main
                            590 ;	-----------------------------------------
   000F                     591 _main:
                            592 ;	main.c:63: spi_init();     // Initializes SPI registers in 8051
                            593 ;	genCall
   000F 12s05rAE            594 	lcall	_spi_init
                            595 ;	main.c:64: serinit();      // Initializes 8051 serial port
                            596 ;	genCall
   0012 12s00r00            597 	lcall	_serinit
                            598 ;	main.c:65: glcd_init();    // Initializes graphic lcd
                            599 ;	genCall
   0015 12s00r00            600 	lcall	_glcd_init
                            601 ;	main.c:67: EA=1;           // Enable global interrupt bit in IE
                            602 ;	genAssign
   0018 D2 AF               603 	setb	_EA
                            604 ;	main.c:68: EX0=1;          // Enable INT0 interrupt
                            605 ;	genAssign
   001A D2 A8               606 	setb	_EX0
                            607 ;	main.c:69: IE0=0;
                            608 ;	genAssign
   001C C2 89               609 	clr	_IE0
                            610 ;	main.c:70: sd_init();      // initialize SD Card
                            611 ;	genCall
   001E 12s00r00            612 	lcall	_sd_init
                            613 ;	main.c:72: P2=0xFF;
                            614 ;	genAssign
   0021 75 A0 FF            615 	mov	_P2,#0xFF
                            616 ;	main.c:73: CE=1;WR=1;
                            617 ;	genAssign
   0024 D2 A2               618 	setb	_P2_2
                            619 ;	genAssign
   0026 D2 A0               620 	setb	_P2_0
                            621 ;	main.c:75: while(1)
   0028                     622 00122$:
                            623 ;	main.c:78: printf_tiny("\n\r------------------------------------------------------------\n\r");
                            624 ;	genIpush
   0028 74r00               625 	mov	a,#__str_0
   002A C0 E0               626 	push	acc
   002C 74s00               627 	mov	a,#(__str_0 >> 8)
   002E C0 E0               628 	push	acc
                            629 ;	genCall
   0030 12s00r00            630 	lcall	_printf_tiny
   0033 15 81               631 	dec	sp
   0035 15 81               632 	dec	sp
                            633 ;	main.c:79: printf_tiny("------------------------------------------------------------\n\r");
                            634 ;	genIpush
   0037 74r41               635 	mov	a,#__str_1
   0039 C0 E0               636 	push	acc
   003B 74s00               637 	mov	a,#(__str_1 >> 8)
   003D C0 E0               638 	push	acc
                            639 ;	genCall
   003F 12s00r00            640 	lcall	_printf_tiny
   0042 15 81               641 	dec	sp
   0044 15 81               642 	dec	sp
                            643 ;	main.c:80: printf_tiny("---------------MEMORY CARD READER APPLICATION---------------\n\r");
                            644 ;	genIpush
   0046 74r80               645 	mov	a,#__str_2
   0048 C0 E0               646 	push	acc
   004A 74s00               647 	mov	a,#(__str_2 >> 8)
   004C C0 E0               648 	push	acc
                            649 ;	genCall
   004E 12s00r00            650 	lcall	_printf_tiny
   0051 15 81               651 	dec	sp
   0053 15 81               652 	dec	sp
                            653 ;	main.c:81: printf_tiny("\n\rSelect an option:\n\r");
                            654 ;	genIpush
   0055 74rBF               655 	mov	a,#__str_3
   0057 C0 E0               656 	push	acc
   0059 74s00               657 	mov	a,#(__str_3 >> 8)
   005B C0 E0               658 	push	acc
                            659 ;	genCall
   005D 12s00r00            660 	lcall	_printf_tiny
   0060 15 81               661 	dec	sp
   0062 15 81               662 	dec	sp
                            663 ;	main.c:82: printf_tiny("\n\r1 - Memory Card Read\n\r");
                            664 ;	genIpush
   0064 74rD5               665 	mov	a,#__str_4
   0066 C0 E0               666 	push	acc
   0068 74s00               667 	mov	a,#(__str_4 >> 8)
   006A C0 E0               668 	push	acc
                            669 ;	genCall
   006C 12s00r00            670 	lcall	_printf_tiny
   006F 15 81               671 	dec	sp
   0071 15 81               672 	dec	sp
                            673 ;	main.c:83: printf_tiny("\n\r2 - Sector Fill - Memory Card Write\n\r");
                            674 ;	genIpush
   0073 74rEE               675 	mov	a,#__str_5
   0075 C0 E0               676 	push	acc
   0077 74s00               677 	mov	a,#(__str_5 >> 8)
   0079 C0 E0               678 	push	acc
                            679 ;	genCall
   007B 12s00r00            680 	lcall	_printf_tiny
   007E 15 81               681 	dec	sp
   0080 15 81               682 	dec	sp
                            683 ;	main.c:84: printf_tiny("\n\r3 - Hex Dump - Multiple sector read\n\r");
                            684 ;	genIpush
   0082 74r16               685 	mov	a,#__str_6
   0084 C0 E0               686 	push	acc
   0086 74s01               687 	mov	a,#(__str_6 >> 8)
   0088 C0 E0               688 	push	acc
                            689 ;	genCall
   008A 12s00r00            690 	lcall	_printf_tiny
   008D 15 81               691 	dec	sp
   008F 15 81               692 	dec	sp
                            693 ;	main.c:85: printf_tiny("\n\r4 - File Read\n\r");
                            694 ;	genIpush
   0091 74r3E               695 	mov	a,#__str_7
   0093 C0 E0               696 	push	acc
   0095 74s01               697 	mov	a,#(__str_7 >> 8)
   0097 C0 E0               698 	push	acc
                            699 ;	genCall
   0099 12s00r00            700 	lcall	_printf_tiny
   009C 15 81               701 	dec	sp
   009E 15 81               702 	dec	sp
                            703 ;	main.c:86: printf_tiny("\n\r5 - Copy data bytes between sectors\n\r");
                            704 ;	genIpush
   00A0 74r50               705 	mov	a,#__str_8
   00A2 C0 E0               706 	push	acc
   00A4 74s01               707 	mov	a,#(__str_8 >> 8)
   00A6 C0 E0               708 	push	acc
                            709 ;	genCall
   00A8 12s00r00            710 	lcall	_printf_tiny
   00AB 15 81               711 	dec	sp
   00AD 15 81               712 	dec	sp
                            713 ;	main.c:87: printf_tiny("\n\r6 - File information menu\n\r");
                            714 ;	genIpush
   00AF 74r78               715 	mov	a,#__str_9
   00B1 C0 E0               716 	push	acc
   00B3 74s01               717 	mov	a,#(__str_9 >> 8)
   00B5 C0 E0               718 	push	acc
                            719 ;	genCall
   00B7 12s00r00            720 	lcall	_printf_tiny
   00BA 15 81               721 	dec	sp
   00BC 15 81               722 	dec	sp
                            723 ;	main.c:90: op = getchar();
                            724 ;	genCall
   00BE 12s00r00            725 	lcall	_getchar
   00C1 AA 82               726 	mov	r2,dpl
                            727 ;	main.c:92: switch(op)
                            728 ;	genCmpEq
                            729 ;	gencjneshort
   00C3 BA 31 02            730 	cjne	r2,#0x31,00166$
                            731 ;	Peephole 112.b	changed ljmp to sjmp
   00C6 80 20               732 	sjmp	00101$
   00C8                     733 00166$:
                            734 ;	genCmpEq
                            735 ;	gencjneshort
   00C8 BA 32 02            736 	cjne	r2,#0x32,00167$
                            737 ;	Peephole 112.b	changed ljmp to sjmp
   00CB 80 78               738 	sjmp	00102$
   00CD                     739 00167$:
                            740 ;	genCmpEq
                            741 ;	gencjneshort
   00CD BA 33 03            742 	cjne	r2,#0x33,00168$
   00D0 02s01rE5            743 	ljmp	00103$
   00D3                     744 00168$:
                            745 ;	genCmpEq
                            746 ;	gencjneshort
   00D3 BA 34 03            747 	cjne	r2,#0x34,00169$
   00D6 02s03r5C            748 	ljmp	00105$
   00D9                     749 00169$:
                            750 ;	genCmpEq
                            751 ;	gencjneshort
   00D9 BA 35 03            752 	cjne	r2,#0x35,00170$
   00DC 02s02r99            753 	ljmp	00104$
   00DF                     754 00170$:
                            755 ;	genCmpEq
                            756 ;	gencjneshort
   00DF BA 36 03            757 	cjne	r2,#0x36,00171$
   00E2 02s04rED            758 	ljmp	00119$
   00E5                     759 00171$:
   00E5 02s00r28            760 	ljmp	00122$
                            761 ;	main.c:95: case '1':       // Memory read option
   00E8                     762 00101$:
                            763 ;	main.c:97: printf_tiny("\n\rEntered Memory Read option\n\r");
                            764 ;	genIpush
   00E8 74r96               765 	mov	a,#__str_10
   00EA C0 E0               766 	push	acc
   00EC 74s01               767 	mov	a,#(__str_10 >> 8)
   00EE C0 E0               768 	push	acc
                            769 ;	genCall
   00F0 12s00r00            770 	lcall	_printf_tiny
   00F3 15 81               771 	dec	sp
   00F5 15 81               772 	dec	sp
                            773 ;	main.c:98: printf_tiny("\n\rEnter sector address (4 bytes) to read from: \n\r");
                            774 ;	genIpush
   00F7 74rB5               775 	mov	a,#__str_11
   00F9 C0 E0               776 	push	acc
   00FB 74s01               777 	mov	a,#(__str_11 >> 8)
   00FD C0 E0               778 	push	acc
                            779 ;	genCall
   00FF 12s00r00            780 	lcall	_printf_tiny
   0102 15 81               781 	dec	sp
   0104 15 81               782 	dec	sp
                            783 ;	main.c:99: ch.b[3] = fetch_data();
                            784 ;	genCall
   0106 12s05rBA            785 	lcall	_fetch_data
   0109 AA 82               786 	mov	r2,dpl
                            787 ;	genPointerSet
                            788 ;     genFarPointerSet
   010B 90s00r05            789 	mov	dptr,#(_main_ch_1_1 + 0x0003)
   010E EA                  790 	mov	a,r2
   010F F0                  791 	movx	@dptr,a
                            792 ;	main.c:100: ch.b[2] = fetch_data();
                            793 ;	genCall
   0110 12s05rBA            794 	lcall	_fetch_data
   0113 AA 82               795 	mov	r2,dpl
                            796 ;	genPointerSet
                            797 ;     genFarPointerSet
   0115 90s00r04            798 	mov	dptr,#(_main_ch_1_1 + 0x0002)
   0118 EA                  799 	mov	a,r2
   0119 F0                  800 	movx	@dptr,a
                            801 ;	main.c:101: ch.b[1] = fetch_data();
                            802 ;	genCall
   011A 12s05rBA            803 	lcall	_fetch_data
   011D AA 82               804 	mov	r2,dpl
                            805 ;	genPointerSet
                            806 ;     genFarPointerSet
   011F 90s00r03            807 	mov	dptr,#(_main_ch_1_1 + 0x0001)
   0122 EA                  808 	mov	a,r2
   0123 F0                  809 	movx	@dptr,a
                            810 ;	main.c:102: ch.b[0] = fetch_data();
                            811 ;	genCall
   0124 12s05rBA            812 	lcall	_fetch_data
   0127 AA 82               813 	mov	r2,dpl
                            814 ;	genPointerSet
                            815 ;     genFarPointerSet
                            816 ;	main.c:104: sd_single_read(ch.ul);      // Call single sector read function
                            817 ;	genPointerGet
                            818 ;	genFarPointerGet
   0129 90s00r02            819 	mov	dptr,#_main_ch_1_1
   012C EA                  820 	mov	a,r2
   012D F0                  821 	movx	@dptr,a
                            822 ;	Peephole 180.a	removed redundant mov to dptr
   012E E0                  823 	movx	a,@dptr
   012F FA                  824 	mov	r2,a
   0130 A3                  825 	inc	dptr
   0131 E0                  826 	movx	a,@dptr
   0132 FB                  827 	mov	r3,a
   0133 A3                  828 	inc	dptr
   0134 E0                  829 	movx	a,@dptr
   0135 FC                  830 	mov	r4,a
   0136 A3                  831 	inc	dptr
   0137 E0                  832 	movx	a,@dptr
                            833 ;	genCall
   0138 FD                  834 	mov	r5,a
   0139 8A 82               835 	mov	dpl,r2
   013B 8B 83               836 	mov	dph,r3
   013D 8C F0               837 	mov	b,r4
                            838 ;	Peephole 191	removed redundant mov
   013F 12s00r00            839 	lcall	_sd_single_read
                            840 ;	main.c:106: break;
   0142 02s00r28            841 	ljmp	00122$
                            842 ;	main.c:108: case '2':       //Memory write - sector fill
   0145                     843 00102$:
                            844 ;	main.c:110: printf_tiny("\n\rEntered Sector Fill \n\r");
                            845 ;	genIpush
   0145 74rE7               846 	mov	a,#__str_12
   0147 C0 E0               847 	push	acc
   0149 74s01               848 	mov	a,#(__str_12 >> 8)
   014B C0 E0               849 	push	acc
                            850 ;	genCall
   014D 12s00r00            851 	lcall	_printf_tiny
   0150 15 81               852 	dec	sp
   0152 15 81               853 	dec	sp
                            854 ;	main.c:111: printf_tiny("\n\rEnter sector address to be written to memory card: \n\r");
                            855 ;	genIpush
   0154 74r00               856 	mov	a,#__str_13
   0156 C0 E0               857 	push	acc
   0158 74s02               858 	mov	a,#(__str_13 >> 8)
   015A C0 E0               859 	push	acc
                            860 ;	genCall
   015C 12s00r00            861 	lcall	_printf_tiny
   015F 15 81               862 	dec	sp
   0161 15 81               863 	dec	sp
                            864 ;	main.c:112: ch1.b[3] = fetch_data();
                            865 ;	genCall
   0163 12s05rBA            866 	lcall	_fetch_data
   0166 AA 82               867 	mov	r2,dpl
                            868 ;	genPointerSet
                            869 ;     genFarPointerSet
   0168 90s00r09            870 	mov	dptr,#(_main_ch1_1_1 + 0x0003)
   016B EA                  871 	mov	a,r2
   016C F0                  872 	movx	@dptr,a
                            873 ;	main.c:113: ch1.b[2] = fetch_data();
                            874 ;	genCall
   016D 12s05rBA            875 	lcall	_fetch_data
   0170 AA 82               876 	mov	r2,dpl
                            877 ;	genPointerSet
                            878 ;     genFarPointerSet
   0172 90s00r08            879 	mov	dptr,#(_main_ch1_1_1 + 0x0002)
   0175 EA                  880 	mov	a,r2
   0176 F0                  881 	movx	@dptr,a
                            882 ;	main.c:114: ch1.b[1] = fetch_data();
                            883 ;	genCall
   0177 12s05rBA            884 	lcall	_fetch_data
   017A AA 82               885 	mov	r2,dpl
                            886 ;	genPointerSet
                            887 ;     genFarPointerSet
   017C 90s00r07            888 	mov	dptr,#(_main_ch1_1_1 + 0x0001)
   017F EA                  889 	mov	a,r2
   0180 F0                  890 	movx	@dptr,a
                            891 ;	main.c:115: ch1.b[0] = fetch_data();
                            892 ;	genCall
   0181 12s05rBA            893 	lcall	_fetch_data
   0184 AA 82               894 	mov	r2,dpl
                            895 ;	genPointerSet
                            896 ;     genFarPointerSet
   0186 90s00r06            897 	mov	dptr,#_main_ch1_1_1
   0189 EA                  898 	mov	a,r2
   018A F0                  899 	movx	@dptr,a
                            900 ;	main.c:117: printf_tiny("\n\rEnter data to be written to memory card: \n\r");
                            901 ;	genIpush
   018B 74r38               902 	mov	a,#__str_14
   018D C0 E0               903 	push	acc
   018F 74s02               904 	mov	a,#(__str_14 >> 8)
   0191 C0 E0               905 	push	acc
                            906 ;	genCall
   0193 12s00r00            907 	lcall	_printf_tiny
   0196 15 81               908 	dec	sp
   0198 15 81               909 	dec	sp
                            910 ;	main.c:118: databyte = getchar();                   //get databyte from user for sector fill
                            911 ;	genCall
   019A 12s00r00            912 	lcall	_getchar
   019D AA 82               913 	mov	r2,dpl
                            914 ;	main.c:119: printf_tiny("\n\rWriting Data....");
                            915 ;	genIpush
   019F C0 02               916 	push	ar2
   01A1 74r66               917 	mov	a,#__str_15
   01A3 C0 E0               918 	push	acc
   01A5 74s02               919 	mov	a,#(__str_15 >> 8)
   01A7 C0 E0               920 	push	acc
                            921 ;	genCall
   01A9 12s00r00            922 	lcall	_printf_tiny
   01AC 15 81               923 	dec	sp
   01AE 15 81               924 	dec	sp
   01B0 D0 02               925 	pop	ar2
                            926 ;	main.c:120: sd_single_write(databyte,ch1.ul);       // SD single sector write
                            927 ;	genPointerGet
                            928 ;	genFarPointerGet
   01B2 90s00r06            929 	mov	dptr,#_main_ch1_1_1
   01B5 E0                  930 	movx	a,@dptr
   01B6 FB                  931 	mov	r3,a
   01B7 A3                  932 	inc	dptr
   01B8 E0                  933 	movx	a,@dptr
   01B9 FC                  934 	mov	r4,a
   01BA A3                  935 	inc	dptr
   01BB E0                  936 	movx	a,@dptr
   01BC FD                  937 	mov	r5,a
   01BD A3                  938 	inc	dptr
   01BE E0                  939 	movx	a,@dptr
   01BF FE                  940 	mov	r6,a
                            941 ;	genAssign
   01C0 90s00r00            942 	mov	dptr,#_sd_single_write_PARM_2
   01C3 EB                  943 	mov	a,r3
   01C4 F0                  944 	movx	@dptr,a
   01C5 A3                  945 	inc	dptr
   01C6 EC                  946 	mov	a,r4
   01C7 F0                  947 	movx	@dptr,a
   01C8 A3                  948 	inc	dptr
   01C9 ED                  949 	mov	a,r5
   01CA F0                  950 	movx	@dptr,a
   01CB A3                  951 	inc	dptr
   01CC EE                  952 	mov	a,r6
   01CD F0                  953 	movx	@dptr,a
                            954 ;	genCall
   01CE 8A 82               955 	mov	dpl,r2
   01D0 12s00r00            956 	lcall	_sd_single_write
                            957 ;	main.c:121: printf_tiny("\n\rWrite complete....");
                            958 ;	genIpush
   01D3 74r79               959 	mov	a,#__str_16
   01D5 C0 E0               960 	push	acc
   01D7 74s02               961 	mov	a,#(__str_16 >> 8)
   01D9 C0 E0               962 	push	acc
                            963 ;	genCall
   01DB 12s00r00            964 	lcall	_printf_tiny
   01DE 15 81               965 	dec	sp
   01E0 15 81               966 	dec	sp
                            967 ;	main.c:122: break;
   01E2 02s00r28            968 	ljmp	00122$
                            969 ;	main.c:124: case '3':        // Multiple sector read
   01E5                     970 00103$:
                            971 ;	main.c:126: printf_tiny("\n\rHex dump - Multiple sector read option\n\r");
                            972 ;	genIpush
   01E5 74r8E               973 	mov	a,#__str_17
   01E7 C0 E0               974 	push	acc
   01E9 74s02               975 	mov	a,#(__str_17 >> 8)
   01EB C0 E0               976 	push	acc
                            977 ;	genCall
   01ED 12s00r00            978 	lcall	_printf_tiny
   01F0 15 81               979 	dec	sp
   01F2 15 81               980 	dec	sp
                            981 ;	main.c:127: printf_tiny("\n\rEnter start sector address\n\r");
                            982 ;	genIpush
   01F4 74rB9               983 	mov	a,#__str_18
   01F6 C0 E0               984 	push	acc
   01F8 74s02               985 	mov	a,#(__str_18 >> 8)
   01FA C0 E0               986 	push	acc
                            987 ;	genCall
   01FC 12s00r00            988 	lcall	_printf_tiny
   01FF 15 81               989 	dec	sp
   0201 15 81               990 	dec	sp
                            991 ;	main.c:128: ch2.b[3] = fetch_data();
                            992 ;	genCall
   0203 12s05rBA            993 	lcall	_fetch_data
   0206 AA 82               994 	mov	r2,dpl
                            995 ;	genPointerSet
                            996 ;     genFarPointerSet
   0208 90s00r0D            997 	mov	dptr,#(_main_ch2_1_1 + 0x0003)
   020B EA                  998 	mov	a,r2
   020C F0                  999 	movx	@dptr,a
                           1000 ;	main.c:129: ch2.b[2] = fetch_data();
                           1001 ;	genCall
   020D 12s05rBA           1002 	lcall	_fetch_data
   0210 AA 82              1003 	mov	r2,dpl
                           1004 ;	genPointerSet
                           1005 ;     genFarPointerSet
   0212 90s00r0C           1006 	mov	dptr,#(_main_ch2_1_1 + 0x0002)
   0215 EA                 1007 	mov	a,r2
   0216 F0                 1008 	movx	@dptr,a
                           1009 ;	main.c:130: ch2.b[1] = fetch_data();
                           1010 ;	genCall
   0217 12s05rBA           1011 	lcall	_fetch_data
   021A AA 82              1012 	mov	r2,dpl
                           1013 ;	genPointerSet
                           1014 ;     genFarPointerSet
   021C 90s00r0B           1015 	mov	dptr,#(_main_ch2_1_1 + 0x0001)
   021F EA                 1016 	mov	a,r2
   0220 F0                 1017 	movx	@dptr,a
                           1018 ;	main.c:131: ch2.b[0] = fetch_data();
                           1019 ;	genCall
   0221 12s05rBA           1020 	lcall	_fetch_data
   0224 AA 82              1021 	mov	r2,dpl
                           1022 ;	genPointerSet
                           1023 ;     genFarPointerSet
   0226 90s00r0A           1024 	mov	dptr,#_main_ch2_1_1
   0229 EA                 1025 	mov	a,r2
   022A F0                 1026 	movx	@dptr,a
                           1027 ;	main.c:133: printf_tiny("\n\rEnter end sector address\n\r");
                           1028 ;	genIpush
   022B 74rD8              1029 	mov	a,#__str_19
   022D C0 E0              1030 	push	acc
   022F 74s02              1031 	mov	a,#(__str_19 >> 8)
   0231 C0 E0              1032 	push	acc
                           1033 ;	genCall
   0233 12s00r00           1034 	lcall	_printf_tiny
   0236 15 81              1035 	dec	sp
   0238 15 81              1036 	dec	sp
                           1037 ;	main.c:134: ch3.b[3] = fetch_data();
                           1038 ;	genCall
   023A 12s05rBA           1039 	lcall	_fetch_data
   023D AA 82              1040 	mov	r2,dpl
                           1041 ;	genPointerSet
                           1042 ;     genFarPointerSet
   023F 90s00r11           1043 	mov	dptr,#(_main_ch3_1_1 + 0x0003)
   0242 EA                 1044 	mov	a,r2
   0243 F0                 1045 	movx	@dptr,a
                           1046 ;	main.c:135: ch3.b[2] = fetch_data();
                           1047 ;	genCall
   0244 12s05rBA           1048 	lcall	_fetch_data
   0247 AA 82              1049 	mov	r2,dpl
                           1050 ;	genPointerSet
                           1051 ;     genFarPointerSet
   0249 90s00r10           1052 	mov	dptr,#(_main_ch3_1_1 + 0x0002)
   024C EA                 1053 	mov	a,r2
   024D F0                 1054 	movx	@dptr,a
                           1055 ;	main.c:136: ch3.b[1] = fetch_data();
                           1056 ;	genCall
   024E 12s05rBA           1057 	lcall	_fetch_data
   0251 AA 82              1058 	mov	r2,dpl
                           1059 ;	genPointerSet
                           1060 ;     genFarPointerSet
   0253 90s00r0F           1061 	mov	dptr,#(_main_ch3_1_1 + 0x0001)
   0256 EA                 1062 	mov	a,r2
   0257 F0                 1063 	movx	@dptr,a
                           1064 ;	main.c:137: ch3.b[0] = fetch_data();
                           1065 ;	genCall
   0258 12s05rBA           1066 	lcall	_fetch_data
   025B AA 82              1067 	mov	r2,dpl
                           1068 ;	genPointerSet
                           1069 ;     genFarPointerSet
   025D 90s00r0E           1070 	mov	dptr,#_main_ch3_1_1
   0260 EA                 1071 	mov	a,r2
   0261 F0                 1072 	movx	@dptr,a
                           1073 ;	main.c:139: sd_multiple_read(ch2.ul,ch3.ul);        // multiple sector read
                           1074 ;	genPointerGet
                           1075 ;	genFarPointerGet
   0262 90s00r0A           1076 	mov	dptr,#_main_ch2_1_1
   0265 E0                 1077 	movx	a,@dptr
   0266 FA                 1078 	mov	r2,a
   0267 A3                 1079 	inc	dptr
   0268 E0                 1080 	movx	a,@dptr
   0269 FB                 1081 	mov	r3,a
   026A A3                 1082 	inc	dptr
   026B E0                 1083 	movx	a,@dptr
   026C FC                 1084 	mov	r4,a
   026D A3                 1085 	inc	dptr
   026E E0                 1086 	movx	a,@dptr
   026F FD                 1087 	mov	r5,a
                           1088 ;	genPointerGet
                           1089 ;	genFarPointerGet
   0270 90s00r0E           1090 	mov	dptr,#_main_ch3_1_1
   0273 E0                 1091 	movx	a,@dptr
   0274 FE                 1092 	mov	r6,a
   0275 A3                 1093 	inc	dptr
   0276 E0                 1094 	movx	a,@dptr
   0277 FF                 1095 	mov	r7,a
   0278 A3                 1096 	inc	dptr
   0279 E0                 1097 	movx	a,@dptr
   027A F8                 1098 	mov	r0,a
   027B A3                 1099 	inc	dptr
   027C E0                 1100 	movx	a,@dptr
   027D F9                 1101 	mov	r1,a
                           1102 ;	genAssign
   027E 90s00r00           1103 	mov	dptr,#_sd_multiple_read_PARM_2
   0281 EE                 1104 	mov	a,r6
   0282 F0                 1105 	movx	@dptr,a
   0283 A3                 1106 	inc	dptr
   0284 EF                 1107 	mov	a,r7
   0285 F0                 1108 	movx	@dptr,a
   0286 A3                 1109 	inc	dptr
   0287 E8                 1110 	mov	a,r0
   0288 F0                 1111 	movx	@dptr,a
   0289 A3                 1112 	inc	dptr
   028A E9                 1113 	mov	a,r1
   028B F0                 1114 	movx	@dptr,a
                           1115 ;	genCall
   028C 8A 82              1116 	mov	dpl,r2
   028E 8B 83              1117 	mov	dph,r3
   0290 8C F0              1118 	mov	b,r4
   0292 ED                 1119 	mov	a,r5
   0293 12s00r00           1120 	lcall	_sd_multiple_read
                           1121 ;	main.c:140: break;
   0296 02s00r28           1122 	ljmp	00122$
                           1123 ;	main.c:143: case '5':          //Memory Copy  from one sector to another
   0299                    1124 00104$:
                           1125 ;	main.c:145: printf_tiny("\n\rEntered Memory copy option\n\r");
                           1126 ;	genIpush
   0299 74rF5              1127 	mov	a,#__str_20
   029B C0 E0              1128 	push	acc
   029D 74s02              1129 	mov	a,#(__str_20 >> 8)
   029F C0 E0              1130 	push	acc
                           1131 ;	genCall
   02A1 12s00r00           1132 	lcall	_printf_tiny
   02A4 15 81              1133 	dec	sp
   02A6 15 81              1134 	dec	sp
                           1135 ;	main.c:146: printf_tiny("\n\rEnter source sector address:\n\r");
                           1136 ;	genIpush
   02A8 74r14              1137 	mov	a,#__str_21
   02AA C0 E0              1138 	push	acc
   02AC 74s03              1139 	mov	a,#(__str_21 >> 8)
   02AE C0 E0              1140 	push	acc
                           1141 ;	genCall
   02B0 12s00r00           1142 	lcall	_printf_tiny
   02B3 15 81              1143 	dec	sp
   02B5 15 81              1144 	dec	sp
                           1145 ;	main.c:147: ch4.b[3] = fetch_data();
                           1146 ;	genCall
   02B7 12s05rBA           1147 	lcall	_fetch_data
   02BA AA 82              1148 	mov	r2,dpl
                           1149 ;	genPointerSet
                           1150 ;     genFarPointerSet
   02BC 90s00r15           1151 	mov	dptr,#(_main_ch4_1_1 + 0x0003)
   02BF EA                 1152 	mov	a,r2
   02C0 F0                 1153 	movx	@dptr,a
                           1154 ;	main.c:148: ch4.b[2] = fetch_data();
                           1155 ;	genCall
   02C1 12s05rBA           1156 	lcall	_fetch_data
   02C4 AA 82              1157 	mov	r2,dpl
                           1158 ;	genPointerSet
                           1159 ;     genFarPointerSet
   02C6 90s00r14           1160 	mov	dptr,#(_main_ch4_1_1 + 0x0002)
   02C9 EA                 1161 	mov	a,r2
   02CA F0                 1162 	movx	@dptr,a
                           1163 ;	main.c:149: ch4.b[1] = fetch_data();
                           1164 ;	genCall
   02CB 12s05rBA           1165 	lcall	_fetch_data
   02CE AA 82              1166 	mov	r2,dpl
                           1167 ;	genPointerSet
                           1168 ;     genFarPointerSet
   02D0 90s00r13           1169 	mov	dptr,#(_main_ch4_1_1 + 0x0001)
   02D3 EA                 1170 	mov	a,r2
   02D4 F0                 1171 	movx	@dptr,a
                           1172 ;	main.c:150: ch4.b[0] = fetch_data();
                           1173 ;	genCall
   02D5 12s05rBA           1174 	lcall	_fetch_data
   02D8 AA 82              1175 	mov	r2,dpl
                           1176 ;	genPointerSet
                           1177 ;     genFarPointerSet
   02DA 90s00r12           1178 	mov	dptr,#_main_ch4_1_1
   02DD EA                 1179 	mov	a,r2
   02DE F0                 1180 	movx	@dptr,a
                           1181 ;	main.c:152: printf_tiny("\n\rEnter destination sector address:\n\r");
                           1182 ;	genIpush
   02DF 74r35              1183 	mov	a,#__str_22
   02E1 C0 E0              1184 	push	acc
   02E3 74s03              1185 	mov	a,#(__str_22 >> 8)
   02E5 C0 E0              1186 	push	acc
                           1187 ;	genCall
   02E7 12s00r00           1188 	lcall	_printf_tiny
   02EA 15 81              1189 	dec	sp
   02EC 15 81              1190 	dec	sp
                           1191 ;	main.c:153: ch5.b[3] = fetch_data();
                           1192 ;	genCall
   02EE 12s05rBA           1193 	lcall	_fetch_data
   02F1 AA 82              1194 	mov	r2,dpl
                           1195 ;	genPointerSet
                           1196 ;     genFarPointerSet
   02F3 90s00r19           1197 	mov	dptr,#(_main_ch5_1_1 + 0x0003)
   02F6 EA                 1198 	mov	a,r2
   02F7 F0                 1199 	movx	@dptr,a
                           1200 ;	main.c:154: ch5.b[2] = fetch_data();
                           1201 ;	genCall
   02F8 12s05rBA           1202 	lcall	_fetch_data
   02FB AA 82              1203 	mov	r2,dpl
                           1204 ;	genPointerSet
                           1205 ;     genFarPointerSet
   02FD 90s00r18           1206 	mov	dptr,#(_main_ch5_1_1 + 0x0002)
   0300 EA                 1207 	mov	a,r2
   0301 F0                 1208 	movx	@dptr,a
                           1209 ;	main.c:155: ch5.b[1] = fetch_data();
                           1210 ;	genCall
   0302 12s05rBA           1211 	lcall	_fetch_data
   0305 AA 82              1212 	mov	r2,dpl
                           1213 ;	genPointerSet
                           1214 ;     genFarPointerSet
   0307 90s00r17           1215 	mov	dptr,#(_main_ch5_1_1 + 0x0001)
   030A EA                 1216 	mov	a,r2
   030B F0                 1217 	movx	@dptr,a
                           1218 ;	main.c:156: ch5.b[0] = fetch_data();
                           1219 ;	genCall
   030C 12s05rBA           1220 	lcall	_fetch_data
   030F AA 82              1221 	mov	r2,dpl
                           1222 ;	genPointerSet
                           1223 ;     genFarPointerSet
   0311 90s00r16           1224 	mov	dptr,#_main_ch5_1_1
   0314 EA                 1225 	mov	a,r2
   0315 F0                 1226 	movx	@dptr,a
                           1227 ;	main.c:158: printf_tiny("\n\rCopying data...:\n\r");
                           1228 ;	genIpush
   0316 74r5B              1229 	mov	a,#__str_23
   0318 C0 E0              1230 	push	acc
   031A 74s03              1231 	mov	a,#(__str_23 >> 8)
   031C C0 E0              1232 	push	acc
                           1233 ;	genCall
   031E 12s00r00           1234 	lcall	_printf_tiny
   0321 15 81              1235 	dec	sp
   0323 15 81              1236 	dec	sp
                           1237 ;	main.c:159: sd_copy(ch4.ul,ch5.ul);                // Call copy function from sdc driver
                           1238 ;	genPointerGet
                           1239 ;	genFarPointerGet
   0325 90s00r12           1240 	mov	dptr,#_main_ch4_1_1
   0328 E0                 1241 	movx	a,@dptr
   0329 FA                 1242 	mov	r2,a
   032A A3                 1243 	inc	dptr
   032B E0                 1244 	movx	a,@dptr
   032C FB                 1245 	mov	r3,a
   032D A3                 1246 	inc	dptr
   032E E0                 1247 	movx	a,@dptr
   032F FC                 1248 	mov	r4,a
   0330 A3                 1249 	inc	dptr
   0331 E0                 1250 	movx	a,@dptr
   0332 FD                 1251 	mov	r5,a
                           1252 ;	genPointerGet
                           1253 ;	genFarPointerGet
   0333 90s00r16           1254 	mov	dptr,#_main_ch5_1_1
   0336 E0                 1255 	movx	a,@dptr
   0337 FE                 1256 	mov	r6,a
   0338 A3                 1257 	inc	dptr
   0339 E0                 1258 	movx	a,@dptr
   033A FF                 1259 	mov	r7,a
   033B A3                 1260 	inc	dptr
   033C E0                 1261 	movx	a,@dptr
   033D F8                 1262 	mov	r0,a
   033E A3                 1263 	inc	dptr
   033F E0                 1264 	movx	a,@dptr
   0340 F9                 1265 	mov	r1,a
                           1266 ;	genAssign
   0341 90s00r00           1267 	mov	dptr,#_sd_copy_PARM_2
   0344 EE                 1268 	mov	a,r6
   0345 F0                 1269 	movx	@dptr,a
   0346 A3                 1270 	inc	dptr
   0347 EF                 1271 	mov	a,r7
   0348 F0                 1272 	movx	@dptr,a
   0349 A3                 1273 	inc	dptr
   034A E8                 1274 	mov	a,r0
   034B F0                 1275 	movx	@dptr,a
   034C A3                 1276 	inc	dptr
   034D E9                 1277 	mov	a,r1
   034E F0                 1278 	movx	@dptr,a
                           1279 ;	genCall
   034F 8A 82              1280 	mov	dpl,r2
   0351 8B 83              1281 	mov	dph,r3
   0353 8C F0              1282 	mov	b,r4
   0355 ED                 1283 	mov	a,r5
   0356 12s00r00           1284 	lcall	_sd_copy
                           1285 ;	main.c:160: break;
   0359 02s00r28           1286 	ljmp	00122$
                           1287 ;	main.c:163: case '4':           //File read option
   035C                    1288 00105$:
                           1289 ;	main.c:165: printf_tiny("\n\rEntered File Read option\n\r");
                           1290 ;	genIpush
   035C 74r70              1291 	mov	a,#__str_24
   035E C0 E0              1292 	push	acc
   0360 74s03              1293 	mov	a,#(__str_24 >> 8)
   0362 C0 E0              1294 	push	acc
                           1295 ;	genCall
   0364 12s00r00           1296 	lcall	_printf_tiny
   0367 15 81              1297 	dec	sp
   0369 15 81              1298 	dec	sp
                           1299 ;	main.c:166: printf_tiny("\n\rSelect a file to read from SD Card:\n\r");
                           1300 ;	genIpush
   036B 74r8D              1301 	mov	a,#__str_25
   036D C0 E0              1302 	push	acc
   036F 74s03              1303 	mov	a,#(__str_25 >> 8)
   0371 C0 E0              1304 	push	acc
                           1305 ;	genCall
   0373 12s00r00           1306 	lcall	_printf_tiny
   0376 15 81              1307 	dec	sp
   0378 15 81              1308 	dec	sp
                           1309 ;	main.c:167: printf_tiny("1 - aniket.txt\n\r");
                           1310 ;	genIpush
   037A 74rB5              1311 	mov	a,#__str_26
   037C C0 E0              1312 	push	acc
   037E 74s03              1313 	mov	a,#(__str_26 >> 8)
   0380 C0 E0              1314 	push	acc
                           1315 ;	genCall
   0382 12s00r00           1316 	lcall	_printf_tiny
   0385 15 81              1317 	dec	sp
   0387 15 81              1318 	dec	sp
                           1319 ;	main.c:168: printf_tiny("2 - Links.txt\n\r");
                           1320 ;	genIpush
   0389 74rC6              1321 	mov	a,#__str_27
   038B C0 E0              1322 	push	acc
   038D 74s03              1323 	mov	a,#(__str_27 >> 8)
   038F C0 E0              1324 	push	acc
                           1325 ;	genCall
   0391 12s00r00           1326 	lcall	_printf_tiny
   0394 15 81              1327 	dec	sp
   0396 15 81              1328 	dec	sp
                           1329 ;	main.c:169: printf_tiny("3 - purdue.txt\n\r");
                           1330 ;	genIpush
   0398 74rD6              1331 	mov	a,#__str_28
   039A C0 E0              1332 	push	acc
   039C 74s03              1333 	mov	a,#(__str_28 >> 8)
   039E C0 E0              1334 	push	acc
                           1335 ;	genCall
   03A0 12s00r00           1336 	lcall	_printf_tiny
   03A3 15 81              1337 	dec	sp
   03A5 15 81              1338 	dec	sp
                           1339 ;	main.c:172: gch = getchar();
                           1340 ;	genCall
   03A7 12s00r00           1341 	lcall	_getchar
   03AA AA 82              1342 	mov	r2,dpl
                           1343 ;	main.c:174: switch(gch)
                           1344 ;	genCmpEq
                           1345 ;	gencjneshort
   03AC BA 31 02           1346 	cjne	r2,#0x31,00172$
                           1347 ;	Peephole 112.b	changed ljmp to sjmp
   03AF 80 0E              1348 	sjmp	00155$
   03B1                    1349 00172$:
                           1350 ;	genCmpEq
                           1351 ;	gencjneshort
   03B1 BA 32 02           1352 	cjne	r2,#0x32,00173$
                           1353 ;	Peephole 112.b	changed ljmp to sjmp
   03B4 80 6F              1354 	sjmp	00159$
   03B6                    1355 00173$:
                           1356 ;	genCmpEq
                           1357 ;	gencjneshort
   03B6 BA 33 03           1358 	cjne	r2,#0x33,00174$
   03B9 02s04r87           1359 	ljmp	00163$
   03BC                    1360 00174$:
   03BC 02s00r28           1361 	ljmp	00122$
                           1362 ;	main.c:178: for(pg=0;pg<5;pg++)
   03BF                    1363 00155$:
                           1364 ;	genAssign
   03BF 7A 00              1365 	mov	r2,#0x00
   03C1 7B 00              1366 	mov	r3,#0x00
   03C3                    1367 00124$:
                           1368 ;	genCmpLt
                           1369 ;	genCmp
   03C3 C3                 1370 	clr	c
   03C4 EA                 1371 	mov	a,r2
   03C5 94 05              1372 	subb	a,#0x05
   03C7 EB                 1373 	mov	a,r3
   03C8 64 80              1374 	xrl	a,#0x80
   03CA 94 80              1375 	subb	a,#0x80
                           1376 ;	genIfxJump
   03CC 40 03              1377 	jc	00175$
   03CE 02s00r28           1378 	ljmp	00122$
   03D1                    1379 00175$:
                           1380 ;	main.c:180: sd_single_read_glcd(sec_no1+(pg*0x140));        // single sector read
                           1381 ;	genAssign
   03D1 90s00r00           1382 	mov	dptr,#__mulint_PARM_2
   03D4 74 40              1383 	mov	a,#0x40
   03D6 F0                 1384 	movx	@dptr,a
   03D7 A3                 1385 	inc	dptr
   03D8 74 01              1386 	mov	a,#0x01
   03DA F0                 1387 	movx	@dptr,a
                           1388 ;	genCall
   03DB 8A 82              1389 	mov	dpl,r2
   03DD 8B 83              1390 	mov	dph,r3
   03DF C0 02              1391 	push	ar2
   03E1 C0 03              1392 	push	ar3
   03E3 12s00r00           1393 	lcall	__mulint
   03E6 AC 82              1394 	mov	r4,dpl
   03E8 AD 83              1395 	mov	r5,dph
   03EA D0 03              1396 	pop	ar3
   03EC D0 02              1397 	pop	ar2
                           1398 ;	genCast
   03EE ED                 1399 	mov	a,r5
   03EF 33                 1400 	rlc	a
   03F0 95 E0              1401 	subb	a,acc
   03F2 FE                 1402 	mov	r6,a
   03F3 FF                 1403 	mov	r7,a
                           1404 ;	genPlus
                           1405 ;     genPlusIncr
                           1406 ;     genPlus shortcut
   03F4 74 40              1407 	mov	a,#0x40
                           1408 ;	Peephole 236.a	used r5 instead of ar5
   03F6 2D                 1409 	add	a,r5
   03F7 FD                 1410 	mov	r5,a
   03F8 74 04              1411 	mov	a,#0x04
                           1412 ;	Peephole 236.b	used r6 instead of ar6
   03FA 3E                 1413 	addc	a,r6
   03FB FE                 1414 	mov	r6,a
                           1415 ;	Peephole 181	changed mov to clr
   03FC E4                 1416 	clr	a
                           1417 ;	Peephole 236.b	used r7 instead of ar7
   03FD 3F                 1418 	addc	a,r7
                           1419 ;	genCall
   03FE FF                 1420 	mov	r7,a
   03FF 8C 82              1421 	mov	dpl,r4
   0401 8D 83              1422 	mov	dph,r5
   0403 8E F0              1423 	mov	b,r6
                           1424 ;	Peephole 191	removed redundant mov
   0405 C0 02              1425 	push	ar2
   0407 C0 03              1426 	push	ar3
   0409 12s00r00           1427 	lcall	_sd_single_read_glcd
   040C D0 03              1428 	pop	ar3
   040E D0 02              1429 	pop	ar2
                           1430 ;	main.c:181: while(IE0 != 1);                                // wait for INT0
   0410                    1431 00107$:
                           1432 ;	genIfx
                           1433 ;	genIfxJump
                           1434 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0410 30 89 FD           1435 	jnb	_IE0,00107$
                           1436 ;	Peephole 300	removed redundant label 00176$
                           1437 ;	main.c:183: glcd_init();                                    // clear LCD
                           1438 ;	genCall
   0413 C0 02              1439 	push	ar2
   0415 C0 03              1440 	push	ar3
   0417 12s00r00           1441 	lcall	_glcd_init
   041A D0 03              1442 	pop	ar3
   041C D0 02              1443 	pop	ar2
                           1444 ;	main.c:178: for(pg=0;pg<5;pg++)
                           1445 ;	genPlus
                           1446 ;     genPlusIncr
   041E 0A                 1447 	inc	r2
                           1448 ;	main.c:188: for(pg=0;pg<1;pg++)
                           1449 ;	Peephole 112.b	changed ljmp to sjmp
                           1450 ;	Peephole 243	avoided branch to sjmp
   041F BA 00 A1           1451 	cjne	r2,#0x00,00124$
   0422 0B                 1452 	inc	r3
                           1453 ;	Peephole 300	removed redundant label 00177$
   0423 80 9E              1454 	sjmp	00124$
   0425                    1455 00159$:
                           1456 ;	genAssign
   0425 7A 00              1457 	mov	r2,#0x00
   0427 7B 00              1458 	mov	r3,#0x00
   0429                    1459 00128$:
                           1460 ;	genCmpLt
                           1461 ;	genCmp
   0429 C3                 1462 	clr	c
   042A EA                 1463 	mov	a,r2
   042B 94 01              1464 	subb	a,#0x01
   042D EB                 1465 	mov	a,r3
   042E 64 80              1466 	xrl	a,#0x80
   0430 94 80              1467 	subb	a,#0x80
                           1468 ;	genIfxJump
   0432 40 03              1469 	jc	00178$
   0434 02s00r28           1470 	ljmp	00122$
   0437                    1471 00178$:
                           1472 ;	main.c:190: sd_single_read_glcd(sec_no2+(pg*0x140));        // read file
                           1473 ;	genAssign
   0437 90s00r00           1474 	mov	dptr,#__mulint_PARM_2
   043A 74 40              1475 	mov	a,#0x40
   043C F0                 1476 	movx	@dptr,a
   043D A3                 1477 	inc	dptr
   043E 74 01              1478 	mov	a,#0x01
   0440 F0                 1479 	movx	@dptr,a
                           1480 ;	genCall
   0441 8A 82              1481 	mov	dpl,r2
   0443 8B 83              1482 	mov	dph,r3
   0445 C0 02              1483 	push	ar2
   0447 C0 03              1484 	push	ar3
   0449 12s00r00           1485 	lcall	__mulint
   044C AC 82              1486 	mov	r4,dpl
   044E AD 83              1487 	mov	r5,dph
   0450 D0 03              1488 	pop	ar3
   0452 D0 02              1489 	pop	ar2
                           1490 ;	genCast
   0454 ED                 1491 	mov	a,r5
   0455 33                 1492 	rlc	a
   0456 95 E0              1493 	subb	a,acc
   0458 FE                 1494 	mov	r6,a
   0459 FF                 1495 	mov	r7,a
                           1496 ;	genPlus
                           1497 ;     genPlusIncr
                           1498 ;     genPlus shortcut
   045A 74 05              1499 	mov	a,#0x05
                           1500 ;	Peephole 236.a	used r6 instead of ar6
   045C 2E                 1501 	add	a,r6
   045D FE                 1502 	mov	r6,a
                           1503 ;	Peephole 181	changed mov to clr
   045E E4                 1504 	clr	a
                           1505 ;	Peephole 236.b	used r7 instead of ar7
   045F 3F                 1506 	addc	a,r7
                           1507 ;	genCall
   0460 FF                 1508 	mov	r7,a
   0461 8C 82              1509 	mov	dpl,r4
   0463 8D 83              1510 	mov	dph,r5
   0465 8E F0              1511 	mov	b,r6
                           1512 ;	Peephole 191	removed redundant mov
   0467 C0 02              1513 	push	ar2
   0469 C0 03              1514 	push	ar3
   046B 12s00r00           1515 	lcall	_sd_single_read_glcd
   046E D0 03              1516 	pop	ar3
   0470 D0 02              1517 	pop	ar2
                           1518 ;	main.c:191: while(IE0 != 1);                                // wait for INT0
   0472                    1519 00111$:
                           1520 ;	genIfx
                           1521 ;	genIfxJump
                           1522 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0472 30 89 FD           1523 	jnb	_IE0,00111$
                           1524 ;	Peephole 300	removed redundant label 00179$
                           1525 ;	main.c:193: glcd_init();                                    // clear LCD
                           1526 ;	genCall
   0475 C0 02              1527 	push	ar2
   0477 C0 03              1528 	push	ar3
   0479 12s00r00           1529 	lcall	_glcd_init
   047C D0 03              1530 	pop	ar3
   047E D0 02              1531 	pop	ar2
                           1532 ;	main.c:188: for(pg=0;pg<1;pg++)
                           1533 ;	genPlus
                           1534 ;     genPlusIncr
   0480 0A                 1535 	inc	r2
                           1536 ;	main.c:198: for(pg=0;pg<3;pg++)
                           1537 ;	Peephole 112.b	changed ljmp to sjmp
                           1538 ;	Peephole 243	avoided branch to sjmp
   0481 BA 00 A5           1539 	cjne	r2,#0x00,00128$
   0484 0B                 1540 	inc	r3
                           1541 ;	Peephole 300	removed redundant label 00180$
   0485 80 A2              1542 	sjmp	00128$
   0487                    1543 00163$:
                           1544 ;	genAssign
   0487 7A 00              1545 	mov	r2,#0x00
   0489 7B 00              1546 	mov	r3,#0x00
   048B                    1547 00132$:
                           1548 ;	genCmpLt
                           1549 ;	genCmp
   048B C3                 1550 	clr	c
   048C EA                 1551 	mov	a,r2
   048D 94 03              1552 	subb	a,#0x03
   048F EB                 1553 	mov	a,r3
   0490 64 80              1554 	xrl	a,#0x80
   0492 94 80              1555 	subb	a,#0x80
                           1556 ;	genIfxJump
   0494 40 03              1557 	jc	00181$
   0496 02s00r28           1558 	ljmp	00122$
   0499                    1559 00181$:
                           1560 ;	main.c:200: sd_single_read_glcd(sec_no3+(pg*0x140));
                           1561 ;	genAssign
   0499 90s00r00           1562 	mov	dptr,#__mulint_PARM_2
   049C 74 40              1563 	mov	a,#0x40
   049E F0                 1564 	movx	@dptr,a
   049F A3                 1565 	inc	dptr
   04A0 74 01              1566 	mov	a,#0x01
   04A2 F0                 1567 	movx	@dptr,a
                           1568 ;	genCall
   04A3 8A 82              1569 	mov	dpl,r2
   04A5 8B 83              1570 	mov	dph,r3
   04A7 C0 02              1571 	push	ar2
   04A9 C0 03              1572 	push	ar3
   04AB 12s00r00           1573 	lcall	__mulint
   04AE AC 82              1574 	mov	r4,dpl
   04B0 AD 83              1575 	mov	r5,dph
   04B2 D0 03              1576 	pop	ar3
   04B4 D0 02              1577 	pop	ar2
                           1578 ;	genCast
   04B6 ED                 1579 	mov	a,r5
   04B7 33                 1580 	rlc	a
   04B8 95 E0              1581 	subb	a,acc
   04BA FE                 1582 	mov	r6,a
   04BB FF                 1583 	mov	r7,a
                           1584 ;	genPlus
                           1585 ;     genPlusIncr
                           1586 ;     genPlus shortcut
   04BC 74 C0              1587 	mov	a,#0xC0
                           1588 ;	Peephole 236.a	used r5 instead of ar5
   04BE 2D                 1589 	add	a,r5
   04BF FD                 1590 	mov	r5,a
   04C0 74 04              1591 	mov	a,#0x04
                           1592 ;	Peephole 236.b	used r6 instead of ar6
   04C2 3E                 1593 	addc	a,r6
   04C3 FE                 1594 	mov	r6,a
                           1595 ;	Peephole 181	changed mov to clr
   04C4 E4                 1596 	clr	a
                           1597 ;	Peephole 236.b	used r7 instead of ar7
   04C5 3F                 1598 	addc	a,r7
                           1599 ;	genCall
   04C6 FF                 1600 	mov	r7,a
   04C7 8C 82              1601 	mov	dpl,r4
   04C9 8D 83              1602 	mov	dph,r5
   04CB 8E F0              1603 	mov	b,r6
                           1604 ;	Peephole 191	removed redundant mov
   04CD C0 02              1605 	push	ar2
   04CF C0 03              1606 	push	ar3
   04D1 12s00r00           1607 	lcall	_sd_single_read_glcd
   04D4 D0 03              1608 	pop	ar3
   04D6 D0 02              1609 	pop	ar2
                           1610 ;	main.c:201: while(IE0 != 1);             // wait for INT0
   04D8                    1611 00115$:
                           1612 ;	genIfx
                           1613 ;	genIfxJump
                           1614 ;	Peephole 108.d	removed ljmp by inverse jump logic
   04D8 30 89 FD           1615 	jnb	_IE0,00115$
                           1616 ;	Peephole 300	removed redundant label 00182$
                           1617 ;	main.c:203: glcd_init();                // clear LCD
                           1618 ;	genCall
   04DB C0 02              1619 	push	ar2
   04DD C0 03              1620 	push	ar3
   04DF 12s00r00           1621 	lcall	_glcd_init
   04E2 D0 03              1622 	pop	ar3
   04E4 D0 02              1623 	pop	ar2
                           1624 ;	main.c:198: for(pg=0;pg<3;pg++)
                           1625 ;	genPlus
                           1626 ;     genPlusIncr
   04E6 0A                 1627 	inc	r2
                           1628 ;	main.c:212: case '6':           // File information menu
                           1629 ;	Peephole 112.b	changed ljmp to sjmp
                           1630 ;	Peephole 243	avoided branch to sjmp
   04E7 BA 00 A1           1631 	cjne	r2,#0x00,00132$
   04EA 0B                 1632 	inc	r3
                           1633 ;	Peephole 300	removed redundant label 00183$
   04EB 80 9E              1634 	sjmp	00132$
   04ED                    1635 00119$:
                           1636 ;	main.c:214: printf_tiny("\n\rEntered File Information option\n\r");
                           1637 ;	genIpush
   04ED 74rE7              1638 	mov	a,#__str_29
   04EF C0 E0              1639 	push	acc
   04F1 74s03              1640 	mov	a,#(__str_29 >> 8)
   04F3 C0 E0              1641 	push	acc
                           1642 ;	genCall
   04F5 12s00r00           1643 	lcall	_printf_tiny
   04F8 15 81              1644 	dec	sp
   04FA 15 81              1645 	dec	sp
                           1646 ;	main.c:215: for(k=0;k<3;k++)
                           1647 ;	genAssign
   04FC 90s00r00           1648 	mov	dptr,#_main_k_1_1
   04FF E4                 1649 	clr	a
   0500 F0                 1650 	movx	@dptr,a
   0501 A3                 1651 	inc	dptr
   0502 F0                 1652 	movx	@dptr,a
   0503                    1653 00136$:
                           1654 ;	genAssign
   0503 90s00r00           1655 	mov	dptr,#_main_k_1_1
   0506 E0                 1656 	movx	a,@dptr
   0507 FA                 1657 	mov	r2,a
   0508 A3                 1658 	inc	dptr
   0509 E0                 1659 	movx	a,@dptr
   050A FB                 1660 	mov	r3,a
                           1661 ;	genCmpLt
                           1662 ;	genCmp
   050B C3                 1663 	clr	c
   050C EA                 1664 	mov	a,r2
   050D 94 03              1665 	subb	a,#0x03
   050F EB                 1666 	mov	a,r3
   0510 64 80              1667 	xrl	a,#0x80
   0512 94 80              1668 	subb	a,#0x80
                           1669 ;	genIfxJump
   0514 40 03              1670 	jc	00184$
   0516 02s00r28           1671 	ljmp	00122$
   0519                    1672 00184$:
                           1673 ;	main.c:216: fileopen(k+1);           // Read file information from sector 0x0003C000
                           1674 ;	genPlus
                           1675 ;     genPlusIncr
   0519 0A                 1676 	inc	r2
   051A BA 00 01           1677 	cjne	r2,#0x00,00185$
   051D 0B                 1678 	inc	r3
   051E                    1679 00185$:
                           1680 ;	genCall
   051E 8A 82              1681 	mov	dpl,r2
   0520 8B 83              1682 	mov	dph,r3
   0522 C0 02              1683 	push	ar2
   0524 C0 03              1684 	push	ar3
   0526 12s00r00           1685 	lcall	_fileopen
   0529 D0 03              1686 	pop	ar3
   052B D0 02              1687 	pop	ar2
                           1688 ;	main.c:215: for(k=0;k<3;k++)
                           1689 ;	genAssign
   052D 90s00r00           1690 	mov	dptr,#_main_k_1_1
   0530 EA                 1691 	mov	a,r2
   0531 F0                 1692 	movx	@dptr,a
   0532 A3                 1693 	inc	dptr
   0533 EB                 1694 	mov	a,r3
   0534 F0                 1695 	movx	@dptr,a
                           1696 ;	main.c:221: }
                           1697 ;	Peephole 112.b	changed ljmp to sjmp
   0535 80 CC              1698 	sjmp	00136$
                           1699 ;	Peephole 259.a	removed redundant label 00140$ and ret
                           1700 ;
                           1701 ;------------------------------------------------------------
                           1702 ;Allocation info for local variables in function 'int_SPI'
                           1703 ;------------------------------------------------------------
                           1704 ;------------------------------------------------------------
                           1705 ;	main.c:227: void int_SPI(void) __interrupt (9) /* interrupt address is 0x004B */
                           1706 ;	-----------------------------------------
                           1707 ;	 function int_SPI
                           1708 ;	-----------------------------------------
   0537                    1709 _int_SPI:
   0537 C0 E0              1710 	push	acc
   0539 C0 F0              1711 	push	b
   053B C0 82              1712 	push	dpl
   053D C0 83              1713 	push	dph
   053F C0 02              1714 	push	(0+2)
   0541 C0 03              1715 	push	(0+3)
   0543 C0 04              1716 	push	(0+4)
   0545 C0 05              1717 	push	(0+5)
   0547 C0 06              1718 	push	(0+6)
   0549 C0 07              1719 	push	(0+7)
   054B C0 00              1720 	push	(0+0)
   054D C0 01              1721 	push	(0+1)
   054F C0 D0              1722 	push	psw
   0551 75 D0 00           1723 	mov	psw,#0x00
                           1724 ;	main.c:229: switch	(SPSTA)         /* read and clear spi status register */
                           1725 ;	genAssign
   0554 AA C4              1726 	mov	r2,_SPSTA
                           1727 ;	genCmpEq
                           1728 ;	gencjneshort
   0556 BA 10 02           1729 	cjne	r2,#0x10,00110$
                           1730 ;	Peephole 112.b	changed ljmp to sjmp
   0559 80 18              1731 	sjmp	00102$
   055B                    1732 00110$:
                           1733 ;	genCmpEq
                           1734 ;	gencjneshort
   055B BA 40 02           1735 	cjne	r2,#0x40,00111$
                           1736 ;	Peephole 112.b	changed ljmp to sjmp
   055E 80 24              1737 	sjmp	00103$
   0560                    1738 00111$:
                           1739 ;	genCmpEq
                           1740 ;	gencjneshort
                           1741 ;	Peephole 112.b	changed ljmp to sjmp
                           1742 ;	Peephole 198.b	optimized misc jump sequence
   0560 BA 80 30           1743 	cjne	r2,#0x80,00105$
                           1744 ;	Peephole 200.b	removed redundant sjmp
                           1745 ;	Peephole 300	removed redundant label 00112$
                           1746 ;	Peephole 300	removed redundant label 00113$
                           1747 ;	main.c:232: serial_data=SPDAT;   /* read receive data */
                           1748 ;	genAssign
   0563 90s00r00           1749 	mov	dptr,#_serial_data
   0566 E5 C5              1750 	mov	a,_SPDAT
   0568 F0                 1751 	movx	@dptr,a
                           1752 ;	main.c:233: transmit_completed=1;/* set software flag */
                           1753 ;	genAssign
   0569 D2*00              1754 	setb	_transmit_completed
                           1755 ;	main.c:234: delay(100);
                           1756 ;	genCall
                           1757 ;	Peephole 182.b	used 16 bit load of dptr
   056B 90 00 64           1758 	mov	dptr,#0x0064
   056E 12s00r00           1759 	lcall	_delay
                           1760 ;	main.c:235: break;
                           1761 ;	main.c:237: case 0x10:
                           1762 ;	Peephole 112.b	changed ljmp to sjmp
   0571 80 20              1763 	sjmp	00105$
   0573                    1764 00102$:
                           1765 ;	main.c:239: printf_tiny("Mode fault\n\r");
                           1766 ;	genIpush
   0573 74r0B              1767 	mov	a,#__str_30
   0575 C0 E0              1768 	push	acc
   0577 74s04              1769 	mov	a,#(__str_30 >> 8)
   0579 C0 E0              1770 	push	acc
                           1771 ;	genCall
   057B 12s00r00           1772 	lcall	_printf_tiny
   057E 15 81              1773 	dec	sp
   0580 15 81              1774 	dec	sp
                           1775 ;	main.c:240: break;
                           1776 ;	main.c:242: case 0x40:
                           1777 ;	Peephole 112.b	changed ljmp to sjmp
   0582 80 0F              1778 	sjmp	00105$
   0584                    1779 00103$:
                           1780 ;	main.c:244: printf_tiny("Overrun tasking\n\r");
                           1781 ;	genIpush
   0584 74r18              1782 	mov	a,#__str_31
   0586 C0 E0              1783 	push	acc
   0588 74s04              1784 	mov	a,#(__str_31 >> 8)
   058A C0 E0              1785 	push	acc
                           1786 ;	genCall
   058C 12s00r00           1787 	lcall	_printf_tiny
   058F 15 81              1788 	dec	sp
   0591 15 81              1789 	dec	sp
                           1790 ;	main.c:246: }
   0593                    1791 00105$:
   0593 D0 D0              1792 	pop	psw
   0595 D0 01              1793 	pop	(0+1)
   0597 D0 00              1794 	pop	(0+0)
   0599 D0 07              1795 	pop	(0+7)
   059B D0 06              1796 	pop	(0+6)
   059D D0 05              1797 	pop	(0+5)
   059F D0 04              1798 	pop	(0+4)
   05A1 D0 03              1799 	pop	(0+3)
   05A3 D0 02              1800 	pop	(0+2)
   05A5 D0 83              1801 	pop	dph
   05A7 D0 82              1802 	pop	dpl
   05A9 D0 F0              1803 	pop	b
   05AB D0 E0              1804 	pop	acc
   05AD 32                 1805 	reti
                           1806 ;------------------------------------------------------------
                           1807 ;Allocation info for local variables in function 'spi_init'
                           1808 ;------------------------------------------------------------
                           1809 ;------------------------------------------------------------
                           1810 ;	main.c:249: void spi_init()
                           1811 ;	-----------------------------------------
                           1812 ;	 function spi_init
                           1813 ;	-----------------------------------------
   05AE                    1814 _spi_init:
                           1815 ;	main.c:251: SPCON &= 0x00;                /* Fclk Periph/2 */
                           1816 ;	genDummyRead
   05AE E5 C3              1817 	mov	a,_SPCON
                           1818 ;	genAssign
   05B0 75 C3 00           1819 	mov	_SPCON,#0x00
                           1820 ;	main.c:252: SPCON |= 0x10;                /* Master mode */
                           1821 ;	genOr
   05B3 43 C3 10           1822 	orl	_SPCON,#0x10
                           1823 ;	main.c:253: IEN1 |= 0x04;                 /* enable spi interrupt */
                           1824 ;	genOr
   05B6 43 B1 04           1825 	orl	_IEN1,#0x04
                           1826 ;	Peephole 300	removed redundant label 00101$
   05B9 22                 1827 	ret
                           1828 ;------------------------------------------------------------
                           1829 ;Allocation info for local variables in function 'fetch_data'
                           1830 ;------------------------------------------------------------
                           1831 ;i1                        Allocated with name '_fetch_data_i1_1_1'
                           1832 ;i                         Allocated with name '_fetch_data_i_1_1'
                           1833 ;ch                        Allocated with name '_fetch_data_ch_1_1'
                           1834 ;finalval                  Allocated with name '_fetch_data_finalval_1_1'
                           1835 ;bufsiz1                   Allocated with name '_fetch_data_bufsiz1_1_1'
                           1836 ;------------------------------------------------------------
                           1837 ;	main.c:257: char fetch_data()
                           1838 ;	-----------------------------------------
                           1839 ;	 function fetch_data
                           1840 ;	-----------------------------------------
   05BA                    1841 _fetch_data:
                           1842 ;	main.c:264: do
   05BA                    1843 00120$:
                           1844 ;	main.c:266: memset(bufsiz1,'\0',2);
                           1845 ;	genAssign
   05BA 90s00r00           1846 	mov	dptr,#_memset_PARM_2
                           1847 ;	Peephole 181	changed mov to clr
   05BD E4                 1848 	clr	a
   05BE F0                 1849 	movx	@dptr,a
                           1850 ;	genAssign
   05BF 90s00r00           1851 	mov	dptr,#_memset_PARM_3
   05C2 74 02              1852 	mov	a,#0x02
   05C4 F0                 1853 	movx	@dptr,a
   05C5 E4                 1854 	clr	a
   05C6 A3                 1855 	inc	dptr
   05C7 F0                 1856 	movx	@dptr,a
                           1857 ;	genCall
                           1858 ;	Peephole 182.a	used 16 bit load of DPTR
   05C8 90s00r1D           1859 	mov	dptr,#_fetch_data_bufsiz1_1_1
   05CB 75 F0 00           1860 	mov	b,#0x00
   05CE 12s00r00           1861 	lcall	_memset
                           1862 ;	main.c:268: for(i1=0;i1<2;i1++)
                           1863 ;	genAssign
   05D1 90s00r1A           1864 	mov	dptr,#_fetch_data_i1_1_1
   05D4 E4                 1865 	clr	a
   05D5 F0                 1866 	movx	@dptr,a
   05D6 A3                 1867 	inc	dptr
   05D7 F0                 1868 	movx	@dptr,a
                           1869 ;	genAssign
   05D8 7A 00              1870 	mov	r2,#0x00
   05DA 7B 00              1871 	mov	r3,#0x00
   05DC                    1872 00116$:
                           1873 ;	genCmpLt
                           1874 ;	genCmp
   05DC C3                 1875 	clr	c
   05DD EA                 1876 	mov	a,r2
   05DE 94 02              1877 	subb	a,#0x02
   05E0 EB                 1878 	mov	a,r3
   05E1 64 80              1879 	xrl	a,#0x80
   05E3 94 80              1880 	subb	a,#0x80
                           1881 ;	genIfxJump
   05E5 40 03              1882 	jc	00276$
   05E7 02s06r8C           1883 	ljmp	00121$
   05EA                    1884 00276$:
                           1885 ;	main.c:270: ch = getchar();
                           1886 ;	genCall
   05EA C0 02              1887 	push	ar2
   05EC C0 03              1888 	push	ar3
   05EE 12s00r00           1889 	lcall	_getchar
   05F1 AC 82              1890 	mov	r4,dpl
   05F3 D0 03              1891 	pop	ar3
   05F5 D0 02              1892 	pop	ar2
                           1893 ;	main.c:271: if(((ch > 47) && (ch < 59)) || ((ch > 96) && (ch < 103)) || ((ch > 64) && (ch < 71)))
                           1894 ;	genCmpGt
                           1895 ;	genCmp
   05F7 C3                 1896 	clr	c
                           1897 ;	Peephole 159	avoided xrl during execution
   05F8 74 AF              1898 	mov	a,#(0x2F ^ 0x80)
   05FA 8C F0              1899 	mov	b,r4
   05FC 63 F0 80           1900 	xrl	b,#0x80
   05FF 95 F0              1901 	subb	a,b
   0601 E4                 1902 	clr	a
   0602 33                 1903 	rlc	a
                           1904 ;	genIfx
   0603 FD                 1905 	mov	r5,a
                           1906 ;	Peephole 105	removed redundant mov
                           1907 ;	genIfxJump
                           1908 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0604 60 08              1909 	jz	00113$
                           1910 ;	Peephole 300	removed redundant label 00277$
                           1911 ;	genCmpLt
                           1912 ;	genCmp
   0606 C3                 1913 	clr	c
   0607 EC                 1914 	mov	a,r4
   0608 64 80              1915 	xrl	a,#0x80
   060A 94 BB              1916 	subb	a,#0xbb
                           1917 ;	genIfxJump
                           1918 ;	Peephole 112.b	changed ljmp to sjmp
                           1919 ;	Peephole 160.a	removed sjmp by inverse jump logic
   060C 40 2E              1920 	jc	00108$
                           1921 ;	Peephole 300	removed redundant label 00278$
   060E                    1922 00113$:
                           1923 ;	genCmpGt
                           1924 ;	genCmp
   060E C3                 1925 	clr	c
                           1926 ;	Peephole 159	avoided xrl during execution
   060F 74 E0              1927 	mov	a,#(0x60 ^ 0x80)
   0611 8C F0              1928 	mov	b,r4
   0613 63 F0 80           1929 	xrl	b,#0x80
   0616 95 F0              1930 	subb	a,b
   0618 E4                 1931 	clr	a
   0619 33                 1932 	rlc	a
                           1933 ;	genIfx
   061A FE                 1934 	mov	r6,a
                           1935 ;	Peephole 105	removed redundant mov
                           1936 ;	genIfxJump
                           1937 ;	Peephole 108.c	removed ljmp by inverse jump logic
   061B 60 08              1938 	jz	00115$
                           1939 ;	Peephole 300	removed redundant label 00279$
                           1940 ;	genCmpLt
                           1941 ;	genCmp
   061D C3                 1942 	clr	c
   061E EC                 1943 	mov	a,r4
   061F 64 80              1944 	xrl	a,#0x80
   0621 94 E7              1945 	subb	a,#0xe7
                           1946 ;	genIfxJump
                           1947 ;	Peephole 112.b	changed ljmp to sjmp
                           1948 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0623 40 17              1949 	jc	00108$
                           1950 ;	Peephole 300	removed redundant label 00280$
   0625                    1951 00115$:
                           1952 ;	genCmpGt
                           1953 ;	genCmp
   0625 C3                 1954 	clr	c
                           1955 ;	Peephole 159	avoided xrl during execution
   0626 74 C0              1956 	mov	a,#(0x40 ^ 0x80)
   0628 8C F0              1957 	mov	b,r4
   062A 63 F0 80           1958 	xrl	b,#0x80
   062D 95 F0              1959 	subb	a,b
   062F E4                 1960 	clr	a
   0630 33                 1961 	rlc	a
                           1962 ;	genIfx
   0631 FF                 1963 	mov	r7,a
                           1964 ;	Peephole 105	removed redundant mov
                           1965 ;	genIfxJump
                           1966 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0632 60 16              1967 	jz	00109$
                           1968 ;	Peephole 300	removed redundant label 00281$
                           1969 ;	genCmpLt
                           1970 ;	genCmp
   0634 C3                 1971 	clr	c
   0635 EC                 1972 	mov	a,r4
   0636 64 80              1973 	xrl	a,#0x80
   0638 94 C7              1974 	subb	a,#0xc7
                           1975 ;	genIfxJump
                           1976 ;	Peephole 108.a	removed ljmp by inverse jump logic
   063A 50 0E              1977 	jnc	00109$
                           1978 ;	Peephole 300	removed redundant label 00282$
   063C                    1979 00108$:
                           1980 ;	main.c:273: bufsiz1[i1] = ch;
                           1981 ;	genPlus
                           1982 ;	Peephole 236.g	used r2 instead of ar2
   063C EA                 1983 	mov	a,r2
   063D 24r1D              1984 	add	a,#_fetch_data_bufsiz1_1_1
   063F F5 82              1985 	mov	dpl,a
                           1986 ;	Peephole 236.g	used r3 instead of ar3
   0641 EB                 1987 	mov	a,r3
   0642 34s00              1988 	addc	a,#(_fetch_data_bufsiz1_1_1 >> 8)
   0644 F5 83              1989 	mov	dph,a
                           1990 ;	genPointerSet
                           1991 ;     genFarPointerSet
   0646 EC                 1992 	mov	a,r4
   0647 F0                 1993 	movx	@dptr,a
                           1994 ;	Peephole 112.b	changed ljmp to sjmp
   0648 80 32              1995 	sjmp	00118$
   064A                    1996 00109$:
                           1997 ;	main.c:275: else if(!(((ch > 47) && (ch < 59)) || ((ch > 96) && (ch < 103)) || ((ch > 64) && (ch < 71))))
                           1998 ;	genIfx
   064A ED                 1999 	mov	a,r5
                           2000 ;	genIfxJump
                           2001 ;	Peephole 108.c	removed ljmp by inverse jump logic
   064B 60 08              2002 	jz	00105$
                           2003 ;	Peephole 300	removed redundant label 00283$
                           2004 ;	genCmpLt
                           2005 ;	genCmp
   064D C3                 2006 	clr	c
   064E EC                 2007 	mov	a,r4
   064F 64 80              2008 	xrl	a,#0x80
   0651 94 BB              2009 	subb	a,#0xbb
                           2010 ;	genIfxJump
                           2011 ;	Peephole 112.b	changed ljmp to sjmp
                           2012 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0653 40 27              2013 	jc	00118$
                           2014 ;	Peephole 300	removed redundant label 00284$
   0655                    2015 00105$:
                           2016 ;	genIfx
   0655 EE                 2017 	mov	a,r6
                           2018 ;	genIfxJump
                           2019 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0656 60 08              2020 	jz	00107$
                           2021 ;	Peephole 300	removed redundant label 00285$
                           2022 ;	genCmpLt
                           2023 ;	genCmp
   0658 C3                 2024 	clr	c
   0659 EC                 2025 	mov	a,r4
   065A 64 80              2026 	xrl	a,#0x80
   065C 94 E7              2027 	subb	a,#0xe7
                           2028 ;	genIfxJump
                           2029 ;	Peephole 112.b	changed ljmp to sjmp
                           2030 ;	Peephole 160.a	removed sjmp by inverse jump logic
   065E 40 1C              2031 	jc	00118$
                           2032 ;	Peephole 300	removed redundant label 00286$
   0660                    2033 00107$:
                           2034 ;	genIfx
   0660 EF                 2035 	mov	a,r7
                           2036 ;	genIfxJump
                           2037 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0661 60 08              2038 	jz	00101$
                           2039 ;	Peephole 300	removed redundant label 00287$
                           2040 ;	genCmpLt
                           2041 ;	genCmp
   0663 C3                 2042 	clr	c
   0664 EC                 2043 	mov	a,r4
   0665 64 80              2044 	xrl	a,#0x80
   0667 94 C7              2045 	subb	a,#0xc7
                           2046 ;	genIfxJump
                           2047 ;	Peephole 112.b	changed ljmp to sjmp
                           2048 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0669 40 11              2049 	jc	00118$
                           2050 ;	Peephole 300	removed redundant label 00288$
   066B                    2051 00101$:
                           2052 ;	main.c:277: printf_tiny("\n\rPlease enter hexadecimal input. Special characters are not allowed.\n\r");
                           2053 ;	genIpush
   066B 74r2A              2054 	mov	a,#__str_32
   066D C0 E0              2055 	push	acc
   066F 74s04              2056 	mov	a,#(__str_32 >> 8)
   0671 C0 E0              2057 	push	acc
                           2058 ;	genCall
   0673 12s00r00           2059 	lcall	_printf_tiny
   0676 15 81              2060 	dec	sp
   0678 15 81              2061 	dec	sp
                           2062 ;	main.c:278: break;
                           2063 ;	Peephole 112.b	changed ljmp to sjmp
   067A 80 10              2064 	sjmp	00121$
   067C                    2065 00118$:
                           2066 ;	main.c:268: for(i1=0;i1<2;i1++)
                           2067 ;	genPlus
                           2068 ;     genPlusIncr
   067C 0A                 2069 	inc	r2
   067D BA 00 01           2070 	cjne	r2,#0x00,00289$
   0680 0B                 2071 	inc	r3
   0681                    2072 00289$:
                           2073 ;	genAssign
   0681 90s00r1A           2074 	mov	dptr,#_fetch_data_i1_1_1
   0684 EA                 2075 	mov	a,r2
   0685 F0                 2076 	movx	@dptr,a
   0686 A3                 2077 	inc	dptr
   0687 EB                 2078 	mov	a,r3
   0688 F0                 2079 	movx	@dptr,a
   0689 02s05rDC           2080 	ljmp	00116$
   068C                    2081 00121$:
                           2082 ;	main.c:282: }while(i1<2);
                           2083 ;	genAssign
   068C 90s00r1A           2084 	mov	dptr,#_fetch_data_i1_1_1
   068F E0                 2085 	movx	a,@dptr
   0690 FA                 2086 	mov	r2,a
   0691 A3                 2087 	inc	dptr
   0692 E0                 2088 	movx	a,@dptr
   0693 FB                 2089 	mov	r3,a
                           2090 ;	genCmpLt
                           2091 ;	genCmp
   0694 C3                 2092 	clr	c
   0695 EA                 2093 	mov	a,r2
   0696 94 02              2094 	subb	a,#0x02
   0698 EB                 2095 	mov	a,r3
   0699 64 80              2096 	xrl	a,#0x80
   069B 94 80              2097 	subb	a,#0x80
                           2098 ;	genIfxJump
   069D 50 03              2099 	jnc	00290$
   069F 02s05rBA           2100 	ljmp	00120$
   06A2                    2101 00290$:
                           2102 ;	main.c:284: finalval=0;
                           2103 ;	genAssign
   06A2 90s00r1C           2104 	mov	dptr,#_fetch_data_finalval_1_1
                           2105 ;	Peephole 181	changed mov to clr
   06A5 E4                 2106 	clr	a
   06A6 F0                 2107 	movx	@dptr,a
                           2108 ;	main.c:287: for(i=0;i<2;i++)
                           2109 ;	genAssign
   06A7 7A 00              2110 	mov	r2,#0x00
   06A9 7B 00              2111 	mov	r3,#0x00
   06AB                    2112 00213$:
                           2113 ;	genCmpLt
                           2114 ;	genCmp
   06AB C3                 2115 	clr	c
   06AC EA                 2116 	mov	a,r2
   06AD 94 02              2117 	subb	a,#0x02
   06AF EB                 2118 	mov	a,r3
   06B0 64 80              2119 	xrl	a,#0x80
   06B2 94 80              2120 	subb	a,#0x80
                           2121 ;	genIfxJump
   06B4 40 03              2122 	jc	00291$
   06B6 02s09rB1           2123 	ljmp	00216$
   06B9                    2124 00291$:
                           2125 ;	main.c:290: if((bufsiz1[i] >= '0') && (bufsiz1[i] <= '9'))
                           2126 ;	genPlus
                           2127 ;	Peephole 236.g	used r2 instead of ar2
   06B9 EA                 2128 	mov	a,r2
   06BA 24r1D              2129 	add	a,#_fetch_data_bufsiz1_1_1
   06BC FC                 2130 	mov	r4,a
                           2131 ;	Peephole 236.g	used r3 instead of ar3
   06BD EB                 2132 	mov	a,r3
   06BE 34s00              2133 	addc	a,#(_fetch_data_bufsiz1_1_1 >> 8)
   06C0 FD                 2134 	mov	r5,a
                           2135 ;	genPointerGet
                           2136 ;	genFarPointerGet
   06C1 8C 82              2137 	mov	dpl,r4
   06C3 8D 83              2138 	mov	dph,r5
   06C5 E0                 2139 	movx	a,@dptr
                           2140 ;	genCmpLt
                           2141 ;	genCmp
   06C6 FE                 2142 	mov	r6,a
   06C7 C3                 2143 	clr	c
                           2144 ;	Peephole 106	removed redundant mov
   06C8 64 80              2145 	xrl	a,#0x80
   06CA 94 B0              2146 	subb	a,#0xb0
                           2147 ;	genIfxJump
                           2148 ;	Peephole 112.b	changed ljmp to sjmp
                           2149 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           2150 ;	genCmpGt
                           2151 ;	genCmp
   06CC 40 4F              2152 	jc	00210$
                           2153 ;	Peephole 300	removed redundant label 00292$
                           2154 ;	Peephole 256.a	removed redundant clr c
                           2155 ;	Peephole 159	avoided xrl during execution
   06CE 74 B9              2156 	mov	a,#(0x39 ^ 0x80)
   06D0 8E F0              2157 	mov	b,r6
   06D2 63 F0 80           2158 	xrl	b,#0x80
   06D5 95 F0              2159 	subb	a,b
                           2160 ;	genIfxJump
                           2161 ;	Peephole 112.b	changed ljmp to sjmp
                           2162 ;	Peephole 160.a	removed sjmp by inverse jump logic
   06D7 40 44              2163 	jc	00210$
                           2164 ;	Peephole 300	removed redundant label 00293$
                           2165 ;	main.c:292: bufsiz1[i] -= 48;
                           2166 ;	genMinus
   06D9 EE                 2167 	mov	a,r6
   06DA 24 D0              2168 	add	a,#0xd0
                           2169 ;	genPointerSet
                           2170 ;     genFarPointerSet
   06DC FE                 2171 	mov	r6,a
   06DD 8C 82              2172 	mov	dpl,r4
   06DF 8D 83              2173 	mov	dph,r5
                           2174 ;	Peephole 136	removed redundant move
   06E1 F0                 2175 	movx	@dptr,a
                           2176 ;	main.c:293: if(i==0)
                           2177 ;	genIfx
   06E2 EA                 2178 	mov	a,r2
   06E3 4B                 2179 	orl	a,r3
                           2180 ;	genIfxJump
                           2181 ;	Peephole 108.b	removed ljmp by inverse jump logic
   06E4 70 18              2182 	jnz	00126$
                           2183 ;	Peephole 300	removed redundant label 00294$
                           2184 ;	main.c:295: finalval += (bufsiz1[i]*16);
                           2185 ;	genPointerGet
                           2186 ;	genFarPointerGet
   06E6 8C 82              2187 	mov	dpl,r4
   06E8 8D 83              2188 	mov	dph,r5
   06EA E0                 2189 	movx	a,@dptr
                           2190 ;	genLeftShift
                           2191 ;	genLeftShiftLiteral
                           2192 ;	genlshOne
   06EB FE                 2193 	mov	r6,a
                           2194 ;	Peephole 105	removed redundant mov
   06EC C4                 2195 	swap	a
   06ED 54 F0              2196 	anl	a,#0xf0
   06EF FE                 2197 	mov	r6,a
                           2198 ;	genAssign
   06F0 90s00r1C           2199 	mov	dptr,#_fetch_data_finalval_1_1
   06F3 E0                 2200 	movx	a,@dptr
   06F4 FF                 2201 	mov	r7,a
                           2202 ;	genPlus
   06F5 90s00r1C           2203 	mov	dptr,#_fetch_data_finalval_1_1
                           2204 ;	Peephole 236.g	used r6 instead of ar6
   06F8 EE                 2205 	mov	a,r6
                           2206 ;	Peephole 236.a	used r7 instead of ar7
   06F9 2F                 2207 	add	a,r7
   06FA F0                 2208 	movx	@dptr,a
   06FB 02s09rA9           2209 	ljmp	00215$
   06FE                    2210 00126$:
                           2211 ;	main.c:297: else if(i==1)
                           2212 ;	genCmpEq
                           2213 ;	gencjneshort
   06FE BA 01 05           2214 	cjne	r2,#0x01,00295$
   0701 BB 00 02           2215 	cjne	r3,#0x00,00295$
   0704 80 03              2216 	sjmp	00296$
   0706                    2217 00295$:
   0706 02s09rA9           2218 	ljmp	00215$
   0709                    2219 00296$:
                           2220 ;	main.c:299: finalval += bufsiz1[i];
                           2221 ;	genPointerGet
                           2222 ;	genFarPointerGet
   0709 8C 82              2223 	mov	dpl,r4
   070B 8D 83              2224 	mov	dph,r5
   070D E0                 2225 	movx	a,@dptr
   070E FC                 2226 	mov	r4,a
                           2227 ;	genAssign
   070F 90s00r1C           2228 	mov	dptr,#_fetch_data_finalval_1_1
   0712 E0                 2229 	movx	a,@dptr
   0713 FD                 2230 	mov	r5,a
                           2231 ;	genPlus
   0714 90s00r1C           2232 	mov	dptr,#_fetch_data_finalval_1_1
                           2233 ;	Peephole 236.g	used r4 instead of ar4
   0717 EC                 2234 	mov	a,r4
                           2235 ;	Peephole 236.a	used r5 instead of ar5
   0718 2D                 2236 	add	a,r5
   0719 F0                 2237 	movx	@dptr,a
   071A 02s09rA9           2238 	ljmp	00215$
   071D                    2239 00210$:
                           2240 ;	main.c:305: else if((bufsiz1[i] >= 'A') && (bufsiz1[i] <= 'F'))
                           2241 ;	genPlus
                           2242 ;	Peephole 236.g	used r2 instead of ar2
   071D EA                 2243 	mov	a,r2
   071E 24r1D              2244 	add	a,#_fetch_data_bufsiz1_1_1
   0720 F5 82              2245 	mov	dpl,a
                           2246 ;	Peephole 236.g	used r3 instead of ar3
   0722 EB                 2247 	mov	a,r3
   0723 34s00              2248 	addc	a,#(_fetch_data_bufsiz1_1_1 >> 8)
   0725 F5 83              2249 	mov	dph,a
                           2250 ;	genPointerGet
                           2251 ;	genFarPointerGet
   0727 E0                 2252 	movx	a,@dptr
                           2253 ;	genCmpLt
                           2254 ;	genCmp
   0728 FC                 2255 	mov	r4,a
   0729 C3                 2256 	clr	c
                           2257 ;	Peephole 106	removed redundant mov
   072A 64 80              2258 	xrl	a,#0x80
   072C 94 C1              2259 	subb	a,#0xc1
                           2260 ;	genIfxJump
   072E 50 03              2261 	jnc	00297$
   0730 02s08r74           2262 	ljmp	00206$
   0733                    2263 00297$:
                           2264 ;	genCmpGt
                           2265 ;	genCmp
   0733 C3                 2266 	clr	c
                           2267 ;	Peephole 159	avoided xrl during execution
   0734 74 C6              2268 	mov	a,#(0x46 ^ 0x80)
   0736 8C F0              2269 	mov	b,r4
   0738 63 F0 80           2270 	xrl	b,#0x80
   073B 95 F0              2271 	subb	a,b
                           2272 ;	genIfxJump
   073D 50 03              2273 	jnc	00298$
   073F 02s08r74           2274 	ljmp	00206$
   0742                    2275 00298$:
                           2276 ;	main.c:307: switch(bufsiz1[i])
                           2277 ;	genCmpEq
                           2278 ;	gencjneshort
   0742 BC 41 02           2279 	cjne	r4,#0x41,00299$
                           2280 ;	Peephole 112.b	changed ljmp to sjmp
   0745 80 1F              2281 	sjmp	00128$
   0747                    2282 00299$:
                           2283 ;	genCmpEq
                           2284 ;	gencjneshort
   0747 BC 42 02           2285 	cjne	r4,#0x42,00300$
                           2286 ;	Peephole 112.b	changed ljmp to sjmp
   074A 80 47              2287 	sjmp	00134$
   074C                    2288 00300$:
                           2289 ;	genCmpEq
                           2290 ;	gencjneshort
   074C BC 43 02           2291 	cjne	r4,#0x43,00301$
                           2292 ;	Peephole 112.b	changed ljmp to sjmp
   074F 80 6F              2293 	sjmp	00140$
   0751                    2294 00301$:
                           2295 ;	genCmpEq
                           2296 ;	gencjneshort
   0751 BC 44 03           2297 	cjne	r4,#0x44,00302$
   0754 02s07rED           2298 	ljmp	00146$
   0757                    2299 00302$:
                           2300 ;	genCmpEq
                           2301 ;	gencjneshort
   0757 BC 45 03           2302 	cjne	r4,#0x45,00303$
   075A 02s08r1A           2303 	ljmp	00152$
   075D                    2304 00303$:
                           2305 ;	genCmpEq
                           2306 ;	gencjneshort
   075D BC 46 03           2307 	cjne	r4,#0x46,00304$
   0760 02s08r47           2308 	ljmp	00158$
   0763                    2309 00304$:
   0763 02s09rA9           2310 	ljmp	00215$
                           2311 ;	main.c:309: case 'A':
   0766                    2312 00128$:
                           2313 ;	main.c:310: if(i==0)
                           2314 ;	genIfx
   0766 EA                 2315 	mov	a,r2
   0767 4B                 2316 	orl	a,r3
                           2317 ;	genIfxJump
                           2318 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0768 70 0F              2319 	jnz	00132$
                           2320 ;	Peephole 300	removed redundant label 00305$
                           2321 ;	main.c:311: finalval += (10*16);
                           2322 ;	genAssign
   076A 90s00r1C           2323 	mov	dptr,#_fetch_data_finalval_1_1
   076D E0                 2324 	movx	a,@dptr
   076E FD                 2325 	mov	r5,a
                           2326 ;	genPlus
   076F 90s00r1C           2327 	mov	dptr,#_fetch_data_finalval_1_1
                           2328 ;     genPlusIncr
   0772 74 A0              2329 	mov	a,#0xA0
                           2330 ;	Peephole 236.a	used r5 instead of ar5
   0774 2D                 2331 	add	a,r5
   0775 F0                 2332 	movx	@dptr,a
   0776 02s09rA9           2333 	ljmp	00215$
   0779                    2334 00132$:
                           2335 ;	main.c:312: else if(i==1)
                           2336 ;	genCmpEq
                           2337 ;	gencjneshort
   0779 BA 01 05           2338 	cjne	r2,#0x01,00306$
   077C BB 00 02           2339 	cjne	r3,#0x00,00306$
   077F 80 03              2340 	sjmp	00307$
   0781                    2341 00306$:
   0781 02s09rA9           2342 	ljmp	00215$
   0784                    2343 00307$:
                           2344 ;	main.c:313: finalval += 10;
                           2345 ;	genAssign
   0784 90s00r1C           2346 	mov	dptr,#_fetch_data_finalval_1_1
   0787 E0                 2347 	movx	a,@dptr
   0788 FD                 2348 	mov	r5,a
                           2349 ;	genPlus
   0789 90s00r1C           2350 	mov	dptr,#_fetch_data_finalval_1_1
                           2351 ;     genPlusIncr
   078C 74 0A              2352 	mov	a,#0x0A
                           2353 ;	Peephole 236.a	used r5 instead of ar5
   078E 2D                 2354 	add	a,r5
   078F F0                 2355 	movx	@dptr,a
                           2356 ;	main.c:314: break;
   0790 02s09rA9           2357 	ljmp	00215$
                           2358 ;	main.c:315: case 'B':
   0793                    2359 00134$:
                           2360 ;	main.c:316: if(i==0)
                           2361 ;	genIfx
   0793 EA                 2362 	mov	a,r2
   0794 4B                 2363 	orl	a,r3
                           2364 ;	genIfxJump
                           2365 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0795 70 0F              2366 	jnz	00138$
                           2367 ;	Peephole 300	removed redundant label 00308$
                           2368 ;	main.c:317: finalval += (11*16);
                           2369 ;	genAssign
   0797 90s00r1C           2370 	mov	dptr,#_fetch_data_finalval_1_1
   079A E0                 2371 	movx	a,@dptr
   079B FD                 2372 	mov	r5,a
                           2373 ;	genPlus
   079C 90s00r1C           2374 	mov	dptr,#_fetch_data_finalval_1_1
                           2375 ;     genPlusIncr
   079F 74 B0              2376 	mov	a,#0xB0
                           2377 ;	Peephole 236.a	used r5 instead of ar5
   07A1 2D                 2378 	add	a,r5
   07A2 F0                 2379 	movx	@dptr,a
   07A3 02s09rA9           2380 	ljmp	00215$
   07A6                    2381 00138$:
                           2382 ;	main.c:318: else if(i==1)
                           2383 ;	genCmpEq
                           2384 ;	gencjneshort
   07A6 BA 01 05           2385 	cjne	r2,#0x01,00309$
   07A9 BB 00 02           2386 	cjne	r3,#0x00,00309$
   07AC 80 03              2387 	sjmp	00310$
   07AE                    2388 00309$:
   07AE 02s09rA9           2389 	ljmp	00215$
   07B1                    2390 00310$:
                           2391 ;	main.c:319: finalval += 11;
                           2392 ;	genAssign
   07B1 90s00r1C           2393 	mov	dptr,#_fetch_data_finalval_1_1
   07B4 E0                 2394 	movx	a,@dptr
   07B5 FD                 2395 	mov	r5,a
                           2396 ;	genPlus
   07B6 90s00r1C           2397 	mov	dptr,#_fetch_data_finalval_1_1
                           2398 ;     genPlusIncr
   07B9 74 0B              2399 	mov	a,#0x0B
                           2400 ;	Peephole 236.a	used r5 instead of ar5
   07BB 2D                 2401 	add	a,r5
   07BC F0                 2402 	movx	@dptr,a
                           2403 ;	main.c:320: break;
   07BD 02s09rA9           2404 	ljmp	00215$
                           2405 ;	main.c:321: case 'C':
   07C0                    2406 00140$:
                           2407 ;	main.c:322: if(i==0)
                           2408 ;	genIfx
   07C0 EA                 2409 	mov	a,r2
   07C1 4B                 2410 	orl	a,r3
                           2411 ;	genIfxJump
                           2412 ;	Peephole 108.b	removed ljmp by inverse jump logic
   07C2 70 0F              2413 	jnz	00144$
                           2414 ;	Peephole 300	removed redundant label 00311$
                           2415 ;	main.c:323: finalval += (12*16);
                           2416 ;	genAssign
   07C4 90s00r1C           2417 	mov	dptr,#_fetch_data_finalval_1_1
   07C7 E0                 2418 	movx	a,@dptr
   07C8 FD                 2419 	mov	r5,a
                           2420 ;	genPlus
   07C9 90s00r1C           2421 	mov	dptr,#_fetch_data_finalval_1_1
                           2422 ;     genPlusIncr
   07CC 74 C0              2423 	mov	a,#0xC0
                           2424 ;	Peephole 236.a	used r5 instead of ar5
   07CE 2D                 2425 	add	a,r5
   07CF F0                 2426 	movx	@dptr,a
   07D0 02s09rA9           2427 	ljmp	00215$
   07D3                    2428 00144$:
                           2429 ;	main.c:324: else if(i==1)
                           2430 ;	genCmpEq
                           2431 ;	gencjneshort
   07D3 BA 01 05           2432 	cjne	r2,#0x01,00312$
   07D6 BB 00 02           2433 	cjne	r3,#0x00,00312$
   07D9 80 03              2434 	sjmp	00313$
   07DB                    2435 00312$:
   07DB 02s09rA9           2436 	ljmp	00215$
   07DE                    2437 00313$:
                           2438 ;	main.c:325: finalval += 12;
                           2439 ;	genAssign
   07DE 90s00r1C           2440 	mov	dptr,#_fetch_data_finalval_1_1
   07E1 E0                 2441 	movx	a,@dptr
   07E2 FD                 2442 	mov	r5,a
                           2443 ;	genPlus
   07E3 90s00r1C           2444 	mov	dptr,#_fetch_data_finalval_1_1
                           2445 ;     genPlusIncr
   07E6 74 0C              2446 	mov	a,#0x0C
                           2447 ;	Peephole 236.a	used r5 instead of ar5
   07E8 2D                 2448 	add	a,r5
   07E9 F0                 2449 	movx	@dptr,a
                           2450 ;	main.c:326: break;
   07EA 02s09rA9           2451 	ljmp	00215$
                           2452 ;	main.c:327: case 'D':
   07ED                    2453 00146$:
                           2454 ;	main.c:328: if(i==0)
                           2455 ;	genIfx
   07ED EA                 2456 	mov	a,r2
   07EE 4B                 2457 	orl	a,r3
                           2458 ;	genIfxJump
                           2459 ;	Peephole 108.b	removed ljmp by inverse jump logic
   07EF 70 0F              2460 	jnz	00150$
                           2461 ;	Peephole 300	removed redundant label 00314$
                           2462 ;	main.c:329: finalval += (13*16);
                           2463 ;	genAssign
   07F1 90s00r1C           2464 	mov	dptr,#_fetch_data_finalval_1_1
   07F4 E0                 2465 	movx	a,@dptr
   07F5 FD                 2466 	mov	r5,a
                           2467 ;	genPlus
   07F6 90s00r1C           2468 	mov	dptr,#_fetch_data_finalval_1_1
                           2469 ;     genPlusIncr
   07F9 74 D0              2470 	mov	a,#0xD0
                           2471 ;	Peephole 236.a	used r5 instead of ar5
   07FB 2D                 2472 	add	a,r5
   07FC F0                 2473 	movx	@dptr,a
   07FD 02s09rA9           2474 	ljmp	00215$
   0800                    2475 00150$:
                           2476 ;	main.c:330: else if(i==1)
                           2477 ;	genCmpEq
                           2478 ;	gencjneshort
   0800 BA 01 05           2479 	cjne	r2,#0x01,00315$
   0803 BB 00 02           2480 	cjne	r3,#0x00,00315$
   0806 80 03              2481 	sjmp	00316$
   0808                    2482 00315$:
   0808 02s09rA9           2483 	ljmp	00215$
   080B                    2484 00316$:
                           2485 ;	main.c:331: finalval += 13;
                           2486 ;	genAssign
   080B 90s00r1C           2487 	mov	dptr,#_fetch_data_finalval_1_1
   080E E0                 2488 	movx	a,@dptr
   080F FD                 2489 	mov	r5,a
                           2490 ;	genPlus
   0810 90s00r1C           2491 	mov	dptr,#_fetch_data_finalval_1_1
                           2492 ;     genPlusIncr
   0813 74 0D              2493 	mov	a,#0x0D
                           2494 ;	Peephole 236.a	used r5 instead of ar5
   0815 2D                 2495 	add	a,r5
   0816 F0                 2496 	movx	@dptr,a
                           2497 ;	main.c:332: break;
   0817 02s09rA9           2498 	ljmp	00215$
                           2499 ;	main.c:333: case 'E':
   081A                    2500 00152$:
                           2501 ;	main.c:334: if(i==0)
                           2502 ;	genIfx
   081A EA                 2503 	mov	a,r2
   081B 4B                 2504 	orl	a,r3
                           2505 ;	genIfxJump
                           2506 ;	Peephole 108.b	removed ljmp by inverse jump logic
   081C 70 0F              2507 	jnz	00156$
                           2508 ;	Peephole 300	removed redundant label 00317$
                           2509 ;	main.c:335: finalval += (14*16);
                           2510 ;	genAssign
   081E 90s00r1C           2511 	mov	dptr,#_fetch_data_finalval_1_1
   0821 E0                 2512 	movx	a,@dptr
   0822 FD                 2513 	mov	r5,a
                           2514 ;	genPlus
   0823 90s00r1C           2515 	mov	dptr,#_fetch_data_finalval_1_1
                           2516 ;     genPlusIncr
   0826 74 E0              2517 	mov	a,#0xE0
                           2518 ;	Peephole 236.a	used r5 instead of ar5
   0828 2D                 2519 	add	a,r5
   0829 F0                 2520 	movx	@dptr,a
   082A 02s09rA9           2521 	ljmp	00215$
   082D                    2522 00156$:
                           2523 ;	main.c:336: else if(i==1)
                           2524 ;	genCmpEq
                           2525 ;	gencjneshort
   082D BA 01 05           2526 	cjne	r2,#0x01,00318$
   0830 BB 00 02           2527 	cjne	r3,#0x00,00318$
   0833 80 03              2528 	sjmp	00319$
   0835                    2529 00318$:
   0835 02s09rA9           2530 	ljmp	00215$
   0838                    2531 00319$:
                           2532 ;	main.c:337: finalval += 14;
                           2533 ;	genAssign
   0838 90s00r1C           2534 	mov	dptr,#_fetch_data_finalval_1_1
   083B E0                 2535 	movx	a,@dptr
   083C FD                 2536 	mov	r5,a
                           2537 ;	genPlus
   083D 90s00r1C           2538 	mov	dptr,#_fetch_data_finalval_1_1
                           2539 ;     genPlusIncr
   0840 74 0E              2540 	mov	a,#0x0E
                           2541 ;	Peephole 236.a	used r5 instead of ar5
   0842 2D                 2542 	add	a,r5
   0843 F0                 2543 	movx	@dptr,a
                           2544 ;	main.c:338: break;
   0844 02s09rA9           2545 	ljmp	00215$
                           2546 ;	main.c:339: case 'F':
   0847                    2547 00158$:
                           2548 ;	main.c:340: if(i==0)
                           2549 ;	genIfx
   0847 EA                 2550 	mov	a,r2
   0848 4B                 2551 	orl	a,r3
                           2552 ;	genIfxJump
                           2553 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0849 70 0F              2554 	jnz	00162$
                           2555 ;	Peephole 300	removed redundant label 00320$
                           2556 ;	main.c:341: finalval += (15*16);
                           2557 ;	genAssign
   084B 90s00r1C           2558 	mov	dptr,#_fetch_data_finalval_1_1
   084E E0                 2559 	movx	a,@dptr
   084F FD                 2560 	mov	r5,a
                           2561 ;	genPlus
   0850 90s00r1C           2562 	mov	dptr,#_fetch_data_finalval_1_1
                           2563 ;     genPlusIncr
   0853 74 F0              2564 	mov	a,#0xF0
                           2565 ;	Peephole 236.a	used r5 instead of ar5
   0855 2D                 2566 	add	a,r5
   0856 F0                 2567 	movx	@dptr,a
   0857 02s09rA9           2568 	ljmp	00215$
   085A                    2569 00162$:
                           2570 ;	main.c:342: else if(i==1)
                           2571 ;	genCmpEq
                           2572 ;	gencjneshort
   085A BA 01 05           2573 	cjne	r2,#0x01,00321$
   085D BB 00 02           2574 	cjne	r3,#0x00,00321$
   0860 80 03              2575 	sjmp	00322$
   0862                    2576 00321$:
   0862 02s09rA9           2577 	ljmp	00215$
   0865                    2578 00322$:
                           2579 ;	main.c:343: finalval += 15;
                           2580 ;	genAssign
   0865 90s00r1C           2581 	mov	dptr,#_fetch_data_finalval_1_1
   0868 E0                 2582 	movx	a,@dptr
   0869 FD                 2583 	mov	r5,a
                           2584 ;	genPlus
   086A 90s00r1C           2585 	mov	dptr,#_fetch_data_finalval_1_1
                           2586 ;     genPlusIncr
   086D 74 0F              2587 	mov	a,#0x0F
                           2588 ;	Peephole 236.a	used r5 instead of ar5
   086F 2D                 2589 	add	a,r5
   0870 F0                 2590 	movx	@dptr,a
                           2591 ;	main.c:345: }
   0871 02s09rA9           2592 	ljmp	00215$
   0874                    2593 00206$:
                           2594 ;	main.c:348: else if((bufsiz1[i] >= 'a') && (bufsiz1[i] <= 'f'))
                           2595 ;	genCmpLt
                           2596 ;	genCmp
   0874 C3                 2597 	clr	c
   0875 EC                 2598 	mov	a,r4
   0876 64 80              2599 	xrl	a,#0x80
   0878 94 E1              2600 	subb	a,#0xe1
                           2601 ;	genIfxJump
   087A 50 03              2602 	jnc	00323$
   087C 02s09rA9           2603 	ljmp	00215$
   087F                    2604 00323$:
                           2605 ;	genCmpGt
                           2606 ;	genCmp
   087F C3                 2607 	clr	c
                           2608 ;	Peephole 159	avoided xrl during execution
   0880 74 E6              2609 	mov	a,#(0x66 ^ 0x80)
   0882 8C F0              2610 	mov	b,r4
   0884 63 F0 80           2611 	xrl	b,#0x80
   0887 95 F0              2612 	subb	a,b
                           2613 ;	genIfxJump
   0889 50 03              2614 	jnc	00324$
   088B 02s09rA9           2615 	ljmp	00215$
   088E                    2616 00324$:
                           2617 ;	main.c:350: switch(bufsiz1[i])
                           2618 ;	genCmpEq
                           2619 ;	gencjneshort
   088E BC 61 02           2620 	cjne	r4,#0x61,00325$
                           2621 ;	Peephole 112.b	changed ljmp to sjmp
   0891 80 1F              2622 	sjmp	00165$
   0893                    2623 00325$:
                           2624 ;	genCmpEq
                           2625 ;	gencjneshort
   0893 BC 62 02           2626 	cjne	r4,#0x62,00326$
                           2627 ;	Peephole 112.b	changed ljmp to sjmp
   0896 80 47              2628 	sjmp	00171$
   0898                    2629 00326$:
                           2630 ;	genCmpEq
                           2631 ;	gencjneshort
   0898 BC 63 02           2632 	cjne	r4,#0x63,00327$
                           2633 ;	Peephole 112.b	changed ljmp to sjmp
   089B 80 6F              2634 	sjmp	00177$
   089D                    2635 00327$:
                           2636 ;	genCmpEq
                           2637 ;	gencjneshort
   089D BC 64 03           2638 	cjne	r4,#0x64,00328$
   08A0 02s09r39           2639 	ljmp	00183$
   08A3                    2640 00328$:
                           2641 ;	genCmpEq
                           2642 ;	gencjneshort
   08A3 BC 65 03           2643 	cjne	r4,#0x65,00329$
   08A6 02s09r5F           2644 	ljmp	00189$
   08A9                    2645 00329$:
                           2646 ;	genCmpEq
                           2647 ;	gencjneshort
   08A9 BC 66 03           2648 	cjne	r4,#0x66,00330$
   08AC 02s09r85           2649 	ljmp	00195$
   08AF                    2650 00330$:
   08AF 02s09rA9           2651 	ljmp	00215$
                           2652 ;	main.c:352: case 'a':
   08B2                    2653 00165$:
                           2654 ;	main.c:353: if(i==0)
                           2655 ;	genIfx
   08B2 EA                 2656 	mov	a,r2
   08B3 4B                 2657 	orl	a,r3
                           2658 ;	genIfxJump
                           2659 ;	Peephole 108.b	removed ljmp by inverse jump logic
   08B4 70 0F              2660 	jnz	00169$
                           2661 ;	Peephole 300	removed redundant label 00331$
                           2662 ;	main.c:354: finalval += (10*16);
                           2663 ;	genAssign
   08B6 90s00r1C           2664 	mov	dptr,#_fetch_data_finalval_1_1
   08B9 E0                 2665 	movx	a,@dptr
   08BA FC                 2666 	mov	r4,a
                           2667 ;	genPlus
   08BB 90s00r1C           2668 	mov	dptr,#_fetch_data_finalval_1_1
                           2669 ;     genPlusIncr
   08BE 74 A0              2670 	mov	a,#0xA0
                           2671 ;	Peephole 236.a	used r4 instead of ar4
   08C0 2C                 2672 	add	a,r4
   08C1 F0                 2673 	movx	@dptr,a
   08C2 02s09rA9           2674 	ljmp	00215$
   08C5                    2675 00169$:
                           2676 ;	main.c:355: else if(i==1)
                           2677 ;	genCmpEq
                           2678 ;	gencjneshort
   08C5 BA 01 05           2679 	cjne	r2,#0x01,00332$
   08C8 BB 00 02           2680 	cjne	r3,#0x00,00332$
   08CB 80 03              2681 	sjmp	00333$
   08CD                    2682 00332$:
   08CD 02s09rA9           2683 	ljmp	00215$
   08D0                    2684 00333$:
                           2685 ;	main.c:356: finalval += 10;
                           2686 ;	genAssign
   08D0 90s00r1C           2687 	mov	dptr,#_fetch_data_finalval_1_1
   08D3 E0                 2688 	movx	a,@dptr
   08D4 FC                 2689 	mov	r4,a
                           2690 ;	genPlus
   08D5 90s00r1C           2691 	mov	dptr,#_fetch_data_finalval_1_1
                           2692 ;     genPlusIncr
   08D8 74 0A              2693 	mov	a,#0x0A
                           2694 ;	Peephole 236.a	used r4 instead of ar4
   08DA 2C                 2695 	add	a,r4
   08DB F0                 2696 	movx	@dptr,a
                           2697 ;	main.c:357: break;
   08DC 02s09rA9           2698 	ljmp	00215$
                           2699 ;	main.c:358: case 'b':
   08DF                    2700 00171$:
                           2701 ;	main.c:359: if(i==0)
                           2702 ;	genIfx
   08DF EA                 2703 	mov	a,r2
   08E0 4B                 2704 	orl	a,r3
                           2705 ;	genIfxJump
                           2706 ;	Peephole 108.b	removed ljmp by inverse jump logic
   08E1 70 0F              2707 	jnz	00175$
                           2708 ;	Peephole 300	removed redundant label 00334$
                           2709 ;	main.c:360: finalval += (11*16);
                           2710 ;	genAssign
   08E3 90s00r1C           2711 	mov	dptr,#_fetch_data_finalval_1_1
   08E6 E0                 2712 	movx	a,@dptr
   08E7 FC                 2713 	mov	r4,a
                           2714 ;	genPlus
   08E8 90s00r1C           2715 	mov	dptr,#_fetch_data_finalval_1_1
                           2716 ;     genPlusIncr
   08EB 74 B0              2717 	mov	a,#0xB0
                           2718 ;	Peephole 236.a	used r4 instead of ar4
   08ED 2C                 2719 	add	a,r4
   08EE F0                 2720 	movx	@dptr,a
   08EF 02s09rA9           2721 	ljmp	00215$
   08F2                    2722 00175$:
                           2723 ;	main.c:361: else if(i==1)
                           2724 ;	genCmpEq
                           2725 ;	gencjneshort
   08F2 BA 01 05           2726 	cjne	r2,#0x01,00335$
   08F5 BB 00 02           2727 	cjne	r3,#0x00,00335$
   08F8 80 03              2728 	sjmp	00336$
   08FA                    2729 00335$:
   08FA 02s09rA9           2730 	ljmp	00215$
   08FD                    2731 00336$:
                           2732 ;	main.c:362: finalval += 11;
                           2733 ;	genAssign
   08FD 90s00r1C           2734 	mov	dptr,#_fetch_data_finalval_1_1
   0900 E0                 2735 	movx	a,@dptr
   0901 FC                 2736 	mov	r4,a
                           2737 ;	genPlus
   0902 90s00r1C           2738 	mov	dptr,#_fetch_data_finalval_1_1
                           2739 ;     genPlusIncr
   0905 74 0B              2740 	mov	a,#0x0B
                           2741 ;	Peephole 236.a	used r4 instead of ar4
   0907 2C                 2742 	add	a,r4
   0908 F0                 2743 	movx	@dptr,a
                           2744 ;	main.c:363: break;
   0909 02s09rA9           2745 	ljmp	00215$
                           2746 ;	main.c:364: case 'c':
   090C                    2747 00177$:
                           2748 ;	main.c:365: if(i==0)
                           2749 ;	genIfx
   090C EA                 2750 	mov	a,r2
   090D 4B                 2751 	orl	a,r3
                           2752 ;	genIfxJump
                           2753 ;	Peephole 108.b	removed ljmp by inverse jump logic
   090E 70 0F              2754 	jnz	00181$
                           2755 ;	Peephole 300	removed redundant label 00337$
                           2756 ;	main.c:366: finalval += (12*16);
                           2757 ;	genAssign
   0910 90s00r1C           2758 	mov	dptr,#_fetch_data_finalval_1_1
   0913 E0                 2759 	movx	a,@dptr
   0914 FC                 2760 	mov	r4,a
                           2761 ;	genPlus
   0915 90s00r1C           2762 	mov	dptr,#_fetch_data_finalval_1_1
                           2763 ;     genPlusIncr
   0918 74 C0              2764 	mov	a,#0xC0
                           2765 ;	Peephole 236.a	used r4 instead of ar4
   091A 2C                 2766 	add	a,r4
   091B F0                 2767 	movx	@dptr,a
   091C 02s09rA9           2768 	ljmp	00215$
   091F                    2769 00181$:
                           2770 ;	main.c:367: else if(i==1)
                           2771 ;	genCmpEq
                           2772 ;	gencjneshort
   091F BA 01 05           2773 	cjne	r2,#0x01,00338$
   0922 BB 00 02           2774 	cjne	r3,#0x00,00338$
   0925 80 03              2775 	sjmp	00339$
   0927                    2776 00338$:
   0927 02s09rA9           2777 	ljmp	00215$
   092A                    2778 00339$:
                           2779 ;	main.c:368: finalval += 12;
                           2780 ;	genAssign
   092A 90s00r1C           2781 	mov	dptr,#_fetch_data_finalval_1_1
   092D E0                 2782 	movx	a,@dptr
   092E FC                 2783 	mov	r4,a
                           2784 ;	genPlus
   092F 90s00r1C           2785 	mov	dptr,#_fetch_data_finalval_1_1
                           2786 ;     genPlusIncr
   0932 74 0C              2787 	mov	a,#0x0C
                           2788 ;	Peephole 236.a	used r4 instead of ar4
   0934 2C                 2789 	add	a,r4
   0935 F0                 2790 	movx	@dptr,a
                           2791 ;	main.c:369: break;
   0936 02s09rA9           2792 	ljmp	00215$
                           2793 ;	main.c:370: case 'd':
   0939                    2794 00183$:
                           2795 ;	main.c:371: if(i==0)
                           2796 ;	genIfx
   0939 EA                 2797 	mov	a,r2
   093A 4B                 2798 	orl	a,r3
                           2799 ;	genIfxJump
                           2800 ;	Peephole 108.b	removed ljmp by inverse jump logic
   093B 70 0E              2801 	jnz	00187$
                           2802 ;	Peephole 300	removed redundant label 00340$
                           2803 ;	main.c:372: finalval += (13*16);
                           2804 ;	genAssign
   093D 90s00r1C           2805 	mov	dptr,#_fetch_data_finalval_1_1
   0940 E0                 2806 	movx	a,@dptr
   0941 FC                 2807 	mov	r4,a
                           2808 ;	genPlus
   0942 90s00r1C           2809 	mov	dptr,#_fetch_data_finalval_1_1
                           2810 ;     genPlusIncr
   0945 74 D0              2811 	mov	a,#0xD0
                           2812 ;	Peephole 236.a	used r4 instead of ar4
   0947 2C                 2813 	add	a,r4
   0948 F0                 2814 	movx	@dptr,a
                           2815 ;	Peephole 112.b	changed ljmp to sjmp
   0949 80 5E              2816 	sjmp	00215$
   094B                    2817 00187$:
                           2818 ;	main.c:373: else if(i==1)
                           2819 ;	genCmpEq
                           2820 ;	gencjneshort
                           2821 ;	Peephole 112.b	changed ljmp to sjmp
                           2822 ;	Peephole 198.a	optimized misc jump sequence
   094B BA 01 5B           2823 	cjne	r2,#0x01,00215$
   094E BB 00 58           2824 	cjne	r3,#0x00,00215$
                           2825 ;	Peephole 200.b	removed redundant sjmp
                           2826 ;	Peephole 300	removed redundant label 00341$
                           2827 ;	Peephole 300	removed redundant label 00342$
                           2828 ;	main.c:374: finalval += 13;
                           2829 ;	genAssign
   0951 90s00r1C           2830 	mov	dptr,#_fetch_data_finalval_1_1
   0954 E0                 2831 	movx	a,@dptr
   0955 FC                 2832 	mov	r4,a
                           2833 ;	genPlus
   0956 90s00r1C           2834 	mov	dptr,#_fetch_data_finalval_1_1
                           2835 ;     genPlusIncr
   0959 74 0D              2836 	mov	a,#0x0D
                           2837 ;	Peephole 236.a	used r4 instead of ar4
   095B 2C                 2838 	add	a,r4
   095C F0                 2839 	movx	@dptr,a
                           2840 ;	main.c:375: break;
                           2841 ;	main.c:376: case 'e':
                           2842 ;	Peephole 112.b	changed ljmp to sjmp
   095D 80 4A              2843 	sjmp	00215$
   095F                    2844 00189$:
                           2845 ;	main.c:377: if(i==0)
                           2846 ;	genIfx
   095F EA                 2847 	mov	a,r2
   0960 4B                 2848 	orl	a,r3
                           2849 ;	genIfxJump
                           2850 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0961 70 0E              2851 	jnz	00193$
                           2852 ;	Peephole 300	removed redundant label 00343$
                           2853 ;	main.c:378: finalval += (14*16);
                           2854 ;	genAssign
   0963 90s00r1C           2855 	mov	dptr,#_fetch_data_finalval_1_1
   0966 E0                 2856 	movx	a,@dptr
   0967 FC                 2857 	mov	r4,a
                           2858 ;	genPlus
   0968 90s00r1C           2859 	mov	dptr,#_fetch_data_finalval_1_1
                           2860 ;     genPlusIncr
   096B 74 E0              2861 	mov	a,#0xE0
                           2862 ;	Peephole 236.a	used r4 instead of ar4
   096D 2C                 2863 	add	a,r4
   096E F0                 2864 	movx	@dptr,a
                           2865 ;	Peephole 112.b	changed ljmp to sjmp
   096F 80 38              2866 	sjmp	00215$
   0971                    2867 00193$:
                           2868 ;	main.c:379: else if(i==1)
                           2869 ;	genCmpEq
                           2870 ;	gencjneshort
                           2871 ;	Peephole 112.b	changed ljmp to sjmp
                           2872 ;	Peephole 198.a	optimized misc jump sequence
   0971 BA 01 35           2873 	cjne	r2,#0x01,00215$
   0974 BB 00 32           2874 	cjne	r3,#0x00,00215$
                           2875 ;	Peephole 200.b	removed redundant sjmp
                           2876 ;	Peephole 300	removed redundant label 00344$
                           2877 ;	Peephole 300	removed redundant label 00345$
                           2878 ;	main.c:380: finalval += 14;
                           2879 ;	genAssign
   0977 90s00r1C           2880 	mov	dptr,#_fetch_data_finalval_1_1
   097A E0                 2881 	movx	a,@dptr
   097B FC                 2882 	mov	r4,a
                           2883 ;	genPlus
   097C 90s00r1C           2884 	mov	dptr,#_fetch_data_finalval_1_1
                           2885 ;     genPlusIncr
   097F 74 0E              2886 	mov	a,#0x0E
                           2887 ;	Peephole 236.a	used r4 instead of ar4
   0981 2C                 2888 	add	a,r4
   0982 F0                 2889 	movx	@dptr,a
                           2890 ;	main.c:381: break;
                           2891 ;	main.c:382: case 'f':
                           2892 ;	Peephole 112.b	changed ljmp to sjmp
   0983 80 24              2893 	sjmp	00215$
   0985                    2894 00195$:
                           2895 ;	main.c:383: if(i==0)
                           2896 ;	genIfx
   0985 EA                 2897 	mov	a,r2
   0986 4B                 2898 	orl	a,r3
                           2899 ;	genIfxJump
                           2900 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0987 70 0E              2901 	jnz	00199$
                           2902 ;	Peephole 300	removed redundant label 00346$
                           2903 ;	main.c:384: finalval += (15*16);
                           2904 ;	genAssign
   0989 90s00r1C           2905 	mov	dptr,#_fetch_data_finalval_1_1
   098C E0                 2906 	movx	a,@dptr
   098D FC                 2907 	mov	r4,a
                           2908 ;	genPlus
   098E 90s00r1C           2909 	mov	dptr,#_fetch_data_finalval_1_1
                           2910 ;     genPlusIncr
   0991 74 F0              2911 	mov	a,#0xF0
                           2912 ;	Peephole 236.a	used r4 instead of ar4
   0993 2C                 2913 	add	a,r4
   0994 F0                 2914 	movx	@dptr,a
                           2915 ;	Peephole 112.b	changed ljmp to sjmp
   0995 80 12              2916 	sjmp	00215$
   0997                    2917 00199$:
                           2918 ;	main.c:385: else if(i==1)
                           2919 ;	genCmpEq
                           2920 ;	gencjneshort
                           2921 ;	Peephole 112.b	changed ljmp to sjmp
                           2922 ;	Peephole 198.a	optimized misc jump sequence
   0997 BA 01 0F           2923 	cjne	r2,#0x01,00215$
   099A BB 00 0C           2924 	cjne	r3,#0x00,00215$
                           2925 ;	Peephole 200.b	removed redundant sjmp
                           2926 ;	Peephole 300	removed redundant label 00347$
                           2927 ;	Peephole 300	removed redundant label 00348$
                           2928 ;	main.c:386: finalval += 15;
                           2929 ;	genAssign
   099D 90s00r1C           2930 	mov	dptr,#_fetch_data_finalval_1_1
   09A0 E0                 2931 	movx	a,@dptr
   09A1 FC                 2932 	mov	r4,a
                           2933 ;	genPlus
   09A2 90s00r1C           2934 	mov	dptr,#_fetch_data_finalval_1_1
                           2935 ;     genPlusIncr
   09A5 74 0F              2936 	mov	a,#0x0F
                           2937 ;	Peephole 236.a	used r4 instead of ar4
   09A7 2C                 2938 	add	a,r4
   09A8 F0                 2939 	movx	@dptr,a
                           2940 ;	main.c:388: }
   09A9                    2941 00215$:
                           2942 ;	main.c:287: for(i=0;i<2;i++)
                           2943 ;	genPlus
                           2944 ;     genPlusIncr
   09A9 0A                 2945 	inc	r2
   09AA BA 00 01           2946 	cjne	r2,#0x00,00349$
   09AD 0B                 2947 	inc	r3
   09AE                    2948 00349$:
   09AE 02s06rAB           2949 	ljmp	00213$
   09B1                    2950 00216$:
                           2951 ;	main.c:393: return finalval;                    // return databyte
                           2952 ;	genAssign
   09B1 90s00r1C           2953 	mov	dptr,#_fetch_data_finalval_1_1
   09B4 E0                 2954 	movx	a,@dptr
                           2955 ;	genRet
                           2956 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   09B5 F5 82              2957 	mov	dpl,a
                           2958 ;	Peephole 300	removed redundant label 00217$
   09B7 22                 2959 	ret
                           2960 	.area CSEG    (CODE)
                           2961 	.area CONST   (CODE)
   0000                    2962 __str_0:
   0000 0A                 2963 	.db 0x0A
   0001 0D                 2964 	.db 0x0D
   0002 2D 2D 2D 2D 2D 2D  2965 	.ascii "----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   003C 2D 2D              2966 	.ascii "--"
   003E 0A                 2967 	.db 0x0A
   003F 0D                 2968 	.db 0x0D
   0040 00                 2969 	.db 0x00
   0041                    2970 __str_1:
   0041 2D 2D 2D 2D 2D 2D  2971 	.ascii "------------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   007D 0A                 2972 	.db 0x0A
   007E 0D                 2973 	.db 0x0D
   007F 00                 2974 	.db 0x00
   0080                    2975 __str_2:
   0080 2D 2D 2D 2D 2D 2D  2976 	.ascii "---------------MEMORY CARD READER APPLICATION---------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 4D 45 4D
        4F 52 59 20 43 41
        52 44 20 52 45 41
        44 45 52 20 41 50
        50 4C 49 43 41 54
        49 4F 4E 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   00BC 0A                 2977 	.db 0x0A
   00BD 0D                 2978 	.db 0x0D
   00BE 00                 2979 	.db 0x00
   00BF                    2980 __str_3:
   00BF 0A                 2981 	.db 0x0A
   00C0 0D                 2982 	.db 0x0D
   00C1 53 65 6C 65 63 74  2983 	.ascii "Select an option:"
        20 61 6E 20 6F 70
        74 69 6F 6E 3A
   00D2 0A                 2984 	.db 0x0A
   00D3 0D                 2985 	.db 0x0D
   00D4 00                 2986 	.db 0x00
   00D5                    2987 __str_4:
   00D5 0A                 2988 	.db 0x0A
   00D6 0D                 2989 	.db 0x0D
   00D7 31 20 2D 20 4D 65  2990 	.ascii "1 - Memory Card Read"
        6D 6F 72 79 20 43
        61 72 64 20 52 65
        61 64
   00EB 0A                 2991 	.db 0x0A
   00EC 0D                 2992 	.db 0x0D
   00ED 00                 2993 	.db 0x00
   00EE                    2994 __str_5:
   00EE 0A                 2995 	.db 0x0A
   00EF 0D                 2996 	.db 0x0D
   00F0 32 20 2D 20 53 65  2997 	.ascii "2 - Sector Fill - Memory Card Write"
        63 74 6F 72 20 46
        69 6C 6C 20 2D 20
        4D 65 6D 6F 72 79
        20 43 61 72 64 20
        57 72 69 74 65
   0113 0A                 2998 	.db 0x0A
   0114 0D                 2999 	.db 0x0D
   0115 00                 3000 	.db 0x00
   0116                    3001 __str_6:
   0116 0A                 3002 	.db 0x0A
   0117 0D                 3003 	.db 0x0D
   0118 33 20 2D 20 48 65  3004 	.ascii "3 - Hex Dump - Multiple sector read"
        78 20 44 75 6D 70
        20 2D 20 4D 75 6C
        74 69 70 6C 65 20
        73 65 63 74 6F 72
        20 72 65 61 64
   013B 0A                 3005 	.db 0x0A
   013C 0D                 3006 	.db 0x0D
   013D 00                 3007 	.db 0x00
   013E                    3008 __str_7:
   013E 0A                 3009 	.db 0x0A
   013F 0D                 3010 	.db 0x0D
   0140 34 20 2D 20 46 69  3011 	.ascii "4 - File Read"
        6C 65 20 52 65 61
        64
   014D 0A                 3012 	.db 0x0A
   014E 0D                 3013 	.db 0x0D
   014F 00                 3014 	.db 0x00
   0150                    3015 __str_8:
   0150 0A                 3016 	.db 0x0A
   0151 0D                 3017 	.db 0x0D
   0152 35 20 2D 20 43 6F  3018 	.ascii "5 - Copy data bytes between sectors"
        70 79 20 64 61 74
        61 20 62 79 74 65
        73 20 62 65 74 77
        65 65 6E 20 73 65
        63 74 6F 72 73
   0175 0A                 3019 	.db 0x0A
   0176 0D                 3020 	.db 0x0D
   0177 00                 3021 	.db 0x00
   0178                    3022 __str_9:
   0178 0A                 3023 	.db 0x0A
   0179 0D                 3024 	.db 0x0D
   017A 36 20 2D 20 46 69  3025 	.ascii "6 - File information menu"
        6C 65 20 69 6E 66
        6F 72 6D 61 74 69
        6F 6E 20 6D 65 6E
        75
   0193 0A                 3026 	.db 0x0A
   0194 0D                 3027 	.db 0x0D
   0195 00                 3028 	.db 0x00
   0196                    3029 __str_10:
   0196 0A                 3030 	.db 0x0A
   0197 0D                 3031 	.db 0x0D
   0198 45 6E 74 65 72 65  3032 	.ascii "Entered Memory Read option"
        64 20 4D 65 6D 6F
        72 79 20 52 65 61
        64 20 6F 70 74 69
        6F 6E
   01B2 0A                 3033 	.db 0x0A
   01B3 0D                 3034 	.db 0x0D
   01B4 00                 3035 	.db 0x00
   01B5                    3036 __str_11:
   01B5 0A                 3037 	.db 0x0A
   01B6 0D                 3038 	.db 0x0D
   01B7 45 6E 74 65 72 20  3039 	.ascii "Enter sector address (4 bytes) to read from: "
        73 65 63 74 6F 72
        20 61 64 64 72 65
        73 73 20 28 34 20
        62 79 74 65 73 29
        20 74 6F 20 72 65
        61 64 20 66 72 6F
        6D 3A 20
   01E4 0A                 3040 	.db 0x0A
   01E5 0D                 3041 	.db 0x0D
   01E6 00                 3042 	.db 0x00
   01E7                    3043 __str_12:
   01E7 0A                 3044 	.db 0x0A
   01E8 0D                 3045 	.db 0x0D
   01E9 45 6E 74 65 72 65  3046 	.ascii "Entered Sector Fill "
        64 20 53 65 63 74
        6F 72 20 46 69 6C
        6C 20
   01FD 0A                 3047 	.db 0x0A
   01FE 0D                 3048 	.db 0x0D
   01FF 00                 3049 	.db 0x00
   0200                    3050 __str_13:
   0200 0A                 3051 	.db 0x0A
   0201 0D                 3052 	.db 0x0D
   0202 45 6E 74 65 72 20  3053 	.ascii "Enter sector address to be written to memory card: "
        73 65 63 74 6F 72
        20 61 64 64 72 65
        73 73 20 74 6F 20
        62 65 20 77 72 69
        74 74 65 6E 20 74
        6F 20 6D 65 6D 6F
        72 79 20 63 61 72
        64 3A 20
   0235 0A                 3054 	.db 0x0A
   0236 0D                 3055 	.db 0x0D
   0237 00                 3056 	.db 0x00
   0238                    3057 __str_14:
   0238 0A                 3058 	.db 0x0A
   0239 0D                 3059 	.db 0x0D
   023A 45 6E 74 65 72 20  3060 	.ascii "Enter data to be written to memory card: "
        64 61 74 61 20 74
        6F 20 62 65 20 77
        72 69 74 74 65 6E
        20 74 6F 20 6D 65
        6D 6F 72 79 20 63
        61 72 64 3A 20
   0263 0A                 3061 	.db 0x0A
   0264 0D                 3062 	.db 0x0D
   0265 00                 3063 	.db 0x00
   0266                    3064 __str_15:
   0266 0A                 3065 	.db 0x0A
   0267 0D                 3066 	.db 0x0D
   0268 57 72 69 74 69 6E  3067 	.ascii "Writing Data...."
        67 20 44 61 74 61
        2E 2E 2E 2E
   0278 00                 3068 	.db 0x00
   0279                    3069 __str_16:
   0279 0A                 3070 	.db 0x0A
   027A 0D                 3071 	.db 0x0D
   027B 57 72 69 74 65 20  3072 	.ascii "Write complete...."
        63 6F 6D 70 6C 65
        74 65 2E 2E 2E 2E
   028D 00                 3073 	.db 0x00
   028E                    3074 __str_17:
   028E 0A                 3075 	.db 0x0A
   028F 0D                 3076 	.db 0x0D
   0290 48 65 78 20 64 75  3077 	.ascii "Hex dump - Multiple sector read option"
        6D 70 20 2D 20 4D
        75 6C 74 69 70 6C
        65 20 73 65 63 74
        6F 72 20 72 65 61
        64 20 6F 70 74 69
        6F 6E
   02B6 0A                 3078 	.db 0x0A
   02B7 0D                 3079 	.db 0x0D
   02B8 00                 3080 	.db 0x00
   02B9                    3081 __str_18:
   02B9 0A                 3082 	.db 0x0A
   02BA 0D                 3083 	.db 0x0D
   02BB 45 6E 74 65 72 20  3084 	.ascii "Enter start sector address"
        73 74 61 72 74 20
        73 65 63 74 6F 72
        20 61 64 64 72 65
        73 73
   02D5 0A                 3085 	.db 0x0A
   02D6 0D                 3086 	.db 0x0D
   02D7 00                 3087 	.db 0x00
   02D8                    3088 __str_19:
   02D8 0A                 3089 	.db 0x0A
   02D9 0D                 3090 	.db 0x0D
   02DA 45 6E 74 65 72 20  3091 	.ascii "Enter end sector address"
        65 6E 64 20 73 65
        63 74 6F 72 20 61
        64 64 72 65 73 73
   02F2 0A                 3092 	.db 0x0A
   02F3 0D                 3093 	.db 0x0D
   02F4 00                 3094 	.db 0x00
   02F5                    3095 __str_20:
   02F5 0A                 3096 	.db 0x0A
   02F6 0D                 3097 	.db 0x0D
   02F7 45 6E 74 65 72 65  3098 	.ascii "Entered Memory copy option"
        64 20 4D 65 6D 6F
        72 79 20 63 6F 70
        79 20 6F 70 74 69
        6F 6E
   0311 0A                 3099 	.db 0x0A
   0312 0D                 3100 	.db 0x0D
   0313 00                 3101 	.db 0x00
   0314                    3102 __str_21:
   0314 0A                 3103 	.db 0x0A
   0315 0D                 3104 	.db 0x0D
   0316 45 6E 74 65 72 20  3105 	.ascii "Enter source sector address:"
        73 6F 75 72 63 65
        20 73 65 63 74 6F
        72 20 61 64 64 72
        65 73 73 3A
   0332 0A                 3106 	.db 0x0A
   0333 0D                 3107 	.db 0x0D
   0334 00                 3108 	.db 0x00
   0335                    3109 __str_22:
   0335 0A                 3110 	.db 0x0A
   0336 0D                 3111 	.db 0x0D
   0337 45 6E 74 65 72 20  3112 	.ascii "Enter destination sector address:"
        64 65 73 74 69 6E
        61 74 69 6F 6E 20
        73 65 63 74 6F 72
        20 61 64 64 72 65
        73 73 3A
   0358 0A                 3113 	.db 0x0A
   0359 0D                 3114 	.db 0x0D
   035A 00                 3115 	.db 0x00
   035B                    3116 __str_23:
   035B 0A                 3117 	.db 0x0A
   035C 0D                 3118 	.db 0x0D
   035D 43 6F 70 79 69 6E  3119 	.ascii "Copying data...:"
        67 20 64 61 74 61
        2E 2E 2E 3A
   036D 0A                 3120 	.db 0x0A
   036E 0D                 3121 	.db 0x0D
   036F 00                 3122 	.db 0x00
   0370                    3123 __str_24:
   0370 0A                 3124 	.db 0x0A
   0371 0D                 3125 	.db 0x0D
   0372 45 6E 74 65 72 65  3126 	.ascii "Entered File Read option"
        64 20 46 69 6C 65
        20 52 65 61 64 20
        6F 70 74 69 6F 6E
   038A 0A                 3127 	.db 0x0A
   038B 0D                 3128 	.db 0x0D
   038C 00                 3129 	.db 0x00
   038D                    3130 __str_25:
   038D 0A                 3131 	.db 0x0A
   038E 0D                 3132 	.db 0x0D
   038F 53 65 6C 65 63 74  3133 	.ascii "Select a file to read from SD Card:"
        20 61 20 66 69 6C
        65 20 74 6F 20 72
        65 61 64 20 66 72
        6F 6D 20 53 44 20
        43 61 72 64 3A
   03B2 0A                 3134 	.db 0x0A
   03B3 0D                 3135 	.db 0x0D
   03B4 00                 3136 	.db 0x00
   03B5                    3137 __str_26:
   03B5 31 20 2D 20 61 6E  3138 	.ascii "1 - aniket.txt"
        69 6B 65 74 2E 74
        78 74
   03C3 0A                 3139 	.db 0x0A
   03C4 0D                 3140 	.db 0x0D
   03C5 00                 3141 	.db 0x00
   03C6                    3142 __str_27:
   03C6 32 20 2D 20 4C 69  3143 	.ascii "2 - Links.txt"
        6E 6B 73 2E 74 78
        74
   03D3 0A                 3144 	.db 0x0A
   03D4 0D                 3145 	.db 0x0D
   03D5 00                 3146 	.db 0x00
   03D6                    3147 __str_28:
   03D6 33 20 2D 20 70 75  3148 	.ascii "3 - purdue.txt"
        72 64 75 65 2E 74
        78 74
   03E4 0A                 3149 	.db 0x0A
   03E5 0D                 3150 	.db 0x0D
   03E6 00                 3151 	.db 0x00
   03E7                    3152 __str_29:
   03E7 0A                 3153 	.db 0x0A
   03E8 0D                 3154 	.db 0x0D
   03E9 45 6E 74 65 72 65  3155 	.ascii "Entered File Information option"
        64 20 46 69 6C 65
        20 49 6E 66 6F 72
        6D 61 74 69 6F 6E
        20 6F 70 74 69 6F
        6E
   0408 0A                 3156 	.db 0x0A
   0409 0D                 3157 	.db 0x0D
   040A 00                 3158 	.db 0x00
   040B                    3159 __str_30:
   040B 4D 6F 64 65 20 66  3160 	.ascii "Mode fault"
        61 75 6C 74
   0415 0A                 3161 	.db 0x0A
   0416 0D                 3162 	.db 0x0D
   0417 00                 3163 	.db 0x00
   0418                    3164 __str_31:
   0418 4F 76 65 72 72 75  3165 	.ascii "Overrun tasking"
        6E 20 74 61 73 6B
        69 6E 67
   0427 0A                 3166 	.db 0x0A
   0428 0D                 3167 	.db 0x0D
   0429 00                 3168 	.db 0x00
   042A                    3169 __str_32:
   042A 0A                 3170 	.db 0x0A
   042B 0D                 3171 	.db 0x0D
   042C 50 6C 65 61 73 65  3172 	.ascii "Please enter hexadecimal input. Special characters are not"
        20 65 6E 74 65 72
        20 68 65 78 61 64
        65 63 69 6D 61 6C
        20 69 6E 70 75 74
        2E 20 53 70 65 63
        69 61 6C 20 63 68
        61 72 61 63 74 65
        72 73 20 61 72 65
        20 6E 6F 74
   0466 20 61 6C 6C 6F 77  3173 	.ascii " allowed."
        65 64 2E
   046F 0A                 3174 	.db 0x0A
   0470 0D                 3175 	.db 0x0D
   0471 00                 3176 	.db 0x00
                           3177 	.area XINIT   (CODE)
