                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Wed Oct 22 16:24:18 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _isr_zero
                             13 	.globl _main
                             14 	.globl _TF1
                             15 	.globl _TR1
                             16 	.globl _TF0
                             17 	.globl _TR0
                             18 	.globl _IE1
                             19 	.globl _IT1
                             20 	.globl _IE0
                             21 	.globl _IT0
                             22 	.globl _SM0
                             23 	.globl _SM1
                             24 	.globl _SM2
                             25 	.globl _REN
                             26 	.globl _TB8
                             27 	.globl _RB8
                             28 	.globl _TI
                             29 	.globl _RI
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _F1
                             37 	.globl _P
                             38 	.globl _RD
                             39 	.globl _WR
                             40 	.globl _T1
                             41 	.globl _T0
                             42 	.globl _INT1
                             43 	.globl _INT0
                             44 	.globl _TXD0
                             45 	.globl _TXD
                             46 	.globl _RXD0
                             47 	.globl _RXD
                             48 	.globl _P3_7
                             49 	.globl _P3_6
                             50 	.globl _P3_5
                             51 	.globl _P3_4
                             52 	.globl _P3_3
                             53 	.globl _P3_2
                             54 	.globl _P3_1
                             55 	.globl _P3_0
                             56 	.globl _P2_7
                             57 	.globl _P2_6
                             58 	.globl _P2_5
                             59 	.globl _P2_4
                             60 	.globl _P2_3
                             61 	.globl _P2_2
                             62 	.globl _P2_1
                             63 	.globl _P2_0
                             64 	.globl _P1_7
                             65 	.globl _P1_6
                             66 	.globl _P1_5
                             67 	.globl _P1_4
                             68 	.globl _P1_3
                             69 	.globl _P1_2
                             70 	.globl _P1_1
                             71 	.globl _P1_0
                             72 	.globl _P0_7
                             73 	.globl _P0_6
                             74 	.globl _P0_5
                             75 	.globl _P0_4
                             76 	.globl _P0_3
                             77 	.globl _P0_2
                             78 	.globl _P0_1
                             79 	.globl _P0_0
                             80 	.globl _PS
                             81 	.globl _PT1
                             82 	.globl _PX1
                             83 	.globl _PT0
                             84 	.globl _PX0
                             85 	.globl _EA
                             86 	.globl _ES
                             87 	.globl _ET1
                             88 	.globl _EX1
                             89 	.globl _ET0
                             90 	.globl _EX0
                             91 	.globl _BREG_F7
                             92 	.globl _BREG_F6
                             93 	.globl _BREG_F5
                             94 	.globl _BREG_F4
                             95 	.globl _BREG_F3
                             96 	.globl _BREG_F2
                             97 	.globl _BREG_F1
                             98 	.globl _BREG_F0
                             99 	.globl _P5_7
                            100 	.globl _P5_6
                            101 	.globl _P5_5
                            102 	.globl _P5_4
                            103 	.globl _P5_3
                            104 	.globl _P5_2
                            105 	.globl _P5_1
                            106 	.globl _P5_0
                            107 	.globl _P4_7
                            108 	.globl _P4_6
                            109 	.globl _P4_5
                            110 	.globl _P4_4
                            111 	.globl _P4_3
                            112 	.globl _P4_2
                            113 	.globl _P4_1
                            114 	.globl _P4_0
                            115 	.globl _PX0L
                            116 	.globl _PT0L
                            117 	.globl _PX1L
                            118 	.globl _PT1L
                            119 	.globl _PLS
                            120 	.globl _PT2L
                            121 	.globl _PPCL
                            122 	.globl _EC
                            123 	.globl _CCF0
                            124 	.globl _CCF1
                            125 	.globl _CCF2
                            126 	.globl _CCF3
                            127 	.globl _CCF4
                            128 	.globl _CR
                            129 	.globl _CF
                            130 	.globl _TF2
                            131 	.globl _EXF2
                            132 	.globl _RCLK
                            133 	.globl _TCLK
                            134 	.globl _EXEN2
                            135 	.globl _TR2
                            136 	.globl _C_T2
                            137 	.globl _CP_RL2
                            138 	.globl _T2CON_7
                            139 	.globl _T2CON_6
                            140 	.globl _T2CON_5
                            141 	.globl _T2CON_4
                            142 	.globl _T2CON_3
                            143 	.globl _T2CON_2
                            144 	.globl _T2CON_1
                            145 	.globl _T2CON_0
                            146 	.globl _PT2
                            147 	.globl _ET2
                            148 	.globl _CKCON0
                            149 	.globl _TMOD
                            150 	.globl _TL1
                            151 	.globl _TL0
                            152 	.globl _TH1
                            153 	.globl _TH0
                            154 	.globl _TCON
                            155 	.globl _SP
                            156 	.globl _SCON
                            157 	.globl _SBUF0
                            158 	.globl _SBUF
                            159 	.globl _PSW
                            160 	.globl _PCON
                            161 	.globl _P3
                            162 	.globl _P2
                            163 	.globl _P1
                            164 	.globl _P0
                            165 	.globl _IP
                            166 	.globl _IE
                            167 	.globl _DP0L
                            168 	.globl _DPL
                            169 	.globl _DP0H
                            170 	.globl _DPH
                            171 	.globl _B
                            172 	.globl _ACC
                            173 	.globl _EECON
                            174 	.globl _KBF
                            175 	.globl _KBE
                            176 	.globl _KBLS
                            177 	.globl _BRL
                            178 	.globl _BDRCON
                            179 	.globl _T2MOD
                            180 	.globl _SPDAT
                            181 	.globl _SPSTA
                            182 	.globl _SPCON
                            183 	.globl _SADEN
                            184 	.globl _SADDR
                            185 	.globl _WDTPRG
                            186 	.globl _WDTRST
                            187 	.globl _P5
                            188 	.globl _P4
                            189 	.globl _IPH1
                            190 	.globl _IPL1
                            191 	.globl _IPH0
                            192 	.globl _IPL0
                            193 	.globl _IEN1
                            194 	.globl _IEN0
                            195 	.globl _CMOD
                            196 	.globl _CL
                            197 	.globl _CH
                            198 	.globl _CCON
                            199 	.globl _CCAPM4
                            200 	.globl _CCAPM3
                            201 	.globl _CCAPM2
                            202 	.globl _CCAPM1
                            203 	.globl _CCAPM0
                            204 	.globl _CCAP4L
                            205 	.globl _CCAP3L
                            206 	.globl _CCAP2L
                            207 	.globl _CCAP1L
                            208 	.globl _CCAP0L
                            209 	.globl _CCAP4H
                            210 	.globl _CCAP3H
                            211 	.globl _CCAP2H
                            212 	.globl _CCAP1H
                            213 	.globl _CCAP0H
                            214 	.globl _CKCKON1
                            215 	.globl _CKCKON0
                            216 	.globl _CKRL
                            217 	.globl _AUXR1
                            218 	.globl _AUXR
                            219 	.globl _TH2
                            220 	.globl _TL2
                            221 	.globl _RCAP2H
                            222 	.globl _RCAP2L
                            223 	.globl _T2CON
                            224 	.globl _init
                            225 	.globl _init_high
                            226 	.globl _getchar
                            227 	.globl _putchar
                            228 ;--------------------------------------------------------
                            229 ; special function registers
                            230 ;--------------------------------------------------------
                            231 	.area RSEG    (DATA)
                    00C8    232 _T2CON	=	0x00c8
                    00CA    233 _RCAP2L	=	0x00ca
                    00CB    234 _RCAP2H	=	0x00cb
                    00CC    235 _TL2	=	0x00cc
                    00CD    236 _TH2	=	0x00cd
                    008E    237 _AUXR	=	0x008e
                    00A2    238 _AUXR1	=	0x00a2
                    0097    239 _CKRL	=	0x0097
                    008F    240 _CKCKON0	=	0x008f
                    008F    241 _CKCKON1	=	0x008f
                    00FA    242 _CCAP0H	=	0x00fa
                    00FB    243 _CCAP1H	=	0x00fb
                    00FC    244 _CCAP2H	=	0x00fc
                    00FD    245 _CCAP3H	=	0x00fd
                    00FE    246 _CCAP4H	=	0x00fe
                    00EA    247 _CCAP0L	=	0x00ea
                    00EB    248 _CCAP1L	=	0x00eb
                    00EC    249 _CCAP2L	=	0x00ec
                    00ED    250 _CCAP3L	=	0x00ed
                    00EE    251 _CCAP4L	=	0x00ee
                    00DA    252 _CCAPM0	=	0x00da
                    00DB    253 _CCAPM1	=	0x00db
                    00DC    254 _CCAPM2	=	0x00dc
                    00DD    255 _CCAPM3	=	0x00dd
                    00DE    256 _CCAPM4	=	0x00de
                    00D8    257 _CCON	=	0x00d8
                    00F9    258 _CH	=	0x00f9
                    00E9    259 _CL	=	0x00e9
                    00D9    260 _CMOD	=	0x00d9
                    00A8    261 _IEN0	=	0x00a8
                    00B1    262 _IEN1	=	0x00b1
                    00B8    263 _IPL0	=	0x00b8
                    00B7    264 _IPH0	=	0x00b7
                    00B2    265 _IPL1	=	0x00b2
                    00B3    266 _IPH1	=	0x00b3
                    00C0    267 _P4	=	0x00c0
                    00D8    268 _P5	=	0x00d8
                    00A6    269 _WDTRST	=	0x00a6
                    00A7    270 _WDTPRG	=	0x00a7
                    00A9    271 _SADDR	=	0x00a9
                    00B9    272 _SADEN	=	0x00b9
                    00C3    273 _SPCON	=	0x00c3
                    00C4    274 _SPSTA	=	0x00c4
                    00C5    275 _SPDAT	=	0x00c5
                    00C9    276 _T2MOD	=	0x00c9
                    009B    277 _BDRCON	=	0x009b
                    009A    278 _BRL	=	0x009a
                    009C    279 _KBLS	=	0x009c
                    009D    280 _KBE	=	0x009d
                    009E    281 _KBF	=	0x009e
                    00D2    282 _EECON	=	0x00d2
                    00E0    283 _ACC	=	0x00e0
                    00F0    284 _B	=	0x00f0
                    0083    285 _DPH	=	0x0083
                    0083    286 _DP0H	=	0x0083
                    0082    287 _DPL	=	0x0082
                    0082    288 _DP0L	=	0x0082
                    00A8    289 _IE	=	0x00a8
                    00B8    290 _IP	=	0x00b8
                    0080    291 _P0	=	0x0080
                    0090    292 _P1	=	0x0090
                    00A0    293 _P2	=	0x00a0
                    00B0    294 _P3	=	0x00b0
                    0087    295 _PCON	=	0x0087
                    00D0    296 _PSW	=	0x00d0
                    0099    297 _SBUF	=	0x0099
                    0099    298 _SBUF0	=	0x0099
                    0098    299 _SCON	=	0x0098
                    0081    300 _SP	=	0x0081
                    0088    301 _TCON	=	0x0088
                    008C    302 _TH0	=	0x008c
                    008D    303 _TH1	=	0x008d
                    008A    304 _TL0	=	0x008a
                    008B    305 _TL1	=	0x008b
                    0089    306 _TMOD	=	0x0089
                    008F    307 _CKCON0	=	0x008f
                            308 ;--------------------------------------------------------
                            309 ; special function bits
                            310 ;--------------------------------------------------------
                            311 	.area RSEG    (DATA)
                    00AD    312 _ET2	=	0x00ad
                    00BD    313 _PT2	=	0x00bd
                    00C8    314 _T2CON_0	=	0x00c8
                    00C9    315 _T2CON_1	=	0x00c9
                    00CA    316 _T2CON_2	=	0x00ca
                    00CB    317 _T2CON_3	=	0x00cb
                    00CC    318 _T2CON_4	=	0x00cc
                    00CD    319 _T2CON_5	=	0x00cd
                    00CE    320 _T2CON_6	=	0x00ce
                    00CF    321 _T2CON_7	=	0x00cf
                    00C8    322 _CP_RL2	=	0x00c8
                    00C9    323 _C_T2	=	0x00c9
                    00CA    324 _TR2	=	0x00ca
                    00CB    325 _EXEN2	=	0x00cb
                    00CC    326 _TCLK	=	0x00cc
                    00CD    327 _RCLK	=	0x00cd
                    00CE    328 _EXF2	=	0x00ce
                    00CF    329 _TF2	=	0x00cf
                    00DF    330 _CF	=	0x00df
                    00DE    331 _CR	=	0x00de
                    00DC    332 _CCF4	=	0x00dc
                    00DB    333 _CCF3	=	0x00db
                    00DA    334 _CCF2	=	0x00da
                    00D9    335 _CCF1	=	0x00d9
                    00D8    336 _CCF0	=	0x00d8
                    00AE    337 _EC	=	0x00ae
                    00BE    338 _PPCL	=	0x00be
                    00BD    339 _PT2L	=	0x00bd
                    00BC    340 _PLS	=	0x00bc
                    00BB    341 _PT1L	=	0x00bb
                    00BA    342 _PX1L	=	0x00ba
                    00B9    343 _PT0L	=	0x00b9
                    00B8    344 _PX0L	=	0x00b8
                    00C0    345 _P4_0	=	0x00c0
                    00C1    346 _P4_1	=	0x00c1
                    00C2    347 _P4_2	=	0x00c2
                    00C3    348 _P4_3	=	0x00c3
                    00C4    349 _P4_4	=	0x00c4
                    00C5    350 _P4_5	=	0x00c5
                    00C6    351 _P4_6	=	0x00c6
                    00C7    352 _P4_7	=	0x00c7
                    00D8    353 _P5_0	=	0x00d8
                    00D9    354 _P5_1	=	0x00d9
                    00DA    355 _P5_2	=	0x00da
                    00DB    356 _P5_3	=	0x00db
                    00DC    357 _P5_4	=	0x00dc
                    00DD    358 _P5_5	=	0x00dd
                    00DE    359 _P5_6	=	0x00de
                    00DF    360 _P5_7	=	0x00df
                    00F0    361 _BREG_F0	=	0x00f0
                    00F1    362 _BREG_F1	=	0x00f1
                    00F2    363 _BREG_F2	=	0x00f2
                    00F3    364 _BREG_F3	=	0x00f3
                    00F4    365 _BREG_F4	=	0x00f4
                    00F5    366 _BREG_F5	=	0x00f5
                    00F6    367 _BREG_F6	=	0x00f6
                    00F7    368 _BREG_F7	=	0x00f7
                    00A8    369 _EX0	=	0x00a8
                    00A9    370 _ET0	=	0x00a9
                    00AA    371 _EX1	=	0x00aa
                    00AB    372 _ET1	=	0x00ab
                    00AC    373 _ES	=	0x00ac
                    00AF    374 _EA	=	0x00af
                    00B8    375 _PX0	=	0x00b8
                    00B9    376 _PT0	=	0x00b9
                    00BA    377 _PX1	=	0x00ba
                    00BB    378 _PT1	=	0x00bb
                    00BC    379 _PS	=	0x00bc
                    0080    380 _P0_0	=	0x0080
                    0081    381 _P0_1	=	0x0081
                    0082    382 _P0_2	=	0x0082
                    0083    383 _P0_3	=	0x0083
                    0084    384 _P0_4	=	0x0084
                    0085    385 _P0_5	=	0x0085
                    0086    386 _P0_6	=	0x0086
                    0087    387 _P0_7	=	0x0087
                    0090    388 _P1_0	=	0x0090
                    0091    389 _P1_1	=	0x0091
                    0092    390 _P1_2	=	0x0092
                    0093    391 _P1_3	=	0x0093
                    0094    392 _P1_4	=	0x0094
                    0095    393 _P1_5	=	0x0095
                    0096    394 _P1_6	=	0x0096
                    0097    395 _P1_7	=	0x0097
                    00A0    396 _P2_0	=	0x00a0
                    00A1    397 _P2_1	=	0x00a1
                    00A2    398 _P2_2	=	0x00a2
                    00A3    399 _P2_3	=	0x00a3
                    00A4    400 _P2_4	=	0x00a4
                    00A5    401 _P2_5	=	0x00a5
                    00A6    402 _P2_6	=	0x00a6
                    00A7    403 _P2_7	=	0x00a7
                    00B0    404 _P3_0	=	0x00b0
                    00B1    405 _P3_1	=	0x00b1
                    00B2    406 _P3_2	=	0x00b2
                    00B3    407 _P3_3	=	0x00b3
                    00B4    408 _P3_4	=	0x00b4
                    00B5    409 _P3_5	=	0x00b5
                    00B6    410 _P3_6	=	0x00b6
                    00B7    411 _P3_7	=	0x00b7
                    00B0    412 _RXD	=	0x00b0
                    00B0    413 _RXD0	=	0x00b0
                    00B1    414 _TXD	=	0x00b1
                    00B1    415 _TXD0	=	0x00b1
                    00B2    416 _INT0	=	0x00b2
                    00B3    417 _INT1	=	0x00b3
                    00B4    418 _T0	=	0x00b4
                    00B5    419 _T1	=	0x00b5
                    00B6    420 _WR	=	0x00b6
                    00B7    421 _RD	=	0x00b7
                    00D0    422 _P	=	0x00d0
                    00D1    423 _F1	=	0x00d1
                    00D2    424 _OV	=	0x00d2
                    00D3    425 _RS0	=	0x00d3
                    00D4    426 _RS1	=	0x00d4
                    00D5    427 _F0	=	0x00d5
                    00D6    428 _AC	=	0x00d6
                    00D7    429 _CY	=	0x00d7
                    0098    430 _RI	=	0x0098
                    0099    431 _TI	=	0x0099
                    009A    432 _RB8	=	0x009a
                    009B    433 _TB8	=	0x009b
                    009C    434 _REN	=	0x009c
                    009D    435 _SM2	=	0x009d
                    009E    436 _SM1	=	0x009e
                    009F    437 _SM0	=	0x009f
                    0088    438 _IT0	=	0x0088
                    0089    439 _IE0	=	0x0089
                    008A    440 _IT1	=	0x008a
                    008B    441 _IE1	=	0x008b
                    008C    442 _TR0	=	0x008c
                    008D    443 _TF0	=	0x008d
                    008E    444 _TR1	=	0x008e
                    008F    445 _TF1	=	0x008f
                            446 ;--------------------------------------------------------
                            447 ; overlayable register banks
                            448 ;--------------------------------------------------------
                            449 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     450 	.ds 8
                            451 ;--------------------------------------------------------
                            452 ; internal ram data
                            453 ;--------------------------------------------------------
                            454 	.area DSEG    (DATA)
   0000                     455 _main_sloc0_1_0:
   0000                     456 	.ds 4
                            457 ;--------------------------------------------------------
                            458 ; overlayable items in internal ram 
                            459 ;--------------------------------------------------------
                            460 	.area OSEG    (OVR,DATA)
                            461 ;--------------------------------------------------------
                            462 ; Stack segment in internal ram 
                            463 ;--------------------------------------------------------
                            464 	.area	SSEG	(DATA)
   0000                     465 __start__stack:
   0000                     466 	.ds	1
                            467 
                            468 ;--------------------------------------------------------
                            469 ; indirectly addressable internal ram data
                            470 ;--------------------------------------------------------
                            471 	.area ISEG    (DATA)
                            472 ;--------------------------------------------------------
                            473 ; bit data
                            474 ;--------------------------------------------------------
                            475 	.area BSEG    (BIT)
                            476 ;--------------------------------------------------------
                            477 ; paged external ram data
                            478 ;--------------------------------------------------------
                            479 	.area PSEG    (PAG,XDATA)
                            480 ;--------------------------------------------------------
                            481 ; external ram data
                            482 ;--------------------------------------------------------
                            483 	.area XSEG    (XDATA)
   0000                     484 _main_f1_1_1:
   0000                     485 	.ds 4
   0004                     486 _putchar_c_1_1:
   0004                     487 	.ds 1
                            488 ;--------------------------------------------------------
                            489 ; external initialized ram data
                            490 ;--------------------------------------------------------
                            491 	.area XISEG   (XDATA)
                            492 	.area HOME    (CODE)
                            493 	.area GSINIT0 (CODE)
                            494 	.area GSINIT1 (CODE)
                            495 	.area GSINIT2 (CODE)
                            496 	.area GSINIT3 (CODE)
                            497 	.area GSINIT4 (CODE)
                            498 	.area GSINIT5 (CODE)
                            499 	.area GSINIT  (CODE)
                            500 	.area GSFINAL (CODE)
                            501 	.area CSEG    (CODE)
                            502 ;--------------------------------------------------------
                            503 ; interrupt vector 
                            504 ;--------------------------------------------------------
                            505 	.area HOME    (CODE)
   0000                     506 __interrupt_vect:
   0000 02s00r00            507 	ljmp	__sdcc_gsinit_startup
   0003 02s03r80            508 	ljmp	_isr_zero
                            509 ;--------------------------------------------------------
                            510 ; global & static initialisations
                            511 ;--------------------------------------------------------
                            512 	.area HOME    (CODE)
                            513 	.area GSINIT  (CODE)
                            514 	.area GSFINAL (CODE)
                            515 	.area GSINIT  (CODE)
                            516 	.globl __sdcc_gsinit_startup
                            517 	.globl __sdcc_program_startup
                            518 	.globl __start__stack
                            519 	.globl __mcs51_genXINIT
                            520 	.globl __mcs51_genXRAMCLEAR
                            521 	.globl __mcs51_genRAMCLEAR
                            522 	.area GSFINAL (CODE)
   0000 02s00r00            523 	ljmp	__sdcc_program_startup
                            524 ;--------------------------------------------------------
                            525 ; Home
                            526 ;--------------------------------------------------------
                            527 	.area HOME    (CODE)
                            528 	.area CSEG    (CODE)
   0000                     529 __sdcc_program_startup:
   0000 12s00r05            530 	lcall	_main
                            531 ;	return from main will lock up
   0003 80 FE               532 	sjmp .
                            533 ;--------------------------------------------------------
                            534 ; code
                            535 ;--------------------------------------------------------
                            536 	.area CSEG    (CODE)
                            537 ;------------------------------------------------------------
                            538 ;Allocation info for local variables in function 'main'
                            539 ;------------------------------------------------------------
                            540 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            541 ;a                         Allocated with name '_main_a_1_1'
                            542 ;b                         Allocated with name '_main_b_1_1'
                            543 ;f1                        Allocated with name '_main_f1_1_1'
                            544 ;------------------------------------------------------------
                            545 ;	main.c:19: void main(void)
                            546 ;	-----------------------------------------
                            547 ;	 function main
                            548 ;	-----------------------------------------
   0005                     549 _main:
                    0002    550 	ar2 = 0x02
                    0003    551 	ar3 = 0x03
                    0004    552 	ar4 = 0x04
                    0005    553 	ar5 = 0x05
                    0006    554 	ar6 = 0x06
                    0007    555 	ar7 = 0x07
                    0000    556 	ar0 = 0x00
                    0001    557 	ar1 = 0x01
                            558 ;	main.c:22: init();
                            559 ;	genCall
   0005 12s03r56            560 	lcall	_init
                            561 ;	main.c:23: TH1 = 0xFD;
                            562 ;	genAssign
   0008 75 8D FD            563 	mov	_TH1,#0xFD
                            564 ;	main.c:24: TR1 = 1;
                            565 ;	genAssign
   000B D2 8E               566 	setb	_TR1
                            567 ;	main.c:25: printf("Entered X1 mode a number\n\r");
                            568 ;	genIpush
   000D 74r00               569 	mov	a,#__str_0
   000F C0 E0               570 	push	acc
   0011 74s00               571 	mov	a,#(__str_0 >> 8)
   0013 C0 E0               572 	push	acc
   0015 74 80               573 	mov	a,#0x80
   0017 C0 E0               574 	push	acc
                            575 ;	genCall
   0019 12s00r00            576 	lcall	_printf
   001C 15 81               577 	dec	sp
   001E 15 81               578 	dec	sp
   0020 15 81               579 	dec	sp
                            580 ;	main.c:28: for(f1 = 1.5;f1<25;f1+=0.05)
                            581 ;	genAssign
   0022 90s00r00            582 	mov	dptr,#_main_f1_1_1
                            583 ;	Peephole 181	changed mov to clr
   0025 E4                  584 	clr	a
   0026 F0                  585 	movx	@dptr,a
   0027 A3                  586 	inc	dptr
                            587 ;	Peephole 101	removed redundant mov
   0028 F0                  588 	movx	@dptr,a
   0029 A3                  589 	inc	dptr
   002A 74 C0               590 	mov	a,#0xC0
   002C F0                  591 	movx	@dptr,a
   002D A3                  592 	inc	dptr
   002E 74 3F               593 	mov	a,#0x3F
   0030 F0                  594 	movx	@dptr,a
   0031                     595 00104$:
                            596 ;	genAssign
   0031 90s00r00            597 	mov	dptr,#_main_f1_1_1
   0034 E0                  598 	movx	a,@dptr
   0035 FA                  599 	mov	r2,a
   0036 A3                  600 	inc	dptr
   0037 E0                  601 	movx	a,@dptr
   0038 FB                  602 	mov	r3,a
   0039 A3                  603 	inc	dptr
   003A E0                  604 	movx	a,@dptr
   003B FC                  605 	mov	r4,a
   003C A3                  606 	inc	dptr
   003D E0                  607 	movx	a,@dptr
   003E FD                  608 	mov	r5,a
                            609 ;	genIpush
   003F C0 02               610 	push	ar2
   0041 C0 03               611 	push	ar3
   0043 C0 04               612 	push	ar4
   0045 C0 05               613 	push	ar5
                            614 ;	Peephole 181	changed mov to clr
   0047 E4                  615 	clr	a
   0048 C0 E0               616 	push	acc
   004A C0 E0               617 	push	acc
   004C 74 C8               618 	mov	a,#0xC8
   004E C0 E0               619 	push	acc
   0050 74 41               620 	mov	a,#0x41
   0052 C0 E0               621 	push	acc
                            622 ;	genCall
   0054 8A 82               623 	mov	dpl,r2
   0056 8B 83               624 	mov	dph,r3
   0058 8C F0               625 	mov	b,r4
   005A ED                  626 	mov	a,r5
   005B 12s00r00            627 	lcall	___fslt
   005E AE 82               628 	mov	r6,dpl
   0060 E5 81               629 	mov	a,sp
   0062 24 FC               630 	add	a,#0xfc
   0064 F5 81               631 	mov	sp,a
   0066 D0 05               632 	pop	ar5
   0068 D0 04               633 	pop	ar4
   006A D0 03               634 	pop	ar3
   006C D0 02               635 	pop	ar2
                            636 ;	genIfx
   006E EE                  637 	mov	a,r6
                            638 ;	genIfxJump
   006F 70 03               639 	jnz	00120$
   0071 02s01r98            640 	ljmp	00107$
   0074                     641 00120$:
                            642 ;	main.c:30: P1 &= 0x00;
                            643 ;	genDummyRead
   0074 E5 90               644 	mov	a,_P1
                            645 ;	genAssign
   0076 75 90 00            646 	mov	_P1,#0x00
                            647 ;	main.c:31: a = (sqrtf(PI))/(2 * powf(f1,(3/2)));
                            648 ;	genCall
                            649 ;	Peephole 182.b	used 16 bit load of dptr
   0079 90 0F DB            650 	mov	dptr,#0x0FDB
   007C 75 F0 49            651 	mov	b,#0x49
   007F 74 40               652 	mov	a,#0x40
   0081 C0 02               653 	push	ar2
   0083 C0 03               654 	push	ar3
   0085 C0 04               655 	push	ar4
   0087 C0 05               656 	push	ar5
   0089 12s00r00            657 	lcall	_sqrtf
   008C 85 82*00            658 	mov	_main_sloc0_1_0,dpl
   008F 85 83*01            659 	mov	(_main_sloc0_1_0 + 1),dph
   0092 85 F0*02            660 	mov	(_main_sloc0_1_0 + 2),b
   0095 F5*03               661 	mov	(_main_sloc0_1_0 + 3),a
   0097 D0 05               662 	pop	ar5
   0099 D0 04               663 	pop	ar4
   009B D0 03               664 	pop	ar3
   009D D0 02               665 	pop	ar2
                            666 ;	genAssign
   009F 90s00r00            667 	mov	dptr,#_powf_PARM_2
                            668 ;	Peephole 181	changed mov to clr
   00A2 E4                  669 	clr	a
   00A3 F0                  670 	movx	@dptr,a
   00A4 A3                  671 	inc	dptr
                            672 ;	Peephole 101	removed redundant mov
   00A5 F0                  673 	movx	@dptr,a
   00A6 A3                  674 	inc	dptr
   00A7 74 80               675 	mov	a,#0x80
   00A9 F0                  676 	movx	@dptr,a
   00AA A3                  677 	inc	dptr
   00AB 74 3F               678 	mov	a,#0x3F
   00AD F0                  679 	movx	@dptr,a
                            680 ;	genCall
   00AE 8A 82               681 	mov	dpl,r2
   00B0 8B 83               682 	mov	dph,r3
   00B2 8C F0               683 	mov	b,r4
   00B4 ED                  684 	mov	a,r5
   00B5 C0 02               685 	push	ar2
   00B7 C0 03               686 	push	ar3
   00B9 C0 04               687 	push	ar4
   00BB C0 05               688 	push	ar5
   00BD 12s00r00            689 	lcall	_powf
   00C0 AE 82               690 	mov	r6,dpl
   00C2 AF 83               691 	mov	r7,dph
   00C4 A8 F0               692 	mov	r0,b
   00C6 F9                  693 	mov	r1,a
   00C7 D0 05               694 	pop	ar5
   00C9 D0 04               695 	pop	ar4
   00CB D0 03               696 	pop	ar3
   00CD D0 02               697 	pop	ar2
                            698 ;	genIpush
   00CF C0 02               699 	push	ar2
   00D1 C0 03               700 	push	ar3
   00D3 C0 04               701 	push	ar4
   00D5 C0 05               702 	push	ar5
                            703 ;	Peephole 181	changed mov to clr
   00D7 E4                  704 	clr	a
   00D8 C0 E0               705 	push	acc
   00DA C0 E0               706 	push	acc
   00DC C0 E0               707 	push	acc
   00DE 74 40               708 	mov	a,#0x40
   00E0 C0 E0               709 	push	acc
                            710 ;	genCall
   00E2 8E 82               711 	mov	dpl,r6
   00E4 8F 83               712 	mov	dph,r7
   00E6 88 F0               713 	mov	b,r0
   00E8 E9                  714 	mov	a,r1
   00E9 12s00r00            715 	lcall	___fsmul
   00EC AE 82               716 	mov	r6,dpl
   00EE AF 83               717 	mov	r7,dph
   00F0 A8 F0               718 	mov	r0,b
   00F2 F9                  719 	mov	r1,a
   00F3 E5 81               720 	mov	a,sp
   00F5 24 FC               721 	add	a,#0xfc
   00F7 F5 81               722 	mov	sp,a
   00F9 D0 05               723 	pop	ar5
   00FB D0 04               724 	pop	ar4
   00FD D0 03               725 	pop	ar3
   00FF D0 02               726 	pop	ar2
                            727 ;	genIpush
   0101 C0 02               728 	push	ar2
   0103 C0 03               729 	push	ar3
   0105 C0 04               730 	push	ar4
   0107 C0 05               731 	push	ar5
   0109 C0 06               732 	push	ar6
   010B C0 07               733 	push	ar7
   010D C0 00               734 	push	ar0
   010F C0 01               735 	push	ar1
                            736 ;	main.c:32: P1 |= 0x01;
                            737 ;	genCall
   0111 85*00 82            738 	mov	dpl,_main_sloc0_1_0
   0114 85*01 83            739 	mov	dph,(_main_sloc0_1_0 + 1)
   0117 85*02 F0            740 	mov	b,(_main_sloc0_1_0 + 2)
   011A E5*03               741 	mov	a,(_main_sloc0_1_0 + 3)
   011C 12s00r00            742 	lcall	___fsdiv
   011F AE 82               743 	mov	r6,dpl
   0121 AF 83               744 	mov	r7,dph
   0123 A8 F0               745 	mov	r0,b
   0125 F9                  746 	mov	r1,a
   0126 E5 81               747 	mov	a,sp
   0128 24 FC               748 	add	a,#0xfc
   012A F5 81               749 	mov	sp,a
   012C D0 05               750 	pop	ar5
   012E D0 04               751 	pop	ar4
   0130 D0 03               752 	pop	ar3
   0132 D0 02               753 	pop	ar2
                            754 ;	genOr
   0134 43 90 01            755 	orl	_P1,#0x01
                            756 ;	main.c:33: printf_fast_f("The math operation gives us %f\n\r",a);
                            757 ;	genIpush
   0137 C0 02               758 	push	ar2
   0139 C0 03               759 	push	ar3
   013B C0 04               760 	push	ar4
   013D C0 05               761 	push	ar5
   013F C0 06               762 	push	ar6
   0141 C0 07               763 	push	ar7
   0143 C0 00               764 	push	ar0
   0145 C0 01               765 	push	ar1
                            766 ;	genIpush
   0147 74r1B               767 	mov	a,#__str_1
   0149 C0 E0               768 	push	acc
   014B 74s00               769 	mov	a,#(__str_1 >> 8)
   014D C0 E0               770 	push	acc
                            771 ;	genCall
   014F 12s00r00            772 	lcall	_printf_fast_f
   0152 E5 81               773 	mov	a,sp
   0154 24 FA               774 	add	a,#0xfa
   0156 F5 81               775 	mov	sp,a
   0158 D0 05               776 	pop	ar5
   015A D0 04               777 	pop	ar4
   015C D0 03               778 	pop	ar3
   015E D0 02               779 	pop	ar2
                            780 ;	main.c:28: for(f1 = 1.5;f1<25;f1+=0.05)
                            781 ;	genIpush
   0160 74 CD               782 	mov	a,#0xCD
   0162 C0 E0               783 	push	acc
   0164 74 CC               784 	mov	a,#0xCC
   0166 C0 E0               785 	push	acc
   0168 74 4C               786 	mov	a,#0x4C
   016A C0 E0               787 	push	acc
   016C 74 3D               788 	mov	a,#0x3D
   016E C0 E0               789 	push	acc
                            790 ;	genCall
   0170 8A 82               791 	mov	dpl,r2
   0172 8B 83               792 	mov	dph,r3
   0174 8C F0               793 	mov	b,r4
   0176 ED                  794 	mov	a,r5
   0177 12s00r00            795 	lcall	___fsadd
   017A AA 82               796 	mov	r2,dpl
   017C AB 83               797 	mov	r3,dph
   017E AC F0               798 	mov	r4,b
   0180 FD                  799 	mov	r5,a
   0181 E5 81               800 	mov	a,sp
   0183 24 FC               801 	add	a,#0xfc
   0185 F5 81               802 	mov	sp,a
                            803 ;	genAssign
   0187 90s00r00            804 	mov	dptr,#_main_f1_1_1
   018A EA                  805 	mov	a,r2
   018B F0                  806 	movx	@dptr,a
   018C A3                  807 	inc	dptr
   018D EB                  808 	mov	a,r3
   018E F0                  809 	movx	@dptr,a
   018F A3                  810 	inc	dptr
   0190 EC                  811 	mov	a,r4
   0191 F0                  812 	movx	@dptr,a
   0192 A3                  813 	inc	dptr
   0193 ED                  814 	mov	a,r5
   0194 F0                  815 	movx	@dptr,a
   0195 02s00r31            816 	ljmp	00104$
   0198                     817 00107$:
                            818 ;	main.c:36: printf("Provide an external interrupt INT0 to enter X2 mode\n\r");
                            819 ;	genIpush
   0198 74r3C               820 	mov	a,#__str_2
   019A C0 E0               821 	push	acc
   019C 74s00               822 	mov	a,#(__str_2 >> 8)
   019E C0 E0               823 	push	acc
   01A0 74 80               824 	mov	a,#0x80
   01A2 C0 E0               825 	push	acc
                            826 ;	genCall
   01A4 12s00r00            827 	lcall	_printf
   01A7 15 81               828 	dec	sp
   01A9 15 81               829 	dec	sp
   01AB 15 81               830 	dec	sp
                            831 ;	main.c:38: while(IE0 != 1);
   01AD                     832 00101$:
                            833 ;	genIfx
                            834 ;	genIfxJump
                            835 ;	Peephole 108.d	removed ljmp by inverse jump logic
   01AD 30 89 FD            836 	jnb	_IE0,00101$
                            837 ;	Peephole 300	removed redundant label 00121$
                            838 ;	main.c:40: init_high();
                            839 ;	genCall
   01B0 12s03r6E            840 	lcall	_init_high
                            841 ;	main.c:41: printf("Entered X1 mode a number\n\r");
                            842 ;	genIpush
   01B3 74r00               843 	mov	a,#__str_0
   01B5 C0 E0               844 	push	acc
   01B7 74s00               845 	mov	a,#(__str_0 >> 8)
   01B9 C0 E0               846 	push	acc
   01BB 74 80               847 	mov	a,#0x80
   01BD C0 E0               848 	push	acc
                            849 ;	genCall
   01BF 12s00r00            850 	lcall	_printf
   01C2 15 81               851 	dec	sp
   01C4 15 81               852 	dec	sp
   01C6 15 81               853 	dec	sp
                            854 ;	main.c:42: for(f1=1.5;f1<25;f1+=0.05)
                            855 ;	genAssign
   01C8 90s00r00            856 	mov	dptr,#_main_f1_1_1
                            857 ;	Peephole 181	changed mov to clr
   01CB E4                  858 	clr	a
   01CC F0                  859 	movx	@dptr,a
   01CD A3                  860 	inc	dptr
                            861 ;	Peephole 101	removed redundant mov
   01CE F0                  862 	movx	@dptr,a
   01CF A3                  863 	inc	dptr
   01D0 74 C0               864 	mov	a,#0xC0
   01D2 F0                  865 	movx	@dptr,a
   01D3 A3                  866 	inc	dptr
   01D4 74 3F               867 	mov	a,#0x3F
   01D6 F0                  868 	movx	@dptr,a
   01D7                     869 00108$:
                            870 ;	genAssign
   01D7 90s00r00            871 	mov	dptr,#_main_f1_1_1
   01DA E0                  872 	movx	a,@dptr
   01DB FA                  873 	mov	r2,a
   01DC A3                  874 	inc	dptr
   01DD E0                  875 	movx	a,@dptr
   01DE FB                  876 	mov	r3,a
   01DF A3                  877 	inc	dptr
   01E0 E0                  878 	movx	a,@dptr
   01E1 FC                  879 	mov	r4,a
   01E2 A3                  880 	inc	dptr
   01E3 E0                  881 	movx	a,@dptr
   01E4 FD                  882 	mov	r5,a
                            883 ;	genIpush
   01E5 C0 02               884 	push	ar2
   01E7 C0 03               885 	push	ar3
   01E9 C0 04               886 	push	ar4
   01EB C0 05               887 	push	ar5
                            888 ;	Peephole 181	changed mov to clr
   01ED E4                  889 	clr	a
   01EE C0 E0               890 	push	acc
   01F0 C0 E0               891 	push	acc
   01F2 74 C8               892 	mov	a,#0xC8
   01F4 C0 E0               893 	push	acc
   01F6 74 41               894 	mov	a,#0x41
   01F8 C0 E0               895 	push	acc
                            896 ;	genCall
   01FA 8A 82               897 	mov	dpl,r2
   01FC 8B 83               898 	mov	dph,r3
   01FE 8C F0               899 	mov	b,r4
   0200 ED                  900 	mov	a,r5
   0201 12s00r00            901 	lcall	___fslt
   0204 AE 82               902 	mov	r6,dpl
   0206 E5 81               903 	mov	a,sp
   0208 24 FC               904 	add	a,#0xfc
   020A F5 81               905 	mov	sp,a
   020C D0 05               906 	pop	ar5
   020E D0 04               907 	pop	ar4
   0210 D0 03               908 	pop	ar3
   0212 D0 02               909 	pop	ar2
                            910 ;	genIfx
   0214 EE                  911 	mov	a,r6
                            912 ;	genIfxJump
   0215 70 03               913 	jnz	00122$
   0217 02s03r46            914 	ljmp	00111$
   021A                     915 00122$:
                            916 ;	main.c:44: CKCON0 |= 0x01;
                            917 ;	genOr
   021A 43 8F 01            918 	orl	_CKCON0,#0x01
                            919 ;	main.c:45: P1 &= 0x00;
                            920 ;	genDummyRead
   021D E5 90               921 	mov	a,_P1
                            922 ;	genAssign
   021F 75 90 00            923 	mov	_P1,#0x00
                            924 ;	main.c:46: b = (sqrtf(PI))/(2 * powf(f1,(3/2)));
                            925 ;	genCall
                            926 ;	Peephole 182.b	used 16 bit load of dptr
   0222 90 0F DB            927 	mov	dptr,#0x0FDB
   0225 75 F0 49            928 	mov	b,#0x49
   0228 74 40               929 	mov	a,#0x40
   022A C0 02               930 	push	ar2
   022C C0 03               931 	push	ar3
   022E C0 04               932 	push	ar4
   0230 C0 05               933 	push	ar5
   0232 12s00r00            934 	lcall	_sqrtf
   0235 85 82*00            935 	mov	_main_sloc0_1_0,dpl
   0238 85 83*01            936 	mov	(_main_sloc0_1_0 + 1),dph
   023B 85 F0*02            937 	mov	(_main_sloc0_1_0 + 2),b
   023E F5*03               938 	mov	(_main_sloc0_1_0 + 3),a
   0240 D0 05               939 	pop	ar5
   0242 D0 04               940 	pop	ar4
   0244 D0 03               941 	pop	ar3
   0246 D0 02               942 	pop	ar2
                            943 ;	genAssign
   0248 90s00r00            944 	mov	dptr,#_powf_PARM_2
                            945 ;	Peephole 181	changed mov to clr
   024B E4                  946 	clr	a
   024C F0                  947 	movx	@dptr,a
   024D A3                  948 	inc	dptr
                            949 ;	Peephole 101	removed redundant mov
   024E F0                  950 	movx	@dptr,a
   024F A3                  951 	inc	dptr
   0250 74 80               952 	mov	a,#0x80
   0252 F0                  953 	movx	@dptr,a
   0253 A3                  954 	inc	dptr
   0254 74 3F               955 	mov	a,#0x3F
   0256 F0                  956 	movx	@dptr,a
                            957 ;	genCall
   0257 8A 82               958 	mov	dpl,r2
   0259 8B 83               959 	mov	dph,r3
   025B 8C F0               960 	mov	b,r4
   025D ED                  961 	mov	a,r5
   025E C0 02               962 	push	ar2
   0260 C0 03               963 	push	ar3
   0262 C0 04               964 	push	ar4
   0264 C0 05               965 	push	ar5
   0266 12s00r00            966 	lcall	_powf
   0269 AE 82               967 	mov	r6,dpl
   026B AF 83               968 	mov	r7,dph
   026D A8 F0               969 	mov	r0,b
   026F F9                  970 	mov	r1,a
   0270 D0 05               971 	pop	ar5
   0272 D0 04               972 	pop	ar4
   0274 D0 03               973 	pop	ar3
   0276 D0 02               974 	pop	ar2
                            975 ;	genIpush
   0278 C0 02               976 	push	ar2
   027A C0 03               977 	push	ar3
   027C C0 04               978 	push	ar4
   027E C0 05               979 	push	ar5
                            980 ;	Peephole 181	changed mov to clr
   0280 E4                  981 	clr	a
   0281 C0 E0               982 	push	acc
   0283 C0 E0               983 	push	acc
   0285 C0 E0               984 	push	acc
   0287 74 40               985 	mov	a,#0x40
   0289 C0 E0               986 	push	acc
                            987 ;	genCall
   028B 8E 82               988 	mov	dpl,r6
   028D 8F 83               989 	mov	dph,r7
   028F 88 F0               990 	mov	b,r0
   0291 E9                  991 	mov	a,r1
   0292 12s00r00            992 	lcall	___fsmul
   0295 AE 82               993 	mov	r6,dpl
   0297 AF 83               994 	mov	r7,dph
   0299 A8 F0               995 	mov	r0,b
   029B F9                  996 	mov	r1,a
   029C E5 81               997 	mov	a,sp
   029E 24 FC               998 	add	a,#0xfc
   02A0 F5 81               999 	mov	sp,a
   02A2 D0 05              1000 	pop	ar5
   02A4 D0 04              1001 	pop	ar4
   02A6 D0 03              1002 	pop	ar3
   02A8 D0 02              1003 	pop	ar2
                           1004 ;	genIpush
   02AA C0 02              1005 	push	ar2
   02AC C0 03              1006 	push	ar3
   02AE C0 04              1007 	push	ar4
   02B0 C0 05              1008 	push	ar5
   02B2 C0 06              1009 	push	ar6
   02B4 C0 07              1010 	push	ar7
   02B6 C0 00              1011 	push	ar0
   02B8 C0 01              1012 	push	ar1
                           1013 ;	main.c:47: P1 |= 0x01;
                           1014 ;	genCall
   02BA 85*00 82           1015 	mov	dpl,_main_sloc0_1_0
   02BD 85*01 83           1016 	mov	dph,(_main_sloc0_1_0 + 1)
   02C0 85*02 F0           1017 	mov	b,(_main_sloc0_1_0 + 2)
   02C3 E5*03              1018 	mov	a,(_main_sloc0_1_0 + 3)
   02C5 12s00r00           1019 	lcall	___fsdiv
   02C8 AE 82              1020 	mov	r6,dpl
   02CA AF 83              1021 	mov	r7,dph
   02CC A8 F0              1022 	mov	r0,b
   02CE F9                 1023 	mov	r1,a
   02CF E5 81              1024 	mov	a,sp
   02D1 24 FC              1025 	add	a,#0xfc
   02D3 F5 81              1026 	mov	sp,a
   02D5 D0 05              1027 	pop	ar5
   02D7 D0 04              1028 	pop	ar4
   02D9 D0 03              1029 	pop	ar3
   02DB D0 02              1030 	pop	ar2
                           1031 ;	genOr
   02DD 43 90 01           1032 	orl	_P1,#0x01
                           1033 ;	main.c:48: TH1 = 0xFA;
                           1034 ;	genAssign
   02E0 75 8D FA           1035 	mov	_TH1,#0xFA
                           1036 ;	main.c:49: TR1 = 1;
                           1037 ;	genAssign
   02E3 D2 8E              1038 	setb	_TR1
                           1039 ;	main.c:50: printf_fast_f("The math operation gives us %f\n\r",b);
                           1040 ;	genIpush
   02E5 C0 02              1041 	push	ar2
   02E7 C0 03              1042 	push	ar3
   02E9 C0 04              1043 	push	ar4
   02EB C0 05              1044 	push	ar5
   02ED C0 06              1045 	push	ar6
   02EF C0 07              1046 	push	ar7
   02F1 C0 00              1047 	push	ar0
   02F3 C0 01              1048 	push	ar1
                           1049 ;	genIpush
   02F5 74r1B              1050 	mov	a,#__str_1
   02F7 C0 E0              1051 	push	acc
   02F9 74s00              1052 	mov	a,#(__str_1 >> 8)
   02FB C0 E0              1053 	push	acc
                           1054 ;	genCall
   02FD 12s00r00           1055 	lcall	_printf_fast_f
   0300 E5 81              1056 	mov	a,sp
   0302 24 FA              1057 	add	a,#0xfa
   0304 F5 81              1058 	mov	sp,a
   0306 D0 05              1059 	pop	ar5
   0308 D0 04              1060 	pop	ar4
   030A D0 03              1061 	pop	ar3
   030C D0 02              1062 	pop	ar2
                           1063 ;	main.c:42: for(f1=1.5;f1<25;f1+=0.05)
                           1064 ;	genIpush
   030E 74 CD              1065 	mov	a,#0xCD
   0310 C0 E0              1066 	push	acc
   0312 74 CC              1067 	mov	a,#0xCC
   0314 C0 E0              1068 	push	acc
   0316 74 4C              1069 	mov	a,#0x4C
   0318 C0 E0              1070 	push	acc
   031A 74 3D              1071 	mov	a,#0x3D
   031C C0 E0              1072 	push	acc
                           1073 ;	genCall
   031E 8A 82              1074 	mov	dpl,r2
   0320 8B 83              1075 	mov	dph,r3
   0322 8C F0              1076 	mov	b,r4
   0324 ED                 1077 	mov	a,r5
   0325 12s00r00           1078 	lcall	___fsadd
   0328 AA 82              1079 	mov	r2,dpl
   032A AB 83              1080 	mov	r3,dph
   032C AC F0              1081 	mov	r4,b
   032E FD                 1082 	mov	r5,a
   032F E5 81              1083 	mov	a,sp
   0331 24 FC              1084 	add	a,#0xfc
   0333 F5 81              1085 	mov	sp,a
                           1086 ;	genAssign
   0335 90s00r00           1087 	mov	dptr,#_main_f1_1_1
   0338 EA                 1088 	mov	a,r2
   0339 F0                 1089 	movx	@dptr,a
   033A A3                 1090 	inc	dptr
   033B EB                 1091 	mov	a,r3
   033C F0                 1092 	movx	@dptr,a
   033D A3                 1093 	inc	dptr
   033E EC                 1094 	mov	a,r4
   033F F0                 1095 	movx	@dptr,a
   0340 A3                 1096 	inc	dptr
   0341 ED                 1097 	mov	a,r5
   0342 F0                 1098 	movx	@dptr,a
   0343 02s01rD7           1099 	ljmp	00108$
   0346                    1100 00111$:
                           1101 ;	main.c:52: printf_fast_f("Press reset to restart the program\n\r");
                           1102 ;	genIpush
   0346 74r72              1103 	mov	a,#__str_3
   0348 C0 E0              1104 	push	acc
   034A 74s00              1105 	mov	a,#(__str_3 >> 8)
   034C C0 E0              1106 	push	acc
                           1107 ;	genCall
   034E 12s00r00           1108 	lcall	_printf_fast_f
   0351 15 81              1109 	dec	sp
   0353 15 81              1110 	dec	sp
                           1111 ;	Peephole 300	removed redundant label 00112$
   0355 22                 1112 	ret
                           1113 ;------------------------------------------------------------
                           1114 ;Allocation info for local variables in function 'init'
                           1115 ;------------------------------------------------------------
                           1116 ;------------------------------------------------------------
                           1117 ;	main.c:56: void init()
                           1118 ;	-----------------------------------------
                           1119 ;	 function init
                           1120 ;	-----------------------------------------
   0356                    1121 _init:
                           1122 ;	main.c:58: SCON = 0x50;
                           1123 ;	genAssign
   0356 75 98 50           1124 	mov	_SCON,#0x50
                           1125 ;	main.c:59: TMOD = 0x20;
                           1126 ;	genAssign
   0359 75 89 20           1127 	mov	_TMOD,#0x20
                           1128 ;	main.c:60: TH1 = 0xFD;
                           1129 ;	genAssign
   035C 75 8D FD           1130 	mov	_TH1,#0xFD
                           1131 ;	main.c:61: TR1 = 1;
                           1132 ;	genAssign
   035F D2 8E              1133 	setb	_TR1
                           1134 ;	main.c:62: TI = 1;
                           1135 ;	genAssign
   0361 D2 99              1136 	setb	_TI
                           1137 ;	main.c:63: EA = 1;
                           1138 ;	genAssign
   0363 D2 AF              1139 	setb	_EA
                           1140 ;	main.c:64: EX0 = 1;
                           1141 ;	genAssign
   0365 D2 A8              1142 	setb	_EX0
                           1143 ;	main.c:65: IE = 0;
                           1144 ;	genAssign
   0367 75 A8 00           1145 	mov	_IE,#0x00
                           1146 ;	main.c:66: CKCON0 &= 0xFE;
                           1147 ;	genAnd
   036A 53 8F FE           1148 	anl	_CKCON0,#0xFE
                           1149 ;	Peephole 300	removed redundant label 00101$
   036D 22                 1150 	ret
                           1151 ;------------------------------------------------------------
                           1152 ;Allocation info for local variables in function 'init_high'
                           1153 ;------------------------------------------------------------
                           1154 ;------------------------------------------------------------
                           1155 ;	main.c:69: void init_high()
                           1156 ;	-----------------------------------------
                           1157 ;	 function init_high
                           1158 ;	-----------------------------------------
   036E                    1159 _init_high:
                           1160 ;	main.c:71: SCON = 0x50;
                           1161 ;	genAssign
   036E 75 98 50           1162 	mov	_SCON,#0x50
                           1163 ;	main.c:72: TMOD = 0x20;
                           1164 ;	genAssign
   0371 75 89 20           1165 	mov	_TMOD,#0x20
                           1166 ;	main.c:73: TH1 = 0xFA;
                           1167 ;	genAssign
   0374 75 8D FA           1168 	mov	_TH1,#0xFA
                           1169 ;	main.c:74: TR1 = 1;
                           1170 ;	genAssign
   0377 D2 8E              1171 	setb	_TR1
                           1172 ;	main.c:75: TI = 1;
                           1173 ;	genAssign
   0379 D2 99              1174 	setb	_TI
                           1175 ;	main.c:76: EA = 1;
                           1176 ;	genAssign
   037B D2 AF              1177 	setb	_EA
                           1178 ;	main.c:77: EX0 = 1;
                           1179 ;	genAssign
   037D D2 A8              1180 	setb	_EX0
                           1181 ;	Peephole 300	removed redundant label 00101$
   037F 22                 1182 	ret
                           1183 ;------------------------------------------------------------
                           1184 ;Allocation info for local variables in function 'isr_zero'
                           1185 ;------------------------------------------------------------
                           1186 ;------------------------------------------------------------
                           1187 ;	main.c:81: void isr_zero(void) __interrupt (0)
                           1188 ;	-----------------------------------------
                           1189 ;	 function isr_zero
                           1190 ;	-----------------------------------------
   0380                    1191 _isr_zero:
                           1192 ;	main.c:83: }
                           1193 ;	Peephole 300	removed redundant label 00101$
   0380 32                 1194 	reti
                           1195 ;	eliminated unneeded push/pop psw
                           1196 ;	eliminated unneeded push/pop dpl
                           1197 ;	eliminated unneeded push/pop dph
                           1198 ;	eliminated unneeded push/pop b
                           1199 ;	eliminated unneeded push/pop acc
                           1200 ;------------------------------------------------------------
                           1201 ;Allocation info for local variables in function 'getchar'
                           1202 ;------------------------------------------------------------
                           1203 ;------------------------------------------------------------
                           1204 ;	main.c:85: char getchar()
                           1205 ;	-----------------------------------------
                           1206 ;	 function getchar
                           1207 ;	-----------------------------------------
   0381                    1208 _getchar:
                           1209 ;	main.c:87: while (!RI);                // compare asm code generated for these three lines
   0381                    1210 00101$:
                           1211 ;	genIfx
                           1212 ;	genIfxJump
                           1213 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1214 ;	main.c:88: RI = 0;			// clear RI flag
                           1215 ;	genAssign
                           1216 ;	Peephole 250.a	using atomic test and clear
   0381 10 98 02           1217 	jbc	_RI,00108$
   0384 80 FB              1218 	sjmp	00101$
   0386                    1219 00108$:
                           1220 ;	main.c:89: return SBUF;  	// return character from SBUF
                           1221 ;	genAssign
   0386 AA 99              1222 	mov	r2,_SBUF
                           1223 ;	genRet
   0388 8A 82              1224 	mov	dpl,r2
                           1225 ;	Peephole 300	removed redundant label 00104$
   038A 22                 1226 	ret
                           1227 ;------------------------------------------------------------
                           1228 ;Allocation info for local variables in function 'putchar'
                           1229 ;------------------------------------------------------------
                           1230 ;c                         Allocated with name '_putchar_c_1_1'
                           1231 ;------------------------------------------------------------
                           1232 ;	main.c:93: void putchar (char c)
                           1233 ;	-----------------------------------------
                           1234 ;	 function putchar
                           1235 ;	-----------------------------------------
   038B                    1236 _putchar:
                           1237 ;	genReceive
   038B E5 82              1238 	mov	a,dpl
   038D 90s00r04           1239 	mov	dptr,#_putchar_c_1_1
   0390 F0                 1240 	movx	@dptr,a
                           1241 ;	main.c:95: while (!TI);
   0391                    1242 00101$:
                           1243 ;	genIfx
                           1244 ;	genIfxJump
                           1245 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0391 30 99 FD           1246 	jnb	_TI,00101$
                           1247 ;	Peephole 300	removed redundant label 00108$
                           1248 ;	main.c:96: SBUF = c;  	// load serial port with transmit value
                           1249 ;	genAssign
   0394 90s00r04           1250 	mov	dptr,#_putchar_c_1_1
   0397 E0                 1251 	movx	a,@dptr
   0398 F5 99              1252 	mov	_SBUF,a
                           1253 ;	main.c:97: TI = 0;  	// clear TI flag
                           1254 ;	genAssign
   039A C2 99              1255 	clr	_TI
                           1256 ;	Peephole 300	removed redundant label 00104$
   039C 22                 1257 	ret
                           1258 	.area CSEG    (CODE)
                           1259 	.area CONST   (CODE)
   0000                    1260 __str_0:
   0000 45 6E 74 65 72 65  1261 	.ascii "Entered X1 mode a number"
        64 20 58 31 20 6D
        6F 64 65 20 61 20
        6E 75 6D 62 65 72
   0018 0A                 1262 	.db 0x0A
   0019 0D                 1263 	.db 0x0D
   001A 00                 1264 	.db 0x00
   001B                    1265 __str_1:
   001B 54 68 65 20 6D 61  1266 	.ascii "The math operation gives us %f"
        74 68 20 6F 70 65
        72 61 74 69 6F 6E
        20 67 69 76 65 73
        20 75 73 20 25 66
   0039 0A                 1267 	.db 0x0A
   003A 0D                 1268 	.db 0x0D
   003B 00                 1269 	.db 0x00
   003C                    1270 __str_2:
   003C 50 72 6F 76 69 64  1271 	.ascii "Provide an external interrupt INT0 to enter X2 mode"
        65 20 61 6E 20 65
        78 74 65 72 6E 61
        6C 20 69 6E 74 65
        72 72 75 70 74 20
        49 4E 54 30 20 74
        6F 20 65 6E 74 65
        72 20 58 32 20 6D
        6F 64 65
   006F 0A                 1272 	.db 0x0A
   0070 0D                 1273 	.db 0x0D
   0071 00                 1274 	.db 0x00
   0072                    1275 __str_3:
   0072 50 72 65 73 73 20  1276 	.ascii "Press reset to restart the program"
        72 65 73 65 74 20
        74 6F 20 72 65 73
        74 61 72 74 20 74
        68 65 20 70 72 6F
        67 72 61 6D
   0094 0A                 1277 	.db 0x0A
   0095 0D                 1278 	.db 0x0D
   0096 00                 1279 	.db 0x00
                           1280 	.area XINIT   (CODE)
