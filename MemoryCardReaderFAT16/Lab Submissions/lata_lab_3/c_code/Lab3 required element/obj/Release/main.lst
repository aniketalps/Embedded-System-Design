                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Oct 17 17:32:45 2014
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _init
                             13 	.globl _main
                             14 	.globl _TF1
                             15 	.globl _TR1
                             16 	.globl _TF0
                             17 	.globl _TR0
                             18 	.globl _IE1
                             19 	.globl _IT1
                             20 	.globl _IE0
                             21 	.globl _IT0
                             22 	.globl _SM0
                             23 	.globl _SM1
                             24 	.globl _SM2
                             25 	.globl _REN
                             26 	.globl _TB8
                             27 	.globl _RB8
                             28 	.globl _TI
                             29 	.globl _RI
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _F1
                             37 	.globl _P
                             38 	.globl _RD
                             39 	.globl _WR
                             40 	.globl _T1
                             41 	.globl _T0
                             42 	.globl _INT1
                             43 	.globl _INT0
                             44 	.globl _TXD0
                             45 	.globl _TXD
                             46 	.globl _RXD0
                             47 	.globl _RXD
                             48 	.globl _P3_7
                             49 	.globl _P3_6
                             50 	.globl _P3_5
                             51 	.globl _P3_4
                             52 	.globl _P3_3
                             53 	.globl _P3_2
                             54 	.globl _P3_1
                             55 	.globl _P3_0
                             56 	.globl _P2_7
                             57 	.globl _P2_6
                             58 	.globl _P2_5
                             59 	.globl _P2_4
                             60 	.globl _P2_3
                             61 	.globl _P2_2
                             62 	.globl _P2_1
                             63 	.globl _P2_0
                             64 	.globl _P1_7
                             65 	.globl _P1_6
                             66 	.globl _P1_5
                             67 	.globl _P1_4
                             68 	.globl _P1_3
                             69 	.globl _P1_2
                             70 	.globl _P1_1
                             71 	.globl _P1_0
                             72 	.globl _P0_7
                             73 	.globl _P0_6
                             74 	.globl _P0_5
                             75 	.globl _P0_4
                             76 	.globl _P0_3
                             77 	.globl _P0_2
                             78 	.globl _P0_1
                             79 	.globl _P0_0
                             80 	.globl _PS
                             81 	.globl _PT1
                             82 	.globl _PX1
                             83 	.globl _PT0
                             84 	.globl _PX0
                             85 	.globl _EA
                             86 	.globl _ES
                             87 	.globl _ET1
                             88 	.globl _EX1
                             89 	.globl _ET0
                             90 	.globl _EX0
                             91 	.globl _BREG_F7
                             92 	.globl _BREG_F6
                             93 	.globl _BREG_F5
                             94 	.globl _BREG_F4
                             95 	.globl _BREG_F3
                             96 	.globl _BREG_F2
                             97 	.globl _BREG_F1
                             98 	.globl _BREG_F0
                             99 	.globl _P5_7
                            100 	.globl _P5_6
                            101 	.globl _P5_5
                            102 	.globl _P5_4
                            103 	.globl _P5_3
                            104 	.globl _P5_2
                            105 	.globl _P5_1
                            106 	.globl _P5_0
                            107 	.globl _P4_7
                            108 	.globl _P4_6
                            109 	.globl _P4_5
                            110 	.globl _P4_4
                            111 	.globl _P4_3
                            112 	.globl _P4_2
                            113 	.globl _P4_1
                            114 	.globl _P4_0
                            115 	.globl _PX0L
                            116 	.globl _PT0L
                            117 	.globl _PX1L
                            118 	.globl _PT1L
                            119 	.globl _PLS
                            120 	.globl _PT2L
                            121 	.globl _PPCL
                            122 	.globl _EC
                            123 	.globl _CCF0
                            124 	.globl _CCF1
                            125 	.globl _CCF2
                            126 	.globl _CCF3
                            127 	.globl _CCF4
                            128 	.globl _CR
                            129 	.globl _CF
                            130 	.globl _TF2
                            131 	.globl _EXF2
                            132 	.globl _RCLK
                            133 	.globl _TCLK
                            134 	.globl _EXEN2
                            135 	.globl _TR2
                            136 	.globl _C_T2
                            137 	.globl _CP_RL2
                            138 	.globl _T2CON_7
                            139 	.globl _T2CON_6
                            140 	.globl _T2CON_5
                            141 	.globl _T2CON_4
                            142 	.globl _T2CON_3
                            143 	.globl _T2CON_2
                            144 	.globl _T2CON_1
                            145 	.globl _T2CON_0
                            146 	.globl _PT2
                            147 	.globl _ET2
                            148 	.globl _TMOD
                            149 	.globl _TL1
                            150 	.globl _TL0
                            151 	.globl _TH1
                            152 	.globl _TH0
                            153 	.globl _TCON
                            154 	.globl _SP
                            155 	.globl _SCON
                            156 	.globl _SBUF0
                            157 	.globl _SBUF
                            158 	.globl _PSW
                            159 	.globl _PCON
                            160 	.globl _P3
                            161 	.globl _P2
                            162 	.globl _P1
                            163 	.globl _P0
                            164 	.globl _IP
                            165 	.globl _IE
                            166 	.globl _DP0L
                            167 	.globl _DPL
                            168 	.globl _DP0H
                            169 	.globl _DPH
                            170 	.globl _B
                            171 	.globl _ACC
                            172 	.globl _EECON
                            173 	.globl _KBF
                            174 	.globl _KBE
                            175 	.globl _KBLS
                            176 	.globl _BRL
                            177 	.globl _BDRCON
                            178 	.globl _T2MOD
                            179 	.globl _SPDAT
                            180 	.globl _SPSTA
                            181 	.globl _SPCON
                            182 	.globl _SADEN
                            183 	.globl _SADDR
                            184 	.globl _WDTPRG
                            185 	.globl _WDTRST
                            186 	.globl _P5
                            187 	.globl _P4
                            188 	.globl _IPH1
                            189 	.globl _IPL1
                            190 	.globl _IPH0
                            191 	.globl _IPL0
                            192 	.globl _IEN1
                            193 	.globl _IEN0
                            194 	.globl _CMOD
                            195 	.globl _CL
                            196 	.globl _CH
                            197 	.globl _CCON
                            198 	.globl _CCAPM4
                            199 	.globl _CCAPM3
                            200 	.globl _CCAPM2
                            201 	.globl _CCAPM1
                            202 	.globl _CCAPM0
                            203 	.globl _CCAP4L
                            204 	.globl _CCAP3L
                            205 	.globl _CCAP2L
                            206 	.globl _CCAP1L
                            207 	.globl _CCAP0L
                            208 	.globl _CCAP4H
                            209 	.globl _CCAP3H
                            210 	.globl _CCAP2H
                            211 	.globl _CCAP1H
                            212 	.globl _CCAP0H
                            213 	.globl _CKCKON1
                            214 	.globl _CKCKON0
                            215 	.globl _CKRL
                            216 	.globl _AUXR1
                            217 	.globl _AUXR
                            218 	.globl _TH2
                            219 	.globl _TL2
                            220 	.globl _RCAP2H
                            221 	.globl _RCAP2L
                            222 	.globl _T2CON
                            223 	.globl _heap
                            224 	.globl _putstr
                            225 	.globl _putchar
                            226 	.globl _getchar
                            227 	.globl _fetch_bufsize
                            228 	.globl _dataout
                            229 	.globl _dataout1
                            230 ;--------------------------------------------------------
                            231 ; special function registers
                            232 ;--------------------------------------------------------
                            233 	.area RSEG    (DATA)
                    00C8    234 _T2CON	=	0x00c8
                    00CA    235 _RCAP2L	=	0x00ca
                    00CB    236 _RCAP2H	=	0x00cb
                    00CC    237 _TL2	=	0x00cc
                    00CD    238 _TH2	=	0x00cd
                    008E    239 _AUXR	=	0x008e
                    00A2    240 _AUXR1	=	0x00a2
                    0097    241 _CKRL	=	0x0097
                    008F    242 _CKCKON0	=	0x008f
                    008F    243 _CKCKON1	=	0x008f
                    00FA    244 _CCAP0H	=	0x00fa
                    00FB    245 _CCAP1H	=	0x00fb
                    00FC    246 _CCAP2H	=	0x00fc
                    00FD    247 _CCAP3H	=	0x00fd
                    00FE    248 _CCAP4H	=	0x00fe
                    00EA    249 _CCAP0L	=	0x00ea
                    00EB    250 _CCAP1L	=	0x00eb
                    00EC    251 _CCAP2L	=	0x00ec
                    00ED    252 _CCAP3L	=	0x00ed
                    00EE    253 _CCAP4L	=	0x00ee
                    00DA    254 _CCAPM0	=	0x00da
                    00DB    255 _CCAPM1	=	0x00db
                    00DC    256 _CCAPM2	=	0x00dc
                    00DD    257 _CCAPM3	=	0x00dd
                    00DE    258 _CCAPM4	=	0x00de
                    00D8    259 _CCON	=	0x00d8
                    00F9    260 _CH	=	0x00f9
                    00E9    261 _CL	=	0x00e9
                    00D9    262 _CMOD	=	0x00d9
                    00A8    263 _IEN0	=	0x00a8
                    00B1    264 _IEN1	=	0x00b1
                    00B8    265 _IPL0	=	0x00b8
                    00B7    266 _IPH0	=	0x00b7
                    00B2    267 _IPL1	=	0x00b2
                    00B3    268 _IPH1	=	0x00b3
                    00C0    269 _P4	=	0x00c0
                    00D8    270 _P5	=	0x00d8
                    00A6    271 _WDTRST	=	0x00a6
                    00A7    272 _WDTPRG	=	0x00a7
                    00A9    273 _SADDR	=	0x00a9
                    00B9    274 _SADEN	=	0x00b9
                    00C3    275 _SPCON	=	0x00c3
                    00C4    276 _SPSTA	=	0x00c4
                    00C5    277 _SPDAT	=	0x00c5
                    00C9    278 _T2MOD	=	0x00c9
                    009B    279 _BDRCON	=	0x009b
                    009A    280 _BRL	=	0x009a
                    009C    281 _KBLS	=	0x009c
                    009D    282 _KBE	=	0x009d
                    009E    283 _KBF	=	0x009e
                    00D2    284 _EECON	=	0x00d2
                    00E0    285 _ACC	=	0x00e0
                    00F0    286 _B	=	0x00f0
                    0083    287 _DPH	=	0x0083
                    0083    288 _DP0H	=	0x0083
                    0082    289 _DPL	=	0x0082
                    0082    290 _DP0L	=	0x0082
                    00A8    291 _IE	=	0x00a8
                    00B8    292 _IP	=	0x00b8
                    0080    293 _P0	=	0x0080
                    0090    294 _P1	=	0x0090
                    00A0    295 _P2	=	0x00a0
                    00B0    296 _P3	=	0x00b0
                    0087    297 _PCON	=	0x0087
                    00D0    298 _PSW	=	0x00d0
                    0099    299 _SBUF	=	0x0099
                    0099    300 _SBUF0	=	0x0099
                    0098    301 _SCON	=	0x0098
                    0081    302 _SP	=	0x0081
                    0088    303 _TCON	=	0x0088
                    008C    304 _TH0	=	0x008c
                    008D    305 _TH1	=	0x008d
                    008A    306 _TL0	=	0x008a
                    008B    307 _TL1	=	0x008b
                    0089    308 _TMOD	=	0x0089
                            309 ;--------------------------------------------------------
                            310 ; special function bits
                            311 ;--------------------------------------------------------
                            312 	.area RSEG    (DATA)
                    00AD    313 _ET2	=	0x00ad
                    00BD    314 _PT2	=	0x00bd
                    00C8    315 _T2CON_0	=	0x00c8
                    00C9    316 _T2CON_1	=	0x00c9
                    00CA    317 _T2CON_2	=	0x00ca
                    00CB    318 _T2CON_3	=	0x00cb
                    00CC    319 _T2CON_4	=	0x00cc
                    00CD    320 _T2CON_5	=	0x00cd
                    00CE    321 _T2CON_6	=	0x00ce
                    00CF    322 _T2CON_7	=	0x00cf
                    00C8    323 _CP_RL2	=	0x00c8
                    00C9    324 _C_T2	=	0x00c9
                    00CA    325 _TR2	=	0x00ca
                    00CB    326 _EXEN2	=	0x00cb
                    00CC    327 _TCLK	=	0x00cc
                    00CD    328 _RCLK	=	0x00cd
                    00CE    329 _EXF2	=	0x00ce
                    00CF    330 _TF2	=	0x00cf
                    00DF    331 _CF	=	0x00df
                    00DE    332 _CR	=	0x00de
                    00DC    333 _CCF4	=	0x00dc
                    00DB    334 _CCF3	=	0x00db
                    00DA    335 _CCF2	=	0x00da
                    00D9    336 _CCF1	=	0x00d9
                    00D8    337 _CCF0	=	0x00d8
                    00AE    338 _EC	=	0x00ae
                    00BE    339 _PPCL	=	0x00be
                    00BD    340 _PT2L	=	0x00bd
                    00BC    341 _PLS	=	0x00bc
                    00BB    342 _PT1L	=	0x00bb
                    00BA    343 _PX1L	=	0x00ba
                    00B9    344 _PT0L	=	0x00b9
                    00B8    345 _PX0L	=	0x00b8
                    00C0    346 _P4_0	=	0x00c0
                    00C1    347 _P4_1	=	0x00c1
                    00C2    348 _P4_2	=	0x00c2
                    00C3    349 _P4_3	=	0x00c3
                    00C4    350 _P4_4	=	0x00c4
                    00C5    351 _P4_5	=	0x00c5
                    00C6    352 _P4_6	=	0x00c6
                    00C7    353 _P4_7	=	0x00c7
                    00D8    354 _P5_0	=	0x00d8
                    00D9    355 _P5_1	=	0x00d9
                    00DA    356 _P5_2	=	0x00da
                    00DB    357 _P5_3	=	0x00db
                    00DC    358 _P5_4	=	0x00dc
                    00DD    359 _P5_5	=	0x00dd
                    00DE    360 _P5_6	=	0x00de
                    00DF    361 _P5_7	=	0x00df
                    00F0    362 _BREG_F0	=	0x00f0
                    00F1    363 _BREG_F1	=	0x00f1
                    00F2    364 _BREG_F2	=	0x00f2
                    00F3    365 _BREG_F3	=	0x00f3
                    00F4    366 _BREG_F4	=	0x00f4
                    00F5    367 _BREG_F5	=	0x00f5
                    00F6    368 _BREG_F6	=	0x00f6
                    00F7    369 _BREG_F7	=	0x00f7
                    00A8    370 _EX0	=	0x00a8
                    00A9    371 _ET0	=	0x00a9
                    00AA    372 _EX1	=	0x00aa
                    00AB    373 _ET1	=	0x00ab
                    00AC    374 _ES	=	0x00ac
                    00AF    375 _EA	=	0x00af
                    00B8    376 _PX0	=	0x00b8
                    00B9    377 _PT0	=	0x00b9
                    00BA    378 _PX1	=	0x00ba
                    00BB    379 _PT1	=	0x00bb
                    00BC    380 _PS	=	0x00bc
                    0080    381 _P0_0	=	0x0080
                    0081    382 _P0_1	=	0x0081
                    0082    383 _P0_2	=	0x0082
                    0083    384 _P0_3	=	0x0083
                    0084    385 _P0_4	=	0x0084
                    0085    386 _P0_5	=	0x0085
                    0086    387 _P0_6	=	0x0086
                    0087    388 _P0_7	=	0x0087
                    0090    389 _P1_0	=	0x0090
                    0091    390 _P1_1	=	0x0091
                    0092    391 _P1_2	=	0x0092
                    0093    392 _P1_3	=	0x0093
                    0094    393 _P1_4	=	0x0094
                    0095    394 _P1_5	=	0x0095
                    0096    395 _P1_6	=	0x0096
                    0097    396 _P1_7	=	0x0097
                    00A0    397 _P2_0	=	0x00a0
                    00A1    398 _P2_1	=	0x00a1
                    00A2    399 _P2_2	=	0x00a2
                    00A3    400 _P2_3	=	0x00a3
                    00A4    401 _P2_4	=	0x00a4
                    00A5    402 _P2_5	=	0x00a5
                    00A6    403 _P2_6	=	0x00a6
                    00A7    404 _P2_7	=	0x00a7
                    00B0    405 _P3_0	=	0x00b0
                    00B1    406 _P3_1	=	0x00b1
                    00B2    407 _P3_2	=	0x00b2
                    00B3    408 _P3_3	=	0x00b3
                    00B4    409 _P3_4	=	0x00b4
                    00B5    410 _P3_5	=	0x00b5
                    00B6    411 _P3_6	=	0x00b6
                    00B7    412 _P3_7	=	0x00b7
                    00B0    413 _RXD	=	0x00b0
                    00B0    414 _RXD0	=	0x00b0
                    00B1    415 _TXD	=	0x00b1
                    00B1    416 _TXD0	=	0x00b1
                    00B2    417 _INT0	=	0x00b2
                    00B3    418 _INT1	=	0x00b3
                    00B4    419 _T0	=	0x00b4
                    00B5    420 _T1	=	0x00b5
                    00B6    421 _WR	=	0x00b6
                    00B7    422 _RD	=	0x00b7
                    00D0    423 _P	=	0x00d0
                    00D1    424 _F1	=	0x00d1
                    00D2    425 _OV	=	0x00d2
                    00D3    426 _RS0	=	0x00d3
                    00D4    427 _RS1	=	0x00d4
                    00D5    428 _F0	=	0x00d5
                    00D6    429 _AC	=	0x00d6
                    00D7    430 _CY	=	0x00d7
                    0098    431 _RI	=	0x0098
                    0099    432 _TI	=	0x0099
                    009A    433 _RB8	=	0x009a
                    009B    434 _TB8	=	0x009b
                    009C    435 _REN	=	0x009c
                    009D    436 _SM2	=	0x009d
                    009E    437 _SM1	=	0x009e
                    009F    438 _SM0	=	0x009f
                    0088    439 _IT0	=	0x0088
                    0089    440 _IE0	=	0x0089
                    008A    441 _IT1	=	0x008a
                    008B    442 _IE1	=	0x008b
                    008C    443 _TR0	=	0x008c
                    008D    444 _TF0	=	0x008d
                    008E    445 _TR1	=	0x008e
                    008F    446 _TF1	=	0x008f
                            447 ;--------------------------------------------------------
                            448 ; overlayable register banks
                            449 ;--------------------------------------------------------
                            450 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     451 	.ds 8
                            452 ;--------------------------------------------------------
                            453 ; internal ram data
                            454 ;--------------------------------------------------------
                            455 	.area DSEG    (DATA)
   0000                     456 _main_sloc0_1_0:
   0000                     457 	.ds 2
   0002                     458 _main_sloc1_1_0:
   0002                     459 	.ds 3
   0005                     460 _main_sloc2_1_0:
   0005                     461 	.ds 2
   0007                     462 _main_sloc3_1_0:
   0007                     463 	.ds 2
   0009                     464 _main_sloc4_1_0:
   0009                     465 	.ds 2
   000B                     466 _main_sloc5_1_0:
   000B                     467 	.ds 2
   000D                     468 _main_sloc6_1_0:
   000D                     469 	.ds 2
   000F                     470 _main_sloc7_1_0:
   000F                     471 	.ds 2
   0011                     472 _main_sloc8_1_0:
   0011                     473 	.ds 2
   0013                     474 _main_sloc9_1_0:
   0013                     475 	.ds 2
   0015                     476 _main_sloc10_1_0:
   0015                     477 	.ds 2
   0017                     478 _main_sloc11_1_0:
   0017                     479 	.ds 2
   0019                     480 _main_sloc12_1_0:
   0019                     481 	.ds 2
   001B                     482 _main_sloc13_1_0:
   001B                     483 	.ds 2
   001D                     484 _main_sloc14_1_0:
   001D                     485 	.ds 2
   001F                     486 _main_sloc15_1_0:
   001F                     487 	.ds 2
   0021                     488 _main_sloc16_1_0:
   0021                     489 	.ds 2
   0023                     490 _main_sloc17_1_0:
   0023                     491 	.ds 2
   0025                     492 _main_sloc18_1_0:
   0025                     493 	.ds 3
   0028                     494 _main_sloc19_1_0:
   0028                     495 	.ds 3
   002B                     496 _main_sloc20_1_0:
   002B                     497 	.ds 3
   002E                     498 _main_sloc21_1_0:
   002E                     499 	.ds 3
   0031                     500 _main_sloc22_1_0:
   0031                     501 	.ds 3
   0034                     502 _main_sloc23_1_0:
   0034                     503 	.ds 2
   0036                     504 _main_sloc27_1_0:
   0036                     505 	.ds 2
   0038                     506 _main_sloc28_1_0:
   0038                     507 	.ds 2
   003A                     508 _main_sloc29_1_0:
   003A                     509 	.ds 2
                            510 ;--------------------------------------------------------
                            511 ; overlayable items in internal ram 
                            512 ;--------------------------------------------------------
                            513 	.area OSEG    (OVR,DATA)
                            514 ;--------------------------------------------------------
                            515 ; Stack segment in internal ram 
                            516 ;--------------------------------------------------------
                            517 	.area	SSEG	(DATA)
   0000                     518 __start__stack:
   0000                     519 	.ds	1
                            520 
                            521 ;--------------------------------------------------------
                            522 ; indirectly addressable internal ram data
                            523 ;--------------------------------------------------------
                            524 	.area ISEG    (DATA)
                            525 ;--------------------------------------------------------
                            526 ; bit data
                            527 ;--------------------------------------------------------
                            528 	.area BSEG    (BIT)
                            529 ;--------------------------------------------------------
                            530 ; paged external ram data
                            531 ;--------------------------------------------------------
                            532 	.area PSEG    (PAG,XDATA)
                            533 ;--------------------------------------------------------
                            534 ; external ram data
                            535 ;--------------------------------------------------------
                            536 	.area XSEG    (XDATA)
   0000                     537 _heap::
   0000                     538 	.ds 3232
   0CA0                     539 _main_r_1_1:
   0CA0                     540 	.ds 2
   0CA2                     541 _main_last_j_1_1:
   0CA2                     542 	.ds 2
   0CA4                     543 _main_last_star_1_1:
   0CA4                     544 	.ds 2
   0CA6                     545 _main_s_1_1:
   0CA6                     546 	.ds 2
   0CA8                     547 _main_count_char_1_1:
   0CA8                     548 	.ds 2
   0CAA                     549 _main_j_1_1:
   0CAA                     550 	.ds 2
   0CAC                     551 _main_buffer0_1_1:
   0CAC                     552 	.ds 2
   0CAE                     553 _main_buffer1_1_1:
   0CAE                     554 	.ds 2
   0CB0                     555 _main_buffer2_1_1:
   0CB0                     556 	.ds 3
   0CB3                     557 _main_buf_int_1_1:
   0CB3                     558 	.ds 2
   0CB5                     559 _putstr_s_1_1:
   0CB5                     560 	.ds 3
   0CB8                     561 _putchar_c_1_1:
   0CB8                     562 	.ds 1
   0CB9                     563 _fetch_bufsize_temp_1_1:
   0CB9                     564 	.ds 10
   0CC3                     565 _dataout_x_1_1:
   0CC3                     566 	.ds 2
                    FA00    567 _dataout_check_1_1	=	0xfa00
   0CC5                     568 _dataout1_y_1_1:
   0CC5                     569 	.ds 2
                    FB00    570 _dataout1_check1_1_1	=	0xfb00
                            571 ;--------------------------------------------------------
                            572 ; external initialized ram data
                            573 ;--------------------------------------------------------
                            574 	.area XISEG   (XDATA)
                            575 	.area HOME    (CODE)
                            576 	.area GSINIT0 (CODE)
                            577 	.area GSINIT1 (CODE)
                            578 	.area GSINIT2 (CODE)
                            579 	.area GSINIT3 (CODE)
                            580 	.area GSINIT4 (CODE)
                            581 	.area GSINIT5 (CODE)
                            582 	.area GSINIT  (CODE)
                            583 	.area GSFINAL (CODE)
                            584 	.area CSEG    (CODE)
                            585 ;--------------------------------------------------------
                            586 ; interrupt vector 
                            587 ;--------------------------------------------------------
                            588 	.area HOME    (CODE)
   0000                     589 __interrupt_vect:
   0000 02s00r00            590 	ljmp	__sdcc_gsinit_startup
                            591 ;--------------------------------------------------------
                            592 ; global & static initialisations
                            593 ;--------------------------------------------------------
                            594 	.area HOME    (CODE)
                            595 	.area GSINIT  (CODE)
                            596 	.area GSFINAL (CODE)
                            597 	.area GSINIT  (CODE)
                            598 	.globl __sdcc_gsinit_startup
                            599 	.globl __sdcc_program_startup
                            600 	.globl __start__stack
                            601 	.globl __mcs51_genXINIT
                            602 	.globl __mcs51_genXRAMCLEAR
                            603 	.globl __mcs51_genRAMCLEAR
                            604 	.area GSFINAL (CODE)
   0000 02s00r00            605 	ljmp	__sdcc_program_startup
                            606 ;--------------------------------------------------------
                            607 ; Home
                            608 ;--------------------------------------------------------
                            609 	.area HOME    (CODE)
                            610 	.area CSEG    (CODE)
   0000                     611 __sdcc_program_startup:
   0000 12s00r05            612 	lcall	_main
                            613 ;	return from main will lock up
   0003 80 FE               614 	sjmp .
                            615 ;--------------------------------------------------------
                            616 ; code
                            617 ;--------------------------------------------------------
                            618 	.area CSEG    (CODE)
                            619 ;------------------------------------------------------------
                            620 ;Allocation info for local variables in function 'main'
                            621 ;------------------------------------------------------------
                            622 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                            623 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                            624 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                            625 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                            626 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                            627 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                            628 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                            629 ;sloc7                     Allocated with name '_main_sloc7_1_0'
                            630 ;sloc8                     Allocated with name '_main_sloc8_1_0'
                            631 ;sloc9                     Allocated with name '_main_sloc9_1_0'
                            632 ;sloc10                    Allocated with name '_main_sloc10_1_0'
                            633 ;sloc11                    Allocated with name '_main_sloc11_1_0'
                            634 ;sloc12                    Allocated with name '_main_sloc12_1_0'
                            635 ;sloc13                    Allocated with name '_main_sloc13_1_0'
                            636 ;sloc14                    Allocated with name '_main_sloc14_1_0'
                            637 ;sloc15                    Allocated with name '_main_sloc15_1_0'
                            638 ;sloc16                    Allocated with name '_main_sloc16_1_0'
                            639 ;sloc17                    Allocated with name '_main_sloc17_1_0'
                            640 ;sloc18                    Allocated with name '_main_sloc18_1_0'
                            641 ;sloc19                    Allocated with name '_main_sloc19_1_0'
                            642 ;sloc20                    Allocated with name '_main_sloc20_1_0'
                            643 ;sloc21                    Allocated with name '_main_sloc21_1_0'
                            644 ;sloc22                    Allocated with name '_main_sloc22_1_0'
                            645 ;sloc23                    Allocated with name '_main_sloc23_1_0'
                            646 ;sloc24                    Allocated with name '_main_sloc24_1_0'
                            647 ;sloc25                    Allocated with name '_main_sloc25_1_0'
                            648 ;sloc26                    Allocated with name '_main_sloc26_1_0'
                            649 ;sloc27                    Allocated with name '_main_sloc27_1_0'
                            650 ;sloc28                    Allocated with name '_main_sloc28_1_0'
                            651 ;sloc29                    Allocated with name '_main_sloc29_1_0'
                            652 ;i                         Allocated with name '_main_i_1_1'
                            653 ;a1                        Allocated with name '_main_a1_1_1'
                            654 ;r                         Allocated with name '_main_r_1_1'
                            655 ;last_j                    Allocated with name '_main_last_j_1_1'
                            656 ;last_q                    Allocated with name '_main_last_q_1_1'
                            657 ;last_s                    Allocated with name '_main_last_s_1_1'
                            658 ;last_star                 Allocated with name '_main_last_star_1_1'
                            659 ;s                         Allocated with name '_main_s_1_1'
                            660 ;count_char                Allocated with name '_main_count_char_1_1'
                            661 ;err                       Allocated with name '_main_err_1_1'
                            662 ;j                         Allocated with name '_main_j_1_1'
                            663 ;zero                      Allocated with name '_main_zero_1_1'
                            664 ;one                       Allocated with name '_main_one_1_1'
                            665 ;a                         Allocated with name '_main_a_1_1'
                            666 ;buffer0                   Allocated with name '_main_buffer0_1_1'
                            667 ;buffer1                   Allocated with name '_main_buffer1_1_1'
                            668 ;buffer2                   Allocated with name '_main_buffer2_1_1'
                            669 ;buf_int                   Allocated with name '_main_buf_int_1_1'
                            670 ;------------------------------------------------------------
                            671 ;	main.c:46: void main()
                            672 ;	-----------------------------------------
                            673 ;	 function main
                            674 ;	-----------------------------------------
   0005                     675 _main:
                    0002    676 	ar2 = 0x02
                    0003    677 	ar3 = 0x03
                    0004    678 	ar4 = 0x04
                    0005    679 	ar5 = 0x05
                    0006    680 	ar6 = 0x06
                    0007    681 	ar7 = 0x07
                    0000    682 	ar0 = 0x00
                    0001    683 	ar1 = 0x01
                            684 ;	main.c:48: int i,a1=0,r,last_j=0,last_q=0,last_s = 0,last_star=0,s,count_char=0,err=0;
                            685 ;	genAssign
   0005 90s0CrA2            686 	mov	dptr,#_main_last_j_1_1
   0008 E4                  687 	clr	a
   0009 F0                  688 	movx	@dptr,a
   000A A3                  689 	inc	dptr
   000B F0                  690 	movx	@dptr,a
                            691 ;	genAssign
   000C 90s0CrA4            692 	mov	dptr,#_main_last_star_1_1
   000F E4                  693 	clr	a
   0010 F0                  694 	movx	@dptr,a
   0011 A3                  695 	inc	dptr
   0012 F0                  696 	movx	@dptr,a
                            697 ;	genAssign
   0013 90s0CrA8            698 	mov	dptr,#_main_count_char_1_1
   0016 E4                  699 	clr	a
   0017 F0                  700 	movx	@dptr,a
   0018 A3                  701 	inc	dptr
   0019 F0                  702 	movx	@dptr,a
                            703 ;	main.c:49: volatile int j=0;
                            704 ;	genAssign
   001A 90s0CrAA            705 	mov	dptr,#_main_j_1_1
   001D E4                  706 	clr	a
   001E F0                  707 	movx	@dptr,a
   001F A3                  708 	inc	dptr
   0020 F0                  709 	movx	@dptr,a
                            710 ;	main.c:55: unsigned int buf_int = 1;
                            711 ;	genAssign
   0021 90s0CrB3            712 	mov	dptr,#_main_buf_int_1_1
   0024 74 01               713 	mov	a,#0x01
   0026 F0                  714 	movx	@dptr,a
   0027 E4                  715 	clr	a
   0028 A3                  716 	inc	dptr
   0029 F0                  717 	movx	@dptr,a
                            718 ;	main.c:58: init_dynamic_memory((MEMHEADER xdata *)heap, HEAP_SIZE);
                            719 ;	genAssign
   002A 90s00r00            720 	mov	dptr,#_init_dynamic_memory_PARM_2
   002D 74 A0               721 	mov	a,#0xA0
   002F F0                  722 	movx	@dptr,a
   0030 A3                  723 	inc	dptr
   0031 74 0C               724 	mov	a,#0x0C
   0033 F0                  725 	movx	@dptr,a
                            726 ;	genCall
                            727 ;	Peephole 182.a	used 16 bit load of DPTR
   0034 90s00r00            728 	mov	dptr,#_heap
   0037 12s00r00            729 	lcall	_init_dynamic_memory
                            730 ;	main.c:66: while(((buf_int%32) != 0) || (buf_int == 0) || (buffer0 == 0) || (buffer1 == 0))
   003A                     731 00113$:
                            732 ;	genAssign
   003A 90s0CrB3            733 	mov	dptr,#_main_buf_int_1_1
   003D E0                  734 	movx	a,@dptr
   003E FA                  735 	mov	r2,a
   003F A3                  736 	inc	dptr
   0040 E0                  737 	movx	a,@dptr
   0041 FB                  738 	mov	r3,a
                            739 ;	genAnd
   0042 74 1F               740 	mov	a,#0x1F
   0044 5A                  741 	anl	a,r2
   0045 FC                  742 	mov	r4,a
   0046 7D 00               743 	mov	r5,#0x00
                            744 ;	genCmpEq
                            745 ;	gencjneshort
                            746 ;	Peephole 112.b	changed ljmp to sjmp
                            747 ;	Peephole 198.a	optimized misc jump sequence
   0048 BC 00 20            748 	cjne	r4,#0x00,00114$
   004B BD 00 1D            749 	cjne	r5,#0x00,00114$
                            750 ;	Peephole 200.b	removed redundant sjmp
                            751 ;	Peephole 300	removed redundant label 00240$
                            752 ;	Peephole 300	removed redundant label 00241$
                            753 ;	genIfx
   004E EA                  754 	mov	a,r2
   004F 4B                  755 	orl	a,r3
                            756 ;	genIfxJump
                            757 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0050 60 19               758 	jz	00114$
                            759 ;	Peephole 300	removed redundant label 00242$
                            760 ;	genAssign
   0052 90s0CrAC            761 	mov	dptr,#_main_buffer0_1_1
   0055 E0                  762 	movx	a,@dptr
   0056 FC                  763 	mov	r4,a
   0057 A3                  764 	inc	dptr
   0058 E0                  765 	movx	a,@dptr
                            766 ;	genIfx
   0059 FD                  767 	mov	r5,a
                            768 ;	Peephole 135	removed redundant mov
   005A 4C                  769 	orl	a,r4
                            770 ;	genIfxJump
                            771 ;	Peephole 108.c	removed ljmp by inverse jump logic
   005B 60 0E               772 	jz	00114$
                            773 ;	Peephole 300	removed redundant label 00243$
                            774 ;	genAssign
   005D 90s0CrAE            775 	mov	dptr,#_main_buffer1_1_1
   0060 E0                  776 	movx	a,@dptr
   0061 FE                  777 	mov	r6,a
   0062 A3                  778 	inc	dptr
   0063 E0                  779 	movx	a,@dptr
                            780 ;	genIfx
   0064 FF                  781 	mov	r7,a
                            782 ;	Peephole 135	removed redundant mov
   0065 4E                  783 	orl	a,r6
                            784 ;	genIfxJump
   0066 60 03               785 	jz	00244$
   0068 02s01rA0            786 	ljmp	00115$
   006B                     787 00244$:
   006B                     788 00114$:
                            789 ;	main.c:70: buf_int = fetch_bufsize();
                            790 ;	genCall
   006B 12s13r8D            791 	lcall	_fetch_bufsize
   006E AA 82               792 	mov	r2,dpl
   0070 AB 83               793 	mov	r3,dph
                            794 ;	genAssign
   0072 90s0CrB3            795 	mov	dptr,#_main_buf_int_1_1
   0075 EA                  796 	mov	a,r2
   0076 F0                  797 	movx	@dptr,a
   0077 A3                  798 	inc	dptr
   0078 EB                  799 	mov	a,r3
   0079 F0                  800 	movx	@dptr,a
                            801 ;	main.c:75: if((buf_int == 0) || (buf_int%32) != 0)
                            802 ;	genIfx
   007A EA                  803 	mov	a,r2
   007B 4B                  804 	orl	a,r3
                            805 ;	genIfxJump
                            806 ;	Peephole 108.c	removed ljmp by inverse jump logic
   007C 60 0E               807 	jz	00101$
                            808 ;	Peephole 300	removed redundant label 00245$
                            809 ;	genAnd
   007E 74 1F               810 	mov	a,#0x1F
   0080 5A                  811 	anl	a,r2
   0081 F8                  812 	mov	r0,a
   0082 79 00               813 	mov	r1,#0x00
                            814 ;	genCmpEq
                            815 ;	gencjneshort
   0084 B8 00 05            816 	cjne	r0,#0x00,00246$
   0087 B9 00 02            817 	cjne	r1,#0x00,00246$
                            818 ;	Peephole 112.b	changed ljmp to sjmp
   008A 80 2E               819 	sjmp	00102$
   008C                     820 00246$:
   008C                     821 00101$:
                            822 ;	main.c:77: printf_tiny("\n\rIncorrect buffer size");
                            823 ;	genIpush
   008C C0 02               824 	push	ar2
   008E C0 03               825 	push	ar3
   0090 74r00               826 	mov	a,#__str_0
   0092 C0 E0               827 	push	acc
   0094 74s00               828 	mov	a,#(__str_0 >> 8)
   0096 C0 E0               829 	push	acc
                            830 ;	genCall
   0098 12s00r00            831 	lcall	_printf_tiny
   009B 15 81               832 	dec	sp
   009D 15 81               833 	dec	sp
   009F D0 03               834 	pop	ar3
   00A1 D0 02               835 	pop	ar2
                            836 ;	main.c:78: printf_tiny("\n\rEnter buffer size in even multiples of 16\n\r");
                            837 ;	genIpush
   00A3 C0 02               838 	push	ar2
   00A5 C0 03               839 	push	ar3
   00A7 74r18               840 	mov	a,#__str_1
   00A9 C0 E0               841 	push	acc
   00AB 74s00               842 	mov	a,#(__str_1 >> 8)
   00AD C0 E0               843 	push	acc
                            844 ;	genCall
   00AF 12s00r00            845 	lcall	_printf_tiny
   00B2 15 81               846 	dec	sp
   00B4 15 81               847 	dec	sp
   00B6 D0 03               848 	pop	ar3
   00B8 D0 02               849 	pop	ar2
   00BA                     850 00102$:
                            851 ;	main.c:80: printf_tiny("%d\n\r",buf_int);
                            852 ;	genIpush
   00BA C0 02               853 	push	ar2
   00BC C0 03               854 	push	ar3
   00BE C0 02               855 	push	ar2
   00C0 C0 03               856 	push	ar3
                            857 ;	genIpush
   00C2 74r46               858 	mov	a,#__str_2
   00C4 C0 E0               859 	push	acc
   00C6 74s00               860 	mov	a,#(__str_2 >> 8)
   00C8 C0 E0               861 	push	acc
                            862 ;	genCall
   00CA 12s00r00            863 	lcall	_printf_tiny
   00CD E5 81               864 	mov	a,sp
   00CF 24 FC               865 	add	a,#0xfc
   00D1 F5 81               866 	mov	sp,a
   00D3 D0 03               867 	pop	ar3
   00D5 D0 02               868 	pop	ar2
                            869 ;	main.c:81: if ((buffer0 = malloc(buf_int)) == 0)  //allocate buffer0
                            870 ;	genCall
   00D7 8A 82               871 	mov	dpl,r2
   00D9 8B 83               872 	mov	dph,r3
   00DB C0 02               873 	push	ar2
   00DD C0 03               874 	push	ar3
   00DF 12s00r00            875 	lcall	_malloc
   00E2 A8 82               876 	mov	r0,dpl
   00E4 A9 83               877 	mov	r1,dph
   00E6 D0 03               878 	pop	ar3
   00E8 D0 02               879 	pop	ar2
                            880 ;	genAssign
   00EA 90s0CrAC            881 	mov	dptr,#_main_buffer0_1_1
   00ED E8                  882 	mov	a,r0
   00EE F0                  883 	movx	@dptr,a
   00EF A3                  884 	inc	dptr
   00F0 E9                  885 	mov	a,r1
   00F1 F0                  886 	movx	@dptr,a
                            887 ;	genIfx
   00F2 E8                  888 	mov	a,r0
   00F3 49                  889 	orl	a,r1
                            890 ;	genIfxJump
                            891 ;	Peephole 108.b	removed ljmp by inverse jump logic
   00F4 70 12               892 	jnz	00105$
                            893 ;	Peephole 300	removed redundant label 00247$
                            894 ;	main.c:83: printf_tiny("Malloc buffer0 failed. Please choose a smaller buffer size\n\r");
                            895 ;	genIpush
   00F6 74r4B               896 	mov	a,#__str_3
   00F8 C0 E0               897 	push	acc
   00FA 74s00               898 	mov	a,#(__str_3 >> 8)
   00FC C0 E0               899 	push	acc
                            900 ;	genCall
   00FE 12s00r00            901 	lcall	_printf_tiny
   0101 15 81               902 	dec	sp
   0103 15 81               903 	dec	sp
                            904 ;	main.c:84: continue;
   0105 02s00r3A            905 	ljmp	00113$
   0108                     906 00105$:
                            907 ;	main.c:87: if ((buffer1 = malloc((buf_int/8))) == 0)         //allocate buffer1
                            908 ;	genIpush
   0108 C0 00               909 	push	ar0
   010A C0 01               910 	push	ar1
                            911 ;	genAssign
   010C 8A 00               912 	mov	ar0,r2
   010E 8B 01               913 	mov	ar1,r3
                            914 ;	genRightShift
                            915 ;	genRightShiftLiteral
                            916 ;	genrshTwo
   0110 E9                  917 	mov	a,r1
   0111 C4                  918 	swap	a
   0112 23                  919 	rl	a
   0113 C8                  920 	xch	a,r0
   0114 C4                  921 	swap	a
   0115 23                  922 	rl	a
   0116 54 1F               923 	anl	a,#0x1f
   0118 68                  924 	xrl	a,r0
   0119 C8                  925 	xch	a,r0
   011A 54 1F               926 	anl	a,#0x1f
   011C C8                  927 	xch	a,r0
   011D 68                  928 	xrl	a,r0
   011E C8                  929 	xch	a,r0
   011F F9                  930 	mov	r1,a
                            931 ;	genCall
   0120 88 82               932 	mov	dpl,r0
   0122 89 83               933 	mov	dph,r1
   0124 C0 02               934 	push	ar2
   0126 C0 03               935 	push	ar3
   0128 12s00r00            936 	lcall	_malloc
   012B A8 82               937 	mov	r0,dpl
   012D A9 83               938 	mov	r1,dph
   012F D0 03               939 	pop	ar3
   0131 D0 02               940 	pop	ar2
                            941 ;	genAssign
   0133 90s0CrAE            942 	mov	dptr,#_main_buffer1_1_1
   0136 E8                  943 	mov	a,r0
   0137 F0                  944 	movx	@dptr,a
   0138 A3                  945 	inc	dptr
   0139 E9                  946 	mov	a,r1
   013A F0                  947 	movx	@dptr,a
                            948 ;	genIfx
   013B E8                  949 	mov	a,r0
   013C 49                  950 	orl	a,r1
                            951 ;	genIpop
   013D D0 01               952 	pop	ar1
   013F D0 00               953 	pop	ar0
                            954 ;	genIfxJump
                            955 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0141 70 2D               956 	jnz	00107$
                            957 ;	Peephole 300	removed redundant label 00248$
                            958 ;	main.c:89: printf_tiny("Malloc buffer1 failed. Please choose a smaller buffer size\n\r");
                            959 ;	genIpush
   0143 C0 00               960 	push	ar0
   0145 C0 01               961 	push	ar1
   0147 74r88               962 	mov	a,#__str_4
   0149 C0 E0               963 	push	acc
   014B 74s00               964 	mov	a,#(__str_4 >> 8)
   014D C0 E0               965 	push	acc
                            966 ;	genCall
   014F 12s00r00            967 	lcall	_printf_tiny
   0152 15 81               968 	dec	sp
   0154 15 81               969 	dec	sp
   0156 D0 01               970 	pop	ar1
   0158 D0 00               971 	pop	ar0
                            972 ;	main.c:90: free (buffer0);  // if buffer1 malloc fails, free buffer 0
                            973 ;	genAssign
                            974 ;	genCast
   015A 88*02               975 	mov	_main_sloc1_1_0,r0
   015C 89*03               976 	mov	(_main_sloc1_1_0 + 1),r1
   015E 75*04 00            977 	mov	(_main_sloc1_1_0 + 2),#0x0
                            978 ;	genCall
   0161 85*02 82            979 	mov	dpl,_main_sloc1_1_0
   0164 85*03 83            980 	mov	dph,(_main_sloc1_1_0 + 1)
   0167 85*04 F0            981 	mov	b,(_main_sloc1_1_0 + 2)
   016A 12s00r00            982 	lcall	_free
                            983 ;	main.c:91: continue;
   016D 02s00r3A            984 	ljmp	00113$
   0170                     985 00107$:
                            986 ;	main.c:93: if ((buffer2 = malloc((buf_int))) == 0)         //allocate buffer1
                            987 ;	genCall
   0170 8A 82               988 	mov	dpl,r2
   0172 8B 83               989 	mov	dph,r3
   0174 12s00r00            990 	lcall	_malloc
   0177 A8 82               991 	mov	r0,dpl
   0179 A9 83               992 	mov	r1,dph
                            993 ;	genCast
   017B 90s0CrB0            994 	mov	dptr,#_main_buffer2_1_1
   017E E8                  995 	mov	a,r0
   017F F0                  996 	movx	@dptr,a
   0180 A3                  997 	inc	dptr
   0181 E9                  998 	mov	a,r1
   0182 F0                  999 	movx	@dptr,a
   0183 A3                 1000 	inc	dptr
   0184 74 00              1001 	mov	a,#0x0
   0186 F0                 1002 	movx	@dptr,a
                           1003 ;	genIfx
   0187 E8                 1004 	mov	a,r0
   0188 49                 1005 	orl	a,r1
                           1006 ;	genIfxJump
   0189 60 03              1007 	jz	00249$
   018B 02s00r3A           1008 	ljmp	00113$
   018E                    1009 00249$:
                           1010 ;	main.c:95: printf_tiny("Malloc buffer2 failed. Please choose a smaller buffer size\n\r");
                           1011 ;	genIpush
   018E 74rC5              1012 	mov	a,#__str_5
   0190 C0 E0              1013 	push	acc
   0192 74s00              1014 	mov	a,#(__str_5 >> 8)
   0194 C0 E0              1015 	push	acc
                           1016 ;	genCall
   0196 12s00r00           1017 	lcall	_printf_tiny
   0199 15 81              1018 	dec	sp
   019B 15 81              1019 	dec	sp
                           1020 ;	main.c:96: continue;
   019D 02s00r3A           1021 	ljmp	00113$
   01A0                    1022 00115$:
                           1023 ;	main.c:100: printf_tiny("\n\n\r'A-z a-z 0-9' - Storage characters");
                           1024 ;	genIpush
   01A0 C0 02              1025 	push	ar2
   01A2 C0 03              1026 	push	ar3
   01A4 C0 04              1027 	push	ar4
   01A6 C0 05              1028 	push	ar5
   01A8 C0 06              1029 	push	ar6
   01AA C0 07              1030 	push	ar7
   01AC 74r02              1031 	mov	a,#__str_6
   01AE C0 E0              1032 	push	acc
   01B0 74s01              1033 	mov	a,#(__str_6 >> 8)
   01B2 C0 E0              1034 	push	acc
                           1035 ;	genCall
   01B4 12s00r00           1036 	lcall	_printf_tiny
   01B7 15 81              1037 	dec	sp
   01B9 15 81              1038 	dec	sp
   01BB D0 07              1039 	pop	ar7
   01BD D0 06              1040 	pop	ar6
   01BF D0 05              1041 	pop	ar5
   01C1 D0 04              1042 	pop	ar4
   01C3 D0 03              1043 	pop	ar3
   01C5 D0 02              1044 	pop	ar2
                           1045 ;	main.c:101: printf_tiny("'?' - Heap Report and empty the buffer\n\r");
                           1046 ;	genIpush
   01C7 C0 02              1047 	push	ar2
   01C9 C0 03              1048 	push	ar3
   01CB C0 04              1049 	push	ar4
   01CD C0 05              1050 	push	ar5
   01CF C0 06              1051 	push	ar6
   01D1 C0 07              1052 	push	ar7
   01D3 74r28              1053 	mov	a,#__str_7
   01D5 C0 E0              1054 	push	acc
   01D7 74s01              1055 	mov	a,#(__str_7 >> 8)
   01D9 C0 E0              1056 	push	acc
                           1057 ;	genCall
   01DB 12s00r00           1058 	lcall	_printf_tiny
   01DE 15 81              1059 	dec	sp
   01E0 15 81              1060 	dec	sp
   01E2 D0 07              1061 	pop	ar7
   01E4 D0 06              1062 	pop	ar6
   01E6 D0 05              1063 	pop	ar5
   01E8 D0 04              1064 	pop	ar4
   01EA D0 03              1065 	pop	ar3
   01EC D0 02              1066 	pop	ar2
                           1067 ;	main.c:102: printf_tiny("'=' - Display characters in the buffer and provide their memory location\n\r");
                           1068 ;	genIpush
   01EE C0 02              1069 	push	ar2
   01F0 C0 03              1070 	push	ar3
   01F2 C0 04              1071 	push	ar4
   01F4 C0 05              1072 	push	ar5
   01F6 C0 06              1073 	push	ar6
   01F8 C0 07              1074 	push	ar7
   01FA 74r51              1075 	mov	a,#__str_8
   01FC C0 E0              1076 	push	acc
   01FE 74s01              1077 	mov	a,#(__str_8 >> 8)
   0200 C0 E0              1078 	push	acc
                           1079 ;	genCall
   0202 12s00r00           1080 	lcall	_printf_tiny
   0205 15 81              1081 	dec	sp
   0207 15 81              1082 	dec	sp
   0209 D0 07              1083 	pop	ar7
   020B D0 06              1084 	pop	ar6
   020D D0 05              1085 	pop	ar5
   020F D0 04              1086 	pop	ar4
   0211 D0 03              1087 	pop	ar3
   0213 D0 02              1088 	pop	ar2
                           1089 ;	main.c:103: printf_tiny("'*' - Copy contents of buffer0 to buffer2\n\r");
                           1090 ;	genIpush
   0215 C0 02              1091 	push	ar2
   0217 C0 03              1092 	push	ar3
   0219 C0 04              1093 	push	ar4
   021B C0 05              1094 	push	ar5
   021D C0 06              1095 	push	ar6
   021F C0 07              1096 	push	ar7
   0221 74r9C              1097 	mov	a,#__str_9
   0223 C0 E0              1098 	push	acc
   0225 74s01              1099 	mov	a,#(__str_9 >> 8)
   0227 C0 E0              1100 	push	acc
                           1101 ;	genCall
   0229 12s00r00           1102 	lcall	_printf_tiny
   022C 15 81              1103 	dec	sp
   022E 15 81              1104 	dec	sp
   0230 D0 07              1105 	pop	ar7
   0232 D0 06              1106 	pop	ar6
   0234 D0 05              1107 	pop	ar5
   0236 D0 04              1108 	pop	ar4
   0238 D0 03              1109 	pop	ar3
   023A D0 02              1110 	pop	ar2
                           1111 ;	main.c:104: printf_tiny("'@' - Heap Report and empty the buffer\n\r");
                           1112 ;	genIpush
   023C C0 02              1113 	push	ar2
   023E C0 03              1114 	push	ar3
   0240 C0 04              1115 	push	ar4
   0242 C0 05              1116 	push	ar5
   0244 C0 06              1117 	push	ar6
   0246 C0 07              1118 	push	ar7
   0248 74rC8              1119 	mov	a,#__str_10
   024A C0 E0              1120 	push	acc
   024C 74s01              1121 	mov	a,#(__str_10 >> 8)
   024E C0 E0              1122 	push	acc
                           1123 ;	genCall
   0250 12s00r00           1124 	lcall	_printf_tiny
   0253 15 81              1125 	dec	sp
   0255 15 81              1126 	dec	sp
   0257 D0 07              1127 	pop	ar7
   0259 D0 06              1128 	pop	ar6
   025B D0 05              1129 	pop	ar5
   025D D0 04              1130 	pop	ar4
   025F D0 03              1131 	pop	ar3
   0261 D0 02              1132 	pop	ar2
                           1133 ;	main.c:107: while(1)
                           1134 ;	genAssign
   0263 8C*0B              1135 	mov	_main_sloc5_1_0,r4
   0265 8D*0C              1136 	mov	(_main_sloc5_1_0 + 1),r5
                           1137 ;	genAssign
   0267 8C*02              1138 	mov	_main_sloc1_1_0,r4
   0269 8D*03              1139 	mov	(_main_sloc1_1_0 + 1),r5
                           1140 ;	genAssign
   026B 8C*00              1141 	mov	_main_sloc0_1_0,r4
   026D 8D*01              1142 	mov	(_main_sloc0_1_0 + 1),r5
                           1143 ;	genAssign
   026F 8A*05              1144 	mov	_main_sloc2_1_0,r2
   0271 8B*06              1145 	mov	(_main_sloc2_1_0 + 1),r3
                           1146 ;	genAssign
   0273 8E*07              1147 	mov	_main_sloc3_1_0,r6
   0275 8F*08              1148 	mov	(_main_sloc3_1_0 + 1),r7
                           1149 ;	genRightShift
                           1150 ;	genRightShiftLiteral
                           1151 ;	genrshTwo
   0277 8A*09              1152 	mov	_main_sloc4_1_0,r2
   0279 EB                 1153 	mov	a,r3
   027A C4                 1154 	swap	a
   027B 23                 1155 	rl	a
   027C C5*09              1156 	xch	a,_main_sloc4_1_0
   027E C4                 1157 	swap	a
   027F 23                 1158 	rl	a
   0280 54 1F              1159 	anl	a,#0x1f
   0282 65*09              1160 	xrl	a,_main_sloc4_1_0
   0284 C5*09              1161 	xch	a,_main_sloc4_1_0
   0286 54 1F              1162 	anl	a,#0x1f
   0288 C5*09              1163 	xch	a,_main_sloc4_1_0
   028A 65*09              1164 	xrl	a,_main_sloc4_1_0
   028C C5*09              1165 	xch	a,_main_sloc4_1_0
   028E F5*0A              1166 	mov	(_main_sloc4_1_0 + 1),a
                           1167 ;	genMinus
                           1168 ;	genMinusDec
   0290 E5*09              1169 	mov	a,_main_sloc4_1_0
   0292 24 FF              1170 	add	a,#0xff
   0294 F8                 1171 	mov	r0,a
   0295 E5*0A              1172 	mov	a,(_main_sloc4_1_0 + 1)
   0297 34 FF              1173 	addc	a,#0xff
   0299 F9                 1174 	mov	r1,a
                           1175 ;	genPlus
                           1176 ;	Peephole 236.g	used r0 instead of ar0
   029A E8                 1177 	mov	a,r0
                           1178 ;	Peephole 236.a	used r6 instead of ar6
   029B 2E                 1179 	add	a,r6
   029C F5*38              1180 	mov	_main_sloc28_1_0,a
                           1181 ;	Peephole 236.g	used r1 instead of ar1
   029E E9                 1182 	mov	a,r1
                           1183 ;	Peephole 236.b	used r7 instead of ar7
   029F 3F                 1184 	addc	a,r7
   02A0 F5*39              1185 	mov	(_main_sloc28_1_0 + 1),a
                           1186 ;	genAssign
   02A2 85*38*0D           1187 	mov	_main_sloc6_1_0,_main_sloc28_1_0
   02A5 85*39*0E           1188 	mov	(_main_sloc6_1_0 + 1),(_main_sloc28_1_0 + 1)
                           1189 ;	genAssign
   02A8 8C*0F              1190 	mov	_main_sloc7_1_0,r4
   02AA 8D*10              1191 	mov	(_main_sloc7_1_0 + 1),r5
                           1192 ;	genAssign
   02AC 8C*11              1193 	mov	_main_sloc8_1_0,r4
   02AE 8D*12              1194 	mov	(_main_sloc8_1_0 + 1),r5
                           1195 ;	genAssign
   02B0 8C*13              1196 	mov	_main_sloc9_1_0,r4
   02B2 8D*14              1197 	mov	(_main_sloc9_1_0 + 1),r5
                           1198 ;	genAssign
   02B4 8A*15              1199 	mov	_main_sloc10_1_0,r2
   02B6 8B*16              1200 	mov	(_main_sloc10_1_0 + 1),r3
                           1201 ;	genAssign
   02B8 8C*17              1202 	mov	_main_sloc11_1_0,r4
   02BA 8D*18              1203 	mov	(_main_sloc11_1_0 + 1),r5
                           1204 ;	genAssign
   02BC 8A*19              1205 	mov	_main_sloc12_1_0,r2
   02BE 8B*1A              1206 	mov	(_main_sloc12_1_0 + 1),r3
                           1207 ;	genAssign
   02C0 8C*1B              1208 	mov	_main_sloc13_1_0,r4
   02C2 8D*1C              1209 	mov	(_main_sloc13_1_0 + 1),r5
                           1210 ;	genAssign
   02C4 8C*1D              1211 	mov	_main_sloc14_1_0,r4
   02C6 8D*1E              1212 	mov	(_main_sloc14_1_0 + 1),r5
                           1213 ;	genAssign
   02C8 8C*1F              1214 	mov	_main_sloc15_1_0,r4
   02CA 8D*20              1215 	mov	(_main_sloc15_1_0 + 1),r5
                           1216 ;	genAssign
   02CC 8E*21              1217 	mov	_main_sloc16_1_0,r6
   02CE 8F*22              1218 	mov	(_main_sloc16_1_0 + 1),r7
                           1219 ;	genAssign
   02D0 8E*23              1220 	mov	_main_sloc17_1_0,r6
   02D2 8F*24              1221 	mov	(_main_sloc17_1_0 + 1),r7
                           1222 ;	genAssign
   02D4 8E*3A              1223 	mov	_main_sloc29_1_0,r6
   02D6 8F*3B              1224 	mov	(_main_sloc29_1_0 + 1),r7
                           1225 ;	genAssign
   02D8 90s0CrB0           1226 	mov	dptr,#_main_buffer2_1_1
   02DB E0                 1227 	movx	a,@dptr
   02DC F5*25              1228 	mov	_main_sloc18_1_0,a
   02DE A3                 1229 	inc	dptr
   02DF E0                 1230 	movx	a,@dptr
   02E0 F5*26              1231 	mov	(_main_sloc18_1_0 + 1),a
   02E2 A3                 1232 	inc	dptr
   02E3 E0                 1233 	movx	a,@dptr
   02E4 F5*27              1234 	mov	(_main_sloc18_1_0 + 2),a
                           1235 ;	genAssign
   02E6 85*25*28           1236 	mov	_main_sloc19_1_0,_main_sloc18_1_0
   02E9 85*26*29           1237 	mov	(_main_sloc19_1_0 + 1),(_main_sloc18_1_0 + 1)
   02EC 85*27*2A           1238 	mov	(_main_sloc19_1_0 + 2),(_main_sloc18_1_0 + 2)
                           1239 ;	genAssign
   02EF 8C*36              1240 	mov	_main_sloc27_1_0,r4
   02F1 8D*37              1241 	mov	(_main_sloc27_1_0 + 1),r5
                           1242 ;	genAssign
   02F3 85*25*2B           1243 	mov	_main_sloc20_1_0,_main_sloc18_1_0
   02F6 85*26*2C           1244 	mov	(_main_sloc20_1_0 + 1),(_main_sloc18_1_0 + 1)
   02F9 85*27*2D           1245 	mov	(_main_sloc20_1_0 + 2),(_main_sloc18_1_0 + 2)
                           1246 ;	genAssign
                           1247 ;	genAssign
   02FC 85*25*2E           1248 	mov	_main_sloc21_1_0,_main_sloc18_1_0
   02FF 85*26*2F           1249 	mov	(_main_sloc21_1_0 + 1),(_main_sloc18_1_0 + 1)
   0302 85*27*30           1250 	mov	(_main_sloc21_1_0 + 2),(_main_sloc18_1_0 + 2)
                           1251 ;	genAssign
   0305 85*25*31           1252 	mov	_main_sloc22_1_0,_main_sloc18_1_0
   0308 85*26*32           1253 	mov	(_main_sloc22_1_0 + 1),(_main_sloc18_1_0 + 1)
   030B 85*27*33           1254 	mov	(_main_sloc22_1_0 + 2),(_main_sloc18_1_0 + 2)
                           1255 ;	genAssign
   030E 90s0CrA8           1256 	mov	dptr,#_main_count_char_1_1
   0311 E0                 1257 	movx	a,@dptr
   0312 F5*34              1258 	mov	_main_sloc23_1_0,a
   0314 A3                 1259 	inc	dptr
   0315 E0                 1260 	movx	a,@dptr
   0316 F5*35              1261 	mov	(_main_sloc23_1_0 + 1),a
   0318                    1262 00165$:
                           1263 ;	main.c:110: printf_tiny("\n\n\rEnter character:\n\r");
                           1264 ;	genIpush
   0318 C0 02              1265 	push	ar2
   031A C0 03              1266 	push	ar3
   031C 74rF1              1267 	mov	a,#__str_11
   031E C0 E0              1268 	push	acc
   0320 74s01              1269 	mov	a,#(__str_11 >> 8)
   0322 C0 E0              1270 	push	acc
                           1271 ;	genCall
   0324 12s00r00           1272 	lcall	_printf_tiny
   0327 15 81              1273 	dec	sp
   0329 15 81              1274 	dec	sp
   032B D0 03              1275 	pop	ar3
   032D D0 02              1276 	pop	ar2
                           1277 ;	main.c:112: a = getchar();
                           1278 ;	genCall
   032F C0 02              1279 	push	ar2
   0331 C0 03              1280 	push	ar3
   0333 12s13r83           1281 	lcall	_getchar
   0336 AC 82              1282 	mov	r4,dpl
   0338 D0 03              1283 	pop	ar3
   033A D0 02              1284 	pop	ar2
                           1285 ;	main.c:113: putchar('\n');
                           1286 ;	genCall
   033C 75 82 0A           1287 	mov	dpl,#0x0A
   033F C0 02              1288 	push	ar2
   0341 C0 03              1289 	push	ar3
   0343 C0 04              1290 	push	ar4
   0345 12s13r71           1291 	lcall	_putchar
   0348 D0 04              1292 	pop	ar4
   034A D0 03              1293 	pop	ar3
   034C D0 02              1294 	pop	ar2
                           1295 ;	main.c:114: a1 = (int) a;
                           1296 ;	genCast
                           1297 ;	peephole 177.h	optimized mov sequence
   034E EC                 1298 	mov	a,r4
                           1299 ;	Peephole 236.i	used r5 instead of ar5
   034F FD                 1300 	mov	r5,a
   0350 33                 1301 	rlc	a
   0351 95 E0              1302 	subb	a,acc
   0353 FE                 1303 	mov	r6,a
                           1304 ;	main.c:115: count_char++;
                           1305 ;	genPlus
                           1306 ;     genPlusIncr
   0354 05*34              1307 	inc	_main_sloc23_1_0
   0356 E4                 1308 	clr	a
   0357 B5*34 02           1309 	cjne	a,_main_sloc23_1_0,00250$
   035A 05*35              1310 	inc	(_main_sloc23_1_0 + 1)
   035C                    1311 00250$:
                           1312 ;	main.c:118: if(((a1 > 47) && (a1 < 59)) || ((a1 > 64) && (a1 < 90)) || ((a1 > 96) && (a1 < 123)))
                           1313 ;	genCmpGt
                           1314 ;	genCmp
   035C C3                 1315 	clr	c
   035D 74 2F              1316 	mov	a,#0x2F
   035F 9D                 1317 	subb	a,r5
                           1318 ;	Peephole 159	avoided xrl during execution
   0360 74 80              1319 	mov	a,#(0x00 ^ 0x80)
   0362 8E F0              1320 	mov	b,r6
   0364 63 F0 80           1321 	xrl	b,#0x80
   0367 95 F0              1322 	subb	a,b
                           1323 ;	genIfxJump
                           1324 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0369 50 0B              1325 	jnc	00161$
                           1326 ;	Peephole 300	removed redundant label 00251$
                           1327 ;	genCmpLt
                           1328 ;	genCmp
   036B C3                 1329 	clr	c
   036C ED                 1330 	mov	a,r5
   036D 94 3B              1331 	subb	a,#0x3B
   036F EE                 1332 	mov	a,r6
   0370 64 80              1333 	xrl	a,#0x80
   0372 94 80              1334 	subb	a,#0x80
                           1335 ;	genIfxJump
                           1336 ;	Peephole 112.b	changed ljmp to sjmp
                           1337 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0374 40 34              1338 	jc	00156$
                           1339 ;	Peephole 300	removed redundant label 00252$
   0376                    1340 00161$:
                           1341 ;	genCmpGt
                           1342 ;	genCmp
   0376 C3                 1343 	clr	c
   0377 74 40              1344 	mov	a,#0x40
   0379 9D                 1345 	subb	a,r5
                           1346 ;	Peephole 159	avoided xrl during execution
   037A 74 80              1347 	mov	a,#(0x00 ^ 0x80)
   037C 8E F0              1348 	mov	b,r6
   037E 63 F0 80           1349 	xrl	b,#0x80
   0381 95 F0              1350 	subb	a,b
                           1351 ;	genIfxJump
                           1352 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0383 50 0B              1353 	jnc	00163$
                           1354 ;	Peephole 300	removed redundant label 00253$
                           1355 ;	genCmpLt
                           1356 ;	genCmp
   0385 C3                 1357 	clr	c
   0386 ED                 1358 	mov	a,r5
   0387 94 5A              1359 	subb	a,#0x5A
   0389 EE                 1360 	mov	a,r6
   038A 64 80              1361 	xrl	a,#0x80
   038C 94 80              1362 	subb	a,#0x80
                           1363 ;	genIfxJump
                           1364 ;	Peephole 112.b	changed ljmp to sjmp
                           1365 ;	Peephole 160.a	removed sjmp by inverse jump logic
   038E 40 1A              1366 	jc	00156$
                           1367 ;	Peephole 300	removed redundant label 00254$
   0390                    1368 00163$:
                           1369 ;	genCmpGt
                           1370 ;	genCmp
   0390 C3                 1371 	clr	c
   0391 74 60              1372 	mov	a,#0x60
   0393 9D                 1373 	subb	a,r5
                           1374 ;	Peephole 159	avoided xrl during execution
   0394 74 80              1375 	mov	a,#(0x00 ^ 0x80)
   0396 8E F0              1376 	mov	b,r6
   0398 63 F0 80           1377 	xrl	b,#0x80
   039B 95 F0              1378 	subb	a,b
                           1379 ;	genIfxJump
                           1380 ;	Peephole 108.a	removed ljmp by inverse jump logic
   039D 50 6C              1381 	jnc	00157$
                           1382 ;	Peephole 300	removed redundant label 00255$
                           1383 ;	genCmpLt
                           1384 ;	genCmp
   039F C3                 1385 	clr	c
   03A0 ED                 1386 	mov	a,r5
   03A1 94 7B              1387 	subb	a,#0x7B
   03A3 EE                 1388 	mov	a,r6
   03A4 64 80              1389 	xrl	a,#0x80
   03A6 94 80              1390 	subb	a,#0x80
                           1391 ;	genIfxJump
                           1392 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03A8 50 61              1393 	jnc	00157$
                           1394 ;	Peephole 300	removed redundant label 00256$
   03AA                    1395 00156$:
                           1396 ;	main.c:120: putstr("\n\rCharacter stored\n\r");
                           1397 ;	genIpush
   03AA C0 02              1398 	push	ar2
   03AC C0 03              1399 	push	ar3
                           1400 ;	genCall
                           1401 ;	Peephole 182.a	used 16 bit load of DPTR
   03AE 90s02r07           1402 	mov	dptr,#__str_12
   03B1 75 F0 80           1403 	mov	b,#0x80
   03B4 C0 02              1404 	push	ar2
   03B6 C0 03              1405 	push	ar3
   03B8 C0 04              1406 	push	ar4
   03BA 12s13r01           1407 	lcall	_putstr
   03BD D0 04              1408 	pop	ar4
   03BF D0 03              1409 	pop	ar3
   03C1 D0 02              1410 	pop	ar2
                           1411 ;	main.c:121: buffer0[j] = a;
                           1412 ;	genAssign
   03C3 90s0CrAA           1413 	mov	dptr,#_main_j_1_1
   03C6 E0                 1414 	movx	a,@dptr
   03C7 FA                 1415 	mov	r2,a
   03C8 A3                 1416 	inc	dptr
   03C9 E0                 1417 	movx	a,@dptr
   03CA FB                 1418 	mov	r3,a
                           1419 ;	genPlus
                           1420 ;	Peephole 236.g	used r2 instead of ar2
   03CB EA                 1421 	mov	a,r2
   03CC 25*0B              1422 	add	a,_main_sloc5_1_0
   03CE F5 82              1423 	mov	dpl,a
                           1424 ;	Peephole 236.g	used r3 instead of ar3
   03D0 EB                 1425 	mov	a,r3
   03D1 35*0C              1426 	addc	a,(_main_sloc5_1_0 + 1)
   03D3 F5 83              1427 	mov	dph,a
                           1428 ;	genPointerSet
                           1429 ;     genFarPointerSet
   03D5 EC                 1430 	mov	a,r4
   03D6 F0                 1431 	movx	@dptr,a
                           1432 ;	main.c:122: putchar(buffer0[j++]);
                           1433 ;	genAssign
   03D7 90s0CrAA           1434 	mov	dptr,#_main_j_1_1
   03DA E0                 1435 	movx	a,@dptr
   03DB FA                 1436 	mov	r2,a
   03DC A3                 1437 	inc	dptr
   03DD E0                 1438 	movx	a,@dptr
   03DE FB                 1439 	mov	r3,a
                           1440 ;	genPlus
   03DF 90s0CrAA           1441 	mov	dptr,#_main_j_1_1
   03E2 E0                 1442 	movx	a,@dptr
   03E3 24 01              1443 	add	a,#0x01
   03E5 F0                 1444 	movx	@dptr,a
   03E6 A3                 1445 	inc	dptr
   03E7 E0                 1446 	movx	a,@dptr
   03E8 34 00              1447 	addc	a,#0x00
   03EA F0                 1448 	movx	@dptr,a
                           1449 ;	genPlus
                           1450 ;	Peephole 236.g	used r2 instead of ar2
   03EB EA                 1451 	mov	a,r2
   03EC 25*0B              1452 	add	a,_main_sloc5_1_0
   03EE F5 82              1453 	mov	dpl,a
                           1454 ;	Peephole 236.g	used r3 instead of ar3
   03F0 EB                 1455 	mov	a,r3
   03F1 35*0C              1456 	addc	a,(_main_sloc5_1_0 + 1)
   03F3 F5 83              1457 	mov	dph,a
                           1458 ;	genPointerGet
                           1459 ;	genFarPointerGet
   03F5 E0                 1460 	movx	a,@dptr
                           1461 ;	genCall
   03F6 FA                 1462 	mov	r2,a
                           1463 ;	Peephole 244.c	loading dpl from a instead of r2
   03F7 F5 82              1464 	mov	dpl,a
   03F9 C0 02              1465 	push	ar2
   03FB C0 03              1466 	push	ar3
   03FD 12s13r71           1467 	lcall	_putchar
   0400 D0 03              1468 	pop	ar3
   0402 D0 02              1469 	pop	ar2
                           1470 ;	genIpop
   0404 D0 03              1471 	pop	ar3
   0406 D0 02              1472 	pop	ar2
   0408 02s03r18           1473 	ljmp	00165$
   040B                    1474 00157$:
                           1475 ;	main.c:126: else if(a1 == QMARK)
                           1476 ;	genCmpEq
                           1477 ;	gencjneshort
   040B BD 3F 05           1478 	cjne	r5,#0x3F,00257$
   040E BE 00 02           1479 	cjne	r6,#0x00,00257$
   0411 80 03              1480 	sjmp	00258$
   0413                    1481 00257$:
   0413 02s09rC2           1482 	ljmp	00154$
   0416                    1483 00258$:
                           1484 ;	main.c:128: DEBUGPORT(0x12)
                           1485 ;	genCall
                           1486 ;	Peephole 182.b	used 16 bit load of dptr
   0416 90 00 12           1487 	mov	dptr,#0x0012
   0419 C0 02              1488 	push	ar2
   041B C0 03              1489 	push	ar3
   041D 12s14r8A           1490 	lcall	_dataout
   0420 D0 03              1491 	pop	ar3
   0422 D0 02              1492 	pop	ar2
                           1493 ;	main.c:131: last_q = (last_j>0)?(count_char-last_j):0;
                           1494 ;	genAssign
   0424 90s0CrA2           1495 	mov	dptr,#_main_last_j_1_1
   0427 E0                 1496 	movx	a,@dptr
   0428 FC                 1497 	mov	r4,a
   0429 A3                 1498 	inc	dptr
   042A E0                 1499 	movx	a,@dptr
   042B FD                 1500 	mov	r5,a
                           1501 ;	genCmpGt
                           1502 ;	genCmp
   042C C3                 1503 	clr	c
                           1504 ;	Peephole 181	changed mov to clr
   042D E4                 1505 	clr	a
   042E 9C                 1506 	subb	a,r4
                           1507 ;	Peephole 159	avoided xrl during execution
   042F 74 80              1508 	mov	a,#(0x00 ^ 0x80)
   0431 8D F0              1509 	mov	b,r5
   0433 63 F0 80           1510 	xrl	b,#0x80
   0436 95 F0              1511 	subb	a,b
                           1512 ;	genIfxJump
                           1513 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0438 50 0B              1514 	jnc	00192$
                           1515 ;	Peephole 300	removed redundant label 00259$
                           1516 ;	genMinus
   043A E5*34              1517 	mov	a,_main_sloc23_1_0
   043C C3                 1518 	clr	c
                           1519 ;	Peephole 236.l	used r4 instead of ar4
   043D 9C                 1520 	subb	a,r4
   043E FE                 1521 	mov	r6,a
   043F E5*35              1522 	mov	a,(_main_sloc23_1_0 + 1)
                           1523 ;	Peephole 236.l	used r5 instead of ar5
   0441 9D                 1524 	subb	a,r5
   0442 FF                 1525 	mov	r7,a
                           1526 ;	Peephole 112.b	changed ljmp to sjmp
   0443 80 04              1527 	sjmp	00193$
   0445                    1528 00192$:
                           1529 ;	genAssign
   0445 7E 00              1530 	mov	r6,#0x00
   0447 7F 00              1531 	mov	r7,#0x00
   0449                    1532 00193$:
                           1533 ;	main.c:133: printf_tiny("\n\r------------------------------------------");
                           1534 ;	genIpush
   0449 C0 02              1535 	push	ar2
   044B C0 03              1536 	push	ar3
                           1537 ;	genIpush
   044D C0 02              1538 	push	ar2
   044F C0 03              1539 	push	ar3
   0451 C0 06              1540 	push	ar6
   0453 C0 07              1541 	push	ar7
   0455 74r1C              1542 	mov	a,#__str_13
   0457 C0 E0              1543 	push	acc
   0459 74s02              1544 	mov	a,#(__str_13 >> 8)
   045B C0 E0              1545 	push	acc
                           1546 ;	genCall
   045D 12s00r00           1547 	lcall	_printf_tiny
   0460 15 81              1548 	dec	sp
   0462 15 81              1549 	dec	sp
   0464 D0 07              1550 	pop	ar7
   0466 D0 06              1551 	pop	ar6
   0468 D0 03              1552 	pop	ar3
   046A D0 02              1553 	pop	ar2
                           1554 ;	main.c:134: printf_tiny("\n\r------------------------------------------");
                           1555 ;	genIpush
   046C C0 02              1556 	push	ar2
   046E C0 03              1557 	push	ar3
   0470 C0 06              1558 	push	ar6
   0472 C0 07              1559 	push	ar7
   0474 74r1C              1560 	mov	a,#__str_13
   0476 C0 E0              1561 	push	acc
   0478 74s02              1562 	mov	a,#(__str_13 >> 8)
   047A C0 E0              1563 	push	acc
                           1564 ;	genCall
   047C 12s00r00           1565 	lcall	_printf_tiny
   047F 15 81              1566 	dec	sp
   0481 15 81              1567 	dec	sp
   0483 D0 07              1568 	pop	ar7
   0485 D0 06              1569 	pop	ar6
   0487 D0 03              1570 	pop	ar3
   0489 D0 02              1571 	pop	ar2
                           1572 ;	main.c:135: printf_tiny("\n\rHeap Report\n\r");
                           1573 ;	genIpush
   048B C0 02              1574 	push	ar2
   048D C0 03              1575 	push	ar3
   048F C0 06              1576 	push	ar6
   0491 C0 07              1577 	push	ar7
   0493 74r49              1578 	mov	a,#__str_14
   0495 C0 E0              1579 	push	acc
   0497 74s02              1580 	mov	a,#(__str_14 >> 8)
   0499 C0 E0              1581 	push	acc
                           1582 ;	genCall
   049B 12s00r00           1583 	lcall	_printf_tiny
   049E 15 81              1584 	dec	sp
   04A0 15 81              1585 	dec	sp
   04A2 D0 07              1586 	pop	ar7
   04A4 D0 06              1587 	pop	ar6
   04A6 D0 03              1588 	pop	ar3
   04A8 D0 02              1589 	pop	ar2
                           1590 ;	main.c:136: printf_tiny("Buffer: Buffer0\n\r");
                           1591 ;	genIpush
   04AA C0 02              1592 	push	ar2
   04AC C0 03              1593 	push	ar3
   04AE C0 06              1594 	push	ar6
   04B0 C0 07              1595 	push	ar7
   04B2 74r59              1596 	mov	a,#__str_15
   04B4 C0 E0              1597 	push	acc
   04B6 74s02              1598 	mov	a,#(__str_15 >> 8)
   04B8 C0 E0              1599 	push	acc
                           1600 ;	genCall
   04BA 12s00r00           1601 	lcall	_printf_tiny
   04BD 15 81              1602 	dec	sp
   04BF 15 81              1603 	dec	sp
   04C1 D0 07              1604 	pop	ar7
   04C3 D0 06              1605 	pop	ar6
   04C5 D0 03              1606 	pop	ar3
   04C7 D0 02              1607 	pop	ar2
                           1608 ;	main.c:137: printf("Buffer Start address: %p\n\r",&buffer0[0]);
                           1609 ;	genCast
   04C9 AA*02              1610 	mov	r2,_main_sloc1_1_0
   04CB AB*03              1611 	mov	r3,(_main_sloc1_1_0 + 1)
   04CD 7C 00              1612 	mov	r4,#0x0
                           1613 ;	genIpush
   04CF C0 02              1614 	push	ar2
   04D1 C0 03              1615 	push	ar3
   04D3 C0 06              1616 	push	ar6
   04D5 C0 07              1617 	push	ar7
   04D7 C0 02              1618 	push	ar2
   04D9 C0 03              1619 	push	ar3
   04DB C0 04              1620 	push	ar4
                           1621 ;	genIpush
   04DD 74r6B              1622 	mov	a,#__str_16
   04DF C0 E0              1623 	push	acc
   04E1 74s02              1624 	mov	a,#(__str_16 >> 8)
   04E3 C0 E0              1625 	push	acc
   04E5 74 80              1626 	mov	a,#0x80
   04E7 C0 E0              1627 	push	acc
                           1628 ;	genCall
   04E9 12s00r00           1629 	lcall	_printf
   04EC E5 81              1630 	mov	a,sp
   04EE 24 FA              1631 	add	a,#0xfa
   04F0 F5 81              1632 	mov	sp,a
   04F2 D0 07              1633 	pop	ar7
   04F4 D0 06              1634 	pop	ar6
   04F6 D0 03              1635 	pop	ar3
   04F8 D0 02              1636 	pop	ar2
                           1637 ;	main.c:138: if(j == 0)
                           1638 ;	genAssign
   04FA 90s0CrAA           1639 	mov	dptr,#_main_j_1_1
   04FD E0                 1640 	movx	a,@dptr
   04FE FA                 1641 	mov	r2,a
   04FF A3                 1642 	inc	dptr
   0500 E0                 1643 	movx	a,@dptr
                           1644 ;	genIfx
   0501 FB                 1645 	mov	r3,a
                           1646 ;	Peephole 135	removed redundant mov
   0502 4A                 1647 	orl	a,r2
                           1648 ;	genIpop
   0503 D0 03              1649 	pop	ar3
   0505 D0 02              1650 	pop	ar2
                           1651 ;	genIfxJump
                           1652 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0507 70 3B              1653 	jnz	00117$
                           1654 ;	Peephole 300	removed redundant label 00260$
                           1655 ;	main.c:140: printf("Buffer End Address: %p\n\r",&buffer0[0]);
                           1656 ;	genIpush
   0509 C0 02              1657 	push	ar2
   050B C0 03              1658 	push	ar3
                           1659 ;	genCast
   050D AC*00              1660 	mov	r4,_main_sloc0_1_0
   050F AD*01              1661 	mov	r5,(_main_sloc0_1_0 + 1)
   0511 7A 00              1662 	mov	r2,#0x0
                           1663 ;	genIpush
   0513 C0 02              1664 	push	ar2
   0515 C0 03              1665 	push	ar3
   0517 C0 06              1666 	push	ar6
   0519 C0 07              1667 	push	ar7
   051B C0 04              1668 	push	ar4
   051D C0 05              1669 	push	ar5
   051F C0 02              1670 	push	ar2
                           1671 ;	genIpush
   0521 74r86              1672 	mov	a,#__str_17
   0523 C0 E0              1673 	push	acc
   0525 74s02              1674 	mov	a,#(__str_17 >> 8)
   0527 C0 E0              1675 	push	acc
   0529 74 80              1676 	mov	a,#0x80
   052B C0 E0              1677 	push	acc
                           1678 ;	genCall
   052D 12s00r00           1679 	lcall	_printf
   0530 E5 81              1680 	mov	a,sp
   0532 24 FA              1681 	add	a,#0xfa
   0534 F5 81              1682 	mov	sp,a
   0536 D0 07              1683 	pop	ar7
   0538 D0 06              1684 	pop	ar6
   053A D0 03              1685 	pop	ar3
   053C D0 02              1686 	pop	ar2
                           1687 ;	genIpop
   053E D0 03              1688 	pop	ar3
   0540 D0 02              1689 	pop	ar2
                           1690 ;	Peephole 112.b	changed ljmp to sjmp
   0542 80 4A              1691 	sjmp	00118$
   0544                    1692 00117$:
                           1693 ;	main.c:144: printf("Buffer End Address: %p\n\r",&buffer0[j-1]);
                           1694 ;	genIpush
   0544 C0 02              1695 	push	ar2
   0546 C0 03              1696 	push	ar3
                           1697 ;	genAssign
   0548 90s0CrAA           1698 	mov	dptr,#_main_j_1_1
   054B E0                 1699 	movx	a,@dptr
   054C FC                 1700 	mov	r4,a
   054D A3                 1701 	inc	dptr
   054E E0                 1702 	movx	a,@dptr
   054F FD                 1703 	mov	r5,a
                           1704 ;	genMinus
                           1705 ;	genMinusDec
   0550 1C                 1706 	dec	r4
   0551 BC FF 01           1707 	cjne	r4,#0xff,00261$
   0554 1D                 1708 	dec	r5
   0555                    1709 00261$:
                           1710 ;	genPlus
                           1711 ;	Peephole 236.g	used r4 instead of ar4
   0555 EC                 1712 	mov	a,r4
   0556 25*02              1713 	add	a,_main_sloc1_1_0
   0558 FC                 1714 	mov	r4,a
                           1715 ;	Peephole 236.g	used r5 instead of ar5
   0559 ED                 1716 	mov	a,r5
   055A 35*03              1717 	addc	a,(_main_sloc1_1_0 + 1)
   055C FD                 1718 	mov	r5,a
                           1719 ;	genCast
   055D 7A 00              1720 	mov	r2,#0x0
                           1721 ;	genIpush
   055F C0 02              1722 	push	ar2
   0561 C0 03              1723 	push	ar3
   0563 C0 06              1724 	push	ar6
   0565 C0 07              1725 	push	ar7
   0567 C0 04              1726 	push	ar4
   0569 C0 05              1727 	push	ar5
   056B C0 02              1728 	push	ar2
                           1729 ;	genIpush
   056D 74r86              1730 	mov	a,#__str_17
   056F C0 E0              1731 	push	acc
   0571 74s02              1732 	mov	a,#(__str_17 >> 8)
   0573 C0 E0              1733 	push	acc
   0575 74 80              1734 	mov	a,#0x80
   0577 C0 E0              1735 	push	acc
                           1736 ;	genCall
   0579 12s00r00           1737 	lcall	_printf
   057C E5 81              1738 	mov	a,sp
   057E 24 FA              1739 	add	a,#0xfa
   0580 F5 81              1740 	mov	sp,a
   0582 D0 07              1741 	pop	ar7
   0584 D0 06              1742 	pop	ar6
   0586 D0 03              1743 	pop	ar3
   0588 D0 02              1744 	pop	ar2
                           1745 ;	main.c:359: printf_tiny("%d",a1);
                           1746 ;	genIpop
   058A D0 03              1747 	pop	ar3
   058C D0 02              1748 	pop	ar2
                           1749 ;	main.c:144: printf("Buffer End Address: %p\n\r",&buffer0[j-1]);
   058E                    1750 00118$:
                           1751 ;	main.c:147: printf_tiny("Total allocated size in bytes: %d\n\r",j);
                           1752 ;	genIpush
   058E C0 02              1753 	push	ar2
   0590 C0 03              1754 	push	ar3
                           1755 ;	genIpush
   0592 C0 02              1756 	push	ar2
   0594 C0 03              1757 	push	ar3
   0596 C0 06              1758 	push	ar6
   0598 C0 07              1759 	push	ar7
   059A 90s0CrAA           1760 	mov	dptr,#_main_j_1_1
   059D E0                 1761 	movx	a,@dptr
   059E C0 E0              1762 	push	acc
   05A0 A3                 1763 	inc	dptr
   05A1 E0                 1764 	movx	a,@dptr
   05A2 C0 E0              1765 	push	acc
                           1766 ;	genIpush
   05A4 74r9F              1767 	mov	a,#__str_18
   05A6 C0 E0              1768 	push	acc
   05A8 74s02              1769 	mov	a,#(__str_18 >> 8)
   05AA C0 E0              1770 	push	acc
                           1771 ;	genCall
   05AC 12s00r00           1772 	lcall	_printf_tiny
   05AF E5 81              1773 	mov	a,sp
   05B1 24 FC              1774 	add	a,#0xfc
   05B3 F5 81              1775 	mov	sp,a
   05B5 D0 07              1776 	pop	ar7
   05B7 D0 06              1777 	pop	ar6
   05B9 D0 03              1778 	pop	ar3
   05BB D0 02              1779 	pop	ar2
                           1780 ;	main.c:148: printf_tiny("Number of storage characters in the buffer: %d\n\r",j);
                           1781 ;	genIpush
   05BD C0 02              1782 	push	ar2
   05BF C0 03              1783 	push	ar3
   05C1 C0 06              1784 	push	ar6
   05C3 C0 07              1785 	push	ar7
   05C5 90s0CrAA           1786 	mov	dptr,#_main_j_1_1
   05C8 E0                 1787 	movx	a,@dptr
   05C9 C0 E0              1788 	push	acc
   05CB A3                 1789 	inc	dptr
   05CC E0                 1790 	movx	a,@dptr
   05CD C0 E0              1791 	push	acc
                           1792 ;	genIpush
   05CF 74rC3              1793 	mov	a,#__str_19
   05D1 C0 E0              1794 	push	acc
   05D3 74s02              1795 	mov	a,#(__str_19 >> 8)
   05D5 C0 E0              1796 	push	acc
                           1797 ;	genCall
   05D7 12s00r00           1798 	lcall	_printf_tiny
   05DA E5 81              1799 	mov	a,sp
   05DC 24 FC              1800 	add	a,#0xfc
   05DE F5 81              1801 	mov	sp,a
   05E0 D0 07              1802 	pop	ar7
   05E2 D0 06              1803 	pop	ar6
   05E4 D0 03              1804 	pop	ar3
   05E6 D0 02              1805 	pop	ar2
                           1806 ;	main.c:149: printf_tiny("Free space in the buffer: %d\n\r",buf_int-j);
                           1807 ;	genAssign
   05E8 90s0CrAA           1808 	mov	dptr,#_main_j_1_1
   05EB E0                 1809 	movx	a,@dptr
   05EC FC                 1810 	mov	r4,a
   05ED A3                 1811 	inc	dptr
   05EE E0                 1812 	movx	a,@dptr
   05EF FD                 1813 	mov	r5,a
                           1814 ;	genMinus
   05F0 E5*05              1815 	mov	a,_main_sloc2_1_0
   05F2 C3                 1816 	clr	c
                           1817 ;	Peephole 236.l	used r4 instead of ar4
   05F3 9C                 1818 	subb	a,r4
   05F4 FC                 1819 	mov	r4,a
   05F5 E5*06              1820 	mov	a,(_main_sloc2_1_0 + 1)
                           1821 ;	Peephole 236.l	used r5 instead of ar5
   05F7 9D                 1822 	subb	a,r5
   05F8 FD                 1823 	mov	r5,a
                           1824 ;	genIpush
   05F9 C0 02              1825 	push	ar2
   05FB C0 03              1826 	push	ar3
   05FD C0 06              1827 	push	ar6
   05FF C0 07              1828 	push	ar7
   0601 C0 04              1829 	push	ar4
   0603 C0 05              1830 	push	ar5
                           1831 ;	genIpush
   0605 74rF4              1832 	mov	a,#__str_20
   0607 C0 E0              1833 	push	acc
   0609 74s02              1834 	mov	a,#(__str_20 >> 8)
   060B C0 E0              1835 	push	acc
                           1836 ;	genCall
   060D 12s00r00           1837 	lcall	_printf_tiny
   0610 E5 81              1838 	mov	a,sp
   0612 24 FC              1839 	add	a,#0xfc
   0614 F5 81              1840 	mov	sp,a
   0616 D0 07              1841 	pop	ar7
   0618 D0 06              1842 	pop	ar6
   061A D0 03              1843 	pop	ar3
   061C D0 02              1844 	pop	ar2
                           1845 ;	main.c:150: printf_tiny("Number of characters since last '?': %d\n\r",last_q);
                           1846 ;	genIpush
   061E C0 02              1847 	push	ar2
   0620 C0 03              1848 	push	ar3
   0622 C0 06              1849 	push	ar6
   0624 C0 07              1850 	push	ar7
                           1851 ;	genIpush
   0626 74r13              1852 	mov	a,#__str_21
   0628 C0 E0              1853 	push	acc
   062A 74s03              1854 	mov	a,#(__str_21 >> 8)
   062C C0 E0              1855 	push	acc
                           1856 ;	genCall
   062E 12s00r00           1857 	lcall	_printf_tiny
   0631 E5 81              1858 	mov	a,sp
   0633 24 FC              1859 	add	a,#0xfc
   0635 F5 81              1860 	mov	sp,a
   0637 D0 03              1861 	pop	ar3
   0639 D0 02              1862 	pop	ar2
                           1863 ;	main.c:151: printf_tiny("\n\r------------------------------------------");
                           1864 ;	genIpush
   063B C0 02              1865 	push	ar2
   063D C0 03              1866 	push	ar3
   063F 74r1C              1867 	mov	a,#__str_13
   0641 C0 E0              1868 	push	acc
   0643 74s02              1869 	mov	a,#(__str_13 >> 8)
   0645 C0 E0              1870 	push	acc
                           1871 ;	genCall
   0647 12s00r00           1872 	lcall	_printf_tiny
   064A 15 81              1873 	dec	sp
   064C 15 81              1874 	dec	sp
   064E D0 03              1875 	pop	ar3
   0650 D0 02              1876 	pop	ar2
                           1877 ;	main.c:152: printf_tiny("\n\r------------------------------------------\n\r");
                           1878 ;	genIpush
   0652 C0 02              1879 	push	ar2
   0654 C0 03              1880 	push	ar3
   0656 74r3D              1881 	mov	a,#__str_22
   0658 C0 E0              1882 	push	acc
   065A 74s03              1883 	mov	a,#(__str_22 >> 8)
   065C C0 E0              1884 	push	acc
                           1885 ;	genCall
   065E 12s00r00           1886 	lcall	_printf_tiny
   0661 15 81              1887 	dec	sp
   0663 15 81              1888 	dec	sp
   0665 D0 03              1889 	pop	ar3
   0667 D0 02              1890 	pop	ar2
                           1891 ;	main.c:158: printf_tiny("\n\r------------------------------------------");
                           1892 ;	genIpush
   0669 C0 02              1893 	push	ar2
   066B C0 03              1894 	push	ar3
   066D 74r1C              1895 	mov	a,#__str_13
   066F C0 E0              1896 	push	acc
   0671 74s02              1897 	mov	a,#(__str_13 >> 8)
   0673 C0 E0              1898 	push	acc
                           1899 ;	genCall
   0675 12s00r00           1900 	lcall	_printf_tiny
   0678 15 81              1901 	dec	sp
   067A 15 81              1902 	dec	sp
   067C D0 03              1903 	pop	ar3
   067E D0 02              1904 	pop	ar2
                           1905 ;	main.c:159: printf_tiny("\n\r------------------------------------------");
                           1906 ;	genIpush
   0680 C0 02              1907 	push	ar2
   0682 C0 03              1908 	push	ar3
   0684 74r1C              1909 	mov	a,#__str_13
   0686 C0 E0              1910 	push	acc
   0688 74s02              1911 	mov	a,#(__str_13 >> 8)
   068A C0 E0              1912 	push	acc
                           1913 ;	genCall
   068C 12s00r00           1914 	lcall	_printf_tiny
   068F 15 81              1915 	dec	sp
   0691 15 81              1916 	dec	sp
   0693 D0 03              1917 	pop	ar3
   0695 D0 02              1918 	pop	ar2
                           1919 ;	main.c:160: printf_tiny("\n\rHeap Report\n\r");
                           1920 ;	genIpush
   0697 C0 02              1921 	push	ar2
   0699 C0 03              1922 	push	ar3
   069B 74r49              1923 	mov	a,#__str_14
   069D C0 E0              1924 	push	acc
   069F 74s02              1925 	mov	a,#(__str_14 >> 8)
   06A1 C0 E0              1926 	push	acc
                           1927 ;	genCall
   06A3 12s00r00           1928 	lcall	_printf_tiny
   06A6 15 81              1929 	dec	sp
   06A8 15 81              1930 	dec	sp
   06AA D0 03              1931 	pop	ar3
   06AC D0 02              1932 	pop	ar2
                           1933 ;	main.c:161: printf_tiny("Buffer: Buffer1\n\r");
                           1934 ;	genIpush
   06AE C0 02              1935 	push	ar2
   06B0 C0 03              1936 	push	ar3
   06B2 74r6C              1937 	mov	a,#__str_23
   06B4 C0 E0              1938 	push	acc
   06B6 74s03              1939 	mov	a,#(__str_23 >> 8)
   06B8 C0 E0              1940 	push	acc
                           1941 ;	genCall
   06BA 12s00r00           1942 	lcall	_printf_tiny
   06BD 15 81              1943 	dec	sp
   06BF 15 81              1944 	dec	sp
   06C1 D0 03              1945 	pop	ar3
   06C3 D0 02              1946 	pop	ar2
                           1947 ;	main.c:162: printf("Buffer Start address: %p\n\r",&buffer1[0]);
                           1948 ;	genCast
   06C5 AC*07              1949 	mov	r4,_main_sloc3_1_0
   06C7 AD*08              1950 	mov	r5,(_main_sloc3_1_0 + 1)
   06C9 7A 00              1951 	mov	r2,#0x0
                           1952 ;	genIpush
   06CB C0 02              1953 	push	ar2
   06CD C0 03              1954 	push	ar3
   06CF C0 04              1955 	push	ar4
   06D1 C0 05              1956 	push	ar5
   06D3 C0 02              1957 	push	ar2
                           1958 ;	genIpush
   06D5 74r6B              1959 	mov	a,#__str_16
   06D7 C0 E0              1960 	push	acc
   06D9 74s02              1961 	mov	a,#(__str_16 >> 8)
   06DB C0 E0              1962 	push	acc
   06DD 74 80              1963 	mov	a,#0x80
   06DF C0 E0              1964 	push	acc
                           1965 ;	genCall
   06E1 12s00r00           1966 	lcall	_printf
   06E4 E5 81              1967 	mov	a,sp
   06E6 24 FA              1968 	add	a,#0xfa
   06E8 F5 81              1969 	mov	sp,a
   06EA D0 03              1970 	pop	ar3
   06EC D0 02              1971 	pop	ar2
                           1972 ;	main.c:163: if(j == 0)
                           1973 ;	genAssign
   06EE 90s0CrAA           1974 	mov	dptr,#_main_j_1_1
   06F1 E0                 1975 	movx	a,@dptr
   06F2 FA                 1976 	mov	r2,a
   06F3 A3                 1977 	inc	dptr
   06F4 E0                 1978 	movx	a,@dptr
                           1979 ;	genIfx
   06F5 FB                 1980 	mov	r3,a
                           1981 ;	Peephole 135	removed redundant mov
   06F6 4A                 1982 	orl	a,r2
                           1983 ;	genIpop
   06F7 D0 03              1984 	pop	ar3
   06F9 D0 02              1985 	pop	ar2
                           1986 ;	genIfxJump
                           1987 ;	Peephole 108.b	removed ljmp by inverse jump logic
   06FB 70 33              1988 	jnz	00120$
                           1989 ;	Peephole 300	removed redundant label 00262$
                           1990 ;	main.c:165: printf("Buffer End Address: %p\n\r",&buffer1[(buf_int/8)-1]);
                           1991 ;	genIpush
   06FD C0 02              1992 	push	ar2
   06FF C0 03              1993 	push	ar3
                           1994 ;	genCast
   0701 AC*0D              1995 	mov	r4,_main_sloc6_1_0
   0703 AD*0E              1996 	mov	r5,(_main_sloc6_1_0 + 1)
   0705 7A 00              1997 	mov	r2,#0x0
                           1998 ;	genIpush
   0707 C0 02              1999 	push	ar2
   0709 C0 03              2000 	push	ar3
   070B C0 04              2001 	push	ar4
   070D C0 05              2002 	push	ar5
   070F C0 02              2003 	push	ar2
                           2004 ;	genIpush
   0711 74r86              2005 	mov	a,#__str_17
   0713 C0 E0              2006 	push	acc
   0715 74s02              2007 	mov	a,#(__str_17 >> 8)
   0717 C0 E0              2008 	push	acc
   0719 74 80              2009 	mov	a,#0x80
   071B C0 E0              2010 	push	acc
                           2011 ;	genCall
   071D 12s00r00           2012 	lcall	_printf
   0720 E5 81              2013 	mov	a,sp
   0722 24 FA              2014 	add	a,#0xfa
   0724 F5 81              2015 	mov	sp,a
   0726 D0 03              2016 	pop	ar3
   0728 D0 02              2017 	pop	ar2
                           2018 ;	genIpop
   072A D0 03              2019 	pop	ar3
   072C D0 02              2020 	pop	ar2
                           2021 ;	Peephole 112.b	changed ljmp to sjmp
   072E 80 31              2022 	sjmp	00121$
   0730                    2023 00120$:
                           2024 ;	main.c:169: printf("Buffer End Address: %p\n\r",&buffer1[(buf_int/8)-1]);
                           2025 ;	genIpush
   0730 C0 02              2026 	push	ar2
   0732 C0 03              2027 	push	ar3
                           2028 ;	genCast
   0734 AC*38              2029 	mov	r4,_main_sloc28_1_0
   0736 AD*39              2030 	mov	r5,(_main_sloc28_1_0 + 1)
   0738 7A 00              2031 	mov	r2,#0x0
                           2032 ;	genIpush
   073A C0 02              2033 	push	ar2
   073C C0 03              2034 	push	ar3
   073E C0 04              2035 	push	ar4
   0740 C0 05              2036 	push	ar5
   0742 C0 02              2037 	push	ar2
                           2038 ;	genIpush
   0744 74r86              2039 	mov	a,#__str_17
   0746 C0 E0              2040 	push	acc
   0748 74s02              2041 	mov	a,#(__str_17 >> 8)
   074A C0 E0              2042 	push	acc
   074C 74 80              2043 	mov	a,#0x80
   074E C0 E0              2044 	push	acc
                           2045 ;	genCall
   0750 12s00r00           2046 	lcall	_printf
   0753 E5 81              2047 	mov	a,sp
   0755 24 FA              2048 	add	a,#0xfa
   0757 F5 81              2049 	mov	sp,a
   0759 D0 03              2050 	pop	ar3
   075B D0 02              2051 	pop	ar2
                           2052 ;	main.c:359: printf_tiny("%d",a1);
                           2053 ;	genIpop
   075D D0 03              2054 	pop	ar3
   075F D0 02              2055 	pop	ar2
                           2056 ;	main.c:169: printf("Buffer End Address: %p\n\r",&buffer1[(buf_int/8)-1]);
   0761                    2057 00121$:
                           2058 ;	main.c:172: printf_tiny("Total allocated size in bytes: %d\n\r",zero);
                           2059 ;	genIpush
   0761 C0 02              2060 	push	ar2
   0763 C0 03              2061 	push	ar3
                           2062 ;	Peephole 181	changed mov to clr
   0765 E4                 2063 	clr	a
   0766 C0 E0              2064 	push	acc
   0768 C0 E0              2065 	push	acc
                           2066 ;	genIpush
   076A 74r9F              2067 	mov	a,#__str_18
   076C C0 E0              2068 	push	acc
   076E 74s02              2069 	mov	a,#(__str_18 >> 8)
   0770 C0 E0              2070 	push	acc
                           2071 ;	genCall
   0772 12s00r00           2072 	lcall	_printf_tiny
   0775 E5 81              2073 	mov	a,sp
   0777 24 FC              2074 	add	a,#0xfc
   0779 F5 81              2075 	mov	sp,a
   077B D0 03              2076 	pop	ar3
   077D D0 02              2077 	pop	ar2
                           2078 ;	main.c:173: printf_tiny("Number of storage characters in the buffer: %d\n\r",zero);
                           2079 ;	genIpush
   077F C0 02              2080 	push	ar2
   0781 C0 03              2081 	push	ar3
                           2082 ;	Peephole 181	changed mov to clr
   0783 E4                 2083 	clr	a
   0784 C0 E0              2084 	push	acc
   0786 C0 E0              2085 	push	acc
                           2086 ;	genIpush
   0788 74rC3              2087 	mov	a,#__str_19
   078A C0 E0              2088 	push	acc
   078C 74s02              2089 	mov	a,#(__str_19 >> 8)
   078E C0 E0              2090 	push	acc
                           2091 ;	genCall
   0790 12s00r00           2092 	lcall	_printf_tiny
   0793 E5 81              2093 	mov	a,sp
   0795 24 FC              2094 	add	a,#0xfc
   0797 F5 81              2095 	mov	sp,a
   0799 D0 03              2096 	pop	ar3
   079B D0 02              2097 	pop	ar2
                           2098 ;	main.c:174: printf_tiny("Free space in the buffer: %d\n\r",(buf_int/8));
                           2099 ;	genIpush
   079D C0 02              2100 	push	ar2
   079F C0 03              2101 	push	ar3
   07A1 C0*09              2102 	push	_main_sloc4_1_0
   07A3 C0*0A              2103 	push	(_main_sloc4_1_0 + 1)
                           2104 ;	genIpush
   07A5 74rF4              2105 	mov	a,#__str_20
   07A7 C0 E0              2106 	push	acc
   07A9 74s02              2107 	mov	a,#(__str_20 >> 8)
   07AB C0 E0              2108 	push	acc
                           2109 ;	genCall
   07AD 12s00r00           2110 	lcall	_printf_tiny
   07B0 E5 81              2111 	mov	a,sp
   07B2 24 FC              2112 	add	a,#0xfc
   07B4 F5 81              2113 	mov	sp,a
   07B6 D0 03              2114 	pop	ar3
   07B8 D0 02              2115 	pop	ar2
                           2116 ;	main.c:175: printf_tiny("Number of characters since last '?': %d\n\r",zero);
                           2117 ;	genIpush
   07BA C0 02              2118 	push	ar2
   07BC C0 03              2119 	push	ar3
                           2120 ;	Peephole 181	changed mov to clr
   07BE E4                 2121 	clr	a
   07BF C0 E0              2122 	push	acc
   07C1 C0 E0              2123 	push	acc
                           2124 ;	genIpush
   07C3 74r13              2125 	mov	a,#__str_21
   07C5 C0 E0              2126 	push	acc
   07C7 74s03              2127 	mov	a,#(__str_21 >> 8)
   07C9 C0 E0              2128 	push	acc
                           2129 ;	genCall
   07CB 12s00r00           2130 	lcall	_printf_tiny
   07CE E5 81              2131 	mov	a,sp
   07D0 24 FC              2132 	add	a,#0xfc
   07D2 F5 81              2133 	mov	sp,a
   07D4 D0 03              2134 	pop	ar3
   07D6 D0 02              2135 	pop	ar2
                           2136 ;	main.c:176: printf_tiny("\n\r------------------------------------------");
                           2137 ;	genIpush
   07D8 C0 02              2138 	push	ar2
   07DA C0 03              2139 	push	ar3
   07DC 74r1C              2140 	mov	a,#__str_13
   07DE C0 E0              2141 	push	acc
   07E0 74s02              2142 	mov	a,#(__str_13 >> 8)
   07E2 C0 E0              2143 	push	acc
                           2144 ;	genCall
   07E4 12s00r00           2145 	lcall	_printf_tiny
   07E7 15 81              2146 	dec	sp
   07E9 15 81              2147 	dec	sp
   07EB D0 03              2148 	pop	ar3
   07ED D0 02              2149 	pop	ar2
                           2150 ;	main.c:177: printf_tiny("\n\r------------------------------------------\n\r");
                           2151 ;	genIpush
   07EF C0 02              2152 	push	ar2
   07F1 C0 03              2153 	push	ar3
   07F3 74r3D              2154 	mov	a,#__str_22
   07F5 C0 E0              2155 	push	acc
   07F7 74s03              2156 	mov	a,#(__str_22 >> 8)
   07F9 C0 E0              2157 	push	acc
                           2158 ;	genCall
   07FB 12s00r00           2159 	lcall	_printf_tiny
   07FE 15 81              2160 	dec	sp
   0800 15 81              2161 	dec	sp
   0802 D0 03              2162 	pop	ar3
   0804 D0 02              2163 	pop	ar2
                           2164 ;	main.c:182: printf("\n\rBuffer0:\n\r");
                           2165 ;	genIpush
   0806 C0 02              2166 	push	ar2
   0808 C0 03              2167 	push	ar3
   080A 74r7E              2168 	mov	a,#__str_24
   080C C0 E0              2169 	push	acc
   080E 74s03              2170 	mov	a,#(__str_24 >> 8)
   0810 C0 E0              2171 	push	acc
   0812 74 80              2172 	mov	a,#0x80
   0814 C0 E0              2173 	push	acc
                           2174 ;	genCall
   0816 12s00r00           2175 	lcall	_printf
   0819 15 81              2176 	dec	sp
   081B 15 81              2177 	dec	sp
   081D 15 81              2178 	dec	sp
   081F D0 03              2179 	pop	ar3
   0821 D0 02              2180 	pop	ar2
                           2181 ;	main.c:183: r=0;
                           2182 ;	genAssign
   0823 90s0CrA0           2183 	mov	dptr,#_main_r_1_1
   0826 E4                 2184 	clr	a
   0827 F0                 2185 	movx	@dptr,a
   0828 A3                 2186 	inc	dptr
   0829 F0                 2187 	movx	@dptr,a
                           2188 ;	main.c:184: for(i=0;i<j;i++)
                           2189 ;	genAssign
   082A 7C 00              2190 	mov	r4,#0x00
   082C 7D 00              2191 	mov	r5,#0x00
   082E                    2192 00170$:
                           2193 ;	genIpush
   082E C0 02              2194 	push	ar2
   0830 C0 03              2195 	push	ar3
                           2196 ;	genAssign
   0832 90s0CrAA           2197 	mov	dptr,#_main_j_1_1
   0835 E0                 2198 	movx	a,@dptr
   0836 FA                 2199 	mov	r2,a
   0837 A3                 2200 	inc	dptr
   0838 E0                 2201 	movx	a,@dptr
   0839 FB                 2202 	mov	r3,a
                           2203 ;	genCmpLt
                           2204 ;	genCmp
   083A C3                 2205 	clr	c
   083B EC                 2206 	mov	a,r4
   083C 9A                 2207 	subb	a,r2
   083D ED                 2208 	mov	a,r5
   083E 64 80              2209 	xrl	a,#0x80
   0840 8B F0              2210 	mov	b,r3
   0842 63 F0 80           2211 	xrl	b,#0x80
   0845 95 F0              2212 	subb	a,b
                           2213 ;	genIpop
                           2214 ;	genIfx
                           2215 ;	genIfxJump
                           2216 ;	Peephole 129.c	optimized condition
   0847 D0 03              2217 	pop	ar3
   0849 D0 02              2218 	pop	ar2
   084B 40 03              2219 	jc	00263$
   084D 02s09r3B           2220 	ljmp	00173$
   0850                    2221 00263$:
                           2222 ;	main.c:186: r++;
                           2223 ;	genIpush
   0850 C0 02              2224 	push	ar2
   0852 C0 03              2225 	push	ar3
                           2226 ;	genAssign
   0854 90s0CrA0           2227 	mov	dptr,#_main_r_1_1
   0857 E0                 2228 	movx	a,@dptr
   0858 FA                 2229 	mov	r2,a
   0859 A3                 2230 	inc	dptr
   085A E0                 2231 	movx	a,@dptr
   085B FB                 2232 	mov	r3,a
                           2233 ;	genPlus
   085C 90s0CrA0           2234 	mov	dptr,#_main_r_1_1
                           2235 ;     genPlusIncr
   085F 74 01              2236 	mov	a,#0x01
                           2237 ;	Peephole 236.a	used r2 instead of ar2
   0861 2A                 2238 	add	a,r2
   0862 F0                 2239 	movx	@dptr,a
                           2240 ;	Peephole 181	changed mov to clr
   0863 E4                 2241 	clr	a
                           2242 ;	Peephole 236.b	used r3 instead of ar3
   0864 3B                 2243 	addc	a,r3
   0865 A3                 2244 	inc	dptr
   0866 F0                 2245 	movx	@dptr,a
                           2246 ;	main.c:187: if(r < 45)
                           2247 ;	genAssign
   0867 90s0CrA0           2248 	mov	dptr,#_main_r_1_1
   086A E0                 2249 	movx	a,@dptr
   086B FA                 2250 	mov	r2,a
   086C A3                 2251 	inc	dptr
   086D E0                 2252 	movx	a,@dptr
   086E FB                 2253 	mov	r3,a
                           2254 ;	genCmpLt
                           2255 ;	genCmp
   086F C3                 2256 	clr	c
   0870 EA                 2257 	mov	a,r2
   0871 94 2D              2258 	subb	a,#0x2D
   0873 EB                 2259 	mov	a,r3
   0874 64 80              2260 	xrl	a,#0x80
   0876 94 80              2261 	subb	a,#0x80
   0878 E4                 2262 	clr	a
   0879 33                 2263 	rlc	a
                           2264 ;	genIpop
   087A D0 03              2265 	pop	ar3
   087C D0 02              2266 	pop	ar2
                           2267 ;	genIfx
                           2268 ;	genIfxJump
                           2269 ;	Peephole 108.c	removed ljmp by inverse jump logic
   087E 60 41              2270 	jz	00123$
                           2271 ;	Peephole 300	removed redundant label 00264$
                           2272 ;	main.c:189: putchar(buffer0[i]);
                           2273 ;	genIpush
   0880 C0 02              2274 	push	ar2
   0882 C0 03              2275 	push	ar3
                           2276 ;	genPlus
                           2277 ;	Peephole 236.g	used r4 instead of ar4
   0884 EC                 2278 	mov	a,r4
   0885 25*11              2279 	add	a,_main_sloc8_1_0
   0887 F5 82              2280 	mov	dpl,a
                           2281 ;	Peephole 236.g	used r5 instead of ar5
   0889 ED                 2282 	mov	a,r5
   088A 35*12              2283 	addc	a,(_main_sloc8_1_0 + 1)
   088C F5 83              2284 	mov	dph,a
                           2285 ;	genPointerGet
                           2286 ;	genFarPointerGet
   088E E0                 2287 	movx	a,@dptr
                           2288 ;	genCall
   088F FA                 2289 	mov	r2,a
                           2290 ;	Peephole 244.c	loading dpl from a instead of r2
   0890 F5 82              2291 	mov	dpl,a
   0892 C0 02              2292 	push	ar2
   0894 C0 03              2293 	push	ar3
   0896 C0 04              2294 	push	ar4
   0898 C0 05              2295 	push	ar5
   089A 12s13r71           2296 	lcall	_putchar
   089D D0 05              2297 	pop	ar5
   089F D0 04              2298 	pop	ar4
   08A1 D0 03              2299 	pop	ar3
   08A3 D0 02              2300 	pop	ar2
                           2301 ;	main.c:190: putchar('  ');
                           2302 ;	genCall
   08A5 75 82 20           2303 	mov	dpl,#0x20
   08A8 C0 02              2304 	push	ar2
   08AA C0 03              2305 	push	ar3
   08AC C0 04              2306 	push	ar4
   08AE C0 05              2307 	push	ar5
   08B0 12s13r71           2308 	lcall	_putchar
   08B3 D0 05              2309 	pop	ar5
   08B5 D0 04              2310 	pop	ar4
   08B7 D0 03              2311 	pop	ar3
   08B9 D0 02              2312 	pop	ar2
                           2313 ;	genIpop
   08BB D0 03              2314 	pop	ar3
   08BD D0 02              2315 	pop	ar2
                           2316 ;	Peephole 112.b	changed ljmp to sjmp
   08BF 80 72              2317 	sjmp	00172$
   08C1                    2318 00123$:
                           2319 ;	main.c:194: putchar('\n');
                           2320 ;	genIpush
   08C1 C0 02              2321 	push	ar2
   08C3 C0 03              2322 	push	ar3
                           2323 ;	genCall
   08C5 75 82 0A           2324 	mov	dpl,#0x0A
   08C8 C0 02              2325 	push	ar2
   08CA C0 03              2326 	push	ar3
   08CC C0 04              2327 	push	ar4
   08CE C0 05              2328 	push	ar5
   08D0 12s13r71           2329 	lcall	_putchar
   08D3 D0 05              2330 	pop	ar5
   08D5 D0 04              2331 	pop	ar4
   08D7 D0 03              2332 	pop	ar3
   08D9 D0 02              2333 	pop	ar2
                           2334 ;	main.c:195: putchar('\r');
                           2335 ;	genCall
   08DB 75 82 0D           2336 	mov	dpl,#0x0D
   08DE C0 02              2337 	push	ar2
   08E0 C0 03              2338 	push	ar3
   08E2 C0 04              2339 	push	ar4
   08E4 C0 05              2340 	push	ar5
   08E6 12s13r71           2341 	lcall	_putchar
   08E9 D0 05              2342 	pop	ar5
   08EB D0 04              2343 	pop	ar4
   08ED D0 03              2344 	pop	ar3
   08EF D0 02              2345 	pop	ar2
                           2346 ;	main.c:196: r = 0;
                           2347 ;	genAssign
   08F1 90s0CrA0           2348 	mov	dptr,#_main_r_1_1
   08F4 E4                 2349 	clr	a
   08F5 F0                 2350 	movx	@dptr,a
   08F6 A3                 2351 	inc	dptr
   08F7 F0                 2352 	movx	@dptr,a
                           2353 ;	main.c:197: putchar(buffer0[i]);
                           2354 ;	genPlus
                           2355 ;	Peephole 236.g	used r4 instead of ar4
   08F8 EC                 2356 	mov	a,r4
   08F9 25*0F              2357 	add	a,_main_sloc7_1_0
   08FB F5 82              2358 	mov	dpl,a
                           2359 ;	Peephole 236.g	used r5 instead of ar5
   08FD ED                 2360 	mov	a,r5
   08FE 35*10              2361 	addc	a,(_main_sloc7_1_0 + 1)
   0900 F5 83              2362 	mov	dph,a
                           2363 ;	genPointerGet
                           2364 ;	genFarPointerGet
   0902 E0                 2365 	movx	a,@dptr
                           2366 ;	genCall
   0903 FA                 2367 	mov	r2,a
                           2368 ;	Peephole 244.c	loading dpl from a instead of r2
   0904 F5 82              2369 	mov	dpl,a
   0906 C0 02              2370 	push	ar2
   0908 C0 03              2371 	push	ar3
   090A C0 04              2372 	push	ar4
   090C C0 05              2373 	push	ar5
   090E 12s13r71           2374 	lcall	_putchar
   0911 D0 05              2375 	pop	ar5
   0913 D0 04              2376 	pop	ar4
   0915 D0 03              2377 	pop	ar3
   0917 D0 02              2378 	pop	ar2
                           2379 ;	main.c:198: putchar('  ');
                           2380 ;	genCall
   0919 75 82 20           2381 	mov	dpl,#0x20
   091C C0 02              2382 	push	ar2
   091E C0 03              2383 	push	ar3
   0920 C0 04              2384 	push	ar4
   0922 C0 05              2385 	push	ar5
   0924 12s13r71           2386 	lcall	_putchar
   0927 D0 05              2387 	pop	ar5
   0929 D0 04              2388 	pop	ar4
   092B D0 03              2389 	pop	ar3
   092D D0 02              2390 	pop	ar2
                           2391 ;	main.c:359: printf_tiny("%d",a1);
                           2392 ;	genIpop
   092F D0 03              2393 	pop	ar3
   0931 D0 02              2394 	pop	ar2
                           2395 ;	main.c:198: putchar('  ');
   0933                    2396 00172$:
                           2397 ;	main.c:184: for(i=0;i<j;i++)
                           2398 ;	genPlus
                           2399 ;     genPlusIncr
   0933 0C                 2400 	inc	r4
   0934 BC 00 01           2401 	cjne	r4,#0x00,00265$
   0937 0D                 2402 	inc	r5
   0938                    2403 00265$:
   0938 02s08r2E           2404 	ljmp	00170$
   093B                    2405 00173$:
                           2406 ;	main.c:201: last_j = count_char;
                           2407 ;	genAssign
   093B 90s0CrA2           2408 	mov	dptr,#_main_last_j_1_1
   093E E5*34              2409 	mov	a,_main_sloc23_1_0
   0940 F0                 2410 	movx	@dptr,a
   0941 A3                 2411 	inc	dptr
   0942 E5*35              2412 	mov	a,(_main_sloc23_1_0 + 1)
   0944 F0                 2413 	movx	@dptr,a
                           2414 ;	main.c:202: if(j==buf_int)
                           2415 ;	genAssign
   0945 90s0CrAA           2416 	mov	dptr,#_main_j_1_1
   0948 E0                 2417 	movx	a,@dptr
   0949 FC                 2418 	mov	r4,a
   094A A3                 2419 	inc	dptr
   094B E0                 2420 	movx	a,@dptr
   094C FD                 2421 	mov	r5,a
                           2422 ;	genCmpEq
                           2423 ;	gencjneshort
   094D EC                 2424 	mov	a,r4
                           2425 ;	Peephole 112.b	changed ljmp to sjmp
                           2426 ;	Peephole 197.b	optimized misc jump sequence
   094E B5*15 39           2427 	cjne	a,_main_sloc10_1_0,00126$
   0951 ED                 2428 	mov	a,r5
   0952 B5*16 35           2429 	cjne	a,(_main_sloc10_1_0 + 1),00126$
                           2430 ;	Peephole 200.b	removed redundant sjmp
                           2431 ;	Peephole 300	removed redundant label 00266$
                           2432 ;	Peephole 300	removed redundant label 00267$
                           2433 ;	main.c:204: j = 0;
                           2434 ;	genIpush
   0955 C0 02              2435 	push	ar2
   0957 C0 03              2436 	push	ar3
                           2437 ;	genAssign
   0959 90s0CrAA           2438 	mov	dptr,#_main_j_1_1
   095C E4                 2439 	clr	a
   095D F0                 2440 	movx	@dptr,a
   095E A3                 2441 	inc	dptr
   095F F0                 2442 	movx	@dptr,a
                           2443 ;	main.c:205: memset(buffer0,'\0',buf_int);
                           2444 ;	genCast
   0960 AC*13              2445 	mov	r4,_main_sloc9_1_0
   0962 AD*14              2446 	mov	r5,(_main_sloc9_1_0 + 1)
   0964 7A 00              2447 	mov	r2,#0x0
                           2448 ;	genAssign
   0966 90s00r00           2449 	mov	dptr,#_memset_PARM_2
                           2450 ;	Peephole 181	changed mov to clr
   0969 E4                 2451 	clr	a
   096A F0                 2452 	movx	@dptr,a
                           2453 ;	genAssign
   096B 90s00r00           2454 	mov	dptr,#_memset_PARM_3
   096E E5*15              2455 	mov	a,_main_sloc10_1_0
   0970 F0                 2456 	movx	@dptr,a
   0971 A3                 2457 	inc	dptr
   0972 E5*16              2458 	mov	a,(_main_sloc10_1_0 + 1)
   0974 F0                 2459 	movx	@dptr,a
                           2460 ;	genCall
   0975 8C 82              2461 	mov	dpl,r4
   0977 8D 83              2462 	mov	dph,r5
   0979 8A F0              2463 	mov	b,r2
   097B C0 02              2464 	push	ar2
   097D C0 03              2465 	push	ar3
   097F 12s00r00           2466 	lcall	_memset
   0982 D0 03              2467 	pop	ar3
   0984 D0 02              2468 	pop	ar2
                           2469 ;	main.c:359: printf_tiny("%d",a1);
                           2470 ;	genIpop
   0986 D0 03              2471 	pop	ar3
   0988 D0 02              2472 	pop	ar2
                           2473 ;	main.c:205: memset(buffer0,'\0',buf_int);
   098A                    2474 00126$:
                           2475 ;	main.c:207: j = 0;
                           2476 ;	genIpush
   098A C0 02              2477 	push	ar2
   098C C0 03              2478 	push	ar3
                           2479 ;	genAssign
   098E 90s0CrAA           2480 	mov	dptr,#_main_j_1_1
   0991 E4                 2481 	clr	a
   0992 F0                 2482 	movx	@dptr,a
   0993 A3                 2483 	inc	dptr
   0994 F0                 2484 	movx	@dptr,a
                           2485 ;	main.c:208: memset(buffer0,'\0',buf_int);
                           2486 ;	genCast
   0995 AC*17              2487 	mov	r4,_main_sloc11_1_0
   0997 AD*18              2488 	mov	r5,(_main_sloc11_1_0 + 1)
   0999 7A 00              2489 	mov	r2,#0x0
                           2490 ;	genAssign
   099B 90s00r00           2491 	mov	dptr,#_memset_PARM_2
                           2492 ;	Peephole 181	changed mov to clr
   099E E4                 2493 	clr	a
   099F F0                 2494 	movx	@dptr,a
                           2495 ;	genAssign
   09A0 90s00r00           2496 	mov	dptr,#_memset_PARM_3
   09A3 E5*19              2497 	mov	a,_main_sloc12_1_0
   09A5 F0                 2498 	movx	@dptr,a
   09A6 A3                 2499 	inc	dptr
   09A7 E5*1A              2500 	mov	a,(_main_sloc12_1_0 + 1)
   09A9 F0                 2501 	movx	@dptr,a
                           2502 ;	genCall
   09AA 8C 82              2503 	mov	dpl,r4
   09AC 8D 83              2504 	mov	dph,r5
   09AE 8A F0              2505 	mov	b,r2
   09B0 C0 02              2506 	push	ar2
   09B2 C0 03              2507 	push	ar3
   09B4 12s00r00           2508 	lcall	_memset
   09B7 D0 03              2509 	pop	ar3
   09B9 D0 02              2510 	pop	ar2
                           2511 ;	genIpop
   09BB D0 03              2512 	pop	ar3
   09BD D0 02              2513 	pop	ar2
   09BF 02s03r18           2514 	ljmp	00165$
   09C2                    2515 00154$:
                           2516 ;	main.c:212: else if(a1 == EQUALTO)
                           2517 ;	genCmpEq
                           2518 ;	gencjneshort
   09C2 BD 3D 05           2519 	cjne	r5,#0x3D,00268$
   09C5 BE 00 02           2520 	cjne	r6,#0x00,00268$
   09C8 80 03              2521 	sjmp	00269$
   09CA                    2522 00268$:
   09CA 02s0Er78           2523 	ljmp	00151$
   09CD                    2524 00269$:
                           2525 ;	main.c:214: DEBUGPORT1(0x24)
                           2526 ;	genIpush
   09CD C0 02              2527 	push	ar2
   09CF C0 03              2528 	push	ar3
                           2529 ;	genCall
                           2530 ;	Peephole 182.b	used 16 bit load of dptr
   09D1 90 00 24           2531 	mov	dptr,#0x0024
   09D4 C0 02              2532 	push	ar2
   09D6 C0 03              2533 	push	ar3
   09D8 12s14rA9           2534 	lcall	_dataout1
   09DB D0 03              2535 	pop	ar3
   09DD D0 02              2536 	pop	ar2
                           2537 ;	main.c:215: printf("\n\rBuffer0:\n\r");
                           2538 ;	genIpush
   09DF C0 02              2539 	push	ar2
   09E1 C0 03              2540 	push	ar3
   09E3 74r7E              2541 	mov	a,#__str_24
   09E5 C0 E0              2542 	push	acc
   09E7 74s03              2543 	mov	a,#(__str_24 >> 8)
   09E9 C0 E0              2544 	push	acc
   09EB 74 80              2545 	mov	a,#0x80
   09ED C0 E0              2546 	push	acc
                           2547 ;	genCall
   09EF 12s00r00           2548 	lcall	_printf
   09F2 15 81              2549 	dec	sp
   09F4 15 81              2550 	dec	sp
   09F6 15 81              2551 	dec	sp
   09F8 D0 03              2552 	pop	ar3
   09FA D0 02              2553 	pop	ar2
                           2554 ;	main.c:217: s=0;
                           2555 ;	genAssign
   09FC 90s0CrA6           2556 	mov	dptr,#_main_s_1_1
   09FF E4                 2557 	clr	a
   0A00 F0                 2558 	movx	@dptr,a
   0A01 A3                 2559 	inc	dptr
   0A02 F0                 2560 	movx	@dptr,a
                           2561 ;	main.c:218: printf("\n\r%p: ",&buffer0[0]);
                           2562 ;	genCast
   0A03 AC*1B              2563 	mov	r4,_main_sloc13_1_0
   0A05 AD*1C              2564 	mov	r5,(_main_sloc13_1_0 + 1)
   0A07 7A 00              2565 	mov	r2,#0x0
                           2566 ;	genIpush
   0A09 C0 02              2567 	push	ar2
   0A0B C0 03              2568 	push	ar3
   0A0D C0 04              2569 	push	ar4
   0A0F C0 05              2570 	push	ar5
   0A11 C0 02              2571 	push	ar2
                           2572 ;	genIpush
   0A13 74r8B              2573 	mov	a,#__str_25
   0A15 C0 E0              2574 	push	acc
   0A17 74s03              2575 	mov	a,#(__str_25 >> 8)
   0A19 C0 E0              2576 	push	acc
   0A1B 74 80              2577 	mov	a,#0x80
   0A1D C0 E0              2578 	push	acc
                           2579 ;	genCall
   0A1F 12s00r00           2580 	lcall	_printf
   0A22 E5 81              2581 	mov	a,sp
   0A24 24 FA              2582 	add	a,#0xfa
   0A26 F5 81              2583 	mov	sp,a
   0A28 D0 03              2584 	pop	ar3
   0A2A D0 02              2585 	pop	ar2
                           2586 ;	main.c:359: printf_tiny("%d",a1);
                           2587 ;	genIpop
   0A2C D0 03              2588 	pop	ar3
   0A2E D0 02              2589 	pop	ar2
                           2590 ;	main.c:219: for(i=0;i<j;i++)
                           2591 ;	genAssign
   0A30 7C 00              2592 	mov	r4,#0x00
   0A32 7D 00              2593 	mov	r5,#0x00
   0A34                    2594 00174$:
                           2595 ;	genIpush
   0A34 C0 02              2596 	push	ar2
   0A36 C0 03              2597 	push	ar3
                           2598 ;	genAssign
   0A38 90s0CrAA           2599 	mov	dptr,#_main_j_1_1
   0A3B E0                 2600 	movx	a,@dptr
   0A3C FA                 2601 	mov	r2,a
   0A3D A3                 2602 	inc	dptr
   0A3E E0                 2603 	movx	a,@dptr
   0A3F FB                 2604 	mov	r3,a
                           2605 ;	genCmpLt
                           2606 ;	genCmp
   0A40 C3                 2607 	clr	c
   0A41 EC                 2608 	mov	a,r4
   0A42 9A                 2609 	subb	a,r2
   0A43 ED                 2610 	mov	a,r5
   0A44 64 80              2611 	xrl	a,#0x80
   0A46 8B F0              2612 	mov	b,r3
   0A48 63 F0 80           2613 	xrl	b,#0x80
   0A4B 95 F0              2614 	subb	a,b
                           2615 ;	genIpop
                           2616 ;	genIfx
                           2617 ;	genIfxJump
                           2618 ;	Peephole 129.c	optimized condition
   0A4D D0 03              2619 	pop	ar3
   0A4F D0 02              2620 	pop	ar2
   0A51 40 03              2621 	jc	00270$
   0A53 02s0Br73           2622 	ljmp	00177$
   0A56                    2623 00270$:
                           2624 ;	main.c:221: s++;
                           2625 ;	genIpush
   0A56 C0 02              2626 	push	ar2
   0A58 C0 03              2627 	push	ar3
                           2628 ;	genAssign
   0A5A 90s0CrA6           2629 	mov	dptr,#_main_s_1_1
   0A5D E0                 2630 	movx	a,@dptr
   0A5E FA                 2631 	mov	r2,a
   0A5F A3                 2632 	inc	dptr
   0A60 E0                 2633 	movx	a,@dptr
   0A61 FB                 2634 	mov	r3,a
                           2635 ;	genPlus
   0A62 90s0CrA6           2636 	mov	dptr,#_main_s_1_1
                           2637 ;     genPlusIncr
   0A65 74 01              2638 	mov	a,#0x01
                           2639 ;	Peephole 236.a	used r2 instead of ar2
   0A67 2A                 2640 	add	a,r2
   0A68 F0                 2641 	movx	@dptr,a
                           2642 ;	Peephole 181	changed mov to clr
   0A69 E4                 2643 	clr	a
                           2644 ;	Peephole 236.b	used r3 instead of ar3
   0A6A 3B                 2645 	addc	a,r3
   0A6B A3                 2646 	inc	dptr
   0A6C F0                 2647 	movx	@dptr,a
                           2648 ;	main.c:222: if(s < 17)
                           2649 ;	genAssign
   0A6D 90s0CrA6           2650 	mov	dptr,#_main_s_1_1
   0A70 E0                 2651 	movx	a,@dptr
   0A71 FA                 2652 	mov	r2,a
   0A72 A3                 2653 	inc	dptr
   0A73 E0                 2654 	movx	a,@dptr
   0A74 FB                 2655 	mov	r3,a
                           2656 ;	genCmpLt
                           2657 ;	genCmp
   0A75 C3                 2658 	clr	c
   0A76 EA                 2659 	mov	a,r2
   0A77 94 11              2660 	subb	a,#0x11
   0A79 EB                 2661 	mov	a,r3
   0A7A 64 80              2662 	xrl	a,#0x80
   0A7C 94 80              2663 	subb	a,#0x80
   0A7E E4                 2664 	clr	a
   0A7F 33                 2665 	rlc	a
                           2666 ;	genIpop
   0A80 D0 03              2667 	pop	ar3
   0A82 D0 02              2668 	pop	ar2
                           2669 ;	genIfx
                           2670 ;	genIfxJump
                           2671 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0A84 60 40              2672 	jz	00128$
                           2673 ;	Peephole 300	removed redundant label 00271$
                           2674 ;	main.c:224: printf_tiny("0x%x  ",buffer0[i]);
                           2675 ;	genIpush
   0A86 C0 02              2676 	push	ar2
   0A88 C0 03              2677 	push	ar3
                           2678 ;	genPlus
                           2679 ;	Peephole 236.g	used r4 instead of ar4
   0A8A EC                 2680 	mov	a,r4
   0A8B 25*1F              2681 	add	a,_main_sloc15_1_0
   0A8D F5 82              2682 	mov	dpl,a
                           2683 ;	Peephole 236.g	used r5 instead of ar5
   0A8F ED                 2684 	mov	a,r5
   0A90 35*20              2685 	addc	a,(_main_sloc15_1_0 + 1)
   0A92 F5 83              2686 	mov	dph,a
                           2687 ;	genPointerGet
                           2688 ;	genFarPointerGet
   0A94 E0                 2689 	movx	a,@dptr
                           2690 ;	genCast
   0A95 FA                 2691 	mov	r2,a
                           2692 ;	Peephole 105	removed redundant mov
   0A96 33                 2693 	rlc	a
   0A97 95 E0              2694 	subb	a,acc
   0A99 FB                 2695 	mov	r3,a
                           2696 ;	genIpush
   0A9A C0 02              2697 	push	ar2
   0A9C C0 03              2698 	push	ar3
   0A9E C0 04              2699 	push	ar4
   0AA0 C0 05              2700 	push	ar5
   0AA2 C0 02              2701 	push	ar2
   0AA4 C0 03              2702 	push	ar3
                           2703 ;	genIpush
   0AA6 74r92              2704 	mov	a,#__str_26
   0AA8 C0 E0              2705 	push	acc
   0AAA 74s03              2706 	mov	a,#(__str_26 >> 8)
   0AAC C0 E0              2707 	push	acc
                           2708 ;	genCall
   0AAE 12s00r00           2709 	lcall	_printf_tiny
   0AB1 E5 81              2710 	mov	a,sp
   0AB3 24 FC              2711 	add	a,#0xfc
   0AB5 F5 81              2712 	mov	sp,a
   0AB7 D0 05              2713 	pop	ar5
   0AB9 D0 04              2714 	pop	ar4
   0ABB D0 03              2715 	pop	ar3
   0ABD D0 02              2716 	pop	ar2
                           2717 ;	genIpop
   0ABF D0 03              2718 	pop	ar3
   0AC1 D0 02              2719 	pop	ar2
   0AC3 02s0Br6B           2720 	ljmp	00176$
   0AC6                    2721 00128$:
                           2722 ;	main.c:228: putchar('\n');
                           2723 ;	genIpush
   0AC6 C0 02              2724 	push	ar2
   0AC8 C0 03              2725 	push	ar3
                           2726 ;	genCall
   0ACA 75 82 0A           2727 	mov	dpl,#0x0A
   0ACD C0 02              2728 	push	ar2
   0ACF C0 03              2729 	push	ar3
   0AD1 C0 04              2730 	push	ar4
   0AD3 C0 05              2731 	push	ar5
   0AD5 12s13r71           2732 	lcall	_putchar
   0AD8 D0 05              2733 	pop	ar5
   0ADA D0 04              2734 	pop	ar4
   0ADC D0 03              2735 	pop	ar3
   0ADE D0 02              2736 	pop	ar2
                           2737 ;	main.c:229: putchar('\r');
                           2738 ;	genCall
   0AE0 75 82 0D           2739 	mov	dpl,#0x0D
   0AE3 C0 02              2740 	push	ar2
   0AE5 C0 03              2741 	push	ar3
   0AE7 C0 04              2742 	push	ar4
   0AE9 C0 05              2743 	push	ar5
   0AEB 12s13r71           2744 	lcall	_putchar
   0AEE D0 05              2745 	pop	ar5
   0AF0 D0 04              2746 	pop	ar4
   0AF2 D0 03              2747 	pop	ar3
   0AF4 D0 02              2748 	pop	ar2
                           2749 ;	main.c:230: s = 1;
                           2750 ;	genAssign
   0AF6 90s0CrA6           2751 	mov	dptr,#_main_s_1_1
   0AF9 74 01              2752 	mov	a,#0x01
   0AFB F0                 2753 	movx	@dptr,a
   0AFC E4                 2754 	clr	a
   0AFD A3                 2755 	inc	dptr
   0AFE F0                 2756 	movx	@dptr,a
                           2757 ;	main.c:231: printf("%p: ",&buffer0[i]);
                           2758 ;	genPlus
                           2759 ;	Peephole 236.g	used r4 instead of ar4
   0AFF EC                 2760 	mov	a,r4
   0B00 25*1D              2761 	add	a,_main_sloc14_1_0
   0B02 FA                 2762 	mov	r2,a
                           2763 ;	Peephole 236.g	used r5 instead of ar5
   0B03 ED                 2764 	mov	a,r5
   0B04 35*1E              2765 	addc	a,(_main_sloc14_1_0 + 1)
   0B06 FB                 2766 	mov	r3,a
                           2767 ;	genCast
   0B07 8A 00              2768 	mov	ar0,r2
   0B09 8B 01              2769 	mov	ar1,r3
   0B0B 7E 00              2770 	mov	r6,#0x0
                           2771 ;	genIpush
   0B0D C0 02              2772 	push	ar2
   0B0F C0 03              2773 	push	ar3
   0B11 C0 04              2774 	push	ar4
   0B13 C0 05              2775 	push	ar5
   0B15 C0 00              2776 	push	ar0
   0B17 C0 01              2777 	push	ar1
   0B19 C0 06              2778 	push	ar6
                           2779 ;	genIpush
   0B1B 74r99              2780 	mov	a,#__str_27
   0B1D C0 E0              2781 	push	acc
   0B1F 74s03              2782 	mov	a,#(__str_27 >> 8)
   0B21 C0 E0              2783 	push	acc
   0B23 74 80              2784 	mov	a,#0x80
   0B25 C0 E0              2785 	push	acc
                           2786 ;	genCall
   0B27 12s00r00           2787 	lcall	_printf
   0B2A E5 81              2788 	mov	a,sp
   0B2C 24 FA              2789 	add	a,#0xfa
   0B2E F5 81              2790 	mov	sp,a
   0B30 D0 05              2791 	pop	ar5
   0B32 D0 04              2792 	pop	ar4
   0B34 D0 03              2793 	pop	ar3
   0B36 D0 02              2794 	pop	ar2
                           2795 ;	main.c:232: printf_tiny("0x%x  ",buffer0[i]);
                           2796 ;	genPointerGet
                           2797 ;	genFarPointerGet
   0B38 8A 82              2798 	mov	dpl,r2
   0B3A 8B 83              2799 	mov	dph,r3
   0B3C E0                 2800 	movx	a,@dptr
                           2801 ;	genCast
   0B3D FA                 2802 	mov	r2,a
                           2803 ;	Peephole 105	removed redundant mov
   0B3E 33                 2804 	rlc	a
   0B3F 95 E0              2805 	subb	a,acc
   0B41 FB                 2806 	mov	r3,a
                           2807 ;	genIpush
   0B42 C0 02              2808 	push	ar2
   0B44 C0 03              2809 	push	ar3
   0B46 C0 04              2810 	push	ar4
   0B48 C0 05              2811 	push	ar5
   0B4A C0 02              2812 	push	ar2
   0B4C C0 03              2813 	push	ar3
                           2814 ;	genIpush
   0B4E 74r92              2815 	mov	a,#__str_26
   0B50 C0 E0              2816 	push	acc
   0B52 74s03              2817 	mov	a,#(__str_26 >> 8)
   0B54 C0 E0              2818 	push	acc
                           2819 ;	genCall
   0B56 12s00r00           2820 	lcall	_printf_tiny
   0B59 E5 81              2821 	mov	a,sp
   0B5B 24 FC              2822 	add	a,#0xfc
   0B5D F5 81              2823 	mov	sp,a
   0B5F D0 05              2824 	pop	ar5
   0B61 D0 04              2825 	pop	ar4
   0B63 D0 03              2826 	pop	ar3
   0B65 D0 02              2827 	pop	ar2
                           2828 ;	main.c:359: printf_tiny("%d",a1);
                           2829 ;	genIpop
   0B67 D0 03              2830 	pop	ar3
   0B69 D0 02              2831 	pop	ar2
                           2832 ;	main.c:232: printf_tiny("0x%x  ",buffer0[i]);
   0B6B                    2833 00176$:
                           2834 ;	main.c:219: for(i=0;i<j;i++)
                           2835 ;	genPlus
                           2836 ;     genPlusIncr
   0B6B 0C                 2837 	inc	r4
   0B6C BC 00 01           2838 	cjne	r4,#0x00,00272$
   0B6F 0D                 2839 	inc	r5
   0B70                    2840 00272$:
   0B70 02s0Ar34           2841 	ljmp	00174$
   0B73                    2842 00177$:
                           2843 ;	main.c:237: printf("\n\rBuffer1: \n\r");
                           2844 ;	genIpush
   0B73 C0 02              2845 	push	ar2
   0B75 C0 03              2846 	push	ar3
   0B77 74r9E              2847 	mov	a,#__str_28
   0B79 C0 E0              2848 	push	acc
   0B7B 74s03              2849 	mov	a,#(__str_28 >> 8)
   0B7D C0 E0              2850 	push	acc
   0B7F 74 80              2851 	mov	a,#0x80
   0B81 C0 E0              2852 	push	acc
                           2853 ;	genCall
   0B83 12s00r00           2854 	lcall	_printf
   0B86 15 81              2855 	dec	sp
   0B88 15 81              2856 	dec	sp
   0B8A 15 81              2857 	dec	sp
   0B8C D0 03              2858 	pop	ar3
   0B8E D0 02              2859 	pop	ar2
                           2860 ;	main.c:238: s=0;
                           2861 ;	genAssign
   0B90 90s0CrA6           2862 	mov	dptr,#_main_s_1_1
   0B93 E4                 2863 	clr	a
   0B94 F0                 2864 	movx	@dptr,a
   0B95 A3                 2865 	inc	dptr
   0B96 F0                 2866 	movx	@dptr,a
                           2867 ;	main.c:239: printf("\n\r%p: ",&buffer1[0]);
                           2868 ;	genCast
   0B97 AC*21              2869 	mov	r4,_main_sloc16_1_0
   0B99 AD*22              2870 	mov	r5,(_main_sloc16_1_0 + 1)
   0B9B 7E 00              2871 	mov	r6,#0x0
                           2872 ;	genIpush
   0B9D C0 02              2873 	push	ar2
   0B9F C0 03              2874 	push	ar3
   0BA1 C0 04              2875 	push	ar4
   0BA3 C0 05              2876 	push	ar5
   0BA5 C0 06              2877 	push	ar6
                           2878 ;	genIpush
   0BA7 74r8B              2879 	mov	a,#__str_25
   0BA9 C0 E0              2880 	push	acc
   0BAB 74s03              2881 	mov	a,#(__str_25 >> 8)
   0BAD C0 E0              2882 	push	acc
   0BAF 74 80              2883 	mov	a,#0x80
   0BB1 C0 E0              2884 	push	acc
                           2885 ;	genCall
   0BB3 12s00r00           2886 	lcall	_printf
   0BB6 E5 81              2887 	mov	a,sp
   0BB8 24 FA              2888 	add	a,#0xfa
   0BBA F5 81              2889 	mov	sp,a
   0BBC D0 03              2890 	pop	ar3
   0BBE D0 02              2891 	pop	ar2
                           2892 ;	main.c:240: for(i=0;i<1;i++)
                           2893 ;	genAssign
   0BC0 7C 00              2894 	mov	r4,#0x00
   0BC2 7D 00              2895 	mov	r5,#0x00
   0BC4                    2896 00178$:
                           2897 ;	genCmpLt
                           2898 ;	genCmp
   0BC4 C3                 2899 	clr	c
   0BC5 EC                 2900 	mov	a,r4
   0BC6 94 01              2901 	subb	a,#0x01
   0BC8 ED                 2902 	mov	a,r5
   0BC9 64 80              2903 	xrl	a,#0x80
   0BCB 94 80              2904 	subb	a,#0x80
                           2905 ;	genIfxJump
   0BCD 40 03              2906 	jc	00273$
   0BCF 02s0CrE5           2907 	ljmp	00181$
   0BD2                    2908 00273$:
                           2909 ;	main.c:242: s++;
                           2910 ;	genAssign
   0BD2 90s0CrA6           2911 	mov	dptr,#_main_s_1_1
   0BD5 E0                 2912 	movx	a,@dptr
   0BD6 FE                 2913 	mov	r6,a
   0BD7 A3                 2914 	inc	dptr
   0BD8 E0                 2915 	movx	a,@dptr
   0BD9 FF                 2916 	mov	r7,a
                           2917 ;	genPlus
   0BDA 90s0CrA6           2918 	mov	dptr,#_main_s_1_1
                           2919 ;     genPlusIncr
   0BDD 74 01              2920 	mov	a,#0x01
                           2921 ;	Peephole 236.a	used r6 instead of ar6
   0BDF 2E                 2922 	add	a,r6
   0BE0 F0                 2923 	movx	@dptr,a
                           2924 ;	Peephole 181	changed mov to clr
   0BE1 E4                 2925 	clr	a
                           2926 ;	Peephole 236.b	used r7 instead of ar7
   0BE2 3F                 2927 	addc	a,r7
   0BE3 A3                 2928 	inc	dptr
   0BE4 F0                 2929 	movx	@dptr,a
                           2930 ;	main.c:243: if(s < 17)
                           2931 ;	genAssign
   0BE5 90s0CrA6           2932 	mov	dptr,#_main_s_1_1
   0BE8 E0                 2933 	movx	a,@dptr
   0BE9 FE                 2934 	mov	r6,a
   0BEA A3                 2935 	inc	dptr
   0BEB E0                 2936 	movx	a,@dptr
   0BEC FF                 2937 	mov	r7,a
                           2938 ;	genCmpLt
                           2939 ;	genCmp
   0BED C3                 2940 	clr	c
   0BEE EE                 2941 	mov	a,r6
   0BEF 94 11              2942 	subb	a,#0x11
   0BF1 EF                 2943 	mov	a,r7
   0BF2 64 80              2944 	xrl	a,#0x80
   0BF4 94 80              2945 	subb	a,#0x80
                           2946 ;	genIfxJump
                           2947 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0BF6 50 38              2948 	jnc	00131$
                           2949 ;	Peephole 300	removed redundant label 00274$
                           2950 ;	main.c:245: printf_tiny("0x%x  ",buffer1[i]);
                           2951 ;	genPlus
                           2952 ;	Peephole 236.g	used r4 instead of ar4
   0BF8 EC                 2953 	mov	a,r4
   0BF9 25*3A              2954 	add	a,_main_sloc29_1_0
   0BFB F5 82              2955 	mov	dpl,a
                           2956 ;	Peephole 236.g	used r5 instead of ar5
   0BFD ED                 2957 	mov	a,r5
   0BFE 35*3B              2958 	addc	a,(_main_sloc29_1_0 + 1)
   0C00 F5 83              2959 	mov	dph,a
                           2960 ;	genPointerGet
                           2961 ;	genFarPointerGet
   0C02 E0                 2962 	movx	a,@dptr
                           2963 ;	genCast
   0C03 FE                 2964 	mov	r6,a
                           2965 ;	Peephole 105	removed redundant mov
   0C04 33                 2966 	rlc	a
   0C05 95 E0              2967 	subb	a,acc
   0C07 FF                 2968 	mov	r7,a
                           2969 ;	genIpush
   0C08 C0 02              2970 	push	ar2
   0C0A C0 03              2971 	push	ar3
   0C0C C0 04              2972 	push	ar4
   0C0E C0 05              2973 	push	ar5
   0C10 C0 06              2974 	push	ar6
   0C12 C0 07              2975 	push	ar7
                           2976 ;	genIpush
   0C14 74r92              2977 	mov	a,#__str_26
   0C16 C0 E0              2978 	push	acc
   0C18 74s03              2979 	mov	a,#(__str_26 >> 8)
   0C1A C0 E0              2980 	push	acc
                           2981 ;	genCall
   0C1C 12s00r00           2982 	lcall	_printf_tiny
   0C1F E5 81              2983 	mov	a,sp
   0C21 24 FC              2984 	add	a,#0xfc
   0C23 F5 81              2985 	mov	sp,a
   0C25 D0 05              2986 	pop	ar5
   0C27 D0 04              2987 	pop	ar4
   0C29 D0 03              2988 	pop	ar3
   0C2B D0 02              2989 	pop	ar2
   0C2D 02s0CrDD           2990 	ljmp	00180$
   0C30                    2991 00131$:
                           2992 ;	main.c:249: putchar('\n');
                           2993 ;	genIpush
   0C30 C0 02              2994 	push	ar2
   0C32 C0 03              2995 	push	ar3
                           2996 ;	genCall
   0C34 75 82 0A           2997 	mov	dpl,#0x0A
   0C37 C0 02              2998 	push	ar2
   0C39 C0 03              2999 	push	ar3
   0C3B C0 04              3000 	push	ar4
   0C3D C0 05              3001 	push	ar5
   0C3F 12s13r71           3002 	lcall	_putchar
   0C42 D0 05              3003 	pop	ar5
   0C44 D0 04              3004 	pop	ar4
   0C46 D0 03              3005 	pop	ar3
   0C48 D0 02              3006 	pop	ar2
                           3007 ;	main.c:250: putchar('\r');
                           3008 ;	genCall
   0C4A 75 82 0D           3009 	mov	dpl,#0x0D
   0C4D C0 02              3010 	push	ar2
   0C4F C0 03              3011 	push	ar3
   0C51 C0 04              3012 	push	ar4
   0C53 C0 05              3013 	push	ar5
   0C55 12s13r71           3014 	lcall	_putchar
   0C58 D0 05              3015 	pop	ar5
   0C5A D0 04              3016 	pop	ar4
   0C5C D0 03              3017 	pop	ar3
   0C5E D0 02              3018 	pop	ar2
                           3019 ;	main.c:251: s = 1;
                           3020 ;	genAssign
   0C60 90s0CrA6           3021 	mov	dptr,#_main_s_1_1
   0C63 74 01              3022 	mov	a,#0x01
   0C65 F0                 3023 	movx	@dptr,a
   0C66 E4                 3024 	clr	a
   0C67 A3                 3025 	inc	dptr
   0C68 F0                 3026 	movx	@dptr,a
                           3027 ;	main.c:252: printf("%p: ",&buffer1[i]);
                           3028 ;	genPlus
                           3029 ;	Peephole 236.g	used r4 instead of ar4
   0C69 EC                 3030 	mov	a,r4
   0C6A 25*23              3031 	add	a,_main_sloc17_1_0
   0C6C FE                 3032 	mov	r6,a
                           3033 ;	Peephole 236.g	used r5 instead of ar5
   0C6D ED                 3034 	mov	a,r5
   0C6E 35*24              3035 	addc	a,(_main_sloc17_1_0 + 1)
   0C70 FF                 3036 	mov	r7,a
                           3037 ;	genCast
   0C71 8E 00              3038 	mov	ar0,r6
   0C73 8F 01              3039 	mov	ar1,r7
   0C75 7A 00              3040 	mov	r2,#0x0
                           3041 ;	genIpush
   0C77 C0 02              3042 	push	ar2
   0C79 C0 03              3043 	push	ar3
   0C7B C0 04              3044 	push	ar4
   0C7D C0 05              3045 	push	ar5
   0C7F C0 06              3046 	push	ar6
   0C81 C0 07              3047 	push	ar7
   0C83 C0 00              3048 	push	ar0
   0C85 C0 01              3049 	push	ar1
   0C87 C0 02              3050 	push	ar2
                           3051 ;	genIpush
   0C89 74r99              3052 	mov	a,#__str_27
   0C8B C0 E0              3053 	push	acc
   0C8D 74s03              3054 	mov	a,#(__str_27 >> 8)
   0C8F C0 E0              3055 	push	acc
   0C91 74 80              3056 	mov	a,#0x80
   0C93 C0 E0              3057 	push	acc
                           3058 ;	genCall
   0C95 12s00r00           3059 	lcall	_printf
   0C98 E5 81              3060 	mov	a,sp
   0C9A 24 FA              3061 	add	a,#0xfa
   0C9C F5 81              3062 	mov	sp,a
   0C9E D0 07              3063 	pop	ar7
   0CA0 D0 06              3064 	pop	ar6
   0CA2 D0 05              3065 	pop	ar5
   0CA4 D0 04              3066 	pop	ar4
   0CA6 D0 03              3067 	pop	ar3
   0CA8 D0 02              3068 	pop	ar2
                           3069 ;	main.c:253: printf_tiny("0x%x  ",buffer1[i]);
                           3070 ;	genPointerGet
                           3071 ;	genFarPointerGet
   0CAA 8E 82              3072 	mov	dpl,r6
   0CAC 8F 83              3073 	mov	dph,r7
   0CAE E0                 3074 	movx	a,@dptr
                           3075 ;	genCast
   0CAF FE                 3076 	mov	r6,a
                           3077 ;	Peephole 105	removed redundant mov
   0CB0 33                 3078 	rlc	a
   0CB1 95 E0              3079 	subb	a,acc
   0CB3 FA                 3080 	mov	r2,a
                           3081 ;	genIpush
   0CB4 C0 02              3082 	push	ar2
   0CB6 C0 03              3083 	push	ar3
   0CB8 C0 04              3084 	push	ar4
   0CBA C0 05              3085 	push	ar5
   0CBC C0 06              3086 	push	ar6
   0CBE C0 02              3087 	push	ar2
                           3088 ;	genIpush
   0CC0 74r92              3089 	mov	a,#__str_26
   0CC2 C0 E0              3090 	push	acc
   0CC4 74s03              3091 	mov	a,#(__str_26 >> 8)
   0CC6 C0 E0              3092 	push	acc
                           3093 ;	genCall
   0CC8 12s00r00           3094 	lcall	_printf_tiny
   0CCB E5 81              3095 	mov	a,sp
   0CCD 24 FC              3096 	add	a,#0xfc
   0CCF F5 81              3097 	mov	sp,a
   0CD1 D0 05              3098 	pop	ar5
   0CD3 D0 04              3099 	pop	ar4
   0CD5 D0 03              3100 	pop	ar3
   0CD7 D0 02              3101 	pop	ar2
                           3102 ;	main.c:359: printf_tiny("%d",a1);
                           3103 ;	genIpop
   0CD9 D0 03              3104 	pop	ar3
   0CDB D0 02              3105 	pop	ar2
                           3106 ;	main.c:253: printf_tiny("0x%x  ",buffer1[i]);
   0CDD                    3107 00180$:
                           3108 ;	main.c:240: for(i=0;i<1;i++)
                           3109 ;	genPlus
                           3110 ;     genPlusIncr
   0CDD 0C                 3111 	inc	r4
   0CDE BC 00 01           3112 	cjne	r4,#0x00,00275$
   0CE1 0D                 3113 	inc	r5
   0CE2                    3114 00275$:
   0CE2 02s0BrC4           3115 	ljmp	00178$
   0CE5                    3116 00181$:
                           3117 ;	main.c:259: if(last_star != 0)
                           3118 ;	genAssign
   0CE5 90s0CrA4           3119 	mov	dptr,#_main_last_star_1_1
   0CE8 E0                 3120 	movx	a,@dptr
   0CE9 FC                 3121 	mov	r4,a
   0CEA A3                 3122 	inc	dptr
   0CEB E0                 3123 	movx	a,@dptr
   0CEC FD                 3124 	mov	r5,a
                           3125 ;	genCmpEq
                           3126 ;	gencjneshort
   0CED BC 00 06           3127 	cjne	r4,#0x00,00276$
   0CF0 BD 00 03           3128 	cjne	r5,#0x00,00276$
   0CF3 02s03r18           3129 	ljmp	00165$
   0CF6                    3130 00276$:
                           3131 ;	main.c:261: printf("\n\rBuffer2:\n\r");
                           3132 ;	genIpush
   0CF6 C0 02              3133 	push	ar2
   0CF8 C0 03              3134 	push	ar3
   0CFA 74rAC              3135 	mov	a,#__str_29
   0CFC C0 E0              3136 	push	acc
   0CFE 74s03              3137 	mov	a,#(__str_29 >> 8)
   0D00 C0 E0              3138 	push	acc
   0D02 74 80              3139 	mov	a,#0x80
   0D04 C0 E0              3140 	push	acc
                           3141 ;	genCall
   0D06 12s00r00           3142 	lcall	_printf
   0D09 15 81              3143 	dec	sp
   0D0B 15 81              3144 	dec	sp
   0D0D 15 81              3145 	dec	sp
   0D0F D0 03              3146 	pop	ar3
   0D11 D0 02              3147 	pop	ar2
                           3148 ;	main.c:262: s=0;
                           3149 ;	genAssign
   0D13 90s0CrA6           3150 	mov	dptr,#_main_s_1_1
   0D16 E4                 3151 	clr	a
   0D17 F0                 3152 	movx	@dptr,a
   0D18 A3                 3153 	inc	dptr
   0D19 F0                 3154 	movx	@dptr,a
                           3155 ;	main.c:263: printf("\n\r%p: ",&buffer2[0]);
                           3156 ;	genIpush
   0D1A C0 02              3157 	push	ar2
   0D1C C0 03              3158 	push	ar3
   0D1E 90s0CrB0           3159 	mov	dptr,#_main_buffer2_1_1
   0D21 E0                 3160 	movx	a,@dptr
   0D22 C0 E0              3161 	push	acc
   0D24 A3                 3162 	inc	dptr
   0D25 E0                 3163 	movx	a,@dptr
   0D26 C0 E0              3164 	push	acc
   0D28 A3                 3165 	inc	dptr
   0D29 E0                 3166 	movx	a,@dptr
   0D2A C0 E0              3167 	push	acc
                           3168 ;	genIpush
   0D2C 74r8B              3169 	mov	a,#__str_25
   0D2E C0 E0              3170 	push	acc
   0D30 74s03              3171 	mov	a,#(__str_25 >> 8)
   0D32 C0 E0              3172 	push	acc
   0D34 74 80              3173 	mov	a,#0x80
   0D36 C0 E0              3174 	push	acc
                           3175 ;	genCall
   0D38 12s00r00           3176 	lcall	_printf
   0D3B E5 81              3177 	mov	a,sp
   0D3D 24 FA              3178 	add	a,#0xfa
   0D3F F5 81              3179 	mov	sp,a
   0D41 D0 03              3180 	pop	ar3
   0D43 D0 02              3181 	pop	ar2
                           3182 ;	main.c:264: for(i=0;i<j;i++)
                           3183 ;	genAssign
   0D45 7C 00              3184 	mov	r4,#0x00
   0D47 7D 00              3185 	mov	r5,#0x00
   0D49                    3186 00182$:
                           3187 ;	genAssign
   0D49 90s0CrAA           3188 	mov	dptr,#_main_j_1_1
   0D4C E0                 3189 	movx	a,@dptr
   0D4D FE                 3190 	mov	r6,a
   0D4E A3                 3191 	inc	dptr
   0D4F E0                 3192 	movx	a,@dptr
   0D50 FF                 3193 	mov	r7,a
                           3194 ;	genCmpLt
                           3195 ;	genCmp
   0D51 C3                 3196 	clr	c
   0D52 EC                 3197 	mov	a,r4
   0D53 9E                 3198 	subb	a,r6
   0D54 ED                 3199 	mov	a,r5
   0D55 64 80              3200 	xrl	a,#0x80
   0D57 8F F0              3201 	mov	b,r7
   0D59 63 F0 80           3202 	xrl	b,#0x80
   0D5C 95 F0              3203 	subb	a,b
                           3204 ;	genIfxJump
   0D5E 40 03              3205 	jc	00277$
   0D60 02s03r18           3206 	ljmp	00165$
   0D63                    3207 00277$:
                           3208 ;	main.c:266: s++;
                           3209 ;	genAssign
   0D63 90s0CrA6           3210 	mov	dptr,#_main_s_1_1
   0D66 E0                 3211 	movx	a,@dptr
   0D67 FE                 3212 	mov	r6,a
   0D68 A3                 3213 	inc	dptr
   0D69 E0                 3214 	movx	a,@dptr
   0D6A FF                 3215 	mov	r7,a
                           3216 ;	genPlus
   0D6B 90s0CrA6           3217 	mov	dptr,#_main_s_1_1
                           3218 ;     genPlusIncr
   0D6E 74 01              3219 	mov	a,#0x01
                           3220 ;	Peephole 236.a	used r6 instead of ar6
   0D70 2E                 3221 	add	a,r6
   0D71 F0                 3222 	movx	@dptr,a
                           3223 ;	Peephole 181	changed mov to clr
   0D72 E4                 3224 	clr	a
                           3225 ;	Peephole 236.b	used r7 instead of ar7
   0D73 3F                 3226 	addc	a,r7
   0D74 A3                 3227 	inc	dptr
   0D75 F0                 3228 	movx	@dptr,a
                           3229 ;	main.c:267: if(s < 17)
                           3230 ;	genAssign
   0D76 90s0CrA6           3231 	mov	dptr,#_main_s_1_1
   0D79 E0                 3232 	movx	a,@dptr
   0D7A FE                 3233 	mov	r6,a
   0D7B A3                 3234 	inc	dptr
   0D7C E0                 3235 	movx	a,@dptr
   0D7D FF                 3236 	mov	r7,a
                           3237 ;	genCmpLt
                           3238 ;	genCmp
   0D7E C3                 3239 	clr	c
   0D7F EE                 3240 	mov	a,r6
   0D80 94 11              3241 	subb	a,#0x11
   0D82 EF                 3242 	mov	a,r7
   0D83 64 80              3243 	xrl	a,#0x80
   0D85 94 80              3244 	subb	a,#0x80
                           3245 ;	genIfxJump
                           3246 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0D87 50 40              3247 	jnc	00134$
                           3248 ;	Peephole 300	removed redundant label 00278$
                           3249 ;	main.c:269: printf_tiny("0x%x  ",buffer2[i]);
                           3250 ;	genPlus
                           3251 ;	Peephole 236.g	used r4 instead of ar4
   0D89 EC                 3252 	mov	a,r4
   0D8A 25*28              3253 	add	a,_main_sloc19_1_0
   0D8C FE                 3254 	mov	r6,a
                           3255 ;	Peephole 236.g	used r5 instead of ar5
   0D8D ED                 3256 	mov	a,r5
   0D8E 35*29              3257 	addc	a,(_main_sloc19_1_0 + 1)
   0D90 FF                 3258 	mov	r7,a
   0D91 A8*2A              3259 	mov	r0,(_main_sloc19_1_0 + 2)
                           3260 ;	genPointerGet
                           3261 ;	genGenPointerGet
   0D93 8E 82              3262 	mov	dpl,r6
   0D95 8F 83              3263 	mov	dph,r7
   0D97 88 F0              3264 	mov	b,r0
   0D99 12s00r00           3265 	lcall	__gptrget
                           3266 ;	genCast
   0D9C FE                 3267 	mov	r6,a
                           3268 ;	Peephole 105	removed redundant mov
   0D9D 33                 3269 	rlc	a
   0D9E 95 E0              3270 	subb	a,acc
   0DA0 FF                 3271 	mov	r7,a
                           3272 ;	genIpush
   0DA1 C0 02              3273 	push	ar2
   0DA3 C0 03              3274 	push	ar3
   0DA5 C0 04              3275 	push	ar4
   0DA7 C0 05              3276 	push	ar5
   0DA9 C0 06              3277 	push	ar6
   0DAB C0 07              3278 	push	ar7
                           3279 ;	genIpush
   0DAD 74r92              3280 	mov	a,#__str_26
   0DAF C0 E0              3281 	push	acc
   0DB1 74s03              3282 	mov	a,#(__str_26 >> 8)
   0DB3 C0 E0              3283 	push	acc
                           3284 ;	genCall
   0DB5 12s00r00           3285 	lcall	_printf_tiny
   0DB8 E5 81              3286 	mov	a,sp
   0DBA 24 FC              3287 	add	a,#0xfc
   0DBC F5 81              3288 	mov	sp,a
   0DBE D0 05              3289 	pop	ar5
   0DC0 D0 04              3290 	pop	ar4
   0DC2 D0 03              3291 	pop	ar3
   0DC4 D0 02              3292 	pop	ar2
   0DC6 02s0Er70           3293 	ljmp	00184$
   0DC9                    3294 00134$:
                           3295 ;	main.c:273: putchar('\n');
                           3296 ;	genCall
   0DC9 75 82 0A           3297 	mov	dpl,#0x0A
   0DCC C0 02              3298 	push	ar2
   0DCE C0 03              3299 	push	ar3
   0DD0 C0 04              3300 	push	ar4
   0DD2 C0 05              3301 	push	ar5
   0DD4 12s13r71           3302 	lcall	_putchar
   0DD7 D0 05              3303 	pop	ar5
   0DD9 D0 04              3304 	pop	ar4
   0DDB D0 03              3305 	pop	ar3
   0DDD D0 02              3306 	pop	ar2
                           3307 ;	main.c:274: putchar('\r');
                           3308 ;	genCall
   0DDF 75 82 0D           3309 	mov	dpl,#0x0D
   0DE2 C0 02              3310 	push	ar2
   0DE4 C0 03              3311 	push	ar3
   0DE6 C0 04              3312 	push	ar4
   0DE8 C0 05              3313 	push	ar5
   0DEA 12s13r71           3314 	lcall	_putchar
   0DED D0 05              3315 	pop	ar5
   0DEF D0 04              3316 	pop	ar4
   0DF1 D0 03              3317 	pop	ar3
   0DF3 D0 02              3318 	pop	ar2
                           3319 ;	main.c:275: s = 1;
                           3320 ;	genAssign
   0DF5 90s0CrA6           3321 	mov	dptr,#_main_s_1_1
   0DF8 74 01              3322 	mov	a,#0x01
   0DFA F0                 3323 	movx	@dptr,a
   0DFB E4                 3324 	clr	a
   0DFC A3                 3325 	inc	dptr
   0DFD F0                 3326 	movx	@dptr,a
                           3327 ;	main.c:276: printf("%p: ",&buffer2[i]);
                           3328 ;	genPlus
                           3329 ;	Peephole 236.g	used r4 instead of ar4
   0DFE EC                 3330 	mov	a,r4
   0DFF 25*25              3331 	add	a,_main_sloc18_1_0
   0E01 FE                 3332 	mov	r6,a
                           3333 ;	Peephole 236.g	used r5 instead of ar5
   0E02 ED                 3334 	mov	a,r5
   0E03 35*26              3335 	addc	a,(_main_sloc18_1_0 + 1)
   0E05 FF                 3336 	mov	r7,a
   0E06 A8*27              3337 	mov	r0,(_main_sloc18_1_0 + 2)
                           3338 ;	genIpush
   0E08 C0 02              3339 	push	ar2
   0E0A C0 03              3340 	push	ar3
   0E0C C0 04              3341 	push	ar4
   0E0E C0 05              3342 	push	ar5
   0E10 C0 06              3343 	push	ar6
   0E12 C0 07              3344 	push	ar7
   0E14 C0 00              3345 	push	ar0
                           3346 ;	genIpush
   0E16 74r99              3347 	mov	a,#__str_27
   0E18 C0 E0              3348 	push	acc
   0E1A 74s03              3349 	mov	a,#(__str_27 >> 8)
   0E1C C0 E0              3350 	push	acc
   0E1E 74 80              3351 	mov	a,#0x80
   0E20 C0 E0              3352 	push	acc
                           3353 ;	genCall
   0E22 12s00r00           3354 	lcall	_printf
   0E25 E5 81              3355 	mov	a,sp
   0E27 24 FA              3356 	add	a,#0xfa
   0E29 F5 81              3357 	mov	sp,a
   0E2B D0 05              3358 	pop	ar5
   0E2D D0 04              3359 	pop	ar4
   0E2F D0 03              3360 	pop	ar3
   0E31 D0 02              3361 	pop	ar2
                           3362 ;	main.c:277: printf_tiny("0x%x  ",buffer2[i]);
                           3363 ;	genPlus
                           3364 ;	Peephole 236.g	used r4 instead of ar4
   0E33 EC                 3365 	mov	a,r4
   0E34 25*25              3366 	add	a,_main_sloc18_1_0
   0E36 FE                 3367 	mov	r6,a
                           3368 ;	Peephole 236.g	used r5 instead of ar5
   0E37 ED                 3369 	mov	a,r5
   0E38 35*26              3370 	addc	a,(_main_sloc18_1_0 + 1)
   0E3A FF                 3371 	mov	r7,a
   0E3B A8*27              3372 	mov	r0,(_main_sloc18_1_0 + 2)
                           3373 ;	genPointerGet
                           3374 ;	genGenPointerGet
   0E3D 8E 82              3375 	mov	dpl,r6
   0E3F 8F 83              3376 	mov	dph,r7
   0E41 88 F0              3377 	mov	b,r0
   0E43 12s00r00           3378 	lcall	__gptrget
                           3379 ;	genCast
   0E46 FE                 3380 	mov	r6,a
                           3381 ;	Peephole 105	removed redundant mov
   0E47 33                 3382 	rlc	a
   0E48 95 E0              3383 	subb	a,acc
   0E4A FF                 3384 	mov	r7,a
                           3385 ;	genIpush
   0E4B C0 02              3386 	push	ar2
   0E4D C0 03              3387 	push	ar3
   0E4F C0 04              3388 	push	ar4
   0E51 C0 05              3389 	push	ar5
   0E53 C0 06              3390 	push	ar6
   0E55 C0 07              3391 	push	ar7
                           3392 ;	genIpush
   0E57 74r92              3393 	mov	a,#__str_26
   0E59 C0 E0              3394 	push	acc
   0E5B 74s03              3395 	mov	a,#(__str_26 >> 8)
   0E5D C0 E0              3396 	push	acc
                           3397 ;	genCall
   0E5F 12s00r00           3398 	lcall	_printf_tiny
   0E62 E5 81              3399 	mov	a,sp
   0E64 24 FC              3400 	add	a,#0xfc
   0E66 F5 81              3401 	mov	sp,a
   0E68 D0 05              3402 	pop	ar5
   0E6A D0 04              3403 	pop	ar4
   0E6C D0 03              3404 	pop	ar3
   0E6E D0 02              3405 	pop	ar2
   0E70                    3406 00184$:
                           3407 ;	main.c:264: for(i=0;i<j;i++)
                           3408 ;	genPlus
                           3409 ;     genPlusIncr
   0E70 0C                 3410 	inc	r4
   0E71 BC 00 01           3411 	cjne	r4,#0x00,00279$
   0E74 0D                 3412 	inc	r5
   0E75                    3413 00279$:
   0E75 02s0Dr49           3414 	ljmp	00182$
   0E78                    3415 00151$:
                           3416 ;	main.c:284: else if(a1 == STAR)
                           3417 ;	genCmpEq
                           3418 ;	gencjneshort
   0E78 BD 2A 05           3419 	cjne	r5,#0x2A,00280$
   0E7B BE 00 02           3420 	cjne	r6,#0x00,00280$
   0E7E 80 03              3421 	sjmp	00281$
   0E80                    3422 00280$:
   0E80 02s12r08           3423 	ljmp	00148$
   0E83                    3424 00281$:
                           3425 ;	main.c:287: memcpy(buffer2,buffer0,j);
                           3426 ;	genIpush
   0E83 C0 02              3427 	push	ar2
   0E85 C0 03              3428 	push	ar3
                           3429 ;	genAssign
   0E87 90s0CrB0           3430 	mov	dptr,#_main_buffer2_1_1
   0E8A E0                 3431 	movx	a,@dptr
   0E8B FC                 3432 	mov	r4,a
   0E8C A3                 3433 	inc	dptr
   0E8D E0                 3434 	movx	a,@dptr
   0E8E FD                 3435 	mov	r5,a
   0E8F A3                 3436 	inc	dptr
   0E90 E0                 3437 	movx	a,@dptr
   0E91 FE                 3438 	mov	r6,a
                           3439 ;	genCast
   0E92 AF*36              3440 	mov	r7,_main_sloc27_1_0
   0E94 A8*37              3441 	mov	r0,(_main_sloc27_1_0 + 1)
   0E96 79 00              3442 	mov	r1,#0x0
                           3443 ;	genAssign
   0E98 90s0CrAA           3444 	mov	dptr,#_main_j_1_1
   0E9B E0                 3445 	movx	a,@dptr
   0E9C FA                 3446 	mov	r2,a
   0E9D A3                 3447 	inc	dptr
   0E9E E0                 3448 	movx	a,@dptr
   0E9F FB                 3449 	mov	r3,a
                           3450 ;	genAssign
   0EA0 90s00r00           3451 	mov	dptr,#_memcpy_PARM_2
   0EA3 EF                 3452 	mov	a,r7
   0EA4 F0                 3453 	movx	@dptr,a
   0EA5 A3                 3454 	inc	dptr
   0EA6 E8                 3455 	mov	a,r0
   0EA7 F0                 3456 	movx	@dptr,a
   0EA8 A3                 3457 	inc	dptr
   0EA9 E9                 3458 	mov	a,r1
   0EAA F0                 3459 	movx	@dptr,a
                           3460 ;	genAssign
   0EAB 90s00r00           3461 	mov	dptr,#_memcpy_PARM_3
   0EAE EA                 3462 	mov	a,r2
   0EAF F0                 3463 	movx	@dptr,a
   0EB0 A3                 3464 	inc	dptr
   0EB1 EB                 3465 	mov	a,r3
   0EB2 F0                 3466 	movx	@dptr,a
                           3467 ;	genCall
   0EB3 8C 82              3468 	mov	dpl,r4
   0EB5 8D 83              3469 	mov	dph,r5
   0EB7 8E F0              3470 	mov	b,r6
   0EB9 C0 02              3471 	push	ar2
   0EBB C0 03              3472 	push	ar3
   0EBD 12s00r00           3473 	lcall	_memcpy
   0EC0 D0 03              3474 	pop	ar3
   0EC2 D0 02              3475 	pop	ar2
                           3476 ;	main.c:290: last_s = (last_star>0)?(count_char-last_star):0;
                           3477 ;	genAssign
   0EC4 90s0CrA4           3478 	mov	dptr,#_main_last_star_1_1
   0EC7 E0                 3479 	movx	a,@dptr
   0EC8 FC                 3480 	mov	r4,a
   0EC9 A3                 3481 	inc	dptr
   0ECA E0                 3482 	movx	a,@dptr
   0ECB FD                 3483 	mov	r5,a
                           3484 ;	genCmpGt
                           3485 ;	genCmp
   0ECC C3                 3486 	clr	c
                           3487 ;	Peephole 181	changed mov to clr
   0ECD E4                 3488 	clr	a
   0ECE 9C                 3489 	subb	a,r4
                           3490 ;	Peephole 159	avoided xrl during execution
   0ECF 74 80              3491 	mov	a,#(0x00 ^ 0x80)
   0ED1 8D F0              3492 	mov	b,r5
   0ED3 63 F0 80           3493 	xrl	b,#0x80
   0ED6 95 F0              3494 	subb	a,b
   0ED8 E4                 3495 	clr	a
   0ED9 33                 3496 	rlc	a
                           3497 ;	genIpop
   0EDA D0 03              3498 	pop	ar3
   0EDC D0 02              3499 	pop	ar2
                           3500 ;	genIfx
                           3501 ;	genIfxJump
                           3502 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0EDE 60 0B              3503 	jz	00194$
                           3504 ;	Peephole 300	removed redundant label 00282$
                           3505 ;	genMinus
   0EE0 E5*34              3506 	mov	a,_main_sloc23_1_0
   0EE2 C3                 3507 	clr	c
                           3508 ;	Peephole 236.l	used r4 instead of ar4
   0EE3 9C                 3509 	subb	a,r4
   0EE4 FC                 3510 	mov	r4,a
   0EE5 E5*35              3511 	mov	a,(_main_sloc23_1_0 + 1)
                           3512 ;	Peephole 236.l	used r5 instead of ar5
   0EE7 9D                 3513 	subb	a,r5
   0EE8 FD                 3514 	mov	r5,a
                           3515 ;	Peephole 112.b	changed ljmp to sjmp
   0EE9 80 04              3516 	sjmp	00195$
   0EEB                    3517 00194$:
                           3518 ;	genAssign
   0EEB 7C 00              3519 	mov	r4,#0x00
   0EED 7D 00              3520 	mov	r5,#0x00
   0EEF                    3521 00195$:
                           3522 ;	main.c:292: printf_tiny("\n\r------------------------------------------");
                           3523 ;	genIpush
   0EEF C0 02              3524 	push	ar2
   0EF1 C0 03              3525 	push	ar3
   0EF3 C0 04              3526 	push	ar4
   0EF5 C0 05              3527 	push	ar5
   0EF7 74r1C              3528 	mov	a,#__str_13
   0EF9 C0 E0              3529 	push	acc
   0EFB 74s02              3530 	mov	a,#(__str_13 >> 8)
   0EFD C0 E0              3531 	push	acc
                           3532 ;	genCall
   0EFF 12s00r00           3533 	lcall	_printf_tiny
   0F02 15 81              3534 	dec	sp
   0F04 15 81              3535 	dec	sp
   0F06 D0 05              3536 	pop	ar5
   0F08 D0 04              3537 	pop	ar4
   0F0A D0 03              3538 	pop	ar3
   0F0C D0 02              3539 	pop	ar2
                           3540 ;	main.c:293: printf_tiny("\n\r------------------------------------------");
                           3541 ;	genIpush
   0F0E C0 02              3542 	push	ar2
   0F10 C0 03              3543 	push	ar3
   0F12 C0 04              3544 	push	ar4
   0F14 C0 05              3545 	push	ar5
   0F16 74r1C              3546 	mov	a,#__str_13
   0F18 C0 E0              3547 	push	acc
   0F1A 74s02              3548 	mov	a,#(__str_13 >> 8)
   0F1C C0 E0              3549 	push	acc
                           3550 ;	genCall
   0F1E 12s00r00           3551 	lcall	_printf_tiny
   0F21 15 81              3552 	dec	sp
   0F23 15 81              3553 	dec	sp
   0F25 D0 05              3554 	pop	ar5
   0F27 D0 04              3555 	pop	ar4
   0F29 D0 03              3556 	pop	ar3
   0F2B D0 02              3557 	pop	ar2
                           3558 ;	main.c:294: printf_tiny("\n\rHeap Report\n\r");
                           3559 ;	genIpush
   0F2D C0 02              3560 	push	ar2
   0F2F C0 03              3561 	push	ar3
   0F31 C0 04              3562 	push	ar4
   0F33 C0 05              3563 	push	ar5
   0F35 74r49              3564 	mov	a,#__str_14
   0F37 C0 E0              3565 	push	acc
   0F39 74s02              3566 	mov	a,#(__str_14 >> 8)
   0F3B C0 E0              3567 	push	acc
                           3568 ;	genCall
   0F3D 12s00r00           3569 	lcall	_printf_tiny
   0F40 15 81              3570 	dec	sp
   0F42 15 81              3571 	dec	sp
   0F44 D0 05              3572 	pop	ar5
   0F46 D0 04              3573 	pop	ar4
   0F48 D0 03              3574 	pop	ar3
   0F4A D0 02              3575 	pop	ar2
                           3576 ;	main.c:295: printf_tiny("Buffer: Buffer2\n\r");
                           3577 ;	genIpush
   0F4C C0 02              3578 	push	ar2
   0F4E C0 03              3579 	push	ar3
   0F50 C0 04              3580 	push	ar4
   0F52 C0 05              3581 	push	ar5
   0F54 74rB9              3582 	mov	a,#__str_30
   0F56 C0 E0              3583 	push	acc
   0F58 74s03              3584 	mov	a,#(__str_30 >> 8)
   0F5A C0 E0              3585 	push	acc
                           3586 ;	genCall
   0F5C 12s00r00           3587 	lcall	_printf_tiny
   0F5F 15 81              3588 	dec	sp
   0F61 15 81              3589 	dec	sp
   0F63 D0 05              3590 	pop	ar5
   0F65 D0 04              3591 	pop	ar4
   0F67 D0 03              3592 	pop	ar3
   0F69 D0 02              3593 	pop	ar2
                           3594 ;	main.c:296: printf("Buffer Start address: %p\n\r",&buffer2[0]);
                           3595 ;	genIpush
   0F6B C0 02              3596 	push	ar2
   0F6D C0 03              3597 	push	ar3
   0F6F C0 04              3598 	push	ar4
   0F71 C0 05              3599 	push	ar5
   0F73 90s0CrB0           3600 	mov	dptr,#_main_buffer2_1_1
   0F76 E0                 3601 	movx	a,@dptr
   0F77 C0 E0              3602 	push	acc
   0F79 A3                 3603 	inc	dptr
   0F7A E0                 3604 	movx	a,@dptr
   0F7B C0 E0              3605 	push	acc
   0F7D A3                 3606 	inc	dptr
   0F7E E0                 3607 	movx	a,@dptr
   0F7F C0 E0              3608 	push	acc
                           3609 ;	genIpush
   0F81 74r6B              3610 	mov	a,#__str_16
   0F83 C0 E0              3611 	push	acc
   0F85 74s02              3612 	mov	a,#(__str_16 >> 8)
   0F87 C0 E0              3613 	push	acc
   0F89 74 80              3614 	mov	a,#0x80
   0F8B C0 E0              3615 	push	acc
                           3616 ;	genCall
   0F8D 12s00r00           3617 	lcall	_printf
   0F90 E5 81              3618 	mov	a,sp
   0F92 24 FA              3619 	add	a,#0xfa
   0F94 F5 81              3620 	mov	sp,a
   0F96 D0 05              3621 	pop	ar5
   0F98 D0 04              3622 	pop	ar4
   0F9A D0 03              3623 	pop	ar3
   0F9C D0 02              3624 	pop	ar2
                           3625 ;	main.c:297: if(j == 0)
                           3626 ;	genAssign
   0F9E 90s0CrAA           3627 	mov	dptr,#_main_j_1_1
   0FA1 E0                 3628 	movx	a,@dptr
   0FA2 FE                 3629 	mov	r6,a
   0FA3 A3                 3630 	inc	dptr
   0FA4 E0                 3631 	movx	a,@dptr
                           3632 ;	genIfx
   0FA5 FF                 3633 	mov	r7,a
                           3634 ;	Peephole 135	removed redundant mov
   0FA6 4E                 3635 	orl	a,r6
                           3636 ;	genIfxJump
                           3637 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0FA7 70 35              3638 	jnz	00139$
                           3639 ;	Peephole 300	removed redundant label 00283$
                           3640 ;	main.c:299: printf("Buffer End Address: %p\n\r",&buffer2[0]);
                           3641 ;	genIpush
   0FA9 C0 02              3642 	push	ar2
   0FAB C0 03              3643 	push	ar3
   0FAD C0 04              3644 	push	ar4
   0FAF C0 05              3645 	push	ar5
   0FB1 90s0CrB0           3646 	mov	dptr,#_main_buffer2_1_1
   0FB4 E0                 3647 	movx	a,@dptr
   0FB5 C0 E0              3648 	push	acc
   0FB7 A3                 3649 	inc	dptr
   0FB8 E0                 3650 	movx	a,@dptr
   0FB9 C0 E0              3651 	push	acc
   0FBB A3                 3652 	inc	dptr
   0FBC E0                 3653 	movx	a,@dptr
   0FBD C0 E0              3654 	push	acc
                           3655 ;	genIpush
   0FBF 74r86              3656 	mov	a,#__str_17
   0FC1 C0 E0              3657 	push	acc
   0FC3 74s02              3658 	mov	a,#(__str_17 >> 8)
   0FC5 C0 E0              3659 	push	acc
   0FC7 74 80              3660 	mov	a,#0x80
   0FC9 C0 E0              3661 	push	acc
                           3662 ;	genCall
   0FCB 12s00r00           3663 	lcall	_printf
   0FCE E5 81              3664 	mov	a,sp
   0FD0 24 FA              3665 	add	a,#0xfa
   0FD2 F5 81              3666 	mov	sp,a
   0FD4 D0 05              3667 	pop	ar5
   0FD6 D0 04              3668 	pop	ar4
   0FD8 D0 03              3669 	pop	ar3
   0FDA D0 02              3670 	pop	ar2
                           3671 ;	Peephole 112.b	changed ljmp to sjmp
   0FDC 80 42              3672 	sjmp	00140$
   0FDE                    3673 00139$:
                           3674 ;	main.c:303: printf("Buffer End Address: %p\n\r",&buffer2[j-1]);
                           3675 ;	genAssign
   0FDE 90s0CrAA           3676 	mov	dptr,#_main_j_1_1
   0FE1 E0                 3677 	movx	a,@dptr
   0FE2 FE                 3678 	mov	r6,a
   0FE3 A3                 3679 	inc	dptr
   0FE4 E0                 3680 	movx	a,@dptr
   0FE5 FF                 3681 	mov	r7,a
                           3682 ;	genMinus
                           3683 ;	genMinusDec
   0FE6 1E                 3684 	dec	r6
   0FE7 BE FF 01           3685 	cjne	r6,#0xff,00284$
   0FEA 1F                 3686 	dec	r7
   0FEB                    3687 00284$:
                           3688 ;	genPlus
                           3689 ;	Peephole 236.g	used r6 instead of ar6
   0FEB EE                 3690 	mov	a,r6
   0FEC 25*2B              3691 	add	a,_main_sloc20_1_0
   0FEE FE                 3692 	mov	r6,a
                           3693 ;	Peephole 236.g	used r7 instead of ar7
   0FEF EF                 3694 	mov	a,r7
   0FF0 35*2C              3695 	addc	a,(_main_sloc20_1_0 + 1)
   0FF2 FF                 3696 	mov	r7,a
   0FF3 A8*2D              3697 	mov	r0,(_main_sloc20_1_0 + 2)
                           3698 ;	genIpush
   0FF5 C0 02              3699 	push	ar2
   0FF7 C0 03              3700 	push	ar3
   0FF9 C0 04              3701 	push	ar4
   0FFB C0 05              3702 	push	ar5
   0FFD C0 06              3703 	push	ar6
   0FFF C0 07              3704 	push	ar7
   1001 C0 00              3705 	push	ar0
                           3706 ;	genIpush
   1003 74r86              3707 	mov	a,#__str_17
   1005 C0 E0              3708 	push	acc
   1007 74s02              3709 	mov	a,#(__str_17 >> 8)
   1009 C0 E0              3710 	push	acc
   100B 74 80              3711 	mov	a,#0x80
   100D C0 E0              3712 	push	acc
                           3713 ;	genCall
   100F 12s00r00           3714 	lcall	_printf
   1012 E5 81              3715 	mov	a,sp
   1014 24 FA              3716 	add	a,#0xfa
   1016 F5 81              3717 	mov	sp,a
   1018 D0 05              3718 	pop	ar5
   101A D0 04              3719 	pop	ar4
   101C D0 03              3720 	pop	ar3
   101E D0 02              3721 	pop	ar2
   1020                    3722 00140$:
                           3723 ;	main.c:306: printf_tiny("Total allocated size in bytes: %d\n\r",j);
                           3724 ;	genIpush
   1020 C0 02              3725 	push	ar2
   1022 C0 03              3726 	push	ar3
   1024 C0 04              3727 	push	ar4
   1026 C0 05              3728 	push	ar5
   1028 90s0CrAA           3729 	mov	dptr,#_main_j_1_1
   102B E0                 3730 	movx	a,@dptr
   102C C0 E0              3731 	push	acc
   102E A3                 3732 	inc	dptr
   102F E0                 3733 	movx	a,@dptr
   1030 C0 E0              3734 	push	acc
                           3735 ;	genIpush
   1032 74r9F              3736 	mov	a,#__str_18
   1034 C0 E0              3737 	push	acc
   1036 74s02              3738 	mov	a,#(__str_18 >> 8)
   1038 C0 E0              3739 	push	acc
                           3740 ;	genCall
   103A 12s00r00           3741 	lcall	_printf_tiny
   103D E5 81              3742 	mov	a,sp
   103F 24 FC              3743 	add	a,#0xfc
   1041 F5 81              3744 	mov	sp,a
   1043 D0 05              3745 	pop	ar5
   1045 D0 04              3746 	pop	ar4
   1047 D0 03              3747 	pop	ar3
   1049 D0 02              3748 	pop	ar2
                           3749 ;	main.c:307: printf_tiny("Number of storage characters in the buffer: %d\n\r",j);
                           3750 ;	genIpush
   104B C0 02              3751 	push	ar2
   104D C0 03              3752 	push	ar3
   104F C0 04              3753 	push	ar4
   1051 C0 05              3754 	push	ar5
   1053 90s0CrAA           3755 	mov	dptr,#_main_j_1_1
   1056 E0                 3756 	movx	a,@dptr
   1057 C0 E0              3757 	push	acc
   1059 A3                 3758 	inc	dptr
   105A E0                 3759 	movx	a,@dptr
   105B C0 E0              3760 	push	acc
                           3761 ;	genIpush
   105D 74rC3              3762 	mov	a,#__str_19
   105F C0 E0              3763 	push	acc
   1061 74s02              3764 	mov	a,#(__str_19 >> 8)
   1063 C0 E0              3765 	push	acc
                           3766 ;	genCall
   1065 12s00r00           3767 	lcall	_printf_tiny
   1068 E5 81              3768 	mov	a,sp
   106A 24 FC              3769 	add	a,#0xfc
   106C F5 81              3770 	mov	sp,a
   106E D0 05              3771 	pop	ar5
   1070 D0 04              3772 	pop	ar4
   1072 D0 03              3773 	pop	ar3
   1074 D0 02              3774 	pop	ar2
                           3775 ;	main.c:308: printf_tiny("Free space in the buffer: %d\n\r",buf_int-j);
                           3776 ;	genAssign
   1076 90s0CrAA           3777 	mov	dptr,#_main_j_1_1
   1079 E0                 3778 	movx	a,@dptr
   107A FE                 3779 	mov	r6,a
   107B A3                 3780 	inc	dptr
   107C E0                 3781 	movx	a,@dptr
   107D FF                 3782 	mov	r7,a
                           3783 ;	genMinus
   107E EA                 3784 	mov	a,r2
   107F C3                 3785 	clr	c
                           3786 ;	Peephole 236.l	used r6 instead of ar6
   1080 9E                 3787 	subb	a,r6
   1081 FE                 3788 	mov	r6,a
   1082 EB                 3789 	mov	a,r3
                           3790 ;	Peephole 236.l	used r7 instead of ar7
   1083 9F                 3791 	subb	a,r7
   1084 FF                 3792 	mov	r7,a
                           3793 ;	genIpush
   1085 C0 02              3794 	push	ar2
   1087 C0 03              3795 	push	ar3
   1089 C0 04              3796 	push	ar4
   108B C0 05              3797 	push	ar5
   108D C0 06              3798 	push	ar6
   108F C0 07              3799 	push	ar7
                           3800 ;	genIpush
   1091 74rF4              3801 	mov	a,#__str_20
   1093 C0 E0              3802 	push	acc
   1095 74s02              3803 	mov	a,#(__str_20 >> 8)
   1097 C0 E0              3804 	push	acc
                           3805 ;	genCall
   1099 12s00r00           3806 	lcall	_printf_tiny
   109C E5 81              3807 	mov	a,sp
   109E 24 FC              3808 	add	a,#0xfc
   10A0 F5 81              3809 	mov	sp,a
   10A2 D0 05              3810 	pop	ar5
   10A4 D0 04              3811 	pop	ar4
   10A6 D0 03              3812 	pop	ar3
   10A8 D0 02              3813 	pop	ar2
                           3814 ;	main.c:309: printf_tiny("Number of characters since last '*': %d\n\r",last_s);
                           3815 ;	genIpush
   10AA C0 02              3816 	push	ar2
   10AC C0 03              3817 	push	ar3
   10AE C0 04              3818 	push	ar4
   10B0 C0 05              3819 	push	ar5
                           3820 ;	genIpush
   10B2 74rCB              3821 	mov	a,#__str_31
   10B4 C0 E0              3822 	push	acc
   10B6 74s03              3823 	mov	a,#(__str_31 >> 8)
   10B8 C0 E0              3824 	push	acc
                           3825 ;	genCall
   10BA 12s00r00           3826 	lcall	_printf_tiny
   10BD E5 81              3827 	mov	a,sp
   10BF 24 FC              3828 	add	a,#0xfc
   10C1 F5 81              3829 	mov	sp,a
   10C3 D0 03              3830 	pop	ar3
   10C5 D0 02              3831 	pop	ar2
                           3832 ;	main.c:310: printf_tiny("\n\r------------------------------------------");
                           3833 ;	genIpush
   10C7 C0 02              3834 	push	ar2
   10C9 C0 03              3835 	push	ar3
   10CB 74r1C              3836 	mov	a,#__str_13
   10CD C0 E0              3837 	push	acc
   10CF 74s02              3838 	mov	a,#(__str_13 >> 8)
   10D1 C0 E0              3839 	push	acc
                           3840 ;	genCall
   10D3 12s00r00           3841 	lcall	_printf_tiny
   10D6 15 81              3842 	dec	sp
   10D8 15 81              3843 	dec	sp
   10DA D0 03              3844 	pop	ar3
   10DC D0 02              3845 	pop	ar2
                           3846 ;	main.c:311: printf_tiny("\n\r------------------------------------------\n\r");
                           3847 ;	genIpush
   10DE C0 02              3848 	push	ar2
   10E0 C0 03              3849 	push	ar3
   10E2 74r3D              3850 	mov	a,#__str_22
   10E4 C0 E0              3851 	push	acc
   10E6 74s03              3852 	mov	a,#(__str_22 >> 8)
   10E8 C0 E0              3853 	push	acc
                           3854 ;	genCall
   10EA 12s00r00           3855 	lcall	_printf_tiny
   10ED 15 81              3856 	dec	sp
   10EF 15 81              3857 	dec	sp
   10F1 D0 03              3858 	pop	ar3
   10F3 D0 02              3859 	pop	ar2
                           3860 ;	main.c:316: r=0;
                           3861 ;	genAssign
   10F5 90s0CrA0           3862 	mov	dptr,#_main_r_1_1
   10F8 E4                 3863 	clr	a
   10F9 F0                 3864 	movx	@dptr,a
   10FA A3                 3865 	inc	dptr
   10FB F0                 3866 	movx	@dptr,a
                           3867 ;	main.c:317: for(i=0;i<=j;i++)
                           3868 ;	genAssign
   10FC 7C 00              3869 	mov	r4,#0x00
   10FE 7D 00              3870 	mov	r5,#0x00
   1100                    3871 00186$:
                           3872 ;	genAssign
   1100 90s0CrAA           3873 	mov	dptr,#_main_j_1_1
   1103 E0                 3874 	movx	a,@dptr
   1104 FE                 3875 	mov	r6,a
   1105 A3                 3876 	inc	dptr
   1106 E0                 3877 	movx	a,@dptr
   1107 FF                 3878 	mov	r7,a
                           3879 ;	genCmpGt
                           3880 ;	genCmp
   1108 C3                 3881 	clr	c
   1109 EE                 3882 	mov	a,r6
   110A 9C                 3883 	subb	a,r4
   110B EF                 3884 	mov	a,r7
   110C 64 80              3885 	xrl	a,#0x80
   110E 8D F0              3886 	mov	b,r5
   1110 63 F0 80           3887 	xrl	b,#0x80
   1113 95 F0              3888 	subb	a,b
                           3889 ;	genIfxJump
   1115 50 03              3890 	jnc	00285$
   1117 02s11rFB           3891 	ljmp	00189$
   111A                    3892 00285$:
                           3893 ;	main.c:319: r++;
                           3894 ;	genAssign
   111A 90s0CrA0           3895 	mov	dptr,#_main_r_1_1
   111D E0                 3896 	movx	a,@dptr
   111E FE                 3897 	mov	r6,a
   111F A3                 3898 	inc	dptr
   1120 E0                 3899 	movx	a,@dptr
   1121 FF                 3900 	mov	r7,a
                           3901 ;	genPlus
   1122 90s0CrA0           3902 	mov	dptr,#_main_r_1_1
                           3903 ;     genPlusIncr
   1125 74 01              3904 	mov	a,#0x01
                           3905 ;	Peephole 236.a	used r6 instead of ar6
   1127 2E                 3906 	add	a,r6
   1128 F0                 3907 	movx	@dptr,a
                           3908 ;	Peephole 181	changed mov to clr
   1129 E4                 3909 	clr	a
                           3910 ;	Peephole 236.b	used r7 instead of ar7
   112A 3F                 3911 	addc	a,r7
   112B A3                 3912 	inc	dptr
   112C F0                 3913 	movx	@dptr,a
                           3914 ;	main.c:320: if(r < 45)
                           3915 ;	genAssign
   112D 90s0CrA0           3916 	mov	dptr,#_main_r_1_1
   1130 E0                 3917 	movx	a,@dptr
   1131 FE                 3918 	mov	r6,a
   1132 A3                 3919 	inc	dptr
   1133 E0                 3920 	movx	a,@dptr
   1134 FF                 3921 	mov	r7,a
                           3922 ;	genCmpLt
                           3923 ;	genCmp
   1135 C3                 3924 	clr	c
   1136 EE                 3925 	mov	a,r6
   1137 94 2D              3926 	subb	a,#0x2D
   1139 EF                 3927 	mov	a,r7
   113A 64 80              3928 	xrl	a,#0x80
   113C 94 80              3929 	subb	a,#0x80
                           3930 ;	genIfxJump
                           3931 ;	Peephole 108.a	removed ljmp by inverse jump logic
   113E 50 41              3932 	jnc	00142$
                           3933 ;	Peephole 300	removed redundant label 00286$
                           3934 ;	main.c:322: putchar(buffer2[i]);
                           3935 ;	genPlus
                           3936 ;	Peephole 236.g	used r4 instead of ar4
   1140 EC                 3937 	mov	a,r4
   1141 25*31              3938 	add	a,_main_sloc22_1_0
   1143 FE                 3939 	mov	r6,a
                           3940 ;	Peephole 236.g	used r5 instead of ar5
   1144 ED                 3941 	mov	a,r5
   1145 35*32              3942 	addc	a,(_main_sloc22_1_0 + 1)
   1147 FF                 3943 	mov	r7,a
   1148 A8*33              3944 	mov	r0,(_main_sloc22_1_0 + 2)
                           3945 ;	genPointerGet
                           3946 ;	genGenPointerGet
   114A 8E 82              3947 	mov	dpl,r6
   114C 8F 83              3948 	mov	dph,r7
   114E 88 F0              3949 	mov	b,r0
   1150 12s00r00           3950 	lcall	__gptrget
                           3951 ;	genCall
   1153 FE                 3952 	mov	r6,a
                           3953 ;	Peephole 244.c	loading dpl from a instead of r6
   1154 F5 82              3954 	mov	dpl,a
   1156 C0 02              3955 	push	ar2
   1158 C0 03              3956 	push	ar3
   115A C0 04              3957 	push	ar4
   115C C0 05              3958 	push	ar5
   115E 12s13r71           3959 	lcall	_putchar
   1161 D0 05              3960 	pop	ar5
   1163 D0 04              3961 	pop	ar4
   1165 D0 03              3962 	pop	ar3
   1167 D0 02              3963 	pop	ar2
                           3964 ;	main.c:323: putchar('  ');
                           3965 ;	genCall
   1169 75 82 20           3966 	mov	dpl,#0x20
   116C C0 02              3967 	push	ar2
   116E C0 03              3968 	push	ar3
   1170 C0 04              3969 	push	ar4
   1172 C0 05              3970 	push	ar5
   1174 12s13r71           3971 	lcall	_putchar
   1177 D0 05              3972 	pop	ar5
   1179 D0 04              3973 	pop	ar4
   117B D0 03              3974 	pop	ar3
   117D D0 02              3975 	pop	ar2
                           3976 ;	Peephole 112.b	changed ljmp to sjmp
   117F 80 72              3977 	sjmp	00188$
   1181                    3978 00142$:
                           3979 ;	main.c:327: putchar('\n');
                           3980 ;	genCall
   1181 75 82 0A           3981 	mov	dpl,#0x0A
   1184 C0 02              3982 	push	ar2
   1186 C0 03              3983 	push	ar3
   1188 C0 04              3984 	push	ar4
   118A C0 05              3985 	push	ar5
   118C 12s13r71           3986 	lcall	_putchar
   118F D0 05              3987 	pop	ar5
   1191 D0 04              3988 	pop	ar4
   1193 D0 03              3989 	pop	ar3
   1195 D0 02              3990 	pop	ar2
                           3991 ;	main.c:328: putchar('\r');
                           3992 ;	genCall
   1197 75 82 0D           3993 	mov	dpl,#0x0D
   119A C0 02              3994 	push	ar2
   119C C0 03              3995 	push	ar3
   119E C0 04              3996 	push	ar4
   11A0 C0 05              3997 	push	ar5
   11A2 12s13r71           3998 	lcall	_putchar
   11A5 D0 05              3999 	pop	ar5
   11A7 D0 04              4000 	pop	ar4
   11A9 D0 03              4001 	pop	ar3
   11AB D0 02              4002 	pop	ar2
                           4003 ;	main.c:329: r = 0;
                           4004 ;	genAssign
   11AD 90s0CrA0           4005 	mov	dptr,#_main_r_1_1
   11B0 E4                 4006 	clr	a
   11B1 F0                 4007 	movx	@dptr,a
   11B2 A3                 4008 	inc	dptr
   11B3 F0                 4009 	movx	@dptr,a
                           4010 ;	main.c:330: putchar(buffer2[i]);
                           4011 ;	genPlus
                           4012 ;	Peephole 236.g	used r4 instead of ar4
   11B4 EC                 4013 	mov	a,r4
   11B5 25*2E              4014 	add	a,_main_sloc21_1_0
   11B7 FE                 4015 	mov	r6,a
                           4016 ;	Peephole 236.g	used r5 instead of ar5
   11B8 ED                 4017 	mov	a,r5
   11B9 35*2F              4018 	addc	a,(_main_sloc21_1_0 + 1)
   11BB FF                 4019 	mov	r7,a
   11BC A8*30              4020 	mov	r0,(_main_sloc21_1_0 + 2)
                           4021 ;	genPointerGet
                           4022 ;	genGenPointerGet
   11BE 8E 82              4023 	mov	dpl,r6
   11C0 8F 83              4024 	mov	dph,r7
   11C2 88 F0              4025 	mov	b,r0
   11C4 12s00r00           4026 	lcall	__gptrget
                           4027 ;	genCall
   11C7 FE                 4028 	mov	r6,a
                           4029 ;	Peephole 244.c	loading dpl from a instead of r6
   11C8 F5 82              4030 	mov	dpl,a
   11CA C0 02              4031 	push	ar2
   11CC C0 03              4032 	push	ar3
   11CE C0 04              4033 	push	ar4
   11D0 C0 05              4034 	push	ar5
   11D2 12s13r71           4035 	lcall	_putchar
   11D5 D0 05              4036 	pop	ar5
   11D7 D0 04              4037 	pop	ar4
   11D9 D0 03              4038 	pop	ar3
   11DB D0 02              4039 	pop	ar2
                           4040 ;	main.c:331: putchar('  ');
                           4041 ;	genCall
   11DD 75 82 20           4042 	mov	dpl,#0x20
   11E0 C0 02              4043 	push	ar2
   11E2 C0 03              4044 	push	ar3
   11E4 C0 04              4045 	push	ar4
   11E6 C0 05              4046 	push	ar5
   11E8 12s13r71           4047 	lcall	_putchar
   11EB D0 05              4048 	pop	ar5
   11ED D0 04              4049 	pop	ar4
   11EF D0 03              4050 	pop	ar3
   11F1 D0 02              4051 	pop	ar2
   11F3                    4052 00188$:
                           4053 ;	main.c:317: for(i=0;i<=j;i++)
                           4054 ;	genPlus
                           4055 ;     genPlusIncr
   11F3 0C                 4056 	inc	r4
   11F4 BC 00 01           4057 	cjne	r4,#0x00,00287$
   11F7 0D                 4058 	inc	r5
   11F8                    4059 00287$:
   11F8 02s11r00           4060 	ljmp	00186$
   11FB                    4061 00189$:
                           4062 ;	main.c:335: last_star = count_char;
                           4063 ;	genAssign
   11FB 90s0CrA4           4064 	mov	dptr,#_main_last_star_1_1
   11FE E5*34              4065 	mov	a,_main_sloc23_1_0
   1200 F0                 4066 	movx	@dptr,a
   1201 A3                 4067 	inc	dptr
   1202 E5*35              4068 	mov	a,(_main_sloc23_1_0 + 1)
   1204 F0                 4069 	movx	@dptr,a
   1205 02s03r18           4070 	ljmp	00165$
   1208                    4071 00148$:
                           4072 ;	main.c:339: else if(a1 == AT)
                           4073 ;	genCmpEq
                           4074 ;	gencjneshort
                           4075 ;	Peephole 112.b	changed ljmp to sjmp
                           4076 ;	Peephole 198.a	optimized misc jump sequence
   1208 BD 40 6D           4077 	cjne	r5,#0x40,00145$
   120B BE 00 6A           4078 	cjne	r6,#0x00,00145$
                           4079 ;	Peephole 200.b	removed redundant sjmp
                           4080 ;	Peephole 300	removed redundant label 00288$
                           4081 ;	Peephole 300	removed redundant label 00289$
                           4082 ;	main.c:341: free(buffer0);
                           4083 ;	genAssign
   120E 90s0CrAC           4084 	mov	dptr,#_main_buffer0_1_1
   1211 E0                 4085 	movx	a,@dptr
   1212 FC                 4086 	mov	r4,a
   1213 A3                 4087 	inc	dptr
   1214 E0                 4088 	movx	a,@dptr
   1215 FD                 4089 	mov	r5,a
                           4090 ;	genCast
   1216 7E 00              4091 	mov	r6,#0x0
                           4092 ;	genCall
   1218 8C 82              4093 	mov	dpl,r4
   121A 8D 83              4094 	mov	dph,r5
   121C 8E F0              4095 	mov	b,r6
   121E 12s00r00           4096 	lcall	_free
                           4097 ;	main.c:342: free(buffer1);
                           4098 ;	genAssign
   1221 90s0CrAE           4099 	mov	dptr,#_main_buffer1_1_1
   1224 E0                 4100 	movx	a,@dptr
   1225 FC                 4101 	mov	r4,a
   1226 A3                 4102 	inc	dptr
   1227 E0                 4103 	movx	a,@dptr
   1228 FD                 4104 	mov	r5,a
                           4105 ;	genCast
   1229 7E 00              4106 	mov	r6,#0x0
                           4107 ;	genCall
   122B 8C 82              4108 	mov	dpl,r4
   122D 8D 83              4109 	mov	dph,r5
   122F 8E F0              4110 	mov	b,r6
   1231 12s00r00           4111 	lcall	_free
                           4112 ;	main.c:343: free(buffer2);
                           4113 ;	genAssign
   1234 90s0CrB0           4114 	mov	dptr,#_main_buffer2_1_1
   1237 E0                 4115 	movx	a,@dptr
   1238 FC                 4116 	mov	r4,a
   1239 A3                 4117 	inc	dptr
   123A E0                 4118 	movx	a,@dptr
   123B FD                 4119 	mov	r5,a
   123C A3                 4120 	inc	dptr
   123D E0                 4121 	movx	a,@dptr
   123E FE                 4122 	mov	r6,a
                           4123 ;	genCall
   123F 8C 82              4124 	mov	dpl,r4
   1241 8D 83              4125 	mov	dph,r5
   1243 8E F0              4126 	mov	b,r6
   1245 12s00r00           4127 	lcall	_free
                           4128 ;	main.c:344: count_char = 0;
                           4129 ;	genAssign
   1248 90s0CrA8           4130 	mov	dptr,#_main_count_char_1_1
   124B E4                 4131 	clr	a
   124C F0                 4132 	movx	@dptr,a
   124D A3                 4133 	inc	dptr
   124E F0                 4134 	movx	@dptr,a
                           4135 ;	main.c:345: last_j = 0;
                           4136 ;	genAssign
   124F 90s0CrA2           4137 	mov	dptr,#_main_last_j_1_1
   1252 E4                 4138 	clr	a
   1253 F0                 4139 	movx	@dptr,a
   1254 A3                 4140 	inc	dptr
   1255 F0                 4141 	movx	@dptr,a
                           4142 ;	main.c:346: last_star = 0;
                           4143 ;	genAssign
   1256 90s0CrA4           4144 	mov	dptr,#_main_last_star_1_1
   1259 E4                 4145 	clr	a
   125A F0                 4146 	movx	@dptr,a
   125B A3                 4147 	inc	dptr
   125C F0                 4148 	movx	@dptr,a
                           4149 ;	main.c:347: buf_int = 1;
                           4150 ;	genAssign
   125D 90s0CrB3           4151 	mov	dptr,#_main_buf_int_1_1
   1260 74 01              4152 	mov	a,#0x01
   1262 F0                 4153 	movx	@dptr,a
   1263 E4                 4154 	clr	a
   1264 A3                 4155 	inc	dptr
   1265 F0                 4156 	movx	@dptr,a
                           4157 ;	main.c:348: printf_tiny("Buffers deallocated\n\r");
                           4158 ;	genIpush
   1266 74rF5              4159 	mov	a,#__str_32
   1268 C0 E0              4160 	push	acc
   126A 74s03              4161 	mov	a,#(__str_32 >> 8)
   126C C0 E0              4162 	push	acc
                           4163 ;	genCall
   126E 12s00r00           4164 	lcall	_printf_tiny
   1271 15 81              4165 	dec	sp
   1273 15 81              4166 	dec	sp
                           4167 ;	main.c:349: break;
   1275 02s00r3A           4168 	ljmp	00113$
   1278                    4169 00145$:
                           4170 ;	main.c:355: putchar('\r');
                           4171 ;	genCall
   1278 75 82 0D           4172 	mov	dpl,#0x0D
   127B C0 02              4173 	push	ar2
   127D C0 03              4174 	push	ar3
   127F C0 04              4175 	push	ar4
   1281 C0 05              4176 	push	ar5
   1283 C0 06              4177 	push	ar6
   1285 12s13r71           4178 	lcall	_putchar
   1288 D0 06              4179 	pop	ar6
   128A D0 05              4180 	pop	ar5
   128C D0 04              4181 	pop	ar4
   128E D0 03              4182 	pop	ar3
   1290 D0 02              4183 	pop	ar2
                           4184 ;	main.c:356: putchar(a);
                           4185 ;	genCall
   1292 8C 82              4186 	mov	dpl,r4
   1294 C0 02              4187 	push	ar2
   1296 C0 03              4188 	push	ar3
   1298 C0 05              4189 	push	ar5
   129A C0 06              4190 	push	ar6
   129C 12s13r71           4191 	lcall	_putchar
   129F D0 06              4192 	pop	ar6
   12A1 D0 05              4193 	pop	ar5
   12A3 D0 03              4194 	pop	ar3
   12A5 D0 02              4195 	pop	ar2
                           4196 ;	main.c:357: putchar('\n');
                           4197 ;	genCall
   12A7 75 82 0A           4198 	mov	dpl,#0x0A
   12AA C0 02              4199 	push	ar2
   12AC C0 03              4200 	push	ar3
   12AE C0 05              4201 	push	ar5
   12B0 C0 06              4202 	push	ar6
   12B2 12s13r71           4203 	lcall	_putchar
   12B5 D0 06              4204 	pop	ar6
   12B7 D0 05              4205 	pop	ar5
   12B9 D0 03              4206 	pop	ar3
   12BB D0 02              4207 	pop	ar2
                           4208 ;	main.c:358: putchar('\r');
                           4209 ;	genCall
   12BD 75 82 0D           4210 	mov	dpl,#0x0D
   12C0 C0 02              4211 	push	ar2
   12C2 C0 03              4212 	push	ar3
   12C4 C0 05              4213 	push	ar5
   12C6 C0 06              4214 	push	ar6
   12C8 12s13r71           4215 	lcall	_putchar
   12CB D0 06              4216 	pop	ar6
   12CD D0 05              4217 	pop	ar5
   12CF D0 03              4218 	pop	ar3
   12D1 D0 02              4219 	pop	ar2
                           4220 ;	main.c:359: printf_tiny("%d",a1);
                           4221 ;	genIpush
   12D3 C0 02              4222 	push	ar2
   12D5 C0 03              4223 	push	ar3
   12D7 C0 05              4224 	push	ar5
   12D9 C0 06              4225 	push	ar6
                           4226 ;	genIpush
   12DB 74r0B              4227 	mov	a,#__str_33
   12DD C0 E0              4228 	push	acc
   12DF 74s04              4229 	mov	a,#(__str_33 >> 8)
   12E1 C0 E0              4230 	push	acc
                           4231 ;	genCall
   12E3 12s00r00           4232 	lcall	_printf_tiny
   12E6 E5 81              4233 	mov	a,sp
   12E8 24 FC              4234 	add	a,#0xfc
   12EA F5 81              4235 	mov	sp,a
   12EC D0 03              4236 	pop	ar3
   12EE D0 02              4237 	pop	ar2
   12F0 02s03r18           4238 	ljmp	00165$
                           4239 ;	Peephole 259.b	removed redundant label 00190$ and ret
                           4240 ;
                           4241 ;------------------------------------------------------------
                           4242 ;Allocation info for local variables in function 'init'
                           4243 ;------------------------------------------------------------
                           4244 ;------------------------------------------------------------
                           4245 ;	main.c:369: void init()
                           4246 ;	-----------------------------------------
                           4247 ;	 function init
                           4248 ;	-----------------------------------------
   12F3                    4249 _init:
                           4250 ;	main.c:371: SCON = 0x50;
                           4251 ;	genAssign
   12F3 75 98 50           4252 	mov	_SCON,#0x50
                           4253 ;	main.c:372: TMOD = 0x20;
                           4254 ;	genAssign
   12F6 75 89 20           4255 	mov	_TMOD,#0x20
                           4256 ;	main.c:373: TH1 = 0xFD;
                           4257 ;	genAssign
   12F9 75 8D FD           4258 	mov	_TH1,#0xFD
                           4259 ;	main.c:374: TR1 = 1;
                           4260 ;	genAssign
   12FC D2 8E              4261 	setb	_TR1
                           4262 ;	main.c:375: TI = 1;
                           4263 ;	genAssign
   12FE D2 99              4264 	setb	_TI
                           4265 ;	Peephole 300	removed redundant label 00101$
   1300 22                 4266 	ret
                           4267 ;------------------------------------------------------------
                           4268 ;Allocation info for local variables in function 'putstr'
                           4269 ;------------------------------------------------------------
                           4270 ;s                         Allocated with name '_putstr_s_1_1'
                           4271 ;i                         Allocated with name '_putstr_i_1_1'
                           4272 ;------------------------------------------------------------
                           4273 ;	main.c:379: int putstr (char *s)
                           4274 ;	-----------------------------------------
                           4275 ;	 function putstr
                           4276 ;	-----------------------------------------
   1301                    4277 _putstr:
                           4278 ;	genReceive
   1301 AA F0              4279 	mov	r2,b
   1303 AB 83              4280 	mov	r3,dph
   1305 E5 82              4281 	mov	a,dpl
   1307 90s0CrB5           4282 	mov	dptr,#_putstr_s_1_1
   130A F0                 4283 	movx	@dptr,a
   130B A3                 4284 	inc	dptr
   130C EB                 4285 	mov	a,r3
   130D F0                 4286 	movx	@dptr,a
   130E A3                 4287 	inc	dptr
   130F EA                 4288 	mov	a,r2
   1310 F0                 4289 	movx	@dptr,a
                           4290 ;	main.c:382: while (*s){			// output characters until NULL found
                           4291 ;	genAssign
   1311 90s0CrB5           4292 	mov	dptr,#_putstr_s_1_1
   1314 E0                 4293 	movx	a,@dptr
   1315 FA                 4294 	mov	r2,a
   1316 A3                 4295 	inc	dptr
   1317 E0                 4296 	movx	a,@dptr
   1318 FB                 4297 	mov	r3,a
   1319 A3                 4298 	inc	dptr
   131A E0                 4299 	movx	a,@dptr
   131B FC                 4300 	mov	r4,a
                           4301 ;	genAssign
   131C 7D 00              4302 	mov	r5,#0x00
   131E 7E 00              4303 	mov	r6,#0x00
   1320                    4304 00101$:
                           4305 ;	genPointerGet
                           4306 ;	genGenPointerGet
   1320 8A 82              4307 	mov	dpl,r2
   1322 8B 83              4308 	mov	dph,r3
   1324 8C F0              4309 	mov	b,r4
   1326 12s00r00           4310 	lcall	__gptrget
                           4311 ;	genIfx
   1329 FF                 4312 	mov	r7,a
                           4313 ;	Peephole 105	removed redundant mov
                           4314 ;	genIfxJump
                           4315 ;	Peephole 108.c	removed ljmp by inverse jump logic
   132A 60 30              4316 	jz	00108$
                           4317 ;	Peephole 300	removed redundant label 00109$
                           4318 ;	main.c:383: putchar(*s++);
                           4319 ;	genAssign
                           4320 ;	genPlus
                           4321 ;     genPlusIncr
   132C 0A                 4322 	inc	r2
   132D BA 00 01           4323 	cjne	r2,#0x00,00110$
   1330 0B                 4324 	inc	r3
   1331                    4325 00110$:
                           4326 ;	genAssign
   1331 90s0CrB5           4327 	mov	dptr,#_putstr_s_1_1
   1334 EA                 4328 	mov	a,r2
   1335 F0                 4329 	movx	@dptr,a
   1336 A3                 4330 	inc	dptr
   1337 EB                 4331 	mov	a,r3
   1338 F0                 4332 	movx	@dptr,a
   1339 A3                 4333 	inc	dptr
   133A EC                 4334 	mov	a,r4
   133B F0                 4335 	movx	@dptr,a
                           4336 ;	genCall
   133C 8F 82              4337 	mov	dpl,r7
   133E C0 02              4338 	push	ar2
   1340 C0 03              4339 	push	ar3
   1342 C0 04              4340 	push	ar4
   1344 C0 05              4341 	push	ar5
   1346 C0 06              4342 	push	ar6
   1348 12s13r71           4343 	lcall	_putchar
   134B D0 06              4344 	pop	ar6
   134D D0 05              4345 	pop	ar5
   134F D0 04              4346 	pop	ar4
   1351 D0 03              4347 	pop	ar3
   1353 D0 02              4348 	pop	ar2
                           4349 ;	main.c:384: i++;
                           4350 ;	genPlus
                           4351 ;     genPlusIncr
                           4352 ;	tail increment optimized (range 8)
   1355 0D                 4353 	inc	r5
   1356 BD 00 C7           4354 	cjne	r5,#0x00,00101$
   1359 0E                 4355 	inc	r6
                           4356 ;	Peephole 112.b	changed ljmp to sjmp
   135A 80 C4              4357 	sjmp	00101$
   135C                    4358 00108$:
                           4359 ;	genAssign
   135C 90s0CrB5           4360 	mov	dptr,#_putstr_s_1_1
   135F EA                 4361 	mov	a,r2
   1360 F0                 4362 	movx	@dptr,a
   1361 A3                 4363 	inc	dptr
   1362 EB                 4364 	mov	a,r3
   1363 F0                 4365 	movx	@dptr,a
   1364 A3                 4366 	inc	dptr
   1365 EC                 4367 	mov	a,r4
   1366 F0                 4368 	movx	@dptr,a
                           4369 ;	main.c:386: return i+1;
                           4370 ;	genPlus
                           4371 ;     genPlusIncr
   1367 0D                 4372 	inc	r5
   1368 BD 00 01           4373 	cjne	r5,#0x00,00111$
   136B 0E                 4374 	inc	r6
   136C                    4375 00111$:
                           4376 ;	genRet
   136C 8D 82              4377 	mov	dpl,r5
   136E 8E 83              4378 	mov	dph,r6
                           4379 ;	Peephole 300	removed redundant label 00104$
   1370 22                 4380 	ret
                           4381 ;------------------------------------------------------------
                           4382 ;Allocation info for local variables in function 'putchar'
                           4383 ;------------------------------------------------------------
                           4384 ;c                         Allocated with name '_putchar_c_1_1'
                           4385 ;------------------------------------------------------------
                           4386 ;	main.c:390: void putchar (char c)
                           4387 ;	-----------------------------------------
                           4388 ;	 function putchar
                           4389 ;	-----------------------------------------
   1371                    4390 _putchar:
                           4391 ;	genReceive
   1371 E5 82              4392 	mov	a,dpl
   1373 90s0CrB8           4393 	mov	dptr,#_putchar_c_1_1
   1376 F0                 4394 	movx	@dptr,a
                           4395 ;	main.c:392: while (!TI);
   1377                    4396 00101$:
                           4397 ;	genIfx
                           4398 ;	genIfxJump
                           4399 ;	Peephole 108.d	removed ljmp by inverse jump logic
   1377 30 99 FD           4400 	jnb	_TI,00101$
                           4401 ;	Peephole 300	removed redundant label 00108$
                           4402 ;	main.c:393: SBUF = c;  	// load serial port with transmit value
                           4403 ;	genAssign
   137A 90s0CrB8           4404 	mov	dptr,#_putchar_c_1_1
   137D E0                 4405 	movx	a,@dptr
   137E F5 99              4406 	mov	_SBUF,a
                           4407 ;	main.c:394: TI = 0;  	// clear TI flag
                           4408 ;	genAssign
   1380 C2 99              4409 	clr	_TI
                           4410 ;	Peephole 300	removed redundant label 00104$
   1382 22                 4411 	ret
                           4412 ;------------------------------------------------------------
                           4413 ;Allocation info for local variables in function 'getchar'
                           4414 ;------------------------------------------------------------
                           4415 ;------------------------------------------------------------
                           4416 ;	main.c:398: char getchar ()
                           4417 ;	-----------------------------------------
                           4418 ;	 function getchar
                           4419 ;	-----------------------------------------
   1383                    4420 _getchar:
                           4421 ;	main.c:401: while (!RI);
   1383                    4422 00101$:
                           4423 ;	genIfx
                           4424 ;	genIfxJump
                           4425 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           4426 ;	main.c:402: RI = 0;			// clear RI flag
                           4427 ;	genAssign
                           4428 ;	Peephole 250.a	using atomic test and clear
   1383 10 98 02           4429 	jbc	_RI,00108$
   1386 80 FB              4430 	sjmp	00101$
   1388                    4431 00108$:
                           4432 ;	main.c:403: return SBUF;  	// return character from SBUF
                           4433 ;	genAssign
   1388 AA 99              4434 	mov	r2,_SBUF
                           4435 ;	genRet
   138A 8A 82              4436 	mov	dpl,r2
                           4437 ;	Peephole 300	removed redundant label 00104$
   138C 22                 4438 	ret
                           4439 ;------------------------------------------------------------
                           4440 ;Allocation info for local variables in function 'fetch_bufsize'
                           4441 ;------------------------------------------------------------
                           4442 ;temp                      Allocated with name '_fetch_bufsize_temp_1_1'
                           4443 ;buf_siz                   Allocated with name '_fetch_bufsize_buf_siz_1_1'
                           4444 ;buffer_size               Allocated with name '_fetch_bufsize_buffer_size_1_1'
                           4445 ;i1                        Allocated with name '_fetch_bufsize_i1_1_1'
                           4446 ;ch                        Allocated with name '_fetch_bufsize_ch_1_1'
                           4447 ;------------------------------------------------------------
                           4448 ;	main.c:407: int fetch_bufsize()
                           4449 ;	-----------------------------------------
                           4450 ;	 function fetch_bufsize
                           4451 ;	-----------------------------------------
   138D                    4452 _fetch_bufsize:
                           4453 ;	main.c:415: do
   138D                    4454 00114$:
                           4455 ;	main.c:417: printf_tiny("\n\r----------------------------------------------------\n\r");
                           4456 ;	genIpush
   138D 74r0E              4457 	mov	a,#__str_34
   138F C0 E0              4458 	push	acc
   1391 74s04              4459 	mov	a,#(__str_34 >> 8)
   1393 C0 E0              4460 	push	acc
                           4461 ;	genCall
   1395 12s00r00           4462 	lcall	_printf_tiny
   1398 15 81              4463 	dec	sp
   139A 15 81              4464 	dec	sp
                           4465 ;	main.c:418: printf_tiny("This program echoes characters entered from the terminal\n\r");
                           4466 ;	genIpush
   139C 74r47              4467 	mov	a,#__str_35
   139E C0 E0              4468 	push	acc
   13A0 74s04              4469 	mov	a,#(__str_35 >> 8)
   13A2 C0 E0              4470 	push	acc
                           4471 ;	genCall
   13A4 12s00r00           4472 	lcall	_printf_tiny
   13A7 15 81              4473 	dec	sp
   13A9 15 81              4474 	dec	sp
                           4475 ;	main.c:419: printf_tiny("It stores the 'storage' characters in XRAM buffer0\n\r");
                           4476 ;	genIpush
   13AB 74r82              4477 	mov	a,#__str_36
   13AD C0 E0              4478 	push	acc
   13AF 74s04              4479 	mov	a,#(__str_36 >> 8)
   13B1 C0 E0              4480 	push	acc
                           4481 ;	genCall
   13B3 12s00r00           4482 	lcall	_printf_tiny
   13B6 15 81              4483 	dec	sp
   13B8 15 81              4484 	dec	sp
                           4485 ;	main.c:420: printf_tiny("Buffers 0 and 1 will be allocated memory in XRAM\n\r");
                           4486 ;	genIpush
   13BA 74rB7              4487 	mov	a,#__str_37
   13BC C0 E0              4488 	push	acc
   13BE 74s04              4489 	mov	a,#(__str_37 >> 8)
   13C0 C0 E0              4490 	push	acc
                           4491 ;	genCall
   13C2 12s00r00           4492 	lcall	_printf_tiny
   13C5 15 81              4493 	dec	sp
   13C7 15 81              4494 	dec	sp
                           4495 ;	main.c:421: printf_tiny("Buffer 2 can be used to maintain a copy of storage characters in buffer0\n\r");
                           4496 ;	genIpush
   13C9 74rEA              4497 	mov	a,#__str_38
   13CB C0 E0              4498 	push	acc
   13CD 74s04              4499 	mov	a,#(__str_38 >> 8)
   13CF C0 E0              4500 	push	acc
                           4501 ;	genCall
   13D1 12s00r00           4502 	lcall	_printf_tiny
   13D4 15 81              4503 	dec	sp
   13D6 15 81              4504 	dec	sp
                           4505 ;	main.c:422: printf_tiny("It is possible to generate a heap report of the storage characters in buffers\n\r");
                           4506 ;	genIpush
   13D8 74r35              4507 	mov	a,#__str_39
   13DA C0 E0              4508 	push	acc
   13DC 74s05              4509 	mov	a,#(__str_39 >> 8)
   13DE C0 E0              4510 	push	acc
                           4511 ;	genCall
   13E0 12s00r00           4512 	lcall	_printf_tiny
   13E3 15 81              4513 	dec	sp
   13E5 15 81              4514 	dec	sp
                           4515 ;	main.c:423: printf_tiny("\nEnter buffer size between 32 and 3200 bytes:\n\r");
                           4516 ;	genIpush
   13E7 74r85              4517 	mov	a,#__str_40
   13E9 C0 E0              4518 	push	acc
   13EB 74s05              4519 	mov	a,#(__str_40 >> 8)
   13ED C0 E0              4520 	push	acc
                           4521 ;	genCall
   13EF 12s00r00           4522 	lcall	_printf_tiny
   13F2 15 81              4523 	dec	sp
   13F4 15 81              4524 	dec	sp
                           4525 ;	main.c:424: memset(temp,'\0',BUFSIZ);
                           4526 ;	genAssign
   13F6 90s00r00           4527 	mov	dptr,#_memset_PARM_2
                           4528 ;	Peephole 181	changed mov to clr
   13F9 E4                 4529 	clr	a
   13FA F0                 4530 	movx	@dptr,a
                           4531 ;	genAssign
   13FB 90s00r00           4532 	mov	dptr,#_memset_PARM_3
   13FE 74 0A              4533 	mov	a,#0x0A
   1400 F0                 4534 	movx	@dptr,a
   1401 E4                 4535 	clr	a
   1402 A3                 4536 	inc	dptr
   1403 F0                 4537 	movx	@dptr,a
                           4538 ;	genCall
                           4539 ;	Peephole 182.a	used 16 bit load of DPTR
   1404 90s0CrB9           4540 	mov	dptr,#_fetch_bufsize_temp_1_1
   1407 75 F0 00           4541 	mov	b,#0x00
   140A 12s00r00           4542 	lcall	_memset
                           4543 ;	main.c:426: do
                           4544 ;	genAssign
   140D 7A 00              4545 	mov	r2,#0x00
   140F 7B 00              4546 	mov	r3,#0x00
   1411                    4547 00109$:
                           4548 ;	main.c:428: ch = getchar();
                           4549 ;	genCall
   1411 C0 02              4550 	push	ar2
   1413 C0 03              4551 	push	ar3
   1415 12s13r83           4552 	lcall	_getchar
   1418 AC 82              4553 	mov	r4,dpl
   141A D0 03              4554 	pop	ar3
   141C D0 02              4555 	pop	ar2
                           4556 ;	main.c:429: if((ch > 47) && (ch < 58))
                           4557 ;	genCmpGt
                           4558 ;	genCmp
   141E C3                 4559 	clr	c
                           4560 ;	Peephole 159	avoided xrl during execution
   141F 74 AF              4561 	mov	a,#(0x2F ^ 0x80)
   1421 8C F0              4562 	mov	b,r4
   1423 63 F0 80           4563 	xrl	b,#0x80
   1426 95 F0              4564 	subb	a,b
                           4565 ;	genIfxJump
                           4566 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1428 50 1F              4567 	jnc	00106$
                           4568 ;	Peephole 300	removed redundant label 00126$
                           4569 ;	genCmpLt
                           4570 ;	genCmp
   142A C3                 4571 	clr	c
   142B EC                 4572 	mov	a,r4
   142C 64 80              4573 	xrl	a,#0x80
   142E 94 BA              4574 	subb	a,#0xba
                           4575 ;	genIfxJump
                           4576 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1430 50 17              4577 	jnc	00106$
                           4578 ;	Peephole 300	removed redundant label 00127$
                           4579 ;	main.c:431: temp[i1++] = ch;
                           4580 ;	genAssign
   1432 8A 05              4581 	mov	ar5,r2
   1434 8B 06              4582 	mov	ar6,r3
                           4583 ;	genPlus
                           4584 ;     genPlusIncr
   1436 0A                 4585 	inc	r2
   1437 BA 00 01           4586 	cjne	r2,#0x00,00128$
   143A 0B                 4587 	inc	r3
   143B                    4588 00128$:
                           4589 ;	genPlus
                           4590 ;	Peephole 236.g	used r5 instead of ar5
   143B ED                 4591 	mov	a,r5
   143C 24rB9              4592 	add	a,#_fetch_bufsize_temp_1_1
   143E F5 82              4593 	mov	dpl,a
                           4594 ;	Peephole 236.g	used r6 instead of ar6
   1440 EE                 4595 	mov	a,r6
   1441 34s0C              4596 	addc	a,#(_fetch_bufsize_temp_1_1 >> 8)
   1443 F5 83              4597 	mov	dph,a
                           4598 ;	genPointerSet
                           4599 ;     genFarPointerSet
   1445 EC                 4600 	mov	a,r4
   1446 F0                 4601 	movx	@dptr,a
                           4602 ;	Peephole 112.b	changed ljmp to sjmp
   1447 80 2D              4603 	sjmp	00110$
   1449                    4604 00106$:
                           4605 ;	main.c:433: else if((ch != 13) && ((ch < 48) || (ch > 57)))
                           4606 ;	genCmpEq
                           4607 ;	gencjneshort
   1449 BC 0D 02           4608 	cjne	r4,#0x0D,00129$
                           4609 ;	Peephole 112.b	changed ljmp to sjmp
   144C 80 28              4610 	sjmp	00110$
   144E                    4611 00129$:
                           4612 ;	genCmpLt
                           4613 ;	genCmp
   144E C3                 4614 	clr	c
   144F EC                 4615 	mov	a,r4
   1450 64 80              4616 	xrl	a,#0x80
   1452 94 B0              4617 	subb	a,#0xb0
                           4618 ;	genIfxJump
                           4619 ;	Peephole 112.b	changed ljmp to sjmp
                           4620 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           4621 ;	genCmpGt
                           4622 ;	genCmp
   1454 40 0B              4623 	jc	00101$
                           4624 ;	Peephole 300	removed redundant label 00130$
                           4625 ;	Peephole 256.a	removed redundant clr c
                           4626 ;	Peephole 159	avoided xrl during execution
   1456 74 B9              4627 	mov	a,#(0x39 ^ 0x80)
   1458 8C F0              4628 	mov	b,r4
   145A 63 F0 80           4629 	xrl	b,#0x80
   145D 95 F0              4630 	subb	a,b
                           4631 ;	genIfxJump
                           4632 ;	Peephole 108.a	removed ljmp by inverse jump logic
   145F 50 15              4633 	jnc	00110$
                           4634 ;	Peephole 300	removed redundant label 00131$
   1461                    4635 00101$:
                           4636 ;	main.c:435: printf_tiny("\n\rPlease enter integer input. Special characters are not allowed.\n\r");
                           4637 ;	genIpush
   1461 C0 04              4638 	push	ar4
   1463 74rB5              4639 	mov	a,#__str_41
   1465 C0 E0              4640 	push	acc
   1467 74s05              4641 	mov	a,#(__str_41 >> 8)
   1469 C0 E0              4642 	push	acc
                           4643 ;	genCall
   146B 12s00r00           4644 	lcall	_printf_tiny
   146E 15 81              4645 	dec	sp
   1470 15 81              4646 	dec	sp
   1472 D0 04              4647 	pop	ar4
                           4648 ;	main.c:436: break;
                           4649 ;	Peephole 112.b	changed ljmp to sjmp
   1474 80 03              4650 	sjmp	00111$
   1476                    4651 00110$:
                           4652 ;	main.c:439: }while(ch != 13);
                           4653 ;	genCmpEq
                           4654 ;	gencjneshort
                           4655 ;	Peephole 112.b	changed ljmp to sjmp
                           4656 ;	Peephole 198.b	optimized misc jump sequence
   1476 BC 0D 98           4657 	cjne	r4,#0x0D,00109$
                           4658 ;	Peephole 200.b	removed redundant sjmp
                           4659 ;	Peephole 300	removed redundant label 00132$
                           4660 ;	Peephole 300	removed redundant label 00133$
   1479                    4661 00111$:
                           4662 ;	main.c:440: if(ch == 13)
                           4663 ;	genCmpEq
                           4664 ;	gencjneshort
   1479 BC 0D 02           4665 	cjne	r4,#0x0D,00134$
   147C 80 03              4666 	sjmp	00135$
   147E                    4667 00134$:
   147E 02s13r8D           4668 	ljmp	00114$
   1481                    4669 00135$:
                           4670 ;	main.c:444: buf_siz = temp;
                           4671 ;	main.c:445: buffer_size = atoi(buf_siz);
                           4672 ;	genCall
                           4673 ;	Peephole 182.a	used 16 bit load of DPTR
   1481 90s0CrB9           4674 	mov	dptr,#_fetch_bufsize_temp_1_1
   1484 75 F0 00           4675 	mov	b,#0x00
                           4676 ;	main.c:447: return buffer_size;
                           4677 ;	genRet
                           4678 ;	Peephole 150.b	removed misc moves via dph, dpl before return
                           4679 ;	Peephole 253.b	replaced lcall/ret with ljmp
   1487 02s00r00           4680 	ljmp	_atoi
                           4681 ;
                           4682 ;------------------------------------------------------------
                           4683 ;Allocation info for local variables in function 'dataout'
                           4684 ;------------------------------------------------------------
                           4685 ;x                         Allocated with name '_dataout_x_1_1'
                           4686 ;check                     Allocated with name '_dataout_check_1_1'
                           4687 ;------------------------------------------------------------
                           4688 ;	main.c:451: int dataout(int x)
                           4689 ;	-----------------------------------------
                           4690 ;	 function dataout
                           4691 ;	-----------------------------------------
   148A                    4692 _dataout:
                           4693 ;	genReceive
   148A AA 83              4694 	mov	r2,dph
   148C E5 82              4695 	mov	a,dpl
   148E 90s0CrC3           4696 	mov	dptr,#_dataout_x_1_1
   1491 F0                 4697 	movx	@dptr,a
   1492 A3                 4698 	inc	dptr
   1493 EA                 4699 	mov	a,r2
   1494 F0                 4700 	movx	@dptr,a
                           4701 ;	main.c:453: __xdata __at (0xFA00) int check = x;
                           4702 ;	genAssign
   1495 90s0CrC3           4703 	mov	dptr,#_dataout_x_1_1
   1498 E0                 4704 	movx	a,@dptr
   1499 FA                 4705 	mov	r2,a
   149A A3                 4706 	inc	dptr
   149B E0                 4707 	movx	a,@dptr
   149C FB                 4708 	mov	r3,a
                           4709 ;	genAssign
   149D 90 FA 00           4710 	mov	dptr,#_dataout_check_1_1
   14A0 EA                 4711 	mov	a,r2
   14A1 F0                 4712 	movx	@dptr,a
   14A2 A3                 4713 	inc	dptr
   14A3 EB                 4714 	mov	a,r3
   14A4 F0                 4715 	movx	@dptr,a
                           4716 ;	main.c:454: return 0;
                           4717 ;	genRet
                           4718 ;	Peephole 182.b	used 16 bit load of dptr
   14A5 90 00 00           4719 	mov	dptr,#0x0000
                           4720 ;	Peephole 300	removed redundant label 00101$
   14A8 22                 4721 	ret
                           4722 ;------------------------------------------------------------
                           4723 ;Allocation info for local variables in function 'dataout1'
                           4724 ;------------------------------------------------------------
                           4725 ;y                         Allocated with name '_dataout1_y_1_1'
                           4726 ;check1                    Allocated with name '_dataout1_check1_1_1'
                           4727 ;------------------------------------------------------------
                           4728 ;	main.c:458: int dataout1(int y)
                           4729 ;	-----------------------------------------
                           4730 ;	 function dataout1
                           4731 ;	-----------------------------------------
   14A9                    4732 _dataout1:
                           4733 ;	genReceive
   14A9 AA 83              4734 	mov	r2,dph
   14AB E5 82              4735 	mov	a,dpl
   14AD 90s0CrC5           4736 	mov	dptr,#_dataout1_y_1_1
   14B0 F0                 4737 	movx	@dptr,a
   14B1 A3                 4738 	inc	dptr
   14B2 EA                 4739 	mov	a,r2
   14B3 F0                 4740 	movx	@dptr,a
                           4741 ;	main.c:460: __xdata __at (0xFB00) int check1 = y;
                           4742 ;	genAssign
   14B4 90s0CrC5           4743 	mov	dptr,#_dataout1_y_1_1
   14B7 E0                 4744 	movx	a,@dptr
   14B8 FA                 4745 	mov	r2,a
   14B9 A3                 4746 	inc	dptr
   14BA E0                 4747 	movx	a,@dptr
   14BB FB                 4748 	mov	r3,a
                           4749 ;	genAssign
   14BC 90 FB 00           4750 	mov	dptr,#_dataout1_check1_1_1
   14BF EA                 4751 	mov	a,r2
   14C0 F0                 4752 	movx	@dptr,a
   14C1 A3                 4753 	inc	dptr
   14C2 EB                 4754 	mov	a,r3
   14C3 F0                 4755 	movx	@dptr,a
                           4756 ;	main.c:461: return 0;
                           4757 ;	genRet
                           4758 ;	Peephole 182.b	used 16 bit load of dptr
   14C4 90 00 00           4759 	mov	dptr,#0x0000
                           4760 ;	Peephole 300	removed redundant label 00101$
   14C7 22                 4761 	ret
                           4762 	.area CSEG    (CODE)
                           4763 	.area CONST   (CODE)
   0000                    4764 __str_0:
   0000 0A                 4765 	.db 0x0A
   0001 0D                 4766 	.db 0x0D
   0002 49 6E 63 6F 72 72  4767 	.ascii "Incorrect buffer size"
        65 63 74 20 62 75
        66 66 65 72 20 73
        69 7A 65
   0017 00                 4768 	.db 0x00
   0018                    4769 __str_1:
   0018 0A                 4770 	.db 0x0A
   0019 0D                 4771 	.db 0x0D
   001A 45 6E 74 65 72 20  4772 	.ascii "Enter buffer size in even multiples of 16"
        62 75 66 66 65 72
        20 73 69 7A 65 20
        69 6E 20 65 76 65
        6E 20 6D 75 6C 74
        69 70 6C 65 73 20
        6F 66 20 31 36
   0043 0A                 4773 	.db 0x0A
   0044 0D                 4774 	.db 0x0D
   0045 00                 4775 	.db 0x00
   0046                    4776 __str_2:
   0046 25 64              4777 	.ascii "%d"
   0048 0A                 4778 	.db 0x0A
   0049 0D                 4779 	.db 0x0D
   004A 00                 4780 	.db 0x00
   004B                    4781 __str_3:
   004B 4D 61 6C 6C 6F 63  4782 	.ascii "Malloc buffer0 failed. Please choose a smaller buffer size"
        20 62 75 66 66 65
        72 30 20 66 61 69
        6C 65 64 2E 20 50
        6C 65 61 73 65 20
        63 68 6F 6F 73 65
        20 61 20 73 6D 61
        6C 6C 65 72 20 62
        75 66 66 65 72 20
        73 69 7A 65
   0085 0A                 4783 	.db 0x0A
   0086 0D                 4784 	.db 0x0D
   0087 00                 4785 	.db 0x00
   0088                    4786 __str_4:
   0088 4D 61 6C 6C 6F 63  4787 	.ascii "Malloc buffer1 failed. Please choose a smaller buffer size"
        20 62 75 66 66 65
        72 31 20 66 61 69
        6C 65 64 2E 20 50
        6C 65 61 73 65 20
        63 68 6F 6F 73 65
        20 61 20 73 6D 61
        6C 6C 65 72 20 62
        75 66 66 65 72 20
        73 69 7A 65
   00C2 0A                 4788 	.db 0x0A
   00C3 0D                 4789 	.db 0x0D
   00C4 00                 4790 	.db 0x00
   00C5                    4791 __str_5:
   00C5 4D 61 6C 6C 6F 63  4792 	.ascii "Malloc buffer2 failed. Please choose a smaller buffer size"
        20 62 75 66 66 65
        72 32 20 66 61 69
        6C 65 64 2E 20 50
        6C 65 61 73 65 20
        63 68 6F 6F 73 65
        20 61 20 73 6D 61
        6C 6C 65 72 20 62
        75 66 66 65 72 20
        73 69 7A 65
   00FF 0A                 4793 	.db 0x0A
   0100 0D                 4794 	.db 0x0D
   0101 00                 4795 	.db 0x00
   0102                    4796 __str_6:
   0102 0A                 4797 	.db 0x0A
   0103 0A                 4798 	.db 0x0A
   0104 0D                 4799 	.db 0x0D
   0105 27 41 2D 7A 20 61  4800 	.ascii "'A-z a-z 0-9' - Storage characters"
        2D 7A 20 30 2D 39
        27 20 2D 20 53 74
        6F 72 61 67 65 20
        63 68 61 72 61 63
        74 65 72 73
   0127 00                 4801 	.db 0x00
   0128                    4802 __str_7:
   0128 27 3F 27 20 2D 20  4803 	.ascii "'?' - Heap Report and empty the buffer"
        48 65 61 70 20 52
        65 70 6F 72 74 20
        61 6E 64 20 65 6D
        70 74 79 20 74 68
        65 20 62 75 66 66
        65 72
   014E 0A                 4804 	.db 0x0A
   014F 0D                 4805 	.db 0x0D
   0150 00                 4806 	.db 0x00
   0151                    4807 __str_8:
   0151 27 3D 27 20 2D 20  4808 	.ascii "'=' - Display characters in the buffer and provide their mem"
        44 69 73 70 6C 61
        79 20 63 68 61 72
        61 63 74 65 72 73
        20 69 6E 20 74 68
        65 20 62 75 66 66
        65 72 20 61 6E 64
        20 70 72 6F 76 69
        64 65 20 74 68 65
        69 72 20 6D 65 6D
   018D 6F 72 79 20 6C 6F  4809 	.ascii "ory location"
        63 61 74 69 6F 6E
   0199 0A                 4810 	.db 0x0A
   019A 0D                 4811 	.db 0x0D
   019B 00                 4812 	.db 0x00
   019C                    4813 __str_9:
   019C 27 2A 27 20 2D 20  4814 	.ascii "'*' - Copy contents of buffer0 to buffer2"
        43 6F 70 79 20 63
        6F 6E 74 65 6E 74
        73 20 6F 66 20 62
        75 66 66 65 72 30
        20 74 6F 20 62 75
        66 66 65 72 32
   01C5 0A                 4815 	.db 0x0A
   01C6 0D                 4816 	.db 0x0D
   01C7 00                 4817 	.db 0x00
   01C8                    4818 __str_10:
   01C8 27 40 27 20 2D 20  4819 	.ascii "'@' - Heap Report and empty the buffer"
        48 65 61 70 20 52
        65 70 6F 72 74 20
        61 6E 64 20 65 6D
        70 74 79 20 74 68
        65 20 62 75 66 66
        65 72
   01EE 0A                 4820 	.db 0x0A
   01EF 0D                 4821 	.db 0x0D
   01F0 00                 4822 	.db 0x00
   01F1                    4823 __str_11:
   01F1 0A                 4824 	.db 0x0A
   01F2 0A                 4825 	.db 0x0A
   01F3 0D                 4826 	.db 0x0D
   01F4 45 6E 74 65 72 20  4827 	.ascii "Enter character:"
        63 68 61 72 61 63
        74 65 72 3A
   0204 0A                 4828 	.db 0x0A
   0205 0D                 4829 	.db 0x0D
   0206 00                 4830 	.db 0x00
   0207                    4831 __str_12:
   0207 0A                 4832 	.db 0x0A
   0208 0D                 4833 	.db 0x0D
   0209 43 68 61 72 61 63  4834 	.ascii "Character stored"
        74 65 72 20 73 74
        6F 72 65 64
   0219 0A                 4835 	.db 0x0A
   021A 0D                 4836 	.db 0x0D
   021B 00                 4837 	.db 0x00
   021C                    4838 __str_13:
   021C 0A                 4839 	.db 0x0A
   021D 0D                 4840 	.db 0x0D
   021E 2D 2D 2D 2D 2D 2D  4841 	.ascii "------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   0248 00                 4842 	.db 0x00
   0249                    4843 __str_14:
   0249 0A                 4844 	.db 0x0A
   024A 0D                 4845 	.db 0x0D
   024B 48 65 61 70 20 52  4846 	.ascii "Heap Report"
        65 70 6F 72 74
   0256 0A                 4847 	.db 0x0A
   0257 0D                 4848 	.db 0x0D
   0258 00                 4849 	.db 0x00
   0259                    4850 __str_15:
   0259 42 75 66 66 65 72  4851 	.ascii "Buffer: Buffer0"
        3A 20 42 75 66 66
        65 72 30
   0268 0A                 4852 	.db 0x0A
   0269 0D                 4853 	.db 0x0D
   026A 00                 4854 	.db 0x00
   026B                    4855 __str_16:
   026B 42 75 66 66 65 72  4856 	.ascii "Buffer Start address: %p"
        20 53 74 61 72 74
        20 61 64 64 72 65
        73 73 3A 20 25 70
   0283 0A                 4857 	.db 0x0A
   0284 0D                 4858 	.db 0x0D
   0285 00                 4859 	.db 0x00
   0286                    4860 __str_17:
   0286 42 75 66 66 65 72  4861 	.ascii "Buffer End Address: %p"
        20 45 6E 64 20 41
        64 64 72 65 73 73
        3A 20 25 70
   029C 0A                 4862 	.db 0x0A
   029D 0D                 4863 	.db 0x0D
   029E 00                 4864 	.db 0x00
   029F                    4865 __str_18:
   029F 54 6F 74 61 6C 20  4866 	.ascii "Total allocated size in bytes: %d"
        61 6C 6C 6F 63 61
        74 65 64 20 73 69
        7A 65 20 69 6E 20
        62 79 74 65 73 3A
        20 25 64
   02C0 0A                 4867 	.db 0x0A
   02C1 0D                 4868 	.db 0x0D
   02C2 00                 4869 	.db 0x00
   02C3                    4870 __str_19:
   02C3 4E 75 6D 62 65 72  4871 	.ascii "Number of storage characters in the buffer: %d"
        20 6F 66 20 73 74
        6F 72 61 67 65 20
        63 68 61 72 61 63
        74 65 72 73 20 69
        6E 20 74 68 65 20
        62 75 66 66 65 72
        3A 20 25 64
   02F1 0A                 4872 	.db 0x0A
   02F2 0D                 4873 	.db 0x0D
   02F3 00                 4874 	.db 0x00
   02F4                    4875 __str_20:
   02F4 46 72 65 65 20 73  4876 	.ascii "Free space in the buffer: %d"
        70 61 63 65 20 69
        6E 20 74 68 65 20
        62 75 66 66 65 72
        3A 20 25 64
   0310 0A                 4877 	.db 0x0A
   0311 0D                 4878 	.db 0x0D
   0312 00                 4879 	.db 0x00
   0313                    4880 __str_21:
   0313 4E 75 6D 62 65 72  4881 	.ascii "Number of characters since last '?': %d"
        20 6F 66 20 63 68
        61 72 61 63 74 65
        72 73 20 73 69 6E
        63 65 20 6C 61 73
        74 20 27 3F 27 3A
        20 25 64
   033A 0A                 4882 	.db 0x0A
   033B 0D                 4883 	.db 0x0D
   033C 00                 4884 	.db 0x00
   033D                    4885 __str_22:
   033D 0A                 4886 	.db 0x0A
   033E 0D                 4887 	.db 0x0D
   033F 2D 2D 2D 2D 2D 2D  4888 	.ascii "------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
   0369 0A                 4889 	.db 0x0A
   036A 0D                 4890 	.db 0x0D
   036B 00                 4891 	.db 0x00
   036C                    4892 __str_23:
   036C 42 75 66 66 65 72  4893 	.ascii "Buffer: Buffer1"
        3A 20 42 75 66 66
        65 72 31
   037B 0A                 4894 	.db 0x0A
   037C 0D                 4895 	.db 0x0D
   037D 00                 4896 	.db 0x00
   037E                    4897 __str_24:
   037E 0A                 4898 	.db 0x0A
   037F 0D                 4899 	.db 0x0D
   0380 42 75 66 66 65 72  4900 	.ascii "Buffer0:"
        30 3A
   0388 0A                 4901 	.db 0x0A
   0389 0D                 4902 	.db 0x0D
   038A 00                 4903 	.db 0x00
   038B                    4904 __str_25:
   038B 0A                 4905 	.db 0x0A
   038C 0D                 4906 	.db 0x0D
   038D 25 70 3A 20        4907 	.ascii "%p: "
   0391 00                 4908 	.db 0x00
   0392                    4909 __str_26:
   0392 30 78 25 78 20 20  4910 	.ascii "0x%x  "
   0398 00                 4911 	.db 0x00
   0399                    4912 __str_27:
   0399 25 70 3A 20        4913 	.ascii "%p: "
   039D 00                 4914 	.db 0x00
   039E                    4915 __str_28:
   039E 0A                 4916 	.db 0x0A
   039F 0D                 4917 	.db 0x0D
   03A0 42 75 66 66 65 72  4918 	.ascii "Buffer1: "
        31 3A 20
   03A9 0A                 4919 	.db 0x0A
   03AA 0D                 4920 	.db 0x0D
   03AB 00                 4921 	.db 0x00
   03AC                    4922 __str_29:
   03AC 0A                 4923 	.db 0x0A
   03AD 0D                 4924 	.db 0x0D
   03AE 42 75 66 66 65 72  4925 	.ascii "Buffer2:"
        32 3A
   03B6 0A                 4926 	.db 0x0A
   03B7 0D                 4927 	.db 0x0D
   03B8 00                 4928 	.db 0x00
   03B9                    4929 __str_30:
   03B9 42 75 66 66 65 72  4930 	.ascii "Buffer: Buffer2"
        3A 20 42 75 66 66
        65 72 32
   03C8 0A                 4931 	.db 0x0A
   03C9 0D                 4932 	.db 0x0D
   03CA 00                 4933 	.db 0x00
   03CB                    4934 __str_31:
   03CB 4E 75 6D 62 65 72  4935 	.ascii "Number of characters since last '*': %d"
        20 6F 66 20 63 68
        61 72 61 63 74 65
        72 73 20 73 69 6E
        63 65 20 6C 61 73
        74 20 27 2A 27 3A
        20 25 64
   03F2 0A                 4936 	.db 0x0A
   03F3 0D                 4937 	.db 0x0D
   03F4 00                 4938 	.db 0x00
   03F5                    4939 __str_32:
   03F5 42 75 66 66 65 72  4940 	.ascii "Buffers deallocated"
        73 20 64 65 61 6C
        6C 6F 63 61 74 65
        64
   0408 0A                 4941 	.db 0x0A
   0409 0D                 4942 	.db 0x0D
   040A 00                 4943 	.db 0x00
   040B                    4944 __str_33:
   040B 25 64              4945 	.ascii "%d"
   040D 00                 4946 	.db 0x00
   040E                    4947 __str_34:
   040E 0A                 4948 	.db 0x0A
   040F 0D                 4949 	.db 0x0D
   0410 2D 2D 2D 2D 2D 2D  4950 	.ascii "----------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   0444 0A                 4951 	.db 0x0A
   0445 0D                 4952 	.db 0x0D
   0446 00                 4953 	.db 0x00
   0447                    4954 __str_35:
   0447 54 68 69 73 20 70  4955 	.ascii "This program echoes characters entered from the terminal"
        72 6F 67 72 61 6D
        20 65 63 68 6F 65
        73 20 63 68 61 72
        61 63 74 65 72 73
        20 65 6E 74 65 72
        65 64 20 66 72 6F
        6D 20 74 68 65 20
        74 65 72 6D 69 6E
        61 6C
   047F 0A                 4956 	.db 0x0A
   0480 0D                 4957 	.db 0x0D
   0481 00                 4958 	.db 0x00
   0482                    4959 __str_36:
   0482 49 74 20 73 74 6F  4960 	.ascii "It stores the 'storage' characters in XRAM buffer0"
        72 65 73 20 74 68
        65 20 27 73 74 6F
        72 61 67 65 27 20
        63 68 61 72 61 63
        74 65 72 73 20 69
        6E 20 58 52 41 4D
        20 62 75 66 66 65
        72 30
   04B4 0A                 4961 	.db 0x0A
   04B5 0D                 4962 	.db 0x0D
   04B6 00                 4963 	.db 0x00
   04B7                    4964 __str_37:
   04B7 42 75 66 66 65 72  4965 	.ascii "Buffers 0 and 1 will be allocated memory in XRAM"
        73 20 30 20 61 6E
        64 20 31 20 77 69
        6C 6C 20 62 65 20
        61 6C 6C 6F 63 61
        74 65 64 20 6D 65
        6D 6F 72 79 20 69
        6E 20 58 52 41 4D
   04E7 0A                 4966 	.db 0x0A
   04E8 0D                 4967 	.db 0x0D
   04E9 00                 4968 	.db 0x00
   04EA                    4969 __str_38:
   04EA 42 75 66 66 65 72  4970 	.ascii "Buffer 2 can be used to maintain a copy of storage character"
        20 32 20 63 61 6E
        20 62 65 20 75 73
        65 64 20 74 6F 20
        6D 61 69 6E 74 61
        69 6E 20 61 20 63
        6F 70 79 20 6F 66
        20 73 74 6F 72 61
        67 65 20 63 68 61
        72 61 63 74 65 72
   0526 73 20 69 6E 20 62  4971 	.ascii "s in buffer0"
        75 66 66 65 72 30
   0532 0A                 4972 	.db 0x0A
   0533 0D                 4973 	.db 0x0D
   0534 00                 4974 	.db 0x00
   0535                    4975 __str_39:
   0535 49 74 20 69 73 20  4976 	.ascii "It is possible to generate a heap report of the storage char"
        70 6F 73 73 69 62
        6C 65 20 74 6F 20
        67 65 6E 65 72 61
        74 65 20 61 20 68
        65 61 70 20 72 65
        70 6F 72 74 20 6F
        66 20 74 68 65 20
        73 74 6F 72 61 67
        65 20 63 68 61 72
   0571 61 63 74 65 72 73  4977 	.ascii "acters in buffers"
        20 69 6E 20 62 75
        66 66 65 72 73
   0582 0A                 4978 	.db 0x0A
   0583 0D                 4979 	.db 0x0D
   0584 00                 4980 	.db 0x00
   0585                    4981 __str_40:
   0585 0A                 4982 	.db 0x0A
   0586 45 6E 74 65 72 20  4983 	.ascii "Enter buffer size between 32 and 3200 bytes:"
        62 75 66 66 65 72
        20 73 69 7A 65 20
        62 65 74 77 65 65
        6E 20 33 32 20 61
        6E 64 20 33 32 30
        30 20 62 79 74 65
        73 3A
   05B2 0A                 4984 	.db 0x0A
   05B3 0D                 4985 	.db 0x0D
   05B4 00                 4986 	.db 0x00
   05B5                    4987 __str_41:
   05B5 0A                 4988 	.db 0x0A
   05B6 0D                 4989 	.db 0x0D
   05B7 50 6C 65 61 73 65  4990 	.ascii "Please enter integer input. Special characters are not all"
        20 65 6E 74 65 72
        20 69 6E 74 65 67
        65 72 20 69 6E 70
        75 74 2E 20 53 70
        65 63 69 61 6C 20
        63 68 61 72 61 63
        74 65 72 73 20 61
        72 65 20 6E 6F 74
        20 61 6C 6C
   05F1 6F 77 65 64 2E     4991 	.ascii "owed."
   05F6 0A                 4992 	.db 0x0A
   05F7 0D                 4993 	.db 0x0D
   05F8 00                 4994 	.db 0x00
                           4995 	.area XINIT   (CODE)
